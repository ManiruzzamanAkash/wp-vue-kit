/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./node_modules/@tannin/compile/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@tannin/postfix/index.js"),r=n("./node_modules/@tannin/evaluate/index.js");function s(e){var t=(0,o.default)(e);return function(e){return(0,r.default)(t,e)}}},"./node_modules/@tannin/evaluate/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o={"!":function(e){return!e},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"+":function(e,t){return e+t},"-":function(e,t){return e-t},"<":function(e,t){return e<t},"<=":function(e,t){return e<=t},">":function(e,t){return e>t},">=":function(e,t){return e>=t},"==":function(e,t){return e===t},"!=":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t},"?:":function(e,t,n){if(e)throw t;return n}};function r(e,t){var n,r,s,i,a,l,c=[];for(n=0;n<e.length;n++){if(a=e[n],i=o[a]){for(r=i.length,s=Array(r);r--;)s[r]=c.pop();try{l=i.apply(null,s)}catch(e){return e}}else l=t.hasOwnProperty(a)?t[a]:+a;c.push(l)}return c[0]}},"./node_modules/@tannin/plural-forms/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@tannin/compile/index.js");function r(e){var t=(0,o.default)(e);return function(e){return+t({n:e})}}},"./node_modules/@tannin/postfix/index.js":(e,t,n)=>{"use strict";var o,r,s,i;function a(e){for(var t,n,a,l,c=[],u=[];t=e.match(i);){for(n=t[0],(a=e.substr(0,t.index).trim())&&c.push(a);l=u.pop();){if(s[n]){if(s[n][0]===l){n=s[n][1]||n;break}}else if(r.indexOf(l)>=0||o[l]<o[n]){u.push(l);break}c.push(l)}s[n]||u.push(n),e=e.substr(t.index+n.length)}return(e=e.trim())&&c.push(e),c.concat(u.reverse())}n.r(t),n.d(t,{default:()=>a}),o={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},r=["(","?"],s={")":["("],":":["?","?:"]},i=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/},"./node_modules/@vue/devtools-api/lib/esm/const.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{HOOK_PLUGIN_SETTINGS_SET:()=>r,HOOK_SETUP:()=>o});const o="devtools-plugin:setup",r="plugin:settings:set"},"./node_modules/@vue/devtools-api/lib/esm/env.js":(e,t,n)=>{"use strict";function o(){return r().__VUE_DEVTOOLS_GLOBAL_HOOK__}function r(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:void 0!==n.g?n.g:{}}n.r(t),n.d(t,{getDevtoolsGlobalHook:()=>o,getTarget:()=>r,isProxyAvailable:()=>s});const s="function"==typeof Proxy},"./node_modules/@vue/devtools-api/lib/esm/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isPerformanceSupported:()=>i.isPerformanceSupported,now:()=>i.now,setupDevtoolsPlugin:()=>a});var o=n("./node_modules/@vue/devtools-api/lib/esm/env.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/proxy.js"),i=n("./node_modules/@vue/devtools-api/lib/esm/time.js");function a(e,t){const n=e,i=(0,o.getTarget)(),a=(0,o.getDevtoolsGlobalHook)(),l=o.isProxyAvailable&&n.enableEarlyProxy;if(!a||!i.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&l){const e=l?new s.ApiProxy(n,a):null;(i.__VUE_DEVTOOLS_PLUGINS__=i.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:e}),e&&t(e.proxiedTarget)}else a.emit(r.HOOK_SETUP,e,t)}},"./node_modules/@vue/devtools-api/lib/esm/proxy.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ApiProxy:()=>s});var o=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/time.js");class s{constructor(e,t){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=e,this.hook=t;const n={};if(e.settings)for(const t in e.settings){const o=e.settings[t];n[t]=o.defaultValue}const s=`__vue-devtools-plugin-settings__${e.id}`;let i=Object.assign({},n);try{const e=localStorage.getItem(s),t=JSON.parse(e);Object.assign(i,t)}catch(e){}this.fallbacks={getSettings:()=>i,setSettings(e){try{localStorage.setItem(s,JSON.stringify(e))}catch(e){}i=e},now:()=>(0,r.now)()},t&&t.on(o.HOOK_PLUGIN_SETTINGS_SET,((e,t)=>{e===this.plugin.id&&this.fallbacks.setSettings(t)})),this.proxiedOn=new Proxy({},{get:(e,t)=>this.target?this.target.on[t]:(...e)=>{this.onQueue.push({method:t,args:e})}}),this.proxiedTarget=new Proxy({},{get:(e,t)=>this.target?this.target[t]:"on"===t?this.proxiedOn:Object.keys(this.fallbacks).includes(t)?(...e)=>(this.targetQueue.push({method:t,args:e,resolve:()=>{}}),this.fallbacks[t](...e)):(...e)=>new Promise((n=>{this.targetQueue.push({method:t,args:e,resolve:n})}))})}async setRealTarget(e){this.target=e;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}},"./node_modules/@vue/devtools-api/lib/esm/time.js":(e,t,n)=>{"use strict";let o,r;function s(){var e;return void 0!==o||("undefined"!=typeof window&&window.performance?(o=!0,r=window.performance):void 0!==n.g&&(null===(e=n.g.perf_hooks)||void 0===e?void 0:e.performance)?(o=!0,r=n.g.perf_hooks.performance):o=!1),o}function i(){return s()?r.now():Date.now()}n.r(t),n.d(t,{isPerformanceSupported:()=>s,now:()=>i})},"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EffectScope:()=>i,ITERATE_KEY:()=>y,ReactiveEffect:()=>_,computed:()=>tt,customRef:()=>We,deferredComputed:()=>at,effect:()=>x,effectScope:()=>a,enableTracking:()=>O,getCurrentScope:()=>c,isProxy:()=>Te,isReactive:()=>Ee,isReadonly:()=>Re,isRef:()=>Le,isShallow:()=>Ae,markRaw:()=>Fe,onScopeDispose:()=>u,pauseTracking:()=>j,proxyRefs:()=>Ke,reactive:()=>Se,readonly:()=>Ce,ref:()=>Ve,resetTracking:()=>E,shallowReactive:()=>ke,shallowReadonly:()=>je,shallowRef:()=>Be,stop:()=>S,toRaw:()=>Pe,toRef:()=>Qe,toRefs:()=>qe,track:()=>R,trigger:()=>T,triggerRef:()=>Ue,unref:()=>ze});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");function r(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let s;class i{constructor(e=!1){this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=s,!e&&s&&(this.index=(s.scopes||(s.scopes=[])).push(this)-1)}run(e){if(this.active){const t=s;try{return s=this,e()}finally{s=t}}else r("cannot run an inactive effect scope.")}on(){s=this}off(){s=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this.active=!1}}}function a(e){return new i(e)}function l(e,t=s){t&&t.active&&t.effects.push(e)}function c(){return s}function u(e){s?s.cleanups.push(e):r("onScopeDispose() is called when there is no active effect scope to be associated with.")}const d=e=>{const t=new Set(e);return t.w=0,t.n=0,t},p=e=>(e.w&g)>0,f=e=>(e.n&g)>0,h=new WeakMap;let m,v=0,g=1;const y=Symbol("iterate"),b=Symbol("Map key iterate");class _{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,l(this,n)}run(){if(!this.active)return this.fn();let e=m,t=k;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=m,m=this,k=!0,g=1<<++v,v<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=g})(this):w(this),this.fn()}finally{v<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const r=t[o];p(r)&&!f(r)?r.delete(e):t[n++]=r,r.w&=~g,r.n&=~g}t.length=n}})(this),g=1<<--v,m=this.parent,k=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){m===this?this.deferStop=!0:this.active&&(w(this),this.onStop&&this.onStop(),this.active=!1)}}function w(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function x(e,t){e.effect&&(e=e.effect.fn);const n=new _(e);t&&((0,o.extend)(n,t),t.scope&&l(n,t.scope)),t&&t.lazy||n.run();const r=n.run.bind(n);return r.effect=n,r}function S(e){e.effect.stop()}let k=!0;const C=[];function j(){C.push(k),k=!1}function O(){C.push(k),k=!0}function E(){const e=C.pop();k=void 0===e||e}function R(e,t,n){if(k&&m){let o=h.get(e);o||h.set(e,o=new Map);let r=o.get(n);r||o.set(n,r=d()),A(r,{effect:m,target:e,type:t,key:n})}}function A(e,t){let n=!1;v<=30?f(e)||(e.n|=g,n=!p(e)):n=!e.has(m),n&&(e.add(m),m.deps.push(e),m.onTrack&&m.onTrack(Object.assign({effect:m},t)))}function T(e,t,n,r,s,i){const a=h.get(e);if(!a)return;let l=[];if("clear"===t)l=[...a.values()];else if("length"===n&&(0,o.isArray)(e))a.forEach(((e,t)=>{("length"===t||t>=r)&&l.push(e)}));else switch(void 0!==n&&l.push(a.get(n)),t){case"add":(0,o.isArray)(e)?(0,o.isIntegerKey)(n)&&l.push(a.get("length")):(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"delete":(0,o.isArray)(e)||(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"set":(0,o.isMap)(e)&&l.push(a.get(y))}const c={target:e,type:t,key:n,newValue:r,oldValue:s,oldTarget:i};if(1===l.length)l[0]&&P(l[0],c);else{const e=[];for(const t of l)t&&e.push(...t);P(d(e),c)}}function P(e,t){const n=(0,o.isArray)(e)?e:[...e];for(const e of n)e.computed&&F(e,t);for(const e of n)e.computed||F(e,t)}function F(e,t){(e!==m||e.allowRecurse)&&(e.onTrigger&&e.onTrigger((0,o.extend)({effect:e},t)),e.scheduler?e.scheduler():e.run())}const $=(0,o.makeMap)("__proto__,__v_isRef,__isVue"),N=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(o.isSymbol)),M=H(),I=H(!1,!0),L=H(!0),V=H(!0,!0),B=D();function D(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Pe(this);for(let e=0,t=this.length;e<t;e++)R(n,"get",e+"");const o=n[t](...e);return-1===o||!1===o?n[t](...e.map(Pe)):o}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){j();const n=Pe(this)[t].apply(this,e);return E(),n}})),e}function H(e=!1,t=!1){return function(n,r,s){if("__v_isReactive"===r)return!e;if("__v_isReadonly"===r)return e;if("__v_isShallow"===r)return t;if("__v_raw"===r&&s===(e?t?xe:we:t?_e:be).get(n))return n;const i=(0,o.isArray)(n);if(!e&&i&&(0,o.hasOwn)(B,r))return Reflect.get(B,r,s);const a=Reflect.get(n,r,s);return((0,o.isSymbol)(r)?N.has(r):$(r))?a:(e||R(n,"get",r),t?a:Le(a)?i&&(0,o.isIntegerKey)(r)?a:a.value:(0,o.isObject)(a)?e?Ce(a):Se(a):a)}}const U=G(),z=G(!0);function G(e=!1){return function(t,n,r,s){let i=t[n];if(Re(i)&&Le(i)&&!Le(r))return!1;if(!e&&(Ae(r)||Re(r)||(i=Pe(i),r=Pe(r)),!(0,o.isArray)(t)&&Le(i)&&!Le(r)))return i.value=r,!0;const a=(0,o.isArray)(t)&&(0,o.isIntegerKey)(n)?Number(n)<t.length:(0,o.hasOwn)(t,n),l=Reflect.set(t,n,r,s);return t===Pe(s)&&(a?(0,o.hasChanged)(r,i)&&T(t,"set",n,r,i):T(t,"add",n,r)),l}}const K={get:M,set:U,deleteProperty:function(e,t){const n=(0,o.hasOwn)(e,t),r=e[t],s=Reflect.deleteProperty(e,t);return s&&n&&T(e,"delete",t,void 0,r),s},has:function(e,t){const n=Reflect.has(e,t);return(0,o.isSymbol)(t)&&N.has(t)||R(e,"has",t),n},ownKeys:function(e){return R(e,"iterate",(0,o.isArray)(e)?"length":y),Reflect.ownKeys(e)}},Y={get:L,set:(e,t)=>(r(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0),deleteProperty:(e,t)=>(r(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0)},W=(0,o.extend)({},K,{get:I,set:z}),q=(0,o.extend)({},Y,{get:V}),J=e=>e,Q=e=>Reflect.getPrototypeOf(e);function X(e,t,n=!1,o=!1){const r=Pe(e=e.__v_raw),s=Pe(t);n||(t!==s&&R(r,"get",t),R(r,"get",s));const{has:i}=Q(r),a=o?J:n?Ne:$e;return i.call(r,t)?a(e.get(t)):i.call(r,s)?a(e.get(s)):void(e!==r&&e.get(t))}function Z(e,t=!1){const n=this.__v_raw,o=Pe(n),r=Pe(e);return t||(e!==r&&R(o,"has",e),R(o,"has",r)),e===r?n.has(e):n.has(e)||n.has(r)}function ee(e,t=!1){return e=e.__v_raw,!t&&R(Pe(e),"iterate",y),Reflect.get(e,"size",e)}function te(e){e=Pe(e);const t=Pe(this);return Q(t).has.call(t,e)||(t.add(e),T(t,"add",e,e)),this}function ne(e,t){t=Pe(t);const n=Pe(this),{has:r,get:s}=Q(n);let i=r.call(n,e);i?ye(n,r,e):(e=Pe(e),i=r.call(n,e));const a=s.call(n,e);return n.set(e,t),i?(0,o.hasChanged)(t,a)&&T(n,"set",e,t,a):T(n,"add",e,t),this}function oe(e){const t=Pe(this),{has:n,get:o}=Q(t);let r=n.call(t,e);r?ye(t,n,e):(e=Pe(e),r=n.call(t,e));const s=o?o.call(t,e):void 0,i=t.delete(e);return r&&T(t,"delete",e,void 0,s),i}function re(){const e=Pe(this),t=0!==e.size,n=(0,o.isMap)(e)?new Map(e):new Set(e),r=e.clear();return t&&T(e,"clear",void 0,void 0,n),r}function se(e,t){return function(n,o){const r=this,s=r.__v_raw,i=Pe(s),a=t?J:e?Ne:$e;return!e&&R(i,"iterate",y),s.forEach(((e,t)=>n.call(o,a(e),a(t),r)))}}function ie(e,t,n){return function(...r){const s=this.__v_raw,i=Pe(s),a=(0,o.isMap)(i),l="entries"===e||e===Symbol.iterator&&a,c="keys"===e&&a,u=s[e](...r),d=n?J:t?Ne:$e;return!t&&R(i,"iterate",c?b:y),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:l?[d(e[0]),d(e[1])]:d(e),done:t}},[Symbol.iterator](){return this}}}}function ae(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${(0,o.capitalize)(e)} operation ${n}failed: target is readonly.`,Pe(this))}return"delete"!==e&&this}}function le(){const e={get(e){return X(this,e)},get size(){return ee(this)},has:Z,add:te,set:ne,delete:oe,clear:re,forEach:se(!1,!1)},t={get(e){return X(this,e,!1,!0)},get size(){return ee(this)},has:Z,add:te,set:ne,delete:oe,clear:re,forEach:se(!1,!0)},n={get(e){return X(this,e,!0)},get size(){return ee(this,!0)},has(e){return Z.call(this,e,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:se(!0,!1)},o={get(e){return X(this,e,!0,!0)},get size(){return ee(this,!0)},has(e){return Z.call(this,e,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:se(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((r=>{e[r]=ie(r,!1,!1),n[r]=ie(r,!0,!1),t[r]=ie(r,!1,!0),o[r]=ie(r,!0,!0)})),[e,n,t,o]}const[ce,ue,de,pe]=le();function fe(e,t){const n=t?e?pe:de:e?ue:ce;return(t,r,s)=>"__v_isReactive"===r?!e:"__v_isReadonly"===r?e:"__v_raw"===r?t:Reflect.get((0,o.hasOwn)(n,r)&&r in t?n:t,r,s)}const he={get:fe(!1,!1)},me={get:fe(!1,!0)},ve={get:fe(!0,!1)},ge={get:fe(!0,!0)};function ye(e,t,n){const r=Pe(n);if(r!==n&&t.call(e,r)){const t=(0,o.toRawType)(e);console.warn(`Reactive ${t} contains both the raw and reactive versions of the same object${"Map"===t?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const be=new WeakMap,_e=new WeakMap,we=new WeakMap,xe=new WeakMap;function Se(e){return Re(e)?e:Oe(e,!1,K,he,be)}function ke(e){return Oe(e,!1,W,me,_e)}function Ce(e){return Oe(e,!0,Y,ve,we)}function je(e){return Oe(e,!0,q,ge,xe)}function Oe(e,t,n,r,s){if(!(0,o.isObject)(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const i=s.get(e);if(i)return i;const a=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,o.toRawType)(l));var l;if(0===a)return e;const c=new Proxy(e,2===a?r:n);return s.set(e,c),c}function Ee(e){return Re(e)?Ee(e.__v_raw):!(!e||!e.__v_isReactive)}function Re(e){return!(!e||!e.__v_isReadonly)}function Ae(e){return!(!e||!e.__v_isShallow)}function Te(e){return Ee(e)||Re(e)}function Pe(e){const t=e&&e.__v_raw;return t?Pe(t):e}function Fe(e){return(0,o.def)(e,"__v_skip",!0),e}const $e=e=>(0,o.isObject)(e)?Se(e):e,Ne=e=>(0,o.isObject)(e)?Ce(e):e;function Me(e){k&&m&&A((e=Pe(e)).dep||(e.dep=d()),{target:e,type:"get",key:"value"})}function Ie(e,t){(e=Pe(e)).dep&&P(e.dep,{target:e,type:"set",key:"value",newValue:t})}function Le(e){return!(!e||!0!==e.__v_isRef)}function Ve(e){return De(e,!1)}function Be(e){return De(e,!0)}function De(e,t){return Le(e)?e:new He(e,t)}class He{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Pe(e),this._value=t?e:$e(e)}get value(){return Me(this),this._value}set value(e){const t=this.__v_isShallow||Ae(e)||Re(e);e=t?e:Pe(e),(0,o.hasChanged)(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:$e(e),Ie(this,e))}}function Ue(e){Ie(e,e.value)}function ze(e){return Le(e)?e.value:e}const Ge={get:(e,t,n)=>ze(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const r=e[t];return Le(r)&&!Le(n)?(r.value=n,!0):Reflect.set(e,t,n,o)}};function Ke(e){return Ee(e)?e:new Proxy(e,Ge)}class Ye{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Me(this)),(()=>Ie(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function We(e){return new Ye(e)}function qe(e){Te(e)||console.warn("toRefs() expects a reactive object but received a plain one.");const t=(0,o.isArray)(e)?new Array(e.length):{};for(const n in e)t[n]=Qe(e,n);return t}class Je{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Qe(e,t,n){const o=e[t];return Le(o)?o:new Je(e,t,n)}var Xe,Ze;class et{constructor(e,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this[Xe]=!1,this._dirty=!0,this.effect=new _(e,(()=>{this._dirty||(this._dirty=!0,Ie(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const e=Pe(this);return Me(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function tt(e,t,n=!1){let r,s;const i=(0,o.isFunction)(e);i?(r=e,s=()=>{console.warn("Write operation failed: computed value is readonly")}):(r=e.get,s=e.set);const a=new et(r,s,i||!s,n);return t&&!n&&(a.effect.onTrack=t.onTrack,a.effect.onTrigger=t.onTrigger),a}Xe="__v_isReadonly";const nt=Promise.resolve(),ot=[];let rt=!1;const st=()=>{for(let e=0;e<ot.length;e++)ot[e]();ot.length=0,rt=!1};class it{constructor(e){let t;this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this[Ze]=!0;let n=!1,o=!1;this.effect=new _(e,(e=>{if(this.dep){if(e)t=this._value,n=!0;else if(!o){const e=n?t:this._value;o=!0,n=!1,r=()=>{this.effect.active&&this._get()!==e&&Ie(this),o=!1},ot.push(r),rt||(rt=!0,nt.then(st))}for(const e of this.dep)e.computed instanceof it&&e.scheduler(!0)}var r;this._dirty=!0})),this.effect.computed=this}_get(){return this._dirty?(this._dirty=!1,this._value=this.effect.run()):this._value}get value(){return Me(this),Pe(this)._get()}}function at(e){return new it(e)}Ze="__v_isReadonly"},"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>Be,Comment:()=>Vn,EffectScope:()=>o.EffectScope,Fragment:()=>In,KeepAlive:()=>Xe,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>Bn,Suspense:()=>_e,Teleport:()=>Mn,Text:()=>Ln,callWithAsyncErrorHandling:()=>f,callWithErrorHandling:()=>p,camelize:()=>r.camelize,capitalize:()=>r.capitalize,cloneVNode:()=>io,compatUtils:()=>cr,computed:()=>Do,createBlock:()=>Jn,createCommentVNode:()=>uo,createElementBlock:()=>qn,createElementVNode:()=>oo,createHydrationRenderer:()=>En,createPropsRestProxy:()=>Qo,createRenderer:()=>On,createSlots:()=>Rt,createStaticVNode:()=>co,createTextVNode:()=>lo,createVNode:()=>ro,customRef:()=>o.customRef,defineAsyncComponent:()=>qe,defineComponent:()=>Ye,defineEmits:()=>zo,defineExpose:()=>Go,defineProps:()=>Uo,devtools:()=>D,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>wo,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>Ke,guardReactiveProps:()=>so,h:()=>Zo,handleError:()=>h,initCustomFormatter:()=>or,inject:()=>Ee,isMemoSame:()=>sr,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>Fo,isShallow:()=>o.isShallow,isVNode:()=>Qn,markRaw:()=>o.markRaw,mergeDefaults:()=>Jo,mergeProps:()=>mo,nextTick:()=>k,normalizeClass:()=>r.normalizeClass,normalizeProps:()=>r.normalizeProps,normalizeStyle:()=>r.normalizeStyle,onActivated:()=>et,onBeforeMount:()=>lt,onBeforeUnmount:()=>pt,onBeforeUpdate:()=>ut,onDeactivated:()=>tt,onErrorCaptured:()=>gt,onMounted:()=>ct,onRenderTracked:()=>vt,onRenderTriggered:()=>mt,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>ht,onUnmounted:()=>ft,onUpdated:()=>dt,openBlock:()=>Un,popScopeId:()=>ie,provide:()=>Oe,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>se,queuePostFlushCb:()=>O,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>Po,renderList:()=>Et,renderSlot:()=>At,resolveComponent:()=>xt,resolveDirective:()=>Ct,resolveDynamicComponent:()=>kt,resolveFilter:()=>lr,resolveTransitionHooks:()=>He,setBlockTracking:()=>Yn,setDevtoolsHook:()=>G,setTransitionHooks:()=>Ge,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>er,ssrUtils:()=>ar,stop:()=>o.stop,toDisplayString:()=>r.toDisplayString,toHandlerKey:()=>r.toHandlerKey,toHandlers:()=>Pt,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,transformVNodeArgs:()=>Zn,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>Wo,useSSRContext:()=>tr,useSlots:()=>Yo,useTransitionState:()=>Le,version:()=>ir,warn:()=>l,watch:()=>Fe,watchEffect:()=>Re,watchPostEffect:()=>Ae,watchSyncEffect:()=>Te,withAsyncContext:()=>Xo,withCtx:()=>le,withDefaults:()=>Ko,withDirectives:()=>bt,withMemo:()=>rr,withScopeId:()=>ae});var o=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"),r=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");const s=[];function i(e){s.push(e)}function a(){s.pop()}function l(e,...t){(0,o.pauseTracking)();const n=s.length?s[s.length-1].component:null,r=n&&n.appContext.config.warnHandler,i=function(){let e=s[s.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}();if(r)p(r,n,11,[e+t.join(""),n&&n.proxy,i.map((({vnode:e})=>`at <${Vo(n,e.type)}>`)).join("\n"),i]);else{const n=[`[Vue warn]: ${e}`,...t];i.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=!!e.component&&null==e.component.parent,r=` at <${Vo(e.component,e.type,o)}`,s=">"+n;return e.props?[r,...c(e.props),s]:[r+s]}(e))})),t}(i)),console.warn(...n)}(0,o.resetTracking)()}function c(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...u(n,e[n]))})),n.length>3&&t.push(" ..."),t}function u(e,t,n){return(0,r.isString)(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:(0,o.isRef)(t)?(t=u(e,(0,o.toRaw)(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):(0,r.isFunction)(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=(0,o.toRaw)(t),n?t:[`${e}=`,t])}const d={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"};function p(e,t,n,o){let r;try{r=o?e(...o):e()}catch(e){h(e,t,n)}return r}function f(e,t,n,o){if((0,r.isFunction)(e)){const s=p(e,t,n,o);return s&&(0,r.isPromise)(s)&&s.catch((e=>{h(e,t,n)})),s}const s=[];for(let r=0;r<e.length;r++)s.push(f(e[r],t,n,o));return s}function h(e,t,n,o=!0){const r=t?t.vnode:null;if(t){let o=t.parent;const r=t.proxy,s=d[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,r,s))return;o=o.parent}const i=t.appContext.config.errorHandler;if(i)return void p(i,null,10,[e,r,s])}!function(e,t,n,o=!0){{const r=d[t];if(n&&i(n),l("Unhandled error"+(r?` during execution of ${r}`:"")),n&&a(),o)throw e;console.error(e)}}(e,n,r,o)}let m=!1,v=!1;const g=[];let y=0;const b=[];let _=null,w=0;const x=Promise.resolve();let S=null;function k(e){const t=S||x;return e?t.then(this?e.bind(this):e):t}function C(e){g.length&&g.includes(e,m&&e.allowRecurse?y+1:y)||(null==e.id?g.push(e):g.splice(function(e){let t=y+1,n=g.length;for(;t<n;){const o=t+n>>>1;A(g[o])<e?t=o+1:n=o}return t}(e.id),0,e),j())}function j(){m||v||(v=!0,S=x.then(P))}function O(e){(0,r.isArray)(e)?b.push(...e):_&&_.includes(e,e.allowRecurse?w+1:w)||b.push(e),j()}function E(e,t=(m?y+1:0)){for(e=e||new Map;t<g.length;t++){const n=g[t];if(n&&n.pre){if(F(e,n))continue;g.splice(t,1),t--,n()}}}function R(e){if(b.length){const t=[...new Set(b)];if(b.length=0,_)return void _.push(...t);for(_=t,e=e||new Map,_.sort(((e,t)=>A(e)-A(t))),w=0;w<_.length;w++)F(e,_[w])||_[w]();_=null,w=0}}const A=e=>null==e.id?1/0:e.id,T=(e,t)=>{const n=A(e)-A(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function P(e){v=!1,m=!0,e=e||new Map,g.sort(T);const t=t=>F(e,t);try{for(y=0;y<g.length;y++){const e=g[y];if(e&&!1!==e.active){if(t(e))continue;p(e,null,14)}}}finally{y=0,g.length=0,R(e),m=!1,S=null,(g.length||b.length)&&P(e)}}function F(e,t){if(e.has(t)){const n=e.get(t);if(n>100){const e=t.ownerInstance,n=e&&Lo(e.type);return l(`Maximum recursive updates exceeded${n?` in component <${n}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`),!0}e.set(t,n+1)}else e.set(t,1)}let $=!1;const N=new Set;(0,r.getGlobalThis)().__VUE_HMR_RUNTIME__={createRecord:B(I),rerender:B((function(e,t){const n=M.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,L(e.type).render=t),e.renderCache=[],$=!0,e.update(),$=!1})))})),reload:B((function(e,t){const n=M.get(e);if(!n)return;t=L(t),V(n.initialDef,t);const o=[...n.instances];for(const e of o){const o=L(e.type);N.has(o)||(o!==n.initialDef&&V(o,t),N.add(o)),e.appContext.optionsCache.delete(e.type),e.ceReload?(N.add(o),e.ceReload(t.styles),N.delete(o)):e.parent?(C(e.parent.update),e.parent.type.__asyncLoader&&e.parent.ceReload&&e.parent.ceReload(t.styles)):e.appContext.reload?e.appContext.reload():"undefined"!=typeof window?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}O((()=>{for(const e of o)N.delete(L(e.type))}))}))};const M=new Map;function I(e,t){return!M.has(e)&&(M.set(e,{initialDef:L(t),instances:new Set}),!0)}function L(e){return Bo(e)?e.__vccOpts:e}function V(e,t){(0,r.extend)(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function B(e){return(t,n)=>{try{return e(t,n)}catch(e){console.error(e),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let D,H=[],U=!1;function z(e,...t){D?D.emit(e,...t):U||H.push({event:e,args:t})}function G(e,t){var n,o;D=e,D?(D.enabled=!0,H.forEach((({event:e,args:t})=>D.emit(e,...t))),H=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(o=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===o?void 0:o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{G(e,t)})),setTimeout((()=>{D||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,U=!0,H=[])}),3e3)):(U=!0,H=[])}const K=q("component:added"),Y=q("component:updated"),W=q("component:removed");function q(e){return t=>{z(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const J=X("perf:start"),Q=X("perf:end");function X(e){return(t,n,o)=>{z(e,t.appContext.app,t.uid,t,n,o)}}function Z(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||r.EMPTY_OBJ;{const{emitsOptions:o,propsOptions:[s]}=e;if(o)if(t in o){const e=o[t];(0,r.isFunction)(e)&&(e(...n)||l(`Invalid event arguments: event validation failed for event "${t}".`))}else s&&(0,r.toHandlerKey)(t)in s||l(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${(0,r.toHandlerKey)(t)}" prop.`)}let s=n;const i=t.startsWith("update:"),a=i&&t.slice(7);if(a&&a in o){const e=`${"modelValue"===a?"model":a}Modifiers`,{number:t,trim:i}=o[e]||r.EMPTY_OBJ;i&&(s=n.map((e=>e.trim()))),t&&(s=n.map(r.toNumber))}!function(e,t,n){z("component:emit",e.appContext.app,e,t,n)}(e,t,s);{const n=t.toLowerCase();n!==t&&o[(0,r.toHandlerKey)(n)]&&l(`Event "${n}" is emitted in component ${Vo(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${(0,r.hyphenate)(t)}" instead of "${t}".`)}let c,u=o[c=(0,r.toHandlerKey)(t)]||o[c=(0,r.toHandlerKey)((0,r.camelize)(t))];!u&&i&&(u=o[c=(0,r.toHandlerKey)((0,r.hyphenate)(t))]),u&&f(u,e,6,s);const d=o[c+"Once"];if(d){if(e.emitted){if(e.emitted[c])return}else e.emitted={};e.emitted[c]=!0,f(d,e,6,s)}}function ee(e,t,n=!1){const o=t.emitsCache,s=o.get(e);if(void 0!==s)return s;const i=e.emits;let a={},l=!1;if(__VUE_OPTIONS_API__&&!(0,r.isFunction)(e)){const o=e=>{const n=ee(e,t,!0);n&&(l=!0,(0,r.extend)(a,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return i||l?((0,r.isArray)(i)?i.forEach((e=>a[e]=null)):(0,r.extend)(a,i),(0,r.isObject)(e)&&o.set(e,a),a):((0,r.isObject)(e)&&o.set(e,null),null)}function te(e,t){return!(!e||!(0,r.isOn)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,r.hasOwn)(e,t[0].toLowerCase()+t.slice(1))||(0,r.hasOwn)(e,(0,r.hyphenate)(t))||(0,r.hasOwn)(e,t))}let ne=null,oe=null;function re(e){const t=ne;return ne=e,oe=e&&e.type.__scopeId||null,t}function se(e){oe=e}function ie(){oe=null}const ae=e=>le;function le(e,t=ne,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&Yn(-1);const r=re(t);let s;try{s=e(...n)}finally{re(r),o._d&&Yn(1)}return Y(t),s};return o._n=!0,o._c=!0,o._d=!0,o}let ce=!1;function ue(){ce=!0}function de(e){const{type:t,vnode:n,proxy:o,withProxy:s,props:i,propsOptions:[a],slots:c,attrs:u,emit:d,render:p,renderCache:f,data:m,setupState:v,ctx:g,inheritAttrs:y}=e;let b,_;const w=re(e);ce=!1;try{if(4&n.shapeFlag){const e=s||o;b=po(p.call(e,e,f,i,v,m,g)),_=u}else{const e=t;u===i&&ue(),b=po(e.length>1?e(i,{get attrs(){return ue(),u},slots:c,emit:d}):e(i,null)),_=t.props?u:he(u)}}catch(t){Dn.length=0,h(t,e,1),b=ro(Vn)}let x,S=b;if(b.patchFlag>0&&2048&b.patchFlag&&([S,x]=pe(b)),_&&!1!==y){const e=Object.keys(_),{shapeFlag:t}=S;if(e.length)if(7&t)a&&e.some(r.isModelListener)&&(_=me(_,a)),S=io(S,_);else if(!ce&&S.type!==Vn){const e=Object.keys(u),t=[],n=[];for(let o=0,s=e.length;o<s;o++){const s=e[o];(0,r.isOn)(s)?(0,r.isModelListener)(s)||t.push(s[2].toLowerCase()+s.slice(3)):n.push(s)}n.length&&l(`Extraneous non-props attributes (${n.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`),t.length&&l(`Extraneous non-emits event listeners (${t.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}return n.dirs&&(ve(S)||l("Runtime directive used on component with non-element root node. The directives will not function as intended."),S=io(S),S.dirs=S.dirs?S.dirs.concat(n.dirs):n.dirs),n.transition&&(ve(S)||l("Component inside <Transition> renders non-element root node that cannot be animated."),S.transition=n.transition),x?x(S):b=S,re(w),b}const pe=e=>{const t=e.children,n=e.dynamicChildren,o=fe(t);if(!o)return[e,void 0];const r=t.indexOf(o),s=n?n.indexOf(o):-1;return[po(o),o=>{t[r]=o,n&&(s>-1?n[s]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function fe(e){let t;for(let n=0;n<e.length;n++){const o=e[n];if(!Qn(o))return;if(o.type!==Vn||"v-if"===o.children){if(t)return;t=o}}return t}const he=e=>{let t;for(const n in e)("class"===n||"style"===n||(0,r.isOn)(n))&&((t||(t={}))[n]=e[n]);return t},me=(e,t)=>{const n={};for(const o in e)(0,r.isModelListener)(o)&&o.slice(9)in t||(n[o]=e[o]);return n},ve=e=>7&e.shapeFlag||e.type===Vn;function ge(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const s=o[r];if(t[s]!==e[s]&&!te(n,s))return!0}return!1}function ye({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const be=e=>e.__isSuspense,_e={name:"Suspense",__isSuspense:!0,process(e,t,n,o,r,s,i,a,l,c){null==e?function(e,t,n,o,r,s,i,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),p=e.suspense=Se(e,r,o,t,d,n,s,i,a,l);c(null,p.pendingBranch=e.ssContent,d,null,o,p,s,i),p.deps>0?(we(e,"onPending"),we(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,s,i),je(p,e.ssFallback)):p.resolve()}(t,n,o,r,s,i,a,l,c):function(e,t,n,o,r,s,i,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,f=t.ssFallback,{activeBranch:h,pendingBranch:m,isInFallback:v,isHydrating:g}=d;if(m)d.pendingBranch=p,Xn(p,m)?(l(m,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0?d.resolve():v&&(l(h,f,n,o,r,null,s,i,a),je(d,f))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=m):c(m,r,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),v?(l(null,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0?d.resolve():(l(h,f,n,o,r,null,s,i,a),je(d,f))):h&&Xn(p,h)?(l(h,p,n,o,r,d,s,i,a),d.resolve(!0)):(l(null,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0&&d.resolve()));else if(h&&Xn(p,h))l(h,p,n,o,r,d,s,i,a),je(d,p);else if(we(t,"onPending"),d.pendingBranch=p,d.pendingId++,l(null,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(f)}),e):0===e&&d.fallback(f)}}(e,t,n,o,r,i,a,l,c)},hydrate:function(e,t,n,o,r,s,i,a,l){const c=t.suspense=Se(t,o,n,e.parentNode,document.createElement("div"),null,r,s,i,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,s,i);return 0===c.deps&&c.resolve(),u},create:Se,normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=ke(o?n.default:n),e.ssFallback=o?ke(n.fallback):ro(Vn)}};function we(e,t){const n=e.props&&e.props[t];(0,r.isFunction)(n)&&n()}let xe=!1;function Se(e,t,n,o,s,l,c,u,d,p,f=!1){xe||(xe=!0,console[console.info?"info":"log"]("<Suspense> is an experimental feature and its API will likely change."));const{p:m,m:v,um:g,n:y,o:{parentNode:b,remove:_}}=p,w=(0,r.toNumber)(e.props&&e.props.timeout),x={vnode:e,parent:t,parentComponent:n,isSVG:c,container:o,hiddenContainer:s,anchor:l,deps:0,pendingId:0,timeout:"number"==typeof w?w:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:f,isUnmounted:!1,effects:[],resolve(e=!1){if(!e&&!x.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(x.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:t,activeBranch:n,pendingBranch:o,pendingId:r,effects:s,parentComponent:i,container:a}=x;if(x.isHydrating)x.isHydrating=!1;else if(!e){const e=n&&o.transition&&"out-in"===o.transition.mode;e&&(n.transition.afterLeave=()=>{r===x.pendingId&&v(o,a,t,0)});let{anchor:t}=x;n&&(t=y(n),g(n,i,x,!0)),e||v(o,a,t,0)}je(x,o),x.pendingBranch=null,x.isInFallback=!1;let l=x.parent,c=!1;for(;l;){if(l.pendingBranch){l.effects.push(...s),c=!0;break}l=l.parent}c||O(s),x.effects=[],we(t,"onResolve")},fallback(e){if(!x.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:r,isSVG:s}=x;we(t,"onFallback");const i=y(n),a=()=>{x.isInFallback&&(m(null,e,r,i,o,null,s,u,d),je(x,e))},l=e.transition&&"out-in"===e.transition.mode;l&&(n.transition.afterLeave=a),x.isInFallback=!0,g(n,o,null,!0),l||a()},move(e,t,n){x.activeBranch&&v(x.activeBranch,e,t,n),x.container=e},next:()=>x.activeBranch&&y(x.activeBranch),registerDep(e,t){const n=!!x.pendingBranch;n&&x.deps++;const o=e.vnode.el;e.asyncDep.catch((t=>{h(t,e,0)})).then((r=>{if(e.isUnmounted||x.isUnmounted||x.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;i(s),To(e,r,!1),o&&(s.el=o);const l=!o&&e.subTree.el;t(e,s,b(o||e.subTree.el),o?null:y(e.subTree),x,c,d),l&&_(l),ye(e,s.el),a(),n&&0==--x.deps&&x.resolve()}))},unmount(e,t){x.isUnmounted=!0,x.activeBranch&&g(x.activeBranch,n,e,t),x.pendingBranch&&g(x.pendingBranch,n,e,t)}};return x}function ke(e){let t;if((0,r.isFunction)(e)){const n=Kn&&e._c;n&&(e._d=!1,Un()),e=e(),n&&(e._d=!0,t=Hn,zn())}if((0,r.isArray)(e)){const t=fe(e);t||l("<Suspense> slots expect a single root node."),e=t}return e=po(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Ce(e,t){t&&t.pendingBranch?(0,r.isArray)(e)?t.effects.push(...e):t.effects.push(e):O(e)}function je(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e,r=n.el=t.el;o&&o.subTree===n&&(o.vnode.el=r,ye(o,r))}function Oe(e,t){if(_o){let n=_o.provides;const o=_o.parent&&_o.parent.provides;o===n&&(n=_o.provides=Object.create(o)),n[e]=t}else l("provide() can only be used inside setup().")}function Ee(e,t,n=!1){const o=_o||ne;if(o){const s=null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides;if(s&&e in s)return s[e];if(arguments.length>1)return n&&(0,r.isFunction)(t)?t.call(o.proxy):t;l(`injection "${String(e)}" not found.`)}else l("inject() can only be used inside setup() or functional components.")}function Re(e,t){return $e(e,null,t)}function Ae(e,t){return $e(e,null,Object.assign(Object.assign({},t),{flush:"post"}))}function Te(e,t){return $e(e,null,Object.assign(Object.assign({},t),{flush:"sync"}))}const Pe={};function Fe(e,t,n){return(0,r.isFunction)(t)||l("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),$e(e,t,n)}function $e(e,t,{immediate:n,deep:s,flush:i,onTrack:a,onTrigger:c}=r.EMPTY_OBJ){t||(void 0!==n&&l('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==s&&l('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'));const u=e=>{l("Invalid watch source: ",e,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},d=_o;let h,m,v=!1,g=!1;if((0,o.isRef)(e)?(h=()=>e.value,v=(0,o.isShallow)(e)):(0,o.isReactive)(e)?(h=()=>e,s=!0):(0,r.isArray)(e)?(g=!0,v=e.some((e=>(0,o.isReactive)(e)||(0,o.isShallow)(e))),h=()=>e.map((e=>(0,o.isRef)(e)?e.value:(0,o.isReactive)(e)?Ie(e):(0,r.isFunction)(e)?p(e,d,2):void u(e)))):(0,r.isFunction)(e)?h=t?()=>p(e,d,2):()=>{if(!d||!d.isUnmounted)return m&&m(),f(e,d,3,[y])}:(h=r.NOOP,u(e)),t&&s){const e=h;h=()=>Ie(e())}let y=e=>{m=x.onStop=()=>{p(e,d,4)}};if(Ro)return y=r.NOOP,t?n&&f(t,d,3,[h(),g?[]:void 0,y]):h(),r.NOOP;let b=g?[]:Pe;const _=()=>{if(x.active)if(t){const e=x.run();(s||v||(g?e.some(((e,t)=>(0,r.hasChanged)(e,b[t]))):(0,r.hasChanged)(e,b)))&&(m&&m(),f(t,d,3,[e,b===Pe?void 0:b,y]),b=e)}else x.run()};let w;_.allowRecurse=!!t,"sync"===i?w=_:"post"===i?w=()=>jn(_,d&&d.suspense):(_.pre=!0,d&&(_.id=d.uid),w=()=>C(_));const x=new o.ReactiveEffect(h,w);return x.onTrack=a,x.onTrigger=c,t?n?_():b=x.run():"post"===i?jn(x.run.bind(x),d&&d.suspense):x.run(),()=>{x.stop(),d&&d.scope&&(0,r.remove)(d.scope.effects,x)}}function Ne(e,t,n){const o=this.proxy,s=(0,r.isString)(e)?e.includes(".")?Me(o,e):()=>o[e]:e.bind(o,o);let i;(0,r.isFunction)(t)?i=t:(i=t.handler,n=t);const a=_o;xo(this);const l=$e(s,i.bind(o),n);return a?xo(a):So(),l}function Me(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Ie(e,t){if(!(0,r.isObject)(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),(0,o.isRef)(e))Ie(e.value,t);else if((0,r.isArray)(e))for(let n=0;n<e.length;n++)Ie(e[n],t);else if((0,r.isSet)(e)||(0,r.isMap)(e))e.forEach((e=>{Ie(e,t)}));else if((0,r.isPlainObject)(e))for(const n in e)Ie(e[n],t);return e}function Le(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ct((()=>{e.isMounted=!0})),pt((()=>{e.isUnmounting=!0})),e}const Ve=[Function,Array],Be={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ve,onEnter:Ve,onAfterEnter:Ve,onEnterCancelled:Ve,onBeforeLeave:Ve,onLeave:Ve,onAfterLeave:Ve,onLeaveCancelled:Ve,onBeforeAppear:Ve,onAppear:Ve,onAfterAppear:Ve,onAppearCancelled:Ve},setup(e,{slots:t}){const n=wo(),r=Le();let s;return()=>{const i=t.default&&Ke(t.default(),!0);if(!i||!i.length)return;let a=i[0];if(i.length>1){let e=!1;for(const t of i)if(t.type!==Vn){if(e){l("<transition> can only be used on a single element or component. Use <transition-group> for lists.");break}a=t,e=!0}}const c=(0,o.toRaw)(e),{mode:u}=c;if(u&&"in-out"!==u&&"out-in"!==u&&"default"!==u&&l(`invalid <transition> mode: ${u}`),r.isLeaving)return Ue(a);const d=ze(a);if(!d)return Ue(a);const p=He(d,c,r,n);Ge(d,p);const f=n.subTree,h=f&&ze(f);let m=!1;const{getTransitionKey:v}=d.type;if(v){const e=v();void 0===s?s=e:e!==s&&(s=e,m=!0)}if(h&&h.type!==Vn&&(!Xn(d,h)||m)){const e=He(h,c,r,n);if(Ge(h,e),"out-in"===u)return r.isLeaving=!0,e.afterLeave=()=>{r.isLeaving=!1,n.update()},Ue(a);"in-out"===u&&d.type!==Vn&&(e.delayLeave=(e,t,n)=>{De(r,h)[String(h.key)]=h,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete p.delayedLeave},p.delayedLeave=n})}return a}}};function De(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function He(e,t,n,o){const{appear:s,mode:i,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:p,onLeave:h,onAfterLeave:m,onLeaveCancelled:v,onBeforeAppear:g,onAppear:y,onAfterAppear:b,onAppearCancelled:_}=t,w=String(e.key),x=De(n,e),S=(e,t)=>{e&&f(e,o,9,t)},k=(e,t)=>{const n=t[1];S(e,t),(0,r.isArray)(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},C={mode:i,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!s)return;o=g||l}t._leaveCb&&t._leaveCb(!0);const r=x[w];r&&Xn(e,r)&&r.el._leaveCb&&r.el._leaveCb(),S(o,[t])},enter(e){let t=c,o=u,r=d;if(!n.isMounted){if(!s)return;t=y||c,o=b||u,r=_||d}let i=!1;const a=e._enterCb=t=>{i||(i=!0,S(t?r:o,[e]),C.delayedLeave&&C.delayedLeave(),e._enterCb=void 0)};t?k(t,[e,a]):a()},leave(t,o){const r=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return o();S(p,[t]);let s=!1;const i=t._leaveCb=n=>{s||(s=!0,o(),S(n?v:m,[t]),t._leaveCb=void 0,x[r]===e&&delete x[r])};x[r]=e,h?k(h,[t,i]):i()},clone:e=>He(e,t,n,o)};return C}function Ue(e){if(Qe(e))return(e=io(e)).children=null,e}function ze(e){return Qe(e)?e.children?e.children[0]:void 0:e}function Ge(e,t){6&e.shapeFlag&&e.component?Ge(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ke(e,t=!1,n){let o=[],r=0;for(let s=0;s<e.length;s++){let i=e[s];const a=null==n?i.key:String(n)+String(null!=i.key?i.key:s);i.type===In?(128&i.patchFlag&&r++,o=o.concat(Ke(i.children,t,a))):(t||i.type!==Vn)&&o.push(null!=a?io(i,{key:a}):i)}if(r>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function Ye(e){return(0,r.isFunction)(e)?{setup:e,name:e.name}:e}const We=e=>!!e.type.__asyncLoader;function qe(e){(0,r.isFunction)(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:s,delay:i=200,timeout:a,suspensible:c=!0,onError:u}=e;let d,p=null,f=0;const m=()=>{let e;return p||(e=p=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),u)return new Promise(((t,n)=>{u(e,(()=>t((f++,p=null,m()))),(()=>n(e)),f+1)}));throw e})).then((t=>{if(e!==p&&p)return p;if(t||l("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."),t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!(0,r.isObject)(t)&&!(0,r.isFunction)(t))throw new Error(`Invalid async component load result: ${t}`);return d=t,t})))};return Ye({name:"AsyncComponentWrapper",__asyncLoader:m,get __asyncResolved(){return d},setup(){const e=_o;if(d)return()=>Je(d,e);const t=t=>{p=null,h(t,e,13,!s)};if(c&&e.suspense||Ro)return m().then((t=>()=>Je(t,e))).catch((e=>(t(e),()=>s?ro(s,{error:e}):null)));const r=(0,o.ref)(!1),l=(0,o.ref)(),u=(0,o.ref)(!!i);return i&&setTimeout((()=>{u.value=!1}),i),null!=a&&setTimeout((()=>{if(!r.value&&!l.value){const e=new Error(`Async component timed out after ${a}ms.`);t(e),l.value=e}}),a),m().then((()=>{r.value=!0,e.parent&&Qe(e.parent.vnode)&&C(e.parent.update)})).catch((e=>{t(e),l.value=e})),()=>r.value&&d?Je(d,e):l.value&&s?ro(s,{error:l.value}):n&&!u.value?ro(n):void 0}})}function Je(e,{vnode:{ref:t,props:n,children:o,shapeFlag:r},parent:s}){const i=ro(e,n,o);return i.ref=t,i}const Qe=e=>e.type.__isKeepAlive,Xe={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=wo(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const s=new Map,i=new Set;let a=null;n.__v_cache=s;const c=n.suspense,{renderer:{p:u,m:d,um:p,o:{createElement:f}}}=o,h=f("div");function m(e){rt(e),p(e,n,c,!0)}function v(e){s.forEach(((t,n)=>{const o=Lo(t.type);!o||e&&e(o)||g(n)}))}function g(e){const t=s.get(e);a&&t.type===a.type?a&&rt(a):m(t),s.delete(e),i.delete(e)}o.activate=(e,t,n,o,s)=>{const i=e.component;d(e,t,n,0,c),u(i.vnode,e,t,n,i,c,o,e.slotScopeIds,s),jn((()=>{i.isDeactivated=!1,i.a&&(0,r.invokeArrayFns)(i.a);const t=e.props&&e.props.onVnodeMounted;t&&vo(t,i.parent,e)}),c),K(i)},o.deactivate=e=>{const t=e.component;d(e,h,null,1,c),jn((()=>{t.da&&(0,r.invokeArrayFns)(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&vo(n,t.parent,e),t.isDeactivated=!0}),c),K(t)},Fe((()=>[e.include,e.exclude]),(([e,t])=>{e&&v((t=>Ze(e,t))),t&&v((e=>!Ze(t,e)))}),{flush:"post",deep:!0});let y=null;const b=()=>{null!=y&&s.set(y,st(n.subTree))};return ct(b),dt(b),pt((()=>{s.forEach((e=>{const{subTree:t,suspense:o}=n,r=st(t);if(e.type!==r.type)m(e);else{rt(r);const e=r.component.da;e&&jn(e,o)}}))})),()=>{if(y=null,!t.default)return null;const n=t.default(),o=n[0];if(n.length>1)return l("KeepAlive should contain exactly one component child."),a=null,n;if(!Qn(o)||!(4&o.shapeFlag||128&o.shapeFlag))return a=null,o;let r=st(o);const c=r.type,u=Lo(We(r)?r.type.__asyncResolved||{}:c),{include:d,exclude:p,max:f}=e;if(d&&(!u||!Ze(d,u))||p&&u&&Ze(p,u))return a=r,o;const h=null==r.key?c:r.key,m=s.get(h);return r.el&&(r=io(r),128&o.shapeFlag&&(o.ssContent=r)),y=h,m?(r.el=m.el,r.component=m.component,r.transition&&Ge(r,r.transition),r.shapeFlag|=512,i.delete(h),i.add(h)):(i.add(h),f&&i.size>parseInt(f,10)&&g(i.values().next().value)),r.shapeFlag|=256,a=r,be(o.type)?o:r}}};function Ze(e,t){return(0,r.isArray)(e)?e.some((e=>Ze(e,t))):(0,r.isString)(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function et(e,t){nt(e,"a",t)}function tt(e,t){nt(e,"da",t)}function nt(e,t,n=_o){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(it(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Qe(e.parent.vnode)&&ot(o,t,n,e),e=e.parent}}function ot(e,t,n,o){const s=it(t,e,o,!0);ft((()=>{(0,r.remove)(o[t],s)}),n)}function rt(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function st(e){return 128&e.shapeFlag?e.ssContent:e}function it(e,t,n=_o,s=!1){if(n){const r=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...r)=>{if(n.isUnmounted)return;(0,o.pauseTracking)(),xo(n);const s=f(t,n,e,r);return So(),(0,o.resetTracking)(),s});return s?r.unshift(i):r.push(i),i}l(`${(0,r.toHandlerKey)(d[e].replace(/ hook$/,""))} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}const at=e=>(t,n=_o)=>(!Ro||"sp"===e)&&it(e,((...e)=>t(...e)),n),lt=at("bm"),ct=at("m"),ut=at("bu"),dt=at("u"),pt=at("bum"),ft=at("um"),ht=at("sp"),mt=at("rtg"),vt=at("rtc");function gt(e,t=_o){it("ec",e,t)}function yt(e){(0,r.isBuiltInDirective)(e)&&l("Do not use built-in directive ids as custom directive id: "+e)}function bt(e,t){const n=ne;if(null===n)return l("withDirectives can only be used inside render functions."),e;const o=Mo(n)||n.proxy,s=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,i,a,l=r.EMPTY_OBJ]=t[e];(0,r.isFunction)(n)&&(n={mounted:n,updated:n}),n.deep&&Ie(i),s.push({dir:n,instance:o,value:i,oldValue:void 0,arg:a,modifiers:l})}return e}function _t(e,t,n,r){const s=e.dirs,i=t&&t.dirs;for(let a=0;a<s.length;a++){const l=s[a];i&&(l.oldValue=i[a].value);let c=l.dir[r];c&&((0,o.pauseTracking)(),f(c,n,8,[e.el,l,e,t]),(0,o.resetTracking)())}}const wt="components";function xt(e,t){return jt(wt,e,!0,t)||e}const St=Symbol();function kt(e){return(0,r.isString)(e)?jt(wt,e,!1)||e:e||St}function Ct(e){return jt("directives",e)}function jt(e,t,n=!0,o=!1){const s=ne||_o;if(s){const i=s.type;if(e===wt){const e=Lo(i,!1);if(e&&(e===t||e===(0,r.camelize)(t)||e===(0,r.capitalize)((0,r.camelize)(t))))return i}const a=Ot(s[e]||i[e],t)||Ot(s.appContext[e],t);if(!a&&o)return i;if(n&&!a){const n=e===wt?"\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.":"";l(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return a}l(`resolve${(0,r.capitalize)(e.slice(0,-1))} can only be used in render() or setup().`)}function Ot(e,t){return e&&(e[t]||e[(0,r.camelize)(t)]||e[(0,r.capitalize)((0,r.camelize)(t))])}function Et(e,t,n,o){let s;const i=n&&n[o];if((0,r.isArray)(e)||(0,r.isString)(e)){s=new Array(e.length);for(let n=0,o=e.length;n<o;n++)s[n]=t(e[n],n,void 0,i&&i[n])}else if("number"==typeof e){Number.isInteger(e)||l(`The v-for range expect an integer value but got ${e}.`),s=new Array(e);for(let n=0;n<e;n++)s[n]=t(n+1,n,void 0,i&&i[n])}else if((0,r.isObject)(e))if(e[Symbol.iterator])s=Array.from(e,((e,n)=>t(e,n,void 0,i&&i[n])));else{const n=Object.keys(e);s=new Array(n.length);for(let o=0,r=n.length;o<r;o++){const r=n[o];s[o]=t(e[r],r,o,i&&i[o])}}else s=[];return n&&(n[o]=s),s}function Rt(e,t){for(let n=0;n<t.length;n++){const o=t[n];if((0,r.isArray)(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function At(e,t,n={},o,r){if(ne.isCE||ne.parent&&We(ne.parent)&&ne.parent.isCE)return ro("slot","default"===t?null:{name:t},o&&o());let s=e[t];s&&s.length>1&&(l("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."),s=()=>[]),s&&s._c&&(s._d=!1),Un();const i=s&&Tt(s(n)),a=Jn(In,{key:n.key||i&&i.key||`_${t}`},i||(o?o():[]),i&&1===e._?64:-2);return!r&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),s&&s._c&&(s._d=!0),a}function Tt(e){return e.some((e=>!Qn(e)||e.type!==Vn&&!(e.type===In&&!Tt(e.children))))?e:null}function Pt(e,t){const n={};if(!(0,r.isObject)(e))return l("v-on with no argument expects an object value."),n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:(0,r.toHandlerKey)(o)]=e[o];return n}const Ft=e=>e?jo(e)?Mo(e)||e.proxy:Ft(e.parent):null,$t=(0,r.extend)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>(0,o.shallowReadonly)(e.props),$attrs:e=>(0,o.shallowReadonly)(e.attrs),$slots:e=>(0,o.shallowReadonly)(e.slots),$refs:e=>(0,o.shallowReadonly)(e.refs),$parent:e=>Ft(e.parent),$root:e=>Ft(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?Dt(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>C(e.update)),$nextTick:e=>e.n||(e.n=k.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?Ne.bind(e):r.NOOP}),Nt=e=>"_"===e||"$"===e,Mt={get({_:e},t){const{ctx:n,setupState:s,data:i,props:a,accessCache:c,type:u,appContext:d}=e;if("__isVue"===t)return!0;if(s!==r.EMPTY_OBJ&&s.__isScriptSetup&&(0,r.hasOwn)(s,t))return s[t];let p;if("$"!==t[0]){const o=c[t];if(void 0!==o)switch(o){case 1:return s[t];case 2:return i[t];case 4:return n[t];case 3:return a[t]}else{if(s!==r.EMPTY_OBJ&&(0,r.hasOwn)(s,t))return c[t]=1,s[t];if(i!==r.EMPTY_OBJ&&(0,r.hasOwn)(i,t))return c[t]=2,i[t];if((p=e.propsOptions[0])&&(0,r.hasOwn)(p,t))return c[t]=3,a[t];if(n!==r.EMPTY_OBJ&&(0,r.hasOwn)(n,t))return c[t]=4,n[t];__VUE_OPTIONS_API__&&!Lt||(c[t]=0)}}const f=$t[t];let h,m;return f?("$attrs"===t&&((0,o.track)(e,"get",t),ue()),f(e)):(h=u.__cssModules)&&(h=h[t])?h:n!==r.EMPTY_OBJ&&(0,r.hasOwn)(n,t)?(c[t]=4,n[t]):(m=d.config.globalProperties,(0,r.hasOwn)(m,t)?m[t]:void(!ne||(0,r.isString)(t)&&0===t.indexOf("__v")||(i!==r.EMPTY_OBJ&&Nt(t[0])&&(0,r.hasOwn)(i,t)?l(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===ne&&l(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))))},set({_:e},t,n){const{data:o,setupState:s,ctx:i}=e;return s!==r.EMPTY_OBJ&&(0,r.hasOwn)(s,t)?(s[t]=n,!0):o!==r.EMPTY_OBJ&&(0,r.hasOwn)(o,t)?(o[t]=n,!0):(0,r.hasOwn)(e.props,t)?(l(`Attempting to mutate prop "${t}". Props are readonly.`,e),!1):"$"===t[0]&&t.slice(1)in e?(l(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`,e),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(i,t,{enumerable:!0,configurable:!0,value:n}):i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:s,propsOptions:i}},a){let l;return!!n[a]||e!==r.EMPTY_OBJ&&(0,r.hasOwn)(e,a)||t!==r.EMPTY_OBJ&&(0,r.hasOwn)(t,a)||(l=i[0])&&(0,r.hasOwn)(l,a)||(0,r.hasOwn)(o,a)||(0,r.hasOwn)($t,a)||(0,r.hasOwn)(s.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:(0,r.hasOwn)(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>(l("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e))},It=(0,r.extend)({},Mt,{get(e,t){if(t!==Symbol.unscopables)return Mt.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!(0,r.isGloballyWhitelisted)(t);return!n&&Mt.has(e,t)&&l(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}});let Lt=!0;function Vt(e,t,n){f((0,r.isArray)(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Bt(e,t,n,o){const s=o.includes(".")?Me(n,o):()=>n[o];if((0,r.isString)(e)){const n=t[e];(0,r.isFunction)(n)?Fe(s,n):l(`Invalid watch handler specified by key "${e}"`,n)}else if((0,r.isFunction)(e))Fe(s,e.bind(n));else if((0,r.isObject)(e))if((0,r.isArray)(e))e.forEach((e=>Bt(e,t,n,o)));else{const o=(0,r.isFunction)(e.handler)?e.handler.bind(n):t[e.handler];(0,r.isFunction)(o)?Fe(s,o,e):l(`Invalid watch handler specified by key "${e.handler}"`,o)}else l(`Invalid watch option: "${o}"`,e)}function Dt(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:s,optionsCache:i,config:{optionMergeStrategies:a}}=e.appContext,l=i.get(t);let c;return l?c=l:s.length||n||o?(c={},s.length&&s.forEach((e=>Ht(c,e,a,!0))),Ht(c,t,a)):c=t,(0,r.isObject)(t)&&i.set(t,c),c}function Ht(e,t,n,o=!1){const{mixins:r,extends:s}=t;s&&Ht(e,s,n,!0),r&&r.forEach((t=>Ht(e,t,n,!0)));for(const r in t)if(o&&"expose"===r)l('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const o=Ut[r]||n&&n[r];e[r]=o?o(e[r],t[r]):t[r]}return e}const Ut={data:zt,props:Yt,emits:Yt,methods:Yt,computed:Yt,beforeCreate:Kt,created:Kt,beforeMount:Kt,mounted:Kt,beforeUpdate:Kt,updated:Kt,beforeDestroy:Kt,beforeUnmount:Kt,destroyed:Kt,unmounted:Kt,activated:Kt,deactivated:Kt,errorCaptured:Kt,serverPrefetch:Kt,components:Yt,directives:Yt,watch:function(e,t){if(!e)return t;if(!t)return e;const n=(0,r.extend)(Object.create(null),e);for(const o in t)n[o]=Kt(e[o],t[o]);return n},provide:zt,inject:function(e,t){return Yt(Gt(e),Gt(t))}};function zt(e,t){return t?e?function(){return(0,r.extend)((0,r.isFunction)(e)?e.call(this,this):e,(0,r.isFunction)(t)?t.call(this,this):t)}:t:e}function Gt(e){if((0,r.isArray)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Kt(e,t){return e?[...new Set([].concat(e,t))]:t}function Yt(e,t){return e?(0,r.extend)((0,r.extend)(Object.create(null),e),t):t}function Wt(e,t,n,s){const[i,a]=e.propsOptions;let l,c=!1;if(t)for(let o in t){if((0,r.isReservedProp)(o))continue;const u=t[o];let d;i&&(0,r.hasOwn)(i,d=(0,r.camelize)(o))?a&&a.includes(d)?(l||(l={}))[d]=u:n[d]=u:te(e.emitsOptions,o)||o in s&&u===s[o]||(s[o]=u,c=!0)}if(a){const t=(0,o.toRaw)(n),s=l||r.EMPTY_OBJ;for(let o=0;o<a.length;o++){const l=a[o];n[l]=qt(i,t,l,s[l],e,!(0,r.hasOwn)(s,l))}}return c}function qt(e,t,n,o,s,i){const a=e[n];if(null!=a){const e=(0,r.hasOwn)(a,"default");if(e&&void 0===o){const e=a.default;if(a.type!==Function&&(0,r.isFunction)(e)){const{propsDefaults:r}=s;n in r?o=r[n]:(xo(s),o=r[n]=e.call(null,t),So())}else o=e}a[0]&&(i&&!e?o=!1:!a[1]||""!==o&&o!==(0,r.hyphenate)(n)||(o=!0))}return o}function Jt(e,t,n=!1){const o=t.propsCache,s=o.get(e);if(s)return s;const i=e.props,a={},c=[];let u=!1;if(__VUE_OPTIONS_API__&&!(0,r.isFunction)(e)){const o=e=>{u=!0;const[n,o]=Jt(e,t,!0);(0,r.extend)(a,n),o&&c.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!i&&!u)return(0,r.isObject)(e)&&o.set(e,r.EMPTY_ARR),r.EMPTY_ARR;if((0,r.isArray)(i))for(let e=0;e<i.length;e++){(0,r.isString)(i[e])||l("props must be strings when using array syntax.",i[e]);const t=(0,r.camelize)(i[e]);Qt(t)&&(a[t]=r.EMPTY_OBJ)}else if(i){(0,r.isObject)(i)||l("invalid props options",i);for(const e in i){const t=(0,r.camelize)(e);if(Qt(t)){const n=i[e],o=a[t]=(0,r.isArray)(n)||(0,r.isFunction)(n)?{type:n}:n;if(o){const e=en(Boolean,o.type),n=en(String,o.type);o[0]=e>-1,o[1]=n<0||e<n,(e>-1||(0,r.hasOwn)(o,"default"))&&c.push(t)}}}}const d=[a,c];return(0,r.isObject)(e)&&o.set(e,d),d}function Qt(e){return"$"!==e[0]||(l(`Invalid prop name: "${e}" is a reserved property.`),!1)}function Xt(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Zt(e,t){return Xt(e)===Xt(t)}function en(e,t){return(0,r.isArray)(t)?t.findIndex((t=>Zt(t,e))):(0,r.isFunction)(t)&&Zt(t,e)?0:-1}function tn(e,t,n){const s=(0,o.toRaw)(t),i=n.propsOptions[0];for(const t in i){let n=i[t];null!=n&&nn(t,s[t],n,!(0,r.hasOwn)(e,t)&&!(0,r.hasOwn)(e,(0,r.hyphenate)(t)))}}function nn(e,t,n,o){const{type:s,required:i,validator:a}=n;if(i&&o)l('Missing required prop: "'+e+'"');else if(null!=t||n.required){if(null!=s&&!0!==s){let n=!1;const o=(0,r.isArray)(s)?s:[s],i=[];for(let e=0;e<o.length&&!n;e++){const{valid:r,expectedType:s}=rn(t,o[e]);i.push(s||""),n=r}if(!n)return void l(function(e,t,n){let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(r.capitalize).join(" | ")}`;const s=n[0],i=(0,r.toRawType)(t),a=sn(t,s),l=sn(t,i);return 1===n.length&&an(s)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(s,i)&&(o+=` with value ${a}`),o+=`, got ${i} `,an(i)&&(o+=`with value ${l}.`),o}(e,t,i))}a&&!a(t)&&l('Invalid prop: custom validator check failed for prop "'+e+'".')}}const on=(0,r.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");function rn(e,t){let n;const o=Xt(t);if(on(o)){const r=typeof e;n=r===o.toLowerCase(),n||"object"!==r||(n=e instanceof t)}else n="Object"===o?(0,r.isObject)(e):"Array"===o?(0,r.isArray)(e):"null"===o?null===e:e instanceof t;return{valid:n,expectedType:o}}function sn(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function an(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const ln=e=>"_"===e[0]||"$stable"===e,cn=e=>(0,r.isArray)(e)?e.map(po):[po(e)],un=(e,t,n)=>{if(t._n)return t;const o=le(((...n)=>(_o&&l(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),cn(t(...n)))),n);return o._c=!1,o},dn=(e,t,n)=>{const o=e._ctx;for(const n in e){if(ln(n))continue;const s=e[n];if((0,r.isFunction)(s))t[n]=un(n,s,o);else if(null!=s){l(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);const e=cn(s);t[n]=()=>e}}},pn=(e,t)=>{Qe(e.vnode)||l("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=cn(t);e.slots.default=()=>n};function fn(){return{app:null,config:{isNativeTag:r.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let hn=0;function mn(e,t){return function(n,o=null){(0,r.isFunction)(n)||(n=Object.assign({},n)),null==o||(0,r.isObject)(o)||(l("root props passed to app.mount() must be an object."),o=null);const s=fn(),i=new Set;let a=!1;const c=s.app={_uid:hn++,_component:n,_props:o,_container:null,_context:s,_instance:null,version:ir,get config(){return s.config},set config(e){l("app.config cannot be replaced. Modify individual options instead.")},use:(e,...t)=>(i.has(e)?l("Plugin has already been applied to target app."):e&&(0,r.isFunction)(e.install)?(i.add(e),e.install(c,...t)):(0,r.isFunction)(e)?(i.add(e),e(c,...t)):l('A plugin must either be a function or an object with an "install" function.'),c),mixin:e=>(__VUE_OPTIONS_API__?s.mixins.includes(e)?l("Mixin has already been applied to target app"+(e.name?`: ${e.name}`:"")):s.mixins.push(e):l("Mixins are only available in builds supporting Options API"),c),component:(e,t)=>(Co(e,s.config),t?(s.components[e]&&l(`Component "${e}" has already been registered in target app.`),s.components[e]=t,c):s.components[e]),directive:(e,t)=>(yt(e),t?(s.directives[e]&&l(`Directive "${e}" has already been registered in target app.`),s.directives[e]=t,c):s.directives[e]),mount(r,i,u){if(!a){r.__vue_app__&&l("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const d=ro(n,o);return d.appContext=s,s.reload=()=>{e(io(d),r,u)},i&&t?t(d,r):e(d,r,u),a=!0,c._container=r,r.__vue_app__=c,c._instance=d.component,function(e,t){z("app:init",e,t,{Fragment:In,Text:Ln,Comment:Vn,Static:Bn})}(c,ir),Mo(d.component)||d.component.proxy}l("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`")},unmount(){a?(e(null,c._container),c._instance=null,function(e){z("app:unmount",e)}(c),delete c._container.__vue_app__):l("Cannot unmount an app that is not mounted.")},provide:(e,t)=>(e in s.provides&&l(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`),s.provides[e]=t,c)};return c}}function vn(e,t,n,s,i=!1){if((0,r.isArray)(e))return void e.forEach(((e,o)=>vn(e,t&&((0,r.isArray)(t)?t[o]:t),n,s,i)));if(We(s)&&!i)return;const a=4&s.shapeFlag?Mo(s.component)||s.component.proxy:s.el,c=i?null:a,{i:u,r:d}=e;if(!u)return void l("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");const f=t&&t.r,h=u.refs===r.EMPTY_OBJ?u.refs={}:u.refs,m=u.setupState;if(null!=f&&f!==d&&((0,r.isString)(f)?(h[f]=null,(0,r.hasOwn)(m,f)&&(m[f]=null)):(0,o.isRef)(f)&&(f.value=null)),(0,r.isFunction)(d))p(d,u,12,[c,h]);else{const t=(0,r.isString)(d),s=(0,o.isRef)(d);if(t||s){const o=()=>{if(e.f){const n=t?(0,r.hasOwn)(m,d)?m[d]:h[d]:d.value;i?(0,r.isArray)(n)&&(0,r.remove)(n,a):(0,r.isArray)(n)?n.includes(a)||n.push(a):t?(h[d]=[a],(0,r.hasOwn)(m,d)&&(m[d]=h[d])):(d.value=[a],e.k&&(h[e.k]=d.value))}else t?(h[d]=c,(0,r.hasOwn)(m,d)&&(m[d]=c)):s?(d.value=c,e.k&&(h[e.k]=c)):l("Invalid template ref type:",d,`(${typeof d})`)};c?(o.id=-1,jn(o,n)):o()}else l("Invalid template ref type:",d,`(${typeof d})`)}}let gn=!1;const yn=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,bn=e=>8===e.nodeType;function _n(e){const{mt:t,p:n,o:{patchProp:o,createText:s,nextSibling:i,parentNode:a,remove:c,insert:u,createComment:d}}=e,p=(n,o,r,c,d,y=!1)=>{const b=bn(n)&&"["===n.data,_=()=>v(n,o,r,c,d,b),{type:w,ref:x,shapeFlag:S,patchFlag:k}=o;let C=n.nodeType;o.el=n,-2===k&&(y=!1,o.dynamicChildren=null);let j=null;switch(w){case Ln:3!==C?""===o.children?(u(o.el=s(""),a(n),n),j=n):j=_():(n.data!==o.children&&(gn=!0,l(`Hydration text mismatch:\n- Client: ${JSON.stringify(n.data)}\n- Server: ${JSON.stringify(o.children)}`),n.data=o.children),j=i(n));break;case Vn:j=8!==C||b?_():i(n);break;case Bn:if(b&&(C=(n=i(n)).nodeType),1===C||3===C){j=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===j.nodeType?j.outerHTML:j.data),t===o.staticCount-1&&(o.anchor=j),j=i(j);return b?i(j):j}_();break;case In:j=b?m(n,o,r,c,d,y):_();break;default:if(1&S)j=1!==C||o.type.toLowerCase()!==n.tagName.toLowerCase()?_():f(n,o,r,c,d,y);else if(6&S){o.slotScopeIds=d;const e=a(n);if(t(o,e,null,r,c,yn(e),y),j=b?g(n):i(n),j&&bn(j)&&"teleport end"===j.data&&(j=i(j)),We(o)){let t;b?(t=ro(In),t.anchor=j?j.previousSibling:e.lastChild):t=3===n.nodeType?lo(""):ro("div"),t.el=n,o.component.subTree=t}}else 64&S?j=8!==C?_():o.type.hydrate(n,o,r,c,d,y,e,h):128&S?j=o.type.hydrate(n,o,r,c,yn(a(n)),d,y,e,p):l("Invalid HostVNode type:",w,`(${typeof w})`)}return null!=x&&vn(x,null,c,o),j},f=(e,t,n,s,i,a)=>{a=a||!!t.dynamicChildren;const{type:u,props:d,patchFlag:p,shapeFlag:f,dirs:m}=t,v="input"===u&&m||"option"===u;{if(m&&_t(t,null,n,"created"),d)if(v||!a||48&p)for(const t in d)(v&&t.endsWith("value")||(0,r.isOn)(t)&&!(0,r.isReservedProp)(t))&&o(e,t,null,d[t],!1,void 0,n);else d.onClick&&o(e,"onClick",null,d.onClick,!1,void 0,n);let u;if((u=d&&d.onVnodeBeforeMount)&&vo(u,n,t),m&&_t(t,null,n,"beforeMount"),((u=d&&d.onVnodeMounted)||m)&&Ce((()=>{u&&vo(u,n,t),m&&_t(t,null,n,"mounted")}),s),16&f&&(!d||!d.innerHTML&&!d.textContent)){let o=h(e.firstChild,t,e,n,s,i,a),r=!1;for(;o;){gn=!0,r||(l(`Hydration children mismatch in <${t.type}>: server rendered element contains more child nodes than client vdom.`),r=!0);const e=o;o=o.nextSibling,c(e)}}else 8&f&&e.textContent!==t.children&&(gn=!0,l(`Hydration text content mismatch in <${t.type}>:\n- Client: ${e.textContent}\n- Server: ${t.children}`),e.textContent=t.children)}return e.nextSibling},h=(e,t,o,r,s,i,a)=>{a=a||!!t.dynamicChildren;const c=t.children,u=c.length;let d=!1;for(let t=0;t<u;t++){const u=a?c[t]:c[t]=po(c[t]);if(e)e=p(e,u,r,s,i,a);else{if(u.type===Ln&&!u.children)continue;gn=!0,d||(l(`Hydration children mismatch in <${o.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`),d=!0),n(null,u,o,null,r,s,yn(o),i)}}return e},m=(e,t,n,o,r,s)=>{const{slotScopeIds:l}=t;l&&(r=r?r.concat(l):l);const c=a(e),p=h(i(e),t,c,n,o,r,s);return p&&bn(p)&&"]"===p.data?i(t.anchor=p):(gn=!0,u(t.anchor=d("]"),c,p),p)},v=(e,t,o,r,s,u)=>{if(gn=!0,l("Hydration node mismatch:\n- Client vnode:",t.type,"\n- Server rendered DOM:",e,3===e.nodeType?"(text)":bn(e)&&"["===e.data?"(start of fragment)":""),t.el=null,u){const t=g(e);for(;;){const n=i(e);if(!n||n===t)break;c(n)}}const d=i(e),p=a(e);return c(e),n(null,t,p,d,o,r,yn(p),s),d},g=e=>{let t=0;for(;e;)if((e=i(e))&&bn(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return i(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return l("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),n(null,e,t),R(),void(t._vnode=e);gn=!1,p(t.firstChild,e,null,null,null),R(),t._vnode=e,gn&&console.error("Hydration completed but contains mismatches.")},p]}let wn,xn;function Sn(e,t){e.appContext.config.performance&&Cn()&&xn.mark(`vue-${t}-${e.uid}`),J(e,t,Cn()?xn.now():Date.now())}function kn(e,t){if(e.appContext.config.performance&&Cn()){const n=`vue-${t}-${e.uid}`,o=n+":end";xn.mark(o),xn.measure(`<${Vo(e,e.type)}> ${t}`,n,o),xn.clearMarks(n),xn.clearMarks(o)}Q(e,t,Cn()?xn.now():Date.now())}function Cn(){return void 0!==wn||("undefined"!=typeof window&&window.performance?(wn=!0,xn=window.performance):wn=!1),wn}const jn=Ce;function On(e){return Rn(e)}function En(e){return Rn(e,_n)}function Rn(e,t){!function(){const e=[];if("boolean"!=typeof __VUE_OPTIONS_API__&&(e.push("__VUE_OPTIONS_API__"),(0,r.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e.push("__VUE_PROD_DEVTOOLS__"),(0,r.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1),e.length){const t=e.length>1;console.warn(`Feature flag${t?"s":""} ${e.join(", ")} ${t?"are":"is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`)}}();const n=(0,r.getGlobalThis)();n.__VUE__=!0,G(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:s,remove:c,patchProp:u,createElement:d,createText:p,createComment:f,setText:h,setElementText:m,parentNode:v,nextSibling:b,setScopeId:_=r.NOOP,insertStaticContent:w}=e,x=(e,t,n,o=null,r=null,s=null,i=!1,a=null,c=!$&&!!t.dynamicChildren)=>{if(e===t)return;e&&!Xn(e,t)&&(o=le(e),oe(e,r,s,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:u,ref:d,shapeFlag:p}=t;switch(u){case Ln:S(e,t,n,o);break;case Vn:k(e,t,n,o);break;case Bn:null==e?j(t,n,o,i):O(e,t,n,i);break;case In:H(e,t,n,o,r,s,i,a,c);break;default:1&p?T(e,t,n,o,r,s,i,a,c):6&p?U(e,t,n,o,r,s,i,a,c):64&p||128&p?u.process(e,t,n,o,r,s,i,a,c,ue):l("Invalid VNode type:",u,`(${typeof u})`)}null!=d&&r&&vn(d,e&&e.ref,s,t||e,!t)},S=(e,t,n,o)=>{if(null==e)s(t.el=p(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&h(n,t.children)}},k=(e,t,n,o)=>{null==e?s(t.el=f(t.children||""),n,o):t.el=e.el},j=(e,t,n,o)=>{[e.el,e.anchor]=w(e.children,t,n,o,e.el,e.anchor)},O=(e,t,n,o)=>{if(t.children!==e.children){const r=b(e.anchor);A(e),[t.el,t.anchor]=w(t.children,n,r,o)}else t.el=e.el,t.anchor=e.anchor},A=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=b(e),c(e),e=n;c(t)},T=(e,t,n,o,r,s,i,a,l)=>{i=i||"svg"===t.type,null==e?P(t,n,o,r,s,i,a,l):L(e,t,r,s,i,a,l)},P=(e,t,n,o,i,a,l,c)=>{let p,f;const{type:h,props:v,shapeFlag:g,transition:y,dirs:b}=e;if(p=e.el=d(e.type,a,v&&v.is,v),8&g?m(p,e.children):16&g&&N(e.children,p,null,o,i,a&&"foreignObject"!==h,l,c),b&&_t(e,null,o,"created"),v){for(const t in v)"value"===t||(0,r.isReservedProp)(t)||u(p,t,null,v[t],a,e.children,o,i,ae);"value"in v&&u(p,"value",null,v.value),(f=v.onVnodeBeforeMount)&&vo(f,o,e)}F(p,e,e.scopeId,l,o),Object.defineProperty(p,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(p,"__vueParentComponent",{value:o,enumerable:!1}),b&&_t(e,null,o,"beforeMount");const _=(!i||i&&!i.pendingBranch)&&y&&!y.persisted;_&&y.beforeEnter(p),s(p,t,n),((f=v&&v.onVnodeMounted)||_||b)&&jn((()=>{f&&vo(f,o,e),_&&y.enter(p),b&&_t(e,null,o,"mounted")}),i)},F=(e,t,n,o,r)=>{if(n&&_(e,n),o)for(let t=0;t<o.length;t++)_(e,o[t]);if(r){let n=r.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=fe(n.children)||n),t===n){const t=r.vnode;F(e,t,t.scopeId,t.slotScopeIds,r.parent)}}},N=(e,t,n,o,r,s,i,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?fo(e[c]):po(e[c]);x(null,l,t,n,o,r,s,i,a)}},L=(e,t,n,o,s,i,a)=>{const l=t.el=e.el;let{patchFlag:c,dynamicChildren:d,dirs:p}=t;c|=16&e.patchFlag;const f=e.props||r.EMPTY_OBJ,h=t.props||r.EMPTY_OBJ;let v;n&&An(n,!1),(v=h.onVnodeBeforeUpdate)&&vo(v,n,t,e),p&&_t(t,e,n,"beforeUpdate"),n&&An(n,!0),$&&(c=0,a=!1,d=null);const g=s&&"foreignObject"!==t.type;if(d?(V(e.dynamicChildren,d,l,n,o,g,i),n&&n.type.__hmrId&&Tn(e,t)):a||X(e,t,l,null,n,o,g,i,!1),c>0){if(16&c)B(l,t,f,h,n,o,s);else if(2&c&&f.class!==h.class&&u(l,"class",null,h.class,s),4&c&&u(l,"style",f.style,h.style,s),8&c){const r=t.dynamicProps;for(let t=0;t<r.length;t++){const i=r[t],a=f[i],c=h[i];c===a&&"value"!==i||u(l,i,a,c,s,e.children,n,o,ae)}}1&c&&e.children!==t.children&&m(l,t.children)}else a||null!=d||B(l,t,f,h,n,o,s);((v=h.onVnodeUpdated)||p)&&jn((()=>{v&&vo(v,n,t,e),p&&_t(t,e,n,"updated")}),o)},V=(e,t,n,o,r,s,i)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===In||!Xn(l,c)||70&l.shapeFlag)?v(l.el):n;x(l,c,u,null,o,r,s,i,!0)}},B=(e,t,n,o,s,i,a)=>{if(n!==o){if(n!==r.EMPTY_OBJ)for(const l in n)(0,r.isReservedProp)(l)||l in o||u(e,l,n[l],null,a,t.children,s,i,ae);for(const l in o){if((0,r.isReservedProp)(l))continue;const c=o[l],d=n[l];c!==d&&"value"!==l&&u(e,l,d,c,a,t.children,s,i,ae)}"value"in o&&u(e,"value",n.value,o.value)}},H=(e,t,n,o,r,i,a,l,c)=>{const u=t.el=e?e.el:p(""),d=t.anchor=e?e.anchor:p("");let{patchFlag:f,dynamicChildren:h,slotScopeIds:m}=t;($||2048&f)&&(f=0,c=!1,h=null),m&&(l=l?l.concat(m):m),null==e?(s(u,n,o),s(d,n,o),N(t.children,n,d,r,i,a,l,c)):f>0&&64&f&&h&&e.dynamicChildren?(V(e.dynamicChildren,h,n,r,i,a,l),r&&r.type.__hmrId?Tn(e,t):(null!=t.key||r&&t===r.subTree)&&Tn(e,t,!0)):X(e,t,n,d,r,i,a,l,c)},U=(e,t,n,o,r,s,i,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?r.ctx.activate(t,n,o,i,l):z(t,n,o,r,s,i,l):q(e,t,l)},z=(e,t,n,o,r,s,l)=>{const c=e.component=bo(e,o,r);if(c.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=M.get(t);n||(I(t,e.type),n=M.get(t)),n.instances.add(e)}(c),i(e),Sn(c,"mount"),Qe(e)&&(c.ctx.renderer=ue),Sn(c,"init"),Ao(c),kn(c,"init"),c.asyncDep){if(r&&r.registerDep(c,J),!e.el){const e=c.subTree=ro(Vn);k(null,e,t,n)}}else J(c,e,t,n,r,s,l),a(),kn(c,"mount")},q=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:r,component:s}=e,{props:i,children:a,patchFlag:l}=t,c=s.emitsOptions;if((r||a)&&$)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!r&&!a||a&&a.$stable)||o!==i&&(o?!i||ge(o,i,c):!!i);if(1024&l)return!0;if(16&l)return o?ge(o,i,c):!!i;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==o[n]&&!te(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return i(t),Q(o,t,n),void a();o.next=t,function(e){const t=g.indexOf(e);t>y&&g.splice(t,1)}(o.update),o.update()}else t.el=e.el,o.vnode=t},J=(e,t,n,s,l,c,u)=>{const d=e.effect=new o.ReactiveEffect((()=>{if(e.isMounted){let t,{next:n,bu:o,u:s,parent:d,vnode:p}=e,f=n;i(n||e.vnode),An(e,!1),n?(n.el=p.el,Q(e,n,u)):n=p,o&&(0,r.invokeArrayFns)(o),(t=n.props&&n.props.onVnodeBeforeUpdate)&&vo(t,d,n,p),An(e,!0),Sn(e,"render");const h=de(e);kn(e,"render");const m=e.subTree;e.subTree=h,Sn(e,"patch"),x(m,h,v(m.el),le(m),e,l,c),kn(e,"patch"),n.el=h.el,null===f&&ye(e,h.el),s&&jn(s,l),(t=n.props&&n.props.onVnodeUpdated)&&jn((()=>vo(t,d,n,p)),l),Y(e),a()}else{let o;const{el:i,props:a}=t,{bm:u,m:d,parent:p}=e,f=We(t);if(An(e,!1),u&&(0,r.invokeArrayFns)(u),!f&&(o=a&&a.onVnodeBeforeMount)&&vo(o,p,t),An(e,!0),i&&he){const n=()=>{Sn(e,"render"),e.subTree=de(e),kn(e,"render"),Sn(e,"hydrate"),he(i,e.subTree,e,l,null),kn(e,"hydrate")};f?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{Sn(e,"render");const o=e.subTree=de(e);kn(e,"render"),Sn(e,"patch"),x(null,o,n,s,e,l,c),kn(e,"patch"),t.el=o.el}if(d&&jn(d,l),!f&&(o=a&&a.onVnodeMounted)){const e=t;jn((()=>vo(o,p,e)),l)}(256&t.shapeFlag||p&&We(p.vnode)&&256&p.vnode.shapeFlag)&&e.a&&jn(e.a,l),e.isMounted=!0,K(e),t=n=s=null}}),(()=>C(p)),e.scope),p=e.update=()=>d.run();p.id=e.uid,An(e,!0),d.onTrack=e.rtc?t=>(0,r.invokeArrayFns)(e.rtc,t):void 0,d.onTrigger=e.rtg?t=>(0,r.invokeArrayFns)(e.rtg,t):void 0,p.ownerInstance=e,p()},Q=(e,t,n)=>{t.component=e;const s=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,s){const{props:i,attrs:a,vnode:{patchFlag:l}}=e,c=(0,o.toRaw)(i),[u]=e.propsOptions;let d=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(s||l>0)||16&l){let o;Wt(e,t,i,a)&&(d=!0);for(const s in c)t&&((0,r.hasOwn)(t,s)||(o=(0,r.hyphenate)(s))!==s&&(0,r.hasOwn)(t,o))||(u?!n||void 0===n[s]&&void 0===n[o]||(i[s]=qt(u,c,s,void 0,e,!0)):delete i[s]);if(a!==c)for(const e in a)t&&(0,r.hasOwn)(t,e)||(delete a[e],d=!0)}else if(8&l){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let s=n[o];if(te(e.emitsOptions,s))continue;const l=t[s];if(u)if((0,r.hasOwn)(a,s))l!==a[s]&&(a[s]=l,d=!0);else{const t=(0,r.camelize)(s);i[t]=qt(u,c,t,l,e,!1)}else l!==a[s]&&(a[s]=l,d=!0)}}d&&(0,o.trigger)(e,"set","$attrs"),tn(t||{},i,e)}(e,t.props,s,n),((e,t,n)=>{const{vnode:o,slots:s}=e;let i=!0,a=r.EMPTY_OBJ;if(32&o.shapeFlag){const e=t._;e?$?(0,r.extend)(s,t):n&&1===e?i=!1:((0,r.extend)(s,t),n||1!==e||delete s._):(i=!t.$stable,dn(t,s)),a=t}else t&&(pn(e,t),a={default:1});if(i)for(const e in s)ln(e)||e in a||delete s[e]})(e,t.children,n),(0,o.pauseTracking)(),E(),(0,o.resetTracking)()},X=(e,t,n,o,r,s,i,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void ee(c,d,n,o,r,s,i,a,l);if(256&p)return void Z(c,d,n,o,r,s,i,a,l)}8&f?(16&u&&ae(c,r,s),d!==c&&m(n,d)):16&u?16&f?ee(c,d,n,o,r,s,i,a,l):ae(c,r,s,!0):(8&u&&m(n,""),16&f&&N(d,n,o,r,s,i,a,l))},Z=(e,t,n,o,s,i,a,l,c)=>{e=e||r.EMPTY_ARR,t=t||r.EMPTY_ARR;const u=e.length,d=t.length,p=Math.min(u,d);let f;for(f=0;f<p;f++){const o=t[f]=c?fo(t[f]):po(t[f]);x(e[f],o,n,null,s,i,a,l,c)}u>d?ae(e,s,i,!0,!1,p):N(t,n,o,s,i,a,l,c,p)},ee=(e,t,n,o,s,i,a,c,u)=>{let d=0;const p=t.length;let f=e.length-1,h=p-1;for(;d<=f&&d<=h;){const o=e[d],r=t[d]=u?fo(t[d]):po(t[d]);if(!Xn(o,r))break;x(o,r,n,null,s,i,a,c,u),d++}for(;d<=f&&d<=h;){const o=e[f],r=t[h]=u?fo(t[h]):po(t[h]);if(!Xn(o,r))break;x(o,r,n,null,s,i,a,c,u),f--,h--}if(d>f){if(d<=h){const e=h+1,r=e<p?t[e].el:o;for(;d<=h;)x(null,t[d]=u?fo(t[d]):po(t[d]),n,r,s,i,a,c,u),d++}}else if(d>h)for(;d<=f;)oe(e[d],s,i,!0),d++;else{const m=d,v=d,g=new Map;for(d=v;d<=h;d++){const e=t[d]=u?fo(t[d]):po(t[d]);null!=e.key&&(g.has(e.key)&&l("Duplicate keys found during update:",JSON.stringify(e.key),"Make sure keys are unique."),g.set(e.key,d))}let y,b=0;const _=h-v+1;let w=!1,S=0;const k=new Array(_);for(d=0;d<_;d++)k[d]=0;for(d=m;d<=f;d++){const o=e[d];if(b>=_){oe(o,s,i,!0);continue}let r;if(null!=o.key)r=g.get(o.key);else for(y=v;y<=h;y++)if(0===k[y-v]&&Xn(o,t[y])){r=y;break}void 0===r?oe(o,s,i,!0):(k[r-v]=d+1,r>=S?S=r:w=!0,x(o,t[r],n,null,s,i,a,c,u),b++)}const C=w?function(e){const t=e.slice(),n=[0];let o,r,s,i,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(r=n[n.length-1],e[r]<l){t[o]=r,n.push(o);continue}for(s=0,i=n.length-1;s<i;)a=s+i>>1,e[n[a]]<l?s=a+1:i=a;l<e[n[s]]&&(s>0&&(t[o]=n[s-1]),n[s]=o)}}for(s=n.length,i=n[s-1];s-- >0;)n[s]=i,i=t[i];return n}(k):r.EMPTY_ARR;for(y=C.length-1,d=_-1;d>=0;d--){const e=v+d,r=t[e],l=e+1<p?t[e+1].el:o;0===k[d]?x(null,r,n,l,s,i,a,c,u):w&&(y<0||d!==C[y]?ne(r,n,l,2):y--)}}},ne=(e,t,n,o,r=null)=>{const{el:i,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)ne(e.component.subTree,t,n,o);else if(128&u)e.suspense.move(t,n,o);else if(64&u)a.move(e,t,n,ue);else if(a!==In)if(a!==Bn)if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(i),s(i,t,n),jn((()=>l.enter(i)),r);else{const{leave:e,delayLeave:o,afterLeave:r}=l,a=()=>s(i,t,n),c=()=>{e(i,(()=>{a(),r&&r()}))};o?o(i,a,c):c()}else s(i,t,n);else(({el:e,anchor:t},n,o)=>{let r;for(;e&&e!==t;)r=b(e),s(e,n,o),e=r;s(t,n,o)})(e,t,n);else{s(i,t,n);for(let e=0;e<c.length;e++)ne(c[e],t,n,o);s(e.anchor,t,n)}},oe=(e,t,n,o=!1,r=!1)=>{const{type:s,props:i,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=a&&vn(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const f=1&u&&p,h=!We(e);let m;if(h&&(m=i&&i.onVnodeBeforeUnmount)&&vo(m,t,e),6&u)ie(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);f&&_t(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,r,ue,o):c&&(s!==In||d>0&&64&d)?ae(c,t,n,!1,!0):(s===In&&384&d||!r&&16&u)&&ae(l,t,n),o&&re(e)}(h&&(m=i&&i.onVnodeUnmounted)||f)&&jn((()=>{m&&vo(m,t,e),f&&_t(e,null,t,"unmounted")}),n)},re=e=>{const{type:t,el:n,anchor:o,transition:r}=e;if(t===In)return void(e.patchFlag>0&&2048&e.patchFlag&&r&&!r.persisted?e.children.forEach((e=>{e.type===Vn?c(e.el):re(e)})):se(n,o));if(t===Bn)return void A(e);const s=()=>{c(n),r&&!r.persisted&&r.afterLeave&&r.afterLeave()};if(1&e.shapeFlag&&r&&!r.persisted){const{leave:t,delayLeave:o}=r,i=()=>t(n,s);o?o(e.el,s,i):i()}else s()},se=(e,t)=>{let n;for(;e!==t;)n=b(e),c(e),e=n;c(t)},ie=(e,t,n)=>{e.type.__hmrId&&function(e){M.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:s,update:i,subTree:a,um:l}=e;var c;o&&(0,r.invokeArrayFns)(o),s.stop(),i&&(i.active=!1,oe(a,e,t,n)),l&&jn(l,t),jn((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),c=e,D&&"function"==typeof D.cleanupBuffer&&!D.cleanupBuffer(c)&&W(c)},ae=(e,t,n,o=!1,r=!1,s=0)=>{for(let i=s;i<e.length;i++)oe(e[i],t,n,o,r)},le=e=>6&e.shapeFlag?le(e.component.subTree):128&e.shapeFlag?e.suspense.next():b(e.anchor||e.el),ce=(e,t,n)=>{null==e?t._vnode&&oe(t._vnode,null,null,!0):x(t._vnode||null,e,t,null,null,null,n),E(),R(),t._vnode=e},ue={p:x,um:oe,m:ne,r:re,mt:z,mc:N,pc:X,pbc:V,n:le,o:e};let pe,he;return t&&([pe,he]=t(ue)),{render:ce,hydrate:pe,createApp:mn(ce,pe)}}function An({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function Tn(e,t,n=!1){const o=e.children,s=t.children;if((0,r.isArray)(o)&&(0,r.isArray)(s))for(let e=0;e<o.length;e++){const t=o[e];let r=s[e];1&r.shapeFlag&&!r.dynamicChildren&&((r.patchFlag<=0||32===r.patchFlag)&&(r=s[e]=fo(s[e]),r.el=t.el),n||Tn(t,r)),r.type!==Vn||r.el||(r.el=t.el)}}const Pn=e=>e&&(e.disabled||""===e.disabled),Fn=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,$n=(e,t)=>{const n=e&&e.to;if((0,r.isString)(n)){if(t){const e=t(n);return e||l(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),e}return l("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"),null}return n||Pn(e)||l(`Invalid Teleport target: ${n}`),n};function Nn(e,t,n,{o:{insert:o},m:r},s=2){0===s&&o(e.targetAnchor,t,n);const{el:i,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===s;if(d&&o(i,t,n),(!d||Pn(u))&&16&l)for(let e=0;e<c.length;e++)r(c[e],t,n,2);d&&o(a,t,n)}const Mn={__isTeleport:!0,process(e,t,n,o,r,s,i,a,c,u){const{mc:d,pc:p,pbc:f,o:{insert:h,querySelector:m,createText:v,createComment:g}}=u,y=Pn(t.props);let{shapeFlag:b,children:_,dynamicChildren:w}=t;if($&&(c=!1,w=null),null==e){const e=t.el=g("teleport start"),u=t.anchor=g("teleport end");h(e,n,o),h(u,n,o);const p=t.target=$n(t.props,m),f=t.targetAnchor=v("");p?(h(f,p),i=i||Fn(p)):y||l("Invalid Teleport target on mount:",p,`(${typeof p})`);const w=(e,t)=>{16&b&&d(_,e,t,r,s,i,a,c)};y?w(n,u):p&&w(p,f)}else{t.el=e.el;const o=t.anchor=e.anchor,d=t.target=e.target,h=t.targetAnchor=e.targetAnchor,v=Pn(e.props),g=v?n:d,b=v?o:h;if(i=i||Fn(d),w?(f(e.dynamicChildren,w,g,r,s,i,a),Tn(e,t,!0)):c||p(e,t,g,b,r,s,i,a,!1),y)v||Nn(t,n,o,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=$n(t.props,m);e?Nn(t,e,null,u,0):l("Invalid Teleport target on update:",d,`(${typeof d})`)}else v&&Nn(t,d,h,u,1)}},remove(e,t,n,o,{um:r,o:{remove:s}},i){const{shapeFlag:a,children:l,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!Pn(p))&&(s(c),16&a))for(let e=0;e<l.length;e++){const o=l[e];r(o,t,n,!0,!!o.dynamicChildren)}},move:Nn,hydrate:function(e,t,n,o,r,s,{o:{nextSibling:i,parentNode:a,querySelector:l}},c){const u=t.target=$n(t.props,l);if(u){const l=u._lpa||u.firstChild;if(16&t.shapeFlag)if(Pn(t.props))t.anchor=c(i(e),t,a(e),n,o,r,s),t.targetAnchor=l;else{t.anchor=i(e);let a=l;for(;a;)if(a=i(a),a&&8===a.nodeType&&"teleport anchor"===a.data){t.targetAnchor=a,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(l,t,u,n,o,r,s)}}return t.anchor&&i(t.anchor)}},In=Symbol("Fragment"),Ln=Symbol("Text"),Vn=Symbol("Comment"),Bn=Symbol("Static"),Dn=[];let Hn=null;function Un(e=!1){Dn.push(Hn=e?null:[])}function zn(){Dn.pop(),Hn=Dn[Dn.length-1]||null}let Gn,Kn=1;function Yn(e){Kn+=e}function Wn(e){return e.dynamicChildren=Kn>0?Hn||r.EMPTY_ARR:null,zn(),Kn>0&&Hn&&Hn.push(e),e}function qn(e,t,n,o,r,s){return Wn(oo(e,t,n,o,r,s,!0))}function Jn(e,t,n,o,r){return Wn(ro(e,t,n,o,r,!0))}function Qn(e){return!!e&&!0===e.__v_isVNode}function Xn(e,t){return!(6&t.shapeFlag&&N.has(t.type))&&e.type===t.type&&e.key===t.key}function Zn(e){Gn=e}const eo="__vInternal",to=({key:e})=>null!=e?e:null,no=({ref:e,ref_key:t,ref_for:n})=>null!=e?(0,r.isString)(e)||(0,o.isRef)(e)||(0,r.isFunction)(e)?{i:ne,r:e,k:t,f:!!n}:e:null;function oo(e,t=null,n=null,o=0,s=null,i=(e===In?0:1),a=!1,c=!1){const u={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&to(t),ref:t&&no(t),scopeId:oe,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:o,dynamicProps:s,dynamicChildren:null,appContext:null};return c?(ho(u,n),128&i&&e.normalize(u)):n&&(u.shapeFlag|=(0,r.isString)(n)?8:16),u.key!=u.key&&l("VNode created with invalid key (NaN). VNode type:",u.type),Kn>0&&!a&&Hn&&(u.patchFlag>0||6&i)&&32!==u.patchFlag&&Hn.push(u),u}const ro=(...e)=>function(e,t=null,n=null,s=0,i=null,a=!1){if(e&&e!==St||(e||l(`Invalid vnode type when creating vnode: ${e}.`),e=Vn),Qn(e)){const o=io(e,t,!0);return n&&ho(o,n),Kn>0&&!a&&Hn&&(6&o.shapeFlag?Hn[Hn.indexOf(e)]=o:Hn.push(o)),o.patchFlag|=-2,o}if(Bo(e)&&(e=e.__vccOpts),t){t=so(t);let{class:e,style:n}=t;e&&!(0,r.isString)(e)&&(t.class=(0,r.normalizeClass)(e)),(0,r.isObject)(n)&&((0,o.isProxy)(n)&&!(0,r.isArray)(n)&&(n=(0,r.extend)({},n)),t.style=(0,r.normalizeStyle)(n))}const c=(0,r.isString)(e)?1:be(e)?128:(e=>e.__isTeleport)(e)?64:(0,r.isObject)(e)?4:(0,r.isFunction)(e)?2:0;return 4&c&&(0,o.isProxy)(e)&&l("Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.","\nComponent that was made reactive: ",e=(0,o.toRaw)(e)),oo(e,t,n,s,i,c,a,!0)}(...Gn?Gn(e,ne):e);function so(e){return e?(0,o.isProxy)(e)||eo in e?(0,r.extend)({},e):e:null}function io(e,t,n=!1){const{props:o,ref:s,patchFlag:i,children:a}=e,l=t?mo(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&to(l),ref:t&&t.ref?n&&s?(0,r.isArray)(s)?s.concat(no(t)):[s,no(t)]:no(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===i&&(0,r.isArray)(a)?a.map(ao):a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==In?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&io(e.ssContent),ssFallback:e.ssFallback&&io(e.ssFallback),el:e.el,anchor:e.anchor}}function ao(e){const t=io(e);return(0,r.isArray)(e.children)&&(t.children=e.children.map(ao)),t}function lo(e=" ",t=0){return ro(Ln,null,e,t)}function co(e,t){const n=ro(Bn,null,e);return n.staticCount=t,n}function uo(e="",t=!1){return t?(Un(),Jn(Vn,null,e)):ro(Vn,null,e)}function po(e){return null==e||"boolean"==typeof e?ro(Vn):(0,r.isArray)(e)?ro(In,null,e.slice()):"object"==typeof e?fo(e):ro(Ln,null,String(e))}function fo(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:io(e)}function ho(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if((0,r.isArray)(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),ho(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||eo in t?3===o&&ne&&(1===ne.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ne}}else(0,r.isFunction)(t)?(t={default:t,_ctx:ne},n=32):(t=String(t),64&o?(n=16,t=[lo(t)]):n=8);e.children=t,e.shapeFlag|=n}function mo(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=(0,r.normalizeClass)([t.class,o.class]));else if("style"===e)t.style=(0,r.normalizeStyle)([t.style,o.style]);else if((0,r.isOn)(e)){const n=t[e],s=o[e];!s||n===s||(0,r.isArray)(n)&&n.includes(s)||(t[e]=n?[].concat(n,s):s)}else""!==e&&(t[e]=o[e])}return t}function vo(e,t,n,o=null){f(e,t,7,[n,o])}const go=fn();let yo=0;function bo(e,t,n){const s=e.type,i=(t?t.appContext:e.appContext)||go,a={uid:yo++,vnode:e,type:s,parent:t,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new o.EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jt(s,i),emitsOptions:ee(s,i),emit:null,emitted:null,propsDefaults:r.EMPTY_OBJ,inheritAttrs:s.inheritAttrs,ctx:r.EMPTY_OBJ,data:r.EMPTY_OBJ,props:r.EMPTY_OBJ,attrs:r.EMPTY_OBJ,slots:r.EMPTY_OBJ,refs:r.EMPTY_OBJ,setupState:r.EMPTY_OBJ,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys($t).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>$t[n](e),set:r.NOOP})})),t}(a),a.root=t?t.root:a,a.emit=Z.bind(null,a),e.ce&&e.ce(a),a}let _o=null;const wo=()=>_o||ne,xo=e=>{_o=e,e.scope.on()},So=()=>{_o&&_o.scope.off(),_o=null},ko=(0,r.makeMap)("slot,component");function Co(e,t){const n=t.isNativeTag||r.NO;(ko(e)||n(e))&&l("Do not use built-in or reserved HTML elements as component id: "+e)}function jo(e){return 4&e.vnode.shapeFlag}let Oo,Eo,Ro=!1;function Ao(e,t=!1){Ro=t;const{props:n,children:s}=e.vnode,i=jo(e);!function(e,t,n,s=!1){const i={},a={};(0,r.def)(a,eo,1),e.propsDefaults=Object.create(null),Wt(e,t,i,a);for(const t in e.propsOptions[0])t in i||(i[t]=void 0);tn(t||{},i,e),n?e.props=s?i:(0,o.shallowReactive)(i):e.type.props?e.props=i:e.props=a,e.attrs=a}(e,n,i,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=(0,o.toRaw)(t),(0,r.def)(t,"_",n)):dn(t,e.slots={})}else e.slots={},t&&pn(e,t);(0,r.def)(e.slots,eo,1)})(e,s);const a=i?function(e,t){var n;const s=e.type;if(s.name&&Co(s.name,e.appContext.config),s.components){const t=Object.keys(s.components);for(let n=0;n<t.length;n++)Co(t[n],e.appContext.config)}if(s.directives){const e=Object.keys(s.directives);for(let t=0;t<e.length;t++)yt(e[t])}s.compilerOptions&&Fo()&&l('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.'),e.accessCache=Object.create(null),e.proxy=(0,o.markRaw)(new Proxy(e.ctx,Mt)),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:r.NOOP})}))}(e);const{setup:i}=s;if(i){const a=e.setupContext=i.length>1?No(e):null;xo(e),(0,o.pauseTracking)();const c=p(i,e,0,[(0,o.shallowReadonly)(e.props),a]);if((0,o.resetTracking)(),So(),(0,r.isPromise)(c)){if(c.then(So,So),t)return c.then((n=>{To(e,n,t)})).catch((t=>{h(t,e,0)}));e.asyncDep=c,e.suspense||l(`Component <${null!==(n=s.name)&&void 0!==n?n:"Anonymous"}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}else To(e,c,t)}else $o(e,t)}(e,t):void 0;return Ro=!1,a}function To(e,t,n){(0,r.isFunction)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,r.isObject)(t)?(Qn(t)&&l("setup() should not return VNodes directly - return a render function instead."),e.devtoolsRawSetupState=t,e.setupState=(0,o.proxyRefs)(t),function(e){const{ctx:t,setupState:n}=e;Object.keys((0,o.toRaw)(n)).forEach((e=>{if(!n.__isScriptSetup){if(Nt(e[0]))return void l(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:r.NOOP})}}))}(e)):void 0!==t&&l("setup() should return an object. Received: "+(null===t?"null":typeof t)),$o(e,n)}function Po(e){Oo=e,Eo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,It))}}const Fo=()=>!Oo;function $o(e,t,n){const s=e.type;if(!e.render){if(!t&&Oo&&!s.render){const t=s.template||Dt(e).template;if(t){Sn(e,"compile");const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:i,compilerOptions:a}=s,l=(0,r.extend)((0,r.extend)({isCustomElement:n,delimiters:i},o),a);s.render=Oo(t,l),kn(e,"compile")}}e.render=s.render||r.NOOP,Eo&&Eo(e)}__VUE_OPTIONS_API__&&(xo(e),(0,o.pauseTracking)(),function(e){const t=Dt(e),n=e.proxy,s=e.ctx;Lt=!1,t.beforeCreate&&Vt(t.beforeCreate,e,"bc");const{data:i,computed:a,methods:c,watch:u,provide:d,inject:p,created:f,beforeMount:h,mounted:m,beforeUpdate:v,updated:g,activated:y,deactivated:b,beforeDestroy:_,beforeUnmount:w,destroyed:x,unmounted:S,render:k,renderTracked:C,renderTriggered:j,errorCaptured:O,serverPrefetch:E,expose:R,inheritAttrs:A,components:T,directives:P,filters:F}=t,$=function(){const e=Object.create(null);return(t,n)=>{e[n]?l(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)$("Props",e)}if(p&&function(e,t,n=r.NOOP,s=!1){(0,r.isArray)(e)&&(e=Gt(e));for(const i in e){const a=e[i];let c;c=(0,r.isObject)(a)?"default"in a?Ee(a.from||i,a.default,!0):Ee(a.from||i):Ee(a),(0,o.isRef)(c)?s?Object.defineProperty(t,i,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}):(l(`injected property "${i}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`),t[i]=c):t[i]=c,n("Inject",i)}}(p,s,$,e.appContext.config.unwrapInjectedRef),c)for(const e in c){const t=c[e];(0,r.isFunction)(t)?(Object.defineProperty(s,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),$("Methods",e)):l(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(i){(0,r.isFunction)(i)||l("The data option must be a function. Plain object usage is no longer supported.");const t=i.call(n,n);if((0,r.isPromise)(t)&&l("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),(0,r.isObject)(t)){e.data=(0,o.reactive)(t);for(const e in t)$("Data",e),Nt(e[0])||Object.defineProperty(s,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:r.NOOP})}else l("data() should return an object.")}if(Lt=!0,a)for(const e in a){const t=a[e],o=(0,r.isFunction)(t)?t.bind(n,n):(0,r.isFunction)(t.get)?t.get.bind(n,n):r.NOOP;o===r.NOOP&&l(`Computed property "${e}" has no getter.`);const i=!(0,r.isFunction)(t)&&(0,r.isFunction)(t.set)?t.set.bind(n):()=>{l(`Write operation failed: computed property "${e}" is readonly.`)},c=Do({get:o,set:i});Object.defineProperty(s,e,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}),$("Computed",e)}if(u)for(const e in u)Bt(u[e],s,n,e);if(d){const e=(0,r.isFunction)(d)?d.call(n):d;Reflect.ownKeys(e).forEach((t=>{Oe(t,e[t])}))}function N(e,t){(0,r.isArray)(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(f&&Vt(f,e,"c"),N(lt,h),N(ct,m),N(ut,v),N(dt,g),N(et,y),N(tt,b),N(gt,O),N(vt,C),N(mt,j),N(pt,w),N(ft,S),N(ht,E),(0,r.isArray)(R))if(R.length){const t=e.exposed||(e.exposed={});R.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});k&&e.render===r.NOOP&&(e.render=k),null!=A&&(e.inheritAttrs=A),T&&(e.components=T),P&&(e.directives=P)}(e),(0,o.resetTracking)(),So()),s.render||e.render!==r.NOOP||t||(!Oo&&s.template?l('Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".'):l("Component is missing template or render function."))}function No(e){let t;return Object.freeze({get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(ue(),(0,o.track)(e,"get","$attrs"),t[n]),set:()=>(l("setupContext.attrs is readonly."),!1),deleteProperty:()=>(l("setupContext.attrs is readonly."),!1)})}(e))},get slots(){return(0,o.shallowReadonly)(e.slots)},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t=>{e.exposed&&l("expose() should be called only once per setup()."),e.exposed=t||{}}})}function Mo(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,o.proxyRefs)((0,o.markRaw)(e.exposed)),{get:(t,n)=>n in t?t[n]:n in $t?$t[n](e):void 0}))}const Io=/(?:^|[-_])(\w)/g;function Lo(e,t=!0){return(0,r.isFunction)(e)?e.displayName||e.name:e.name||t&&e.__name}function Vo(e,t,n=!1){let o=Lo(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?o.replace(Io,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}function Bo(e){return(0,r.isFunction)(e)&&"__vccOpts"in e}const Do=(e,t)=>(0,o.computed)(e,t,Ro),Ho=e=>l(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function Uo(){return Ho("defineProps"),null}function zo(){return Ho("defineEmits"),null}function Go(e){Ho("defineExpose")}function Ko(e,t){return Ho("withDefaults"),null}function Yo(){return qo().slots}function Wo(){return qo().attrs}function qo(){const e=wo();return e||l("useContext() called without active instance."),e.setupContext||(e.setupContext=No(e))}function Jo(e,t){const n=(0,r.isArray)(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const o=n[e];o?(0,r.isArray)(o)||(0,r.isFunction)(o)?n[e]={type:o,default:t[e]}:o.default=t[e]:null===o?n[e]={default:t[e]}:l(`props default key "${e}" has no corresponding declaration.`)}return n}function Qo(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function Xo(e){const t=wo();t||l("withAsyncContext called without active current instance. This is likely a bug.");let n=e();return So(),(0,r.isPromise)(n)&&(n=n.catch((e=>{throw xo(t),e}))),[n,()=>xo(t)]}function Zo(e,t,n){const o=arguments.length;return 2===o?(0,r.isObject)(t)&&!(0,r.isArray)(t)?Qn(t)?ro(e,null,[t]):ro(e,t):ro(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Qn(n)&&(n=[n]),ro(e,t,n))}const er=Symbol("ssrContext"),tr=()=>{{const e=Ee(er);return e||l("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function nr(e){return!(!e||!e.__v_isShallow)}function or(){if("undefined"==typeof window)return;const e={style:"color:#3ba776"},t={style:"color:#0b1bc9"},n={style:"color:#b62e24"},s={style:"color:#9d288c"},i={header:t=>{return(0,r.isObject)(t)?t.__isVue?["div",e,"VueInstance"]:(0,o.isRef)(t)?["div",{},["span",e,(n=t,nr(n)?"ShallowRef":n.effect?"ComputedRef":"Ref")],"<",c(t.value),">"]:(0,o.isReactive)(t)?["div",{},["span",e,nr(t)?"ShallowReactive":"Reactive"],"<",c(t),">"+((0,o.isReadonly)(t)?" (readonly)":"")]:(0,o.isReadonly)(t)?["div",{},["span",e,nr(t)?"ShallowReadonly":"Readonly"],"<",c(t),">"]:null:null;var n},hasBody:e=>e&&e.__isVue,body(e){if(e&&e.__isVue)return["div",{},...a(e.$)]}};function a(e){const t=[];e.type.props&&e.props&&t.push(l("props",(0,o.toRaw)(e.props))),e.setupState!==r.EMPTY_OBJ&&t.push(l("setup",e.setupState)),e.data!==r.EMPTY_OBJ&&t.push(l("data",(0,o.toRaw)(e.data)));const n=u(e,"computed");n&&t.push(l("computed",n));const i=u(e,"inject");return i&&t.push(l("injected",i)),t.push(["div",{},["span",{style:s.style+";opacity:0.66"},"$ (internal): "],["object",{object:e}]]),t}function l(e,t){return t=(0,r.extend)({},t),Object.keys(t).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},e],["div",{style:"padding-left:1.25em"},...Object.keys(t).map((e=>["div",{},["span",s,e+": "],c(t[e],!1)]))]]:["span",{}]}function c(e,i=!0){return"number"==typeof e?["span",t,e]:"string"==typeof e?["span",n,JSON.stringify(e)]:"boolean"==typeof e?["span",s,e]:(0,r.isObject)(e)?["object",{object:i?(0,o.toRaw)(e):e}]:["span",n,String(e)]}function u(e,t){const n=e.type;if((0,r.isFunction)(n))return;const o={};for(const r in e.ctx)d(n,r,t)&&(o[r]=e.ctx[r]);return o}function d(e,t,n){const o=e[n];return!!((0,r.isArray)(o)&&o.includes(t)||(0,r.isObject)(o)&&t in o)||!(!e.extends||!d(e.extends,t,n))||!(!e.mixins||!e.mixins.some((e=>d(e,t,n))))||void 0}window.devtoolsFormatters?window.devtoolsFormatters.push(i):window.devtoolsFormatters=[i]}function rr(e,t,n,o){const r=n[o];if(r&&sr(r,e))return r;const s=t();return s.memo=e.slice(),n[o]=s}function sr(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if((0,r.hasChanged)(n[e],t[e]))return!1;return Kn>0&&Hn&&Hn.push(e),!0}const ir="3.2.41",ar={createComponentInstance:bo,setupComponent:Ao,renderComponentRoot:de,setCurrentRenderingInstance:re,isVNode:Qn,normalizeVNode:po},lr=null,cr=null},"./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>r.BaseTransition,Comment:()=>r.Comment,EffectScope:()=>r.EffectScope,Fragment:()=>r.Fragment,KeepAlive:()=>r.KeepAlive,ReactiveEffect:()=>r.ReactiveEffect,Static:()=>r.Static,Suspense:()=>r.Suspense,Teleport:()=>r.Teleport,Text:()=>r.Text,Transition:()=>R,TransitionGroup:()=>Y,VueElement:()=>x,callWithAsyncErrorHandling:()=>r.callWithAsyncErrorHandling,callWithErrorHandling:()=>r.callWithErrorHandling,camelize:()=>r.camelize,capitalize:()=>r.capitalize,cloneVNode:()=>r.cloneVNode,compatUtils:()=>r.compatUtils,computed:()=>r.computed,createApp:()=>Ce,createBlock:()=>r.createBlock,createCommentVNode:()=>r.createCommentVNode,createElementBlock:()=>r.createElementBlock,createElementVNode:()=>r.createElementVNode,createHydrationRenderer:()=>r.createHydrationRenderer,createPropsRestProxy:()=>r.createPropsRestProxy,createRenderer:()=>r.createRenderer,createSSRApp:()=>je,createSlots:()=>r.createSlots,createStaticVNode:()=>r.createStaticVNode,createTextVNode:()=>r.createTextVNode,createVNode:()=>r.createVNode,customRef:()=>r.customRef,defineAsyncComponent:()=>r.defineAsyncComponent,defineComponent:()=>r.defineComponent,defineCustomElement:()=>b,defineEmits:()=>r.defineEmits,defineExpose:()=>r.defineExpose,defineProps:()=>r.defineProps,defineSSRCustomElement:()=>_,devtools:()=>r.devtools,effect:()=>r.effect,effectScope:()=>r.effectScope,getCurrentInstance:()=>r.getCurrentInstance,getCurrentScope:()=>r.getCurrentScope,getTransitionRawChildren:()=>r.getTransitionRawChildren,guardReactiveProps:()=>r.guardReactiveProps,h:()=>r.h,handleError:()=>r.handleError,hydrate:()=>ke,initCustomFormatter:()=>r.initCustomFormatter,initDirectivesForSSR:()=>Te,inject:()=>r.inject,isMemoSame:()=>r.isMemoSame,isProxy:()=>r.isProxy,isReactive:()=>r.isReactive,isReadonly:()=>r.isReadonly,isRef:()=>r.isRef,isRuntimeOnly:()=>r.isRuntimeOnly,isShallow:()=>r.isShallow,isVNode:()=>r.isVNode,markRaw:()=>r.markRaw,mergeDefaults:()=>r.mergeDefaults,mergeProps:()=>r.mergeProps,nextTick:()=>r.nextTick,normalizeClass:()=>r.normalizeClass,normalizeProps:()=>r.normalizeProps,normalizeStyle:()=>r.normalizeStyle,onActivated:()=>r.onActivated,onBeforeMount:()=>r.onBeforeMount,onBeforeUnmount:()=>r.onBeforeUnmount,onBeforeUpdate:()=>r.onBeforeUpdate,onDeactivated:()=>r.onDeactivated,onErrorCaptured:()=>r.onErrorCaptured,onMounted:()=>r.onMounted,onRenderTracked:()=>r.onRenderTracked,onRenderTriggered:()=>r.onRenderTriggered,onScopeDispose:()=>r.onScopeDispose,onServerPrefetch:()=>r.onServerPrefetch,onUnmounted:()=>r.onUnmounted,onUpdated:()=>r.onUpdated,openBlock:()=>r.openBlock,popScopeId:()=>r.popScopeId,provide:()=>r.provide,proxyRefs:()=>r.proxyRefs,pushScopeId:()=>r.pushScopeId,queuePostFlushCb:()=>r.queuePostFlushCb,reactive:()=>r.reactive,readonly:()=>r.readonly,ref:()=>r.ref,registerRuntimeCompiler:()=>r.registerRuntimeCompiler,render:()=>Se,renderList:()=>r.renderList,renderSlot:()=>r.renderSlot,resolveComponent:()=>r.resolveComponent,resolveDirective:()=>r.resolveDirective,resolveDynamicComponent:()=>r.resolveDynamicComponent,resolveFilter:()=>r.resolveFilter,resolveTransitionHooks:()=>r.resolveTransitionHooks,setBlockTracking:()=>r.setBlockTracking,setDevtoolsHook:()=>r.setDevtoolsHook,setTransitionHooks:()=>r.setTransitionHooks,shallowReactive:()=>r.shallowReactive,shallowReadonly:()=>r.shallowReadonly,shallowRef:()=>r.shallowRef,ssrContextKey:()=>r.ssrContextKey,ssrUtils:()=>r.ssrUtils,stop:()=>r.stop,toDisplayString:()=>r.toDisplayString,toHandlerKey:()=>r.toHandlerKey,toHandlers:()=>r.toHandlers,toRaw:()=>r.toRaw,toRef:()=>r.toRef,toRefs:()=>r.toRefs,transformVNodeArgs:()=>r.transformVNodeArgs,triggerRef:()=>r.triggerRef,unref:()=>r.unref,useAttrs:()=>r.useAttrs,useCssModule:()=>S,useCssVars:()=>k,useSSRContext:()=>r.useSSRContext,useSlots:()=>r.useSlots,useTransitionState:()=>r.useTransitionState,vModelCheckbox:()=>te,vModelDynamic:()=>le,vModelRadio:()=>oe,vModelSelect:()=>re,vModelText:()=>ee,vShow:()=>ve,version:()=>r.version,warn:()=>r.warn,watch:()=>r.watch,watchEffect:()=>r.watchEffect,watchPostEffect:()=>r.watchPostEffect,watchSyncEffect:()=>r.watchSyncEffect,withAsyncContext:()=>r.withAsyncContext,withCtx:()=>r.withCtx,withDefaults:()=>r.withDefaults,withDirectives:()=>r.withDirectives,withKeys:()=>me,withMemo:()=>r.withMemo,withModifiers:()=>fe,withScopeId:()=>r.withScopeId});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js"),r=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),s=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");const i="undefined"!=typeof document?document:null,a=i&&i.createElement("template"),l={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const r=t?i.createElementNS("http://www.w3.org/2000/svg",e):i.createElement(e,n?{is:n}:void 0);return"select"===e&&o&&null!=o.multiple&&r.setAttribute("multiple",o.multiple),r},createText:e=>i.createTextNode(e),createComment:e=>i.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>i.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,r,s){const i=n?n.previousSibling:t.lastChild;if(r&&(r===s||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),n),r!==s&&(r=r.nextSibling););else{a.innerHTML=o?`<svg>${e}</svg>`:e;const r=a.content;if(o){const e=r.firstChild;for(;e.firstChild;)r.appendChild(e.firstChild);r.removeChild(e)}t.insertBefore(r,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},c=/\s*!important$/;function u(e,t,n){if((0,o.isArray)(n))n.forEach((n=>u(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const r=function(e,t){const n=p[t];if(n)return n;let r=(0,o.camelize)(t);if("filter"!==r&&r in e)return p[t]=r;r=(0,o.capitalize)(r);for(let n=0;n<d.length;n++){const o=d[n]+r;if(o in e)return p[t]=o}return t}(e,t);c.test(n)?e.setProperty((0,o.hyphenate)(r),n.replace(c,""),"important"):e[r]=n}}const d=["Webkit","Moz","ms"],p={},f="http://www.w3.org/1999/xlink";function h(e,t,n,o){e.addEventListener(t,n,o)}const m=/(?:Once|Passive|Capture)$/;let v=0;const g=Promise.resolve(),y=/^on[a-z]/;function b(e,t){const n=(0,r.defineComponent)(e);class o extends x{constructor(e){super(n,e,t)}}return o.def=n,o}const _=e=>b(e,ke),w="undefined"!=typeof HTMLElement?HTMLElement:class{};class x extends w{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):(this.shadowRoot&&(0,r.warn)("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),this.attachShadow({mode:"open"}))}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,(0,r.nextTick)((()=>{this._connected||(Se(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,r=!(0,o.isArray)(t),s=t?r?Object.keys(t):t:[];let i;if(r)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=(0,o.toNumber)(this._props[e]),(i||(i=Object.create(null)))[e]=!0)}this._numberProps=i;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of s.map(o.camelize))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=(0,o.toNumber)(t)),this._setProp((0,o.camelize)(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,r=!0){t!==this._props[e]&&(this._props[e]=t,r&&this._instance&&this._update(),n&&(!0===t?this.setAttribute((0,o.hyphenate)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,o.hyphenate)(e),t+""):t||this.removeAttribute((0,o.hyphenate)(e))))}_update(){Se(this._createVNode(),this.shadowRoot)}_createVNode(){const e=(0,r.createVNode)(this._def,(0,o.extend)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this.shadowRoot.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._def.__asyncLoader||(this._instance=null,this._update())},e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof x){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t),(this._styles||(this._styles=[])).push(t)}))}}function S(e="$style"){{const t=(0,r.getCurrentInstance)();if(!t)return(0,r.warn)("useCssModule must be called inside setup()"),o.EMPTY_OBJ;const n=t.type.__cssModules;if(!n)return(0,r.warn)("Current instance does not have CSS modules injected."),o.EMPTY_OBJ;return n[e]||((0,r.warn)(`Current instance does not have CSS module named "${e}".`),o.EMPTY_OBJ)}}function k(e){const t=(0,r.getCurrentInstance)();if(!t)return void(0,r.warn)("useCssVars is called without current active component instance.");const n=()=>C(t.subTree,e(t.proxy));(0,r.watchPostEffect)(n),(0,r.onMounted)((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,r.onUnmounted)((()=>e.disconnect()))}))}function C(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{C(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)j(e.el,t);else if(e.type===r.Fragment)e.children.forEach((e=>C(e,t)));else if(e.type===r.Static){let{el:n,anchor:o}=e;for(;n&&(j(n,t),n!==o);)n=n.nextSibling}}function j(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const O="transition",E="animation",R=(e,{slots:t})=>(0,r.h)(r.BaseTransition,$(e),t);R.displayName="Transition";const A={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},T=R.props=(0,o.extend)({},r.BaseTransition.props,A),P=(e,t=[])=>{(0,o.isArray)(e)?e.forEach((e=>e(...t))):e&&e(...t)},F=e=>!!e&&((0,o.isArray)(e)?e.some((e=>e.length>1)):e.length>1);function $(e){const t={};for(const n in e)n in A||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:r,duration:s,enterFromClass:i=`${n}-enter-from`,enterActiveClass:a=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=i,appearActiveClass:u=a,appearToClass:d=l,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if((0,o.isObject)(e))return[N(e.enter),N(e.leave)];{const t=N(e);return[t,t]}}(s),v=m&&m[0],g=m&&m[1],{onBeforeEnter:y,onEnter:b,onEnterCancelled:_,onLeave:w,onLeaveCancelled:x,onBeforeAppear:S=y,onAppear:k=b,onAppearCancelled:C=_}=t,j=(e,t,n)=>{I(e,t?d:l),I(e,t?u:a),n&&n()},O=(e,t)=>{e._isLeaving=!1,I(e,p),I(e,h),I(e,f),t&&t()},E=e=>(t,n)=>{const o=e?k:b,s=()=>j(t,e,n);P(o,[t,s]),L((()=>{I(t,e?c:i),M(t,e?d:l),F(o)||B(t,r,v,s)}))};return(0,o.extend)(t,{onBeforeEnter(e){P(y,[e]),M(e,i),M(e,a)},onBeforeAppear(e){P(S,[e]),M(e,c),M(e,u)},onEnter:E(!1),onAppear:E(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>O(e,t);M(e,p),z(),M(e,f),L((()=>{e._isLeaving&&(I(e,p),M(e,h),F(w)||B(e,r,g,n))})),P(w,[e,n])},onEnterCancelled(e){j(e,!1),P(_,[e])},onAppearCancelled(e){j(e,!0),P(C,[e])},onLeaveCancelled(e){O(e),P(x,[e])}})}function N(e){const t=(0,o.toNumber)(e);return function(e){"number"!=typeof e?(0,r.warn)(`<transition> explicit duration is not a valid number - got ${JSON.stringify(e)}.`):isNaN(e)&&(0,r.warn)("<transition> explicit duration is NaN - the duration expression might be incorrect.")}(t),t}function M(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function I(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function L(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let V=0;function B(e,t,n,o){const r=e._endId=++V,s=()=>{r===e._endId&&o()};if(n)return setTimeout(s,n);const{type:i,timeout:a,propCount:l}=D(e,t);if(!i)return o();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,p)}function D(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),r=o("transitionDelay"),s=o("transitionDuration"),i=H(r,s),a=o("animationDelay"),l=o("animationDuration"),c=H(a,l);let u=null,d=0,p=0;return t===O?i>0&&(u=O,d=i,p=s.length):t===E?c>0&&(u=E,d=c,p=l.length):(d=Math.max(i,c),u=d>0?i>c?O:E:null,p=u?u===O?s.length:l.length:0),{type:u,timeout:d,propCount:p,hasTransform:u===O&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function H(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>U(t)+U(e[n]))))}function U(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function z(){return document.body.offsetHeight}const G=new WeakMap,K=new WeakMap,Y={name:"TransitionGroup",props:(0,o.extend)({},T,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=(0,r.getCurrentInstance)(),o=(0,r.useTransitionState)();let i,a;return(0,r.onUpdated)((()=>{if(!i.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const r=1===t.nodeType?t:t.parentNode;r.appendChild(o);const{hasTransform:s}=D(o);return r.removeChild(o),s}(i[0].el,n.vnode.el,t))return;i.forEach(W),i.forEach(q);const o=i.filter(J);z(),o.forEach((e=>{const n=e.el,o=n.style;M(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const r=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",r),n._moveCb=null,I(n,t))};n.addEventListener("transitionend",r)}))})),()=>{const l=(0,s.toRaw)(e),c=$(l);let u=l.tag||r.Fragment;i=a,a=t.default?(0,r.getTransitionRawChildren)(t.default()):[];for(let e=0;e<a.length;e++){const t=a[e];null!=t.key?(0,r.setTransitionHooks)(t,(0,r.resolveTransitionHooks)(t,c,o,n)):(0,r.warn)("<TransitionGroup> children must be keyed.")}if(i)for(let e=0;e<i.length;e++){const t=i[e];(0,r.setTransitionHooks)(t,(0,r.resolveTransitionHooks)(t,c,o,n)),G.set(t,t.el.getBoundingClientRect())}return(0,r.createVNode)(u,null,a)}}};function W(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function q(e){K.set(e,e.el.getBoundingClientRect())}function J(e){const t=G.get(e),n=K.get(e),o=t.left-n.left,r=t.top-n.top;if(o||r){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${r}px)`,t.transitionDuration="0s",e}}const Q=e=>{const t=e.props["onUpdate:modelValue"]||!1;return(0,o.isArray)(t)?e=>(0,o.invokeArrayFns)(t,e):t};function X(e){e.target.composing=!0}function Z(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ee={created(e,{modifiers:{lazy:t,trim:n,number:r}},s){e._assign=Q(s);const i=r||s.props&&"number"===s.props.type;h(e,t?"change":"input",(t=>{if(t.target.composing)return;let r=e.value;n&&(r=r.trim()),i&&(r=(0,o.toNumber)(r)),e._assign(r)})),n&&h(e,"change",(()=>{e.value=e.value.trim()})),t||(h(e,"compositionstart",X),h(e,"compositionend",Z),h(e,"change",Z))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:r,number:s}},i){if(e._assign=Q(i),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(r&&e.value.trim()===t)return;if((s||"number"===e.type)&&(0,o.toNumber)(e.value)===t)return}const a=null==t?"":t;e.value!==a&&(e.value=a)}},te={deep:!0,created(e,t,n){e._assign=Q(n),h(e,"change",(()=>{const t=e._modelValue,n=ie(e),r=e.checked,s=e._assign;if((0,o.isArray)(t)){const e=(0,o.looseIndexOf)(t,n),i=-1!==e;if(r&&!i)s(t.concat(n));else if(!r&&i){const n=[...t];n.splice(e,1),s(n)}}else if((0,o.isSet)(t)){const e=new Set(t);r?e.add(n):e.delete(n),s(e)}else s(ae(e,r))}))},mounted:ne,beforeUpdate(e,t,n){e._assign=Q(n),ne(e,t,n)}};function ne(e,{value:t,oldValue:n},r){e._modelValue=t,(0,o.isArray)(t)?e.checked=(0,o.looseIndexOf)(t,r.props.value)>-1:(0,o.isSet)(t)?e.checked=t.has(r.props.value):t!==n&&(e.checked=(0,o.looseEqual)(t,ae(e,!0)))}const oe={created(e,{value:t},n){e.checked=(0,o.looseEqual)(t,n.props.value),e._assign=Q(n),h(e,"change",(()=>{e._assign(ie(e))}))},beforeUpdate(e,{value:t,oldValue:n},r){e._assign=Q(r),t!==n&&(e.checked=(0,o.looseEqual)(t,r.props.value))}},re={deep:!0,created(e,{value:t,modifiers:{number:n}},r){const s=(0,o.isSet)(t);h(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?(0,o.toNumber)(ie(e)):ie(e)));e._assign(e.multiple?s?new Set(t):t:t[0])})),e._assign=Q(r)},mounted(e,{value:t}){se(e,t)},beforeUpdate(e,t,n){e._assign=Q(n)},updated(e,{value:t}){se(e,t)}};function se(e,t){const n=e.multiple;if(!n||(0,o.isArray)(t)||(0,o.isSet)(t)){for(let r=0,s=e.options.length;r<s;r++){const s=e.options[r],i=ie(s);if(n)(0,o.isArray)(t)?s.selected=(0,o.looseIndexOf)(t,i)>-1:s.selected=t.has(i);else if((0,o.looseEqual)(ie(s),t))return void(e.selectedIndex!==r&&(e.selectedIndex=r))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else(0,r.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function ie(e){return"_value"in e?e._value:e.value}function ae(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const le={created(e,t,n){ue(e,t,n,null,"created")},mounted(e,t,n){ue(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){ue(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){ue(e,t,n,o,"updated")}};function ce(e,t){switch(e){case"SELECT":return re;case"TEXTAREA":return ee;default:switch(t){case"checkbox":return te;case"radio":return oe;default:return ee}}}function ue(e,t,n,o,r){const s=ce(e.tagName,n.props&&n.props.type)[r];s&&s(e,t,n,o)}const de=["ctrl","shift","alt","meta"],pe={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>de.some((n=>e[`${n}Key`]&&!t.includes(n)))},fe=(e,t)=>(n,...o)=>{for(let e=0;e<t.length;e++){const o=pe[t[e]];if(o&&o(n,t))return}return e(n,...o)},he={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},me=(e,t)=>n=>{if(!("key"in n))return;const r=(0,o.hyphenate)(n.key);return t.some((e=>e===r||he[e]===r))?e(n):void 0},ve={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):ge(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),ge(e,!0),o.enter(e)):o.leave(e,(()=>{ge(e,!1)})):ge(e,t))},beforeUnmount(e,{value:t}){ge(e,t)}};function ge(e,t){e.style.display=t?e._vod:"none"}const ye=(0,o.extend)({patchProp:(e,t,n,s,i=!1,a,l,c,d)=>{"class"===t?function(e,t,n){const o=e._vtc;o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,s,i):"style"===t?function(e,t,n){const r=e.style,s=(0,o.isString)(n);if(n&&!s){for(const e in n)u(r,e,n[e]);if(t&&!(0,o.isString)(t))for(const e in t)null==n[e]&&u(r,e,"")}else{const o=r.display;s?t!==n&&(r.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(r.display=o)}}(e,n,s):(0,o.isOn)(t)?(0,o.isModelListener)(t)||function(e,t,n,s,i=null){const a=e._vei||(e._vei={}),l=a[t];if(s&&l)l.value=s;else{const[n,c]=function(e){let t;if(m.test(e)){let n;for(t={};n=e.match(m);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):(0,o.hyphenate)(e.slice(2)),t]}(t);if(s){const l=a[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();(0,r.callWithAsyncErrorHandling)(function(e,t){if((0,o.isArray)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=v||(g.then((()=>v=0)),v=Date.now()),n}(s,i);h(e,n,l,c)}else l&&(function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,l,c),a[t]=void 0)}}(e,t,0,s,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,r){return r?"innerHTML"===t||"textContent"===t||!!(t in e&&y.test(t)&&(0,o.isFunction)(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!y.test(t)||!(0,o.isString)(n))&&t in e))))}(e,t,s,i))?function(e,t,n,s,i,a,l){if("innerHTML"===t||"textContent"===t)return s&&l(s,i,a),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const o=null==n?"":n;return e.value===o&&"OPTION"!==e.tagName||(e.value=o),void(null==n&&e.removeAttribute(t))}let c=!1;if(""===n||null==n){const r=typeof e[t];"boolean"===r?n=(0,o.includeBooleanAttr)(n):null==n&&"string"===r?(n="",c=!0):"number"===r&&(n=0,c=!0)}try{e[t]=n}catch(o){c||(0,r.warn)(`Failed setting prop "${t}" on <${e.tagName.toLowerCase()}>: value ${n} is invalid.`,o)}c&&e.removeAttribute(t)}(e,t,s,a,l,c,d):("true-value"===t?e._trueValue=s:"false-value"===t&&(e._falseValue=s),function(e,t,n,r,s){if(r&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(f,t.slice(6,t.length)):e.setAttributeNS(f,t,n);else{const r=(0,o.isSpecialBooleanAttr)(t);null==n||r&&!(0,o.includeBooleanAttr)(n)?e.removeAttribute(t):e.setAttribute(t,r?"":n)}}(e,t,s,i))}},l);let be,_e=!1;function we(){return be||(be=(0,r.createRenderer)(ye))}function xe(){return be=_e?be:(0,r.createHydrationRenderer)(ye),_e=!0,be}const Se=(...e)=>{we().render(...e)},ke=(...e)=>{xe().hydrate(...e)},Ce=(...e)=>{const t=we().createApp(...e);Oe(t),Ee(t);const{mount:n}=t;return t.mount=e=>{const r=Re(e);if(!r)return;const s=t._component;(0,o.isFunction)(s)||s.render||s.template||(s.template=r.innerHTML),r.innerHTML="";const i=n(r,!1,r instanceof SVGElement);return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),i},t},je=(...e)=>{const t=xe().createApp(...e);Oe(t),Ee(t);const{mount:n}=t;return t.mount=e=>{const t=Re(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function Oe(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>(0,o.isHTMLTag)(e)||(0,o.isSVGTag)(e),writable:!1})}function Ee(e){if((0,r.isRuntimeOnly)()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get:()=>t,set(){(0,r.warn)("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,o='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom';Object.defineProperty(e.config,"compilerOptions",{get:()=>((0,r.warn)(o),n),set(){(0,r.warn)(o)}})}}function Re(e){if((0,o.isString)(e)){const t=document.querySelector(e);return t||(0,r.warn)(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&(0,r.warn)('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let Ae=!1;const Te=()=>{Ae||(Ae=!0,ee.getSSRProps=({value:e})=>({value:e}),oe.getSSRProps=({value:e},t)=>{if(t.props&&(0,o.looseEqual)(t.props.value,e))return{checked:!0}},te.getSSRProps=({value:e},t)=>{if((0,o.isArray)(e)){if(t.props&&(0,o.looseIndexOf)(e,t.props.value)>-1)return{checked:!0}}else if((0,o.isSet)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},le.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=ce(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},ve.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},"./node_modules/@vue/shared/dist/shared.esm-bundler.js":(e,t,n)=>{"use strict";function o(e,t){const n=Object.create(null),o=e.split(",");for(let e=0;e<o.length;e++)n[o[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.r(t),n.d(t,{EMPTY_ARR:()=>L,EMPTY_OBJ:()=>I,NO:()=>B,NOOP:()=>V,PatchFlagNames:()=>r,camelize:()=>pe,capitalize:()=>me,def:()=>be,escapeHtml:()=>A,escapeHtmlComment:()=>P,extend:()=>z,genPropsAccessExp:()=>ke,generateCodeFrame:()=>a,getGlobalThis:()=>xe,hasChanged:()=>ge,hasOwn:()=>Y,hyphenate:()=>he,includeBooleanAttr:()=>d,invokeArrayFns:()=>ye,isArray:()=>W,isBooleanAttr:()=>u,isBuiltInDirective:()=>ce,isDate:()=>Q,isFunction:()=>X,isGloballyWhitelisted:()=>i,isHTMLTag:()=>j,isIntegerKey:()=>ae,isKnownHtmlAttr:()=>g,isKnownSvgAttr:()=>y,isMap:()=>q,isModelListener:()=>U,isNoUnitNumericStyleProp:()=>v,isObject:()=>te,isOn:()=>H,isPlainObject:()=>ie,isPromise:()=>ne,isReservedProp:()=>le,isSSRSafeAttrName:()=>h,isSVGTag:()=>O,isSet:()=>J,isSpecialBooleanAttr:()=>c,isString:()=>Z,isSymbol:()=>ee,isVoidTag:()=>E,looseEqual:()=>F,looseIndexOf:()=>$,makeMap:()=>o,normalizeClass:()=>k,normalizeProps:()=>C,normalizeStyle:()=>b,objectToString:()=>oe,parseStringStyle:()=>x,propsToAttrMap:()=>m,remove:()=>G,slotFlagsText:()=>s,stringifyStyle:()=>S,toDisplayString:()=>N,toHandlerKey:()=>ve,toNumber:()=>_e,toRawType:()=>se,toTypeString:()=>re});const r={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"HYDRATE_EVENTS",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},s={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},i=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");function a(e,t=0,n=e.length){let o=e.split(/(\r?\n)/);const r=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let s=0;const i=[];for(let e=0;e<o.length;e++)if(s+=o[e].length+(r[e]&&r[e].length||0),s>=t){for(let a=e-2;a<=e+2||n>s;a++){if(a<0||a>=o.length)continue;const l=a+1;i.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=r[a]&&r[a].length||0;if(a===e){const e=t-(s-(c+u)),o=Math.max(1,n>s?c-e:n-t);i.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>s){const e=Math.max(Math.min(n-s,c),1);i.push("   |  "+"^".repeat(e))}s+=c+u}}break}return i.join("\n")}const l="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",c=o(l),u=o(l+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function d(e){return!!e||""===e}const p=/[>/="'\u0009\u000a\u000c\u0020]/,f={};function h(e){if(f.hasOwnProperty(e))return f[e];const t=p.test(e);return t&&console.error(`unsafe attribute name: ${e}`),f[e]=!t}const m={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},v=o("animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width"),g=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),y=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");function b(e){if(W(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],r=Z(o)?x(o):b(o);if(r)for(const e in r)t[e]=r[e]}return t}return Z(e)||te(e)?e:void 0}const _=/;(?![^(]*\))/g,w=/:(.+)/;function x(e){const t={};return e.split(_).forEach((e=>{if(e){const n=e.split(w);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function S(e){let t="";if(!e||Z(e))return t;for(const n in e){const o=e[n],r=n.startsWith("--")?n:he(n);(Z(o)||"number"==typeof o&&v(r))&&(t+=`${r}:${o};`)}return t}function k(e){let t="";if(Z(e))t=e;else if(W(e))for(let n=0;n<e.length;n++){const o=k(e[n]);o&&(t+=o+" ")}else if(te(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function C(e){if(!e)return null;let{class:t,style:n}=e;return t&&!Z(t)&&(e.class=k(t)),n&&(e.style=b(n)),e}const j=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),O=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),E=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),R=/["'&<>]/;function A(e){const t=""+e,n=R.exec(t);if(!n)return t;let o,r,s="",i=0;for(r=n.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 39:o="&#39;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}i!==r&&(s+=t.slice(i,r)),i=r+1,s+=o}return i!==r?s+t.slice(i,r):s}const T=/^-?>|<!--|-->|--!>|<!-$/g;function P(e){return e.replace(T,"")}function F(e,t){if(e===t)return!0;let n=Q(e),o=Q(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=ee(e),o=ee(t),n||o)return e===t;if(n=W(e),o=W(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=F(e[o],t[o]);return n}(e,t);if(n=te(e),o=te(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),r=t.hasOwnProperty(n);if(o&&!r||!o&&r||!F(e[n],t[n]))return!1}}return String(e)===String(t)}function $(e,t){return e.findIndex((e=>F(e,t)))}const N=e=>Z(e)?e:null==e?"":W(e)||te(e)&&(e.toString===oe||!X(e.toString))?JSON.stringify(e,M,2):String(e),M=(e,t)=>t&&t.__v_isRef?M(e,t.value):q(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:J(t)?{[`Set(${t.size})`]:[...t.values()]}:!te(t)||W(t)||ie(t)?t:String(t),I=Object.freeze({}),L=Object.freeze([]),V=()=>{},B=()=>!1,D=/^on[^a-z]/,H=e=>D.test(e),U=e=>e.startsWith("onUpdate:"),z=Object.assign,G=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},K=Object.prototype.hasOwnProperty,Y=(e,t)=>K.call(e,t),W=Array.isArray,q=e=>"[object Map]"===re(e),J=e=>"[object Set]"===re(e),Q=e=>"[object Date]"===re(e),X=e=>"function"==typeof e,Z=e=>"string"==typeof e,ee=e=>"symbol"==typeof e,te=e=>null!==e&&"object"==typeof e,ne=e=>te(e)&&X(e.then)&&X(e.catch),oe=Object.prototype.toString,re=e=>oe.call(e),se=e=>re(e).slice(8,-1),ie=e=>"[object Object]"===re(e),ae=e=>Z(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,le=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ce=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),ue=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},de=/-(\w)/g,pe=ue((e=>e.replace(de,((e,t)=>t?t.toUpperCase():"")))),fe=/\B([A-Z])/g,he=ue((e=>e.replace(fe,"-$1").toLowerCase())),me=ue((e=>e.charAt(0).toUpperCase()+e.slice(1))),ve=ue((e=>e?`on${me(e)}`:"")),ge=(e,t)=>!Object.is(e,t),ye=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},be=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},_e=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let we;const xe=()=>we||(we="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),Se=/^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;function ke(e){return Se.test(e)?`__props.${e}`:`__props[${JSON.stringify(e)}]`}},"./node_modules/@wordpress/hooks/build-module/createAddHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),r=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const s=function(e,t){return function(n,s,i){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;const l=e[t];if(!(0,r.default)(n))return;if(!(0,o.default)(s))return;if("function"!=typeof i)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const c={callback:i,priority:a,namespace:s};if(l[n]){const e=l[n].handlers;let t;for(t=e.length;t>0&&!(a>=e[t-1].priority);t--);t===e.length?e[t]=c:e.splice(t,0,c),l.__current.forEach((e=>{e.name===n&&e.currentIndex>=t&&e.currentIndex++}))}else l[n]={handlers:[c],runs:0};"hookAdded"!==n&&e.doAction("hookAdded",n,s,i,a)}}},"./node_modules/@wordpress/hooks/build-module/createCurrentHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(){var n,o;const r=e[t];return null!==(n=null===(o=r.__current[r.__current.length-1])||void 0===o?void 0:o.name)&&void 0!==n?n:null}}},"./node_modules/@wordpress/hooks/build-module/createDidHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const r=function(e,t){return function(n){const r=e[t];if((0,o.default)(n))return r[n]&&r[n].runs?r[n].runs:0}}},"./node_modules/@wordpress/hooks/build-module/createDoingHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n){const o=e[t];return void 0===n?void 0!==o.__current[0]:!!o.__current[0]&&n===o.__current[0].name}}},"./node_modules/@wordpress/hooks/build-module/createHasHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n,o){const r=e[t];return void 0!==o?n in r&&r[n].handlers.some((e=>e.namespace===o)):n in r}}},"./node_modules/@wordpress/hooks/build-module/createHooks.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{_Hooks:()=>u,default:()=>d});var o=n("./node_modules/@wordpress/hooks/build-module/createAddHook.js"),r=n("./node_modules/@wordpress/hooks/build-module/createRemoveHook.js"),s=n("./node_modules/@wordpress/hooks/build-module/createHasHook.js"),i=n("./node_modules/@wordpress/hooks/build-module/createRunHook.js"),a=n("./node_modules/@wordpress/hooks/build-module/createCurrentHook.js"),l=n("./node_modules/@wordpress/hooks/build-module/createDoingHook.js"),c=n("./node_modules/@wordpress/hooks/build-module/createDidHook.js");class u{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=(0,o.default)(this,"actions"),this.addFilter=(0,o.default)(this,"filters"),this.removeAction=(0,r.default)(this,"actions"),this.removeFilter=(0,r.default)(this,"filters"),this.hasAction=(0,s.default)(this,"actions"),this.hasFilter=(0,s.default)(this,"filters"),this.removeAllActions=(0,r.default)(this,"actions",!0),this.removeAllFilters=(0,r.default)(this,"filters",!0),this.doAction=(0,i.default)(this,"actions"),this.applyFilters=(0,i.default)(this,"filters",!0),this.currentAction=(0,a.default)(this,"actions"),this.currentFilter=(0,a.default)(this,"filters"),this.doingAction=(0,l.default)(this,"actions"),this.doingFilter=(0,l.default)(this,"filters"),this.didAction=(0,c.default)(this,"actions"),this.didFilter=(0,c.default)(this,"filters")}}const d=function(){return new u}},"./node_modules/@wordpress/hooks/build-module/createRemoveHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),r=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const s=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(s,i){const a=e[t];if(!(0,r.default)(s))return;if(!n&&!(0,o.default)(i))return;if(!a[s])return 0;let l=0;if(n)l=a[s].handlers.length,a[s]={runs:a[s].runs,handlers:[]};else{const e=a[s].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===i&&(e.splice(t,1),l++,a.__current.forEach((e=>{e.name===s&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==s&&e.doAction("hookRemoved",s,i),l}}},"./node_modules/@wordpress/hooks/build-module/createRunHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(o){const r=e[t];r[o]||(r[o]={handlers:[],runs:0}),r[o].runs++;const s=r[o].handlers;"hookAdded"!==o&&r.all&&s.push(...r.all.handlers);for(var i=arguments.length,a=new Array(i>1?i-1:0),l=1;l<i;l++)a[l-1]=arguments[l];if(!s||!s.length)return n?a[0]:void 0;const c={name:o,currentIndex:0};for(r.__current.push(c);c.currentIndex<s.length;){const e=s[c.currentIndex].callback.apply(null,a);n&&(a[0]=e),c.currentIndex++}return r.__current.pop(),n?a[0]:void 0}}},"./node_modules/@wordpress/hooks/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{actions:()=>w,addAction:()=>s,addFilter:()=>i,applyFilters:()=>h,createHooks:()=>o.default,currentAction:()=>m,currentFilter:()=>v,defaultHooks:()=>r,didAction:()=>b,didFilter:()=>_,doAction:()=>f,doingAction:()=>g,doingFilter:()=>y,filters:()=>x,hasAction:()=>c,hasFilter:()=>u,removeAction:()=>a,removeAllActions:()=>d,removeAllFilters:()=>p,removeFilter:()=>l});var o=n("./node_modules/@wordpress/hooks/build-module/createHooks.js");const r=(0,o.default)(),{addAction:s,addFilter:i,removeAction:a,removeFilter:l,hasAction:c,hasFilter:u,removeAllActions:d,removeAllFilters:p,doAction:f,applyFilters:h,currentAction:m,currentFilter:v,doingAction:g,doingFilter:y,didAction:b,didFilter:_,actions:w,filters:x}=r},"./node_modules/@wordpress/hooks/build-module/validateHookName.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)}},"./node_modules/@wordpress/hooks/build-module/validateNamespace.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)}},"./node_modules/@wordpress/i18n/build-module/create-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{createI18n:()=>i});var o=n("./node_modules/tannin/index.js");const r={plural_forms:e=>1===e?0:1},s=/^i18n\.(n?gettext|has_translation)(_|$)/,i=(e,t,n)=>{const i=new o.default({}),a=new Set,l=()=>{a.forEach((e=>e()))},c=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";i.data[n]={...i.data[n],...e},i.data[n][""]={...r,...null===(t=i.data[n])||void 0===t?void 0:t[""]},delete i.pluralForms[n]},u=(e,t)=>{c(e,t),l()},d=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0,r=arguments.length>4?arguments[4]:void 0;return i.data[e]||c(void 0,e),i.dcnpgettext(e,t,n,o,r)},p=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default";return e},f=(e,t,o)=>{let r=d(o,t,e);return n?(r=n.applyFilters("i18n.gettext_with_context",r,e,t,o),n.applyFilters("i18n.gettext_with_context_"+p(o),r,e,t,o)):r};if(e&&u(e,t),n){const e=e=>{s.test(e)&&l()};n.addAction("hookAdded","core/i18n",e),n.addAction("hookRemoved","core/i18n",e)}return{getLocaleData:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default";return i.data[e]},setLocaleData:u,addLocaleData:function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";i.data[n]={...i.data[n],...e,"":{...r,...null===(t=i.data[n])||void 0===t?void 0:t[""],...null==e?void 0:e[""]}},delete i.pluralForms[n],l()},resetLocaleData:(e,t)=>{i.data={},i.pluralForms={},u(e,t)},subscribe:e=>(a.add(e),()=>a.delete(e)),__:(e,t)=>{let o=d(t,void 0,e);return n?(o=n.applyFilters("i18n.gettext",o,e,t),n.applyFilters("i18n.gettext_"+p(t),o,e,t)):o},_x:f,_n:(e,t,o,r)=>{let s=d(r,void 0,e,t,o);return n?(s=n.applyFilters("i18n.ngettext",s,e,t,o,r),n.applyFilters("i18n.ngettext_"+p(r),s,e,t,o,r)):s},_nx:(e,t,o,r,s)=>{let i=d(s,r,e,t,o);return n?(i=n.applyFilters("i18n.ngettext_with_context",i,e,t,o,r,s),n.applyFilters("i18n.ngettext_with_context_"+p(s),i,e,t,o,r,s)):i},isRTL:()=>"rtl"===f("ltr","text direction"),hasTranslation:(e,t,o)=>{var r,s;const a=t?t+""+e:e;let l=!(null===(r=i.data)||void 0===r||null===(s=r[null!=o?o:"default"])||void 0===s||!s[a]);return n&&(l=n.applyFilters("i18n.has_translation",l,e,t,o),l=n.applyFilters("i18n.has_translation_"+p(o),l,e,t,o)),l}}}},"./node_modules/@wordpress/i18n/build-module/default-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>d,_n:()=>f,_nx:()=>h,_x:()=>p,default:()=>i,getLocaleData:()=>a,hasTranslation:()=>v,isRTL:()=>m,resetLocaleData:()=>c,setLocaleData:()=>l,subscribe:()=>u});var o=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),r=n("./node_modules/@wordpress/hooks/build-module/index.js");const s=(0,o.createI18n)(void 0,void 0,r.defaultHooks),i=s,a=s.getLocaleData.bind(s),l=s.setLocaleData.bind(s),c=s.resetLocaleData.bind(s),u=s.subscribe.bind(s),d=s.__.bind(s),p=s._x.bind(s),f=s._n.bind(s),h=s._nx.bind(s),m=s.isRTL.bind(s),v=s.hasTranslation.bind(s)},"./node_modules/@wordpress/i18n/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>s.__,_n:()=>s._n,_nx:()=>s._nx,_x:()=>s._x,createI18n:()=>r.createI18n,defaultI18n:()=>s.default,getLocaleData:()=>s.getLocaleData,hasTranslation:()=>s.hasTranslation,isRTL:()=>s.isRTL,resetLocaleData:()=>s.resetLocaleData,setLocaleData:()=>s.setLocaleData,sprintf:()=>o.sprintf,subscribe:()=>s.subscribe});var o=n("./node_modules/@wordpress/i18n/build-module/sprintf.js"),r=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),s=n("./node_modules/@wordpress/i18n/build-module/default-i18n.js")},"./node_modules/@wordpress/i18n/build-module/sprintf.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{sprintf:()=>l});var o=n("./node_modules/memize/index.js"),r=n.n(o),s=n("./node_modules/sprintf-js/src/sprintf.js"),i=n.n(s);const a=r()(console.error);function l(e){try{for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return i().sprintf(e,...n)}catch(t){return t instanceof Error&&a("sprintf error: \n\n"+t.toString()),e}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/components/tabs/Tabs.vue"),r=n("./src/utils/menu-fix.js");const s={name:"App",components:{Tabs:o.default},watch:{$route:function(){(0,r.menuFix)()}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"Button"}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o}),n("./src/components/tabs/style.scss");const o={name:"Tabs",components:{},data:function(){return{}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"Graph"}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/List.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"List"}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),r=n("./src/components/button/Button.vue");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l={name:"Settings",components:{Button:r.default},data:function(){return{numrows:5}},computed:i({},(0,o.mapGetters)(["isSaving","settings"])),methods:i(i({},(0,o.mapActions)(["storeSettings"])),{},{onSubmit:function(e){e.preventDefault();var t={numrows:parseInt(this.numrows)};this.storeSettings(t)}}),watch:{settings:function(){console.log("Vuex state settings::",this.settings)}}};const c=Object.assign(l,{setup:function(e,t){(0,t.expose)();var n={mapActions:o.mapActions,mapGetters:o.mapGetters,Button:r.default};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>a});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={id:"wp-vue-kit"},s={class:"main-content"},i=(0,o.createElementVNode)("h2",{role:"wp-vue-kit-notice","data-text":"Don't remove me, I am super important for admin notice"},null,-1);function a(e,t,n,a,l,c){var u=(0,o.resolveComponent)("tabs"),d=(0,o.resolveComponent)("router-view");return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[(0,o.createElementVNode)("div",s,[i,(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(e.__("WP Vue Kit","wp-vue-kit")),1),(0,o.createVNode)(u),(0,o.createVNode)(d)])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function r(e,t,n,r,s,i){return(0,o.openBlock)(),(0,o.createElementBlock)("button",null,[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0),(0,o.createCommentVNode)(" slot button content ")])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={id:"wp-vue-kit-tabs"},s={class:"tab-item"},i={class:"tab-item"},a={class:"tab-item"};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("router-link");return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[(0,o.createElementVNode)("div",s,[(0,o.createVNode)(d,{to:"/"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)("Settings")]})),_:1})]),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(d,{to:"/list"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)("List")]})),_:1})]),(0,o.createElementVNode)("div",a,[(0,o.createVNode)(d,{to:"/graph"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)("Graph")]})),_:1})])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=template&id=35f6d25a":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={class:"graph-page"},s=[(0,o.createElementVNode)("h4",null,"Graph Page",-1),(0,o.createElementVNode)("p",null,"This is Graph page.",-1)];function i(e,t,n,i,a,l){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,s)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/List.vue?vue&type=template&id=707e9f7c":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={class:"list-page"},s=[(0,o.createElementVNode)("h4",null,"List Page",-1),(0,o.createElementVNode)("p",null,"This is list page.",-1)];function i(e,t,n,i,a,l){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,s)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=template&id=b66ee972":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>d});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={class:"settings-page"},s=(0,o.createElementVNode)("h4",null,"Settings",-1),i=(0,o.createElementVNode)("p",null," Demo settings using Vuex. This is of vuex working perfectly or not. ",-1),a=(0,o.createElementVNode)("label",{for:"numrows"}," Number of rows ",-1),l=(0,o.createElementVNode)("br",null,null,-1),c=(0,o.createElementVNode)("br",null,null,-1),u=(0,o.createElementVNode)("br",null,null,-1);function d(e,t,n,d,p,f){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[s,i,(0,o.createElementVNode)("form",{onSubmit:t[1]||(t[1]=function(){return f.onSubmit&&f.onSubmit.apply(f,arguments)}),method:"post"},[a,l,(0,o.withDirectives)((0,o.createElementVNode)("input",{"onUpdate:modelValue":t[0]||(t[0]=function(e){return p.numrows=e}),type:"number"},null,512),[[o.vModelText,p.numrows]]),c,u,(0,o.createVNode)(d.Button,{type:"submit"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)("Save")]})),_:1})],32)])}},"./src/i18n.js":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/@wordpress/i18n/build-module/index.js");window.__=o.__,window.sprintf=o.sprintf},"./src/mixins/i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={methods:{__:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){return __(e,t)})),sprintf:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return sprintf.apply(void 0,[e].concat(n))}))}}},"./src/router/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vue-router/dist/vue-router.mjs"),r=n("./src/pages/List.vue"),s=n("./src/pages/Settings.vue"),i=n("./src/pages/Graph.vue"),a=[{path:"/",name:"Settings",component:s.default,alias:"/settings"},{path:"/list",name:"List",component:r.default},{path:"/graph",name:"Graph",component:i.default}];const l=(0,o.createRouter)({history:(0,o.createWebHistory)(wpEmailer.site.base_url),routes:a})},"./src/store/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),r=n("./src/store/modules/settings.js");const s=(0,o.createStore)({modules:{settings:r.default},strict:!0,plugins:[(0,o.createLogger)()]})},"./src/store/modules/settings.js":(e,t,n)=>{"use strict";function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function r(){r=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},i=s.iterator||"@@iterator",a=s.asyncIterator||"@@asyncIterator",l=s.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var r=t&&t.prototype instanceof f?t:f,s=Object.create(r.prototype),i=new C(o||[]);return s._invoke=function(e,t,n){var o="suspendedStart";return function(r,s){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===r)throw s;return{value:void 0,done:!0}}for(n.method=r,n.arg=s;;){var i=n.delegate;if(i){var a=x(i,n);if(a){if(a===p)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),s}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var p={};function f(){}function h(){}function m(){}var v={};c(v,i,(function(){return this}));var g=Object.getPrototypeOf,y=g&&g(g(j([])));y&&y!==t&&n.call(y,i)&&(v=y);var b=m.prototype=f.prototype=Object.create(v);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function r(s,i,a,l){var c=d(e[s],e,i);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==o(p)&&n.call(p,"__await")?t.resolve(p.__await).then((function(e){r("next",e,a,l)}),(function(e){r("throw",e,a,l)})):t.resolve(p).then((function(e){u.value=e,a(u)}),(function(e){return r("throw",e,a,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return s=s?s.then(o,o):o()}}function x(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method))return p;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var r=o.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function j(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=m,c(b,"constructor",m),c(m,"constructor",h),h.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(w.prototype),c(w.prototype,a,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,o,r,s){void 0===s&&(s=Promise);var i=new w(u(t,n,o,r),s);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,i,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=j,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var s=this.tryEntries[r],i=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var a=n.call(s,"catchLoc"),l=n.call(s,"finallyLoc");if(a&&l){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(a){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o];if(r.tryLoc<=this.prev&&n.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var s=r;break}}s&&("break"===e||"continue"===e)&&s.tryLoc<=t&&t<=s.finallyLoc&&(s=null);var i=s?s.completion:{};return i.type=e,i.arg=t,s?(this.method="next",this.next=s.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var r=o.arg;k(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:j(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},e}function s(e,t,n,o,r,s,i){try{var a=e[s](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,r)}n.r(t),n.d(t,{default:()=>i});const i={state:function(){return{settings:null,isSaving:!1}},getters:{settings:function(e){return e.settings},isSaving:function(e){return e.isSaving}},actions:{storeSettings:function(e,t){return(n=r().mark((function n(){var o;return r().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:(o=e.commit)("setSettingsSaving",!0),o("storeSettings",t),o("setSettingsSaving",!1);case 4:case"end":return n.stop()}}),n)})),function(){var e=this,t=arguments;return new Promise((function(o,r){var i=n.apply(e,t);function a(e){s(i,o,r,a,l,"next",e)}function l(e){s(i,o,r,a,l,"throw",e)}a(void 0)}))})();var n}},mutations:{storeSettings:function(e,t){e.settings=t},setSettingsSaving:function(e,t){e.isSaving=t}}}},"./src/utils/menu-fix.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{menuFix:()=>r,pluginSlug:()=>o});var o="wp-vue-kit";function r(){var e=jQuery,t=e("#toplevel_page_"+o),n=window.location.href,r=n.substr(n.indexOf("admin.php"));e("ul.wp-submenu li",t).removeClass("current"),t.on("click","a",(function(){var n=e(this);e("ul.wp-submenu li",t).removeClass("current"),n.hasClass("wp-has-submenu")?e("li.wp-first-item",t).addClass("current"):n.parents("li").addClass("current")})),e("ul.wp-submenu a",t).each((function(t,n){e(n).attr("href").substring(e(n).attr("href").indexOf("/admin.php")+1)===r&&e(n).parent().addClass("current")}))}r()},"./node_modules/memize/index.js":e=>{e.exports=function(e,t){var n,o,r=0;function s(){var s,i,a=n,l=arguments.length;e:for(;a;){if(a.args.length===arguments.length){for(i=0;i<l;i++)if(a.args[i]!==arguments[i]){a=a.next;continue e}return a!==n&&(a===o&&(o=a.prev),a.prev.next=a.next,a.next&&(a.next.prev=a.prev),a.next=n,a.prev=null,n.prev=a,n=a),a.val}a=a.next}for(s=new Array(l),i=0;i<l;i++)s[i]=arguments[i];return a={args:s,val:e.apply(null,s)},n?(n.prev=a,a.next=n):o=a,r===t.maxSize?(o=o.prev).next=null:r++,n=a,a.val}return t=t||{},s.clear=function(){n=null,o=null,r=0},s}},"./src/components/tabs/style.scss":(e,t,n)=>{"use strict";n.r(t)},"./src/styles/main.scss":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/sprintf-js/src/sprintf.js":(e,t,n)=>{var o;!function(){"use strict";var r={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function s(e){return a(c(e),arguments)}function i(e,t){return s.apply(null,[e].concat(t||[]))}function a(e,t){var n,o,i,a,l,c,u,d,p,f=1,h=e.length,m="";for(o=0;o<h;o++)if("string"==typeof e[o])m+=e[o];else if("object"==typeof e[o]){if((a=e[o]).keys)for(n=t[f],i=0;i<a.keys.length;i++){if(null==n)throw new Error(s('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[i],a.keys[i-1]));n=n[a.keys[i]]}else n=a.param_no?t[a.param_no]:t[f++];if(r.not_type.test(a.type)&&r.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),r.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(s("[sprintf] expecting number but found %T",n));switch(r.number.test(a.type)&&(d=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}r.json.test(a.type)?m+=n:(!r.number.test(a.type)||d&&!a.sign?p="":(p=d?"+":"-",n=n.toString().replace(r.sign,"")),c=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",u=a.width-(p+n).length,l=a.width&&u>0?c.repeat(u):"",m+=a.align?p+n+l:"0"===c?p+l+n:l+p+n)}return m}var l=Object.create(null);function c(e){if(l[e])return l[e];for(var t,n=e,o=[],s=0;n;){if(null!==(t=r.text.exec(n)))o.push(t[0]);else if(null!==(t=r.modulo.exec(n)))o.push("%");else{if(null===(t=r.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){s|=1;var i=[],a=t[2],c=[];if(null===(c=r.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(i.push(c[1]);""!==(a=a.substring(c[0].length));)if(null!==(c=r.key_access.exec(a)))i.push(c[1]);else{if(null===(c=r.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");i.push(c[1])}t[2]=i}else s|=2;if(3===s)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return l[e]=o}t.sprintf=s,t.vsprintf=i,"undefined"!=typeof window&&(window.sprintf=s,window.vsprintf=i,void 0===(o=function(){return{sprintf:s,vsprintf:i}}.call(t,n,t,e))||(e.exports=o))}()},"./node_modules/tannin/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@tannin/plural-forms/index.js"),r={contextDelimiter:"",onMissingKey:null};function s(e,t){var n;for(n in this.data=e,this.pluralForms={},this.options={},r)this.options[n]=void 0!==t&&n in t?t[n]:r[n]}s.prototype.getPluralForm=function(e,t){var n,r,s,i=this.pluralForms[e];return i||("function"!=typeof(s=(n=this.data[e][""])["Plural-Forms"]||n["plural-forms"]||n.plural_forms)&&(r=function(e){var t,n,o;for(t=e.split(";"),n=0;n<t.length;n++)if(0===(o=t[n].trim()).indexOf("plural="))return o.substr(7)}(n["Plural-Forms"]||n["plural-forms"]||n.plural_forms),s=(0,o.default)(r)),i=this.pluralForms[e]=s),i(t)},s.prototype.dcnpgettext=function(e,t,n,o,r){var s,i,a;return s=void 0===r?0:this.getPluralForm(e,r),i=n,t&&(i=t+this.options.contextDelimiter+n),(a=this.data[e][i])&&a[s]?a[s]:(this.options.onMissingKey&&this.options.onMissingKey(n,e),0===s?n:o)}},"./node_modules/vue-loader/dist/exportHelper.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./src/App.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/App.vue?vue&type=template&id=7ba5bd90"),r=n("./src/App.vue?vue&type=script&lang=js");const s=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/App.vue"]])},"./src/components/button/Button.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true"),r=n("./src/components/button/Button.vue?vue&type=script&lang=js");n("./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true");const s=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__scopeId","data-v-5975756f"],["__file","src/components/button/Button.vue"]])},"./src/components/tabs/Tabs.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f"),r=n("./src/components/tabs/Tabs.vue?vue&type=script&lang=js");const s=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/components/tabs/Tabs.vue"]])},"./src/pages/Graph.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/pages/Graph.vue?vue&type=template&id=35f6d25a"),r=n("./src/pages/Graph.vue?vue&type=script&lang=js");const s=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/pages/Graph.vue"]])},"./src/pages/List.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/pages/List.vue?vue&type=template&id=707e9f7c"),r=n("./src/pages/List.vue?vue&type=script&lang=js");const s=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/pages/List.vue"]])},"./src/pages/Settings.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/pages/Settings.vue?vue&type=template&id=b66ee972"),r=n("./src/pages/Settings.vue?vue&type=script&setup=true&lang=js");const s=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/pages/Settings.vue"]])},"./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js")},"./src/components/button/Button.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=script&lang=js")},"./src/components/tabs/Tabs.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=script&lang=js")},"./src/pages/Graph.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=script&lang=js")},"./src/pages/List.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/List.vue?vue&type=script&lang=js")},"./src/pages/Settings.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=script&setup=true&lang=js")},"./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90")},"./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true")},"./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f")},"./src/pages/Graph.vue?vue&type=template&id=35f6d25a":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=template&id=35f6d25a")},"./src/pages/List.vue?vue&type=template&id=707e9f7c":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/List.vue?vue&type=template&id=707e9f7c")},"./src/pages/Settings.vue?vue&type=template&id=b66ee972":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=template&id=b66ee972")},"./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true")},"./node_modules/vue/dist/vue.runtime.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>r.BaseTransition,Comment:()=>r.Comment,EffectScope:()=>r.EffectScope,Fragment:()=>r.Fragment,KeepAlive:()=>r.KeepAlive,ReactiveEffect:()=>r.ReactiveEffect,Static:()=>r.Static,Suspense:()=>r.Suspense,Teleport:()=>r.Teleport,Text:()=>r.Text,Transition:()=>r.Transition,TransitionGroup:()=>r.TransitionGroup,VueElement:()=>r.VueElement,callWithAsyncErrorHandling:()=>r.callWithAsyncErrorHandling,callWithErrorHandling:()=>r.callWithErrorHandling,camelize:()=>r.camelize,capitalize:()=>r.capitalize,cloneVNode:()=>r.cloneVNode,compatUtils:()=>r.compatUtils,compile:()=>s,computed:()=>r.computed,createApp:()=>r.createApp,createBlock:()=>r.createBlock,createCommentVNode:()=>r.createCommentVNode,createElementBlock:()=>r.createElementBlock,createElementVNode:()=>r.createElementVNode,createHydrationRenderer:()=>r.createHydrationRenderer,createPropsRestProxy:()=>r.createPropsRestProxy,createRenderer:()=>r.createRenderer,createSSRApp:()=>r.createSSRApp,createSlots:()=>r.createSlots,createStaticVNode:()=>r.createStaticVNode,createTextVNode:()=>r.createTextVNode,createVNode:()=>r.createVNode,customRef:()=>r.customRef,defineAsyncComponent:()=>r.defineAsyncComponent,defineComponent:()=>r.defineComponent,defineCustomElement:()=>r.defineCustomElement,defineEmits:()=>r.defineEmits,defineExpose:()=>r.defineExpose,defineProps:()=>r.defineProps,defineSSRCustomElement:()=>r.defineSSRCustomElement,devtools:()=>r.devtools,effect:()=>r.effect,effectScope:()=>r.effectScope,getCurrentInstance:()=>r.getCurrentInstance,getCurrentScope:()=>r.getCurrentScope,getTransitionRawChildren:()=>r.getTransitionRawChildren,guardReactiveProps:()=>r.guardReactiveProps,h:()=>r.h,handleError:()=>r.handleError,hydrate:()=>r.hydrate,initCustomFormatter:()=>r.initCustomFormatter,initDirectivesForSSR:()=>r.initDirectivesForSSR,inject:()=>r.inject,isMemoSame:()=>r.isMemoSame,isProxy:()=>r.isProxy,isReactive:()=>r.isReactive,isReadonly:()=>r.isReadonly,isRef:()=>r.isRef,isRuntimeOnly:()=>r.isRuntimeOnly,isShallow:()=>r.isShallow,isVNode:()=>r.isVNode,markRaw:()=>r.markRaw,mergeDefaults:()=>r.mergeDefaults,mergeProps:()=>r.mergeProps,nextTick:()=>r.nextTick,normalizeClass:()=>r.normalizeClass,normalizeProps:()=>r.normalizeProps,normalizeStyle:()=>r.normalizeStyle,onActivated:()=>r.onActivated,onBeforeMount:()=>r.onBeforeMount,onBeforeUnmount:()=>r.onBeforeUnmount,onBeforeUpdate:()=>r.onBeforeUpdate,onDeactivated:()=>r.onDeactivated,onErrorCaptured:()=>r.onErrorCaptured,onMounted:()=>r.onMounted,onRenderTracked:()=>r.onRenderTracked,onRenderTriggered:()=>r.onRenderTriggered,onScopeDispose:()=>r.onScopeDispose,onServerPrefetch:()=>r.onServerPrefetch,onUnmounted:()=>r.onUnmounted,onUpdated:()=>r.onUpdated,openBlock:()=>r.openBlock,popScopeId:()=>r.popScopeId,provide:()=>r.provide,proxyRefs:()=>r.proxyRefs,pushScopeId:()=>r.pushScopeId,queuePostFlushCb:()=>r.queuePostFlushCb,reactive:()=>r.reactive,readonly:()=>r.readonly,ref:()=>r.ref,registerRuntimeCompiler:()=>r.registerRuntimeCompiler,render:()=>r.render,renderList:()=>r.renderList,renderSlot:()=>r.renderSlot,resolveComponent:()=>r.resolveComponent,resolveDirective:()=>r.resolveDirective,resolveDynamicComponent:()=>r.resolveDynamicComponent,resolveFilter:()=>r.resolveFilter,resolveTransitionHooks:()=>r.resolveTransitionHooks,setBlockTracking:()=>r.setBlockTracking,setDevtoolsHook:()=>r.setDevtoolsHook,setTransitionHooks:()=>r.setTransitionHooks,shallowReactive:()=>r.shallowReactive,shallowReadonly:()=>r.shallowReadonly,shallowRef:()=>r.shallowRef,ssrContextKey:()=>r.ssrContextKey,ssrUtils:()=>r.ssrUtils,stop:()=>r.stop,toDisplayString:()=>r.toDisplayString,toHandlerKey:()=>r.toHandlerKey,toHandlers:()=>r.toHandlers,toRaw:()=>r.toRaw,toRef:()=>r.toRef,toRefs:()=>r.toRefs,transformVNodeArgs:()=>r.transformVNodeArgs,triggerRef:()=>r.triggerRef,unref:()=>r.unref,useAttrs:()=>r.useAttrs,useCssModule:()=>r.useCssModule,useCssVars:()=>r.useCssVars,useSSRContext:()=>r.useSSRContext,useSlots:()=>r.useSlots,useTransitionState:()=>r.useTransitionState,vModelCheckbox:()=>r.vModelCheckbox,vModelDynamic:()=>r.vModelDynamic,vModelRadio:()=>r.vModelRadio,vModelSelect:()=>r.vModelSelect,vModelText:()=>r.vModelText,vShow:()=>r.vShow,version:()=>r.version,warn:()=>r.warn,watch:()=>r.watch,watchEffect:()=>r.watchEffect,watchPostEffect:()=>r.watchPostEffect,watchSyncEffect:()=>r.watchSyncEffect,withAsyncContext:()=>r.withAsyncContext,withCtx:()=>r.withCtx,withDefaults:()=>r.withDefaults,withDirectives:()=>r.withDirectives,withKeys:()=>r.withKeys,withMemo:()=>r.withMemo,withModifiers:()=>r.withModifiers,withScopeId:()=>r.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),r=n("./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js");(0,o.initCustomFormatter)();const s=()=>{(0,o.warn)('Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".')}},"./node_modules/vuex/dist/vuex.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Store:()=>I,createLogger:()=>W,createNamespacedHelpers:()=>U,createStore:()=>M,default:()=>Z,mapActions:()=>H,mapGetters:()=>D,mapMutations:()=>B,mapState:()=>V,storeKey:()=>s,useStore:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/index.js"),s="store";function i(e){return void 0===e&&(e=null),(0,o.inject)(null!==e?e:s)}function a(e,t){if(void 0===t&&(t=[]),null===e||"object"!=typeof e)return e;var n,o=(n=function(t){return t.original===e},t.filter(n)[0]);if(o)return o.copy;var r=Array.isArray(e)?[]:{};return t.push({original:e,copy:r}),Object.keys(e).forEach((function(n){r[n]=a(e[n],t)})),r}function l(e,t){Object.keys(e).forEach((function(n){return t(e[n],n)}))}function c(e){return null!==e&&"object"==typeof e}function u(e,t){if(!e)throw new Error("[vuex] "+t)}function d(e,t,n){return t.indexOf(e)<0&&(n&&n.prepend?t.unshift(e):t.push(e)),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function p(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;h(e,n,[],e._modules.root,!0),f(e,n,t)}function f(e,t,n){var r=e._state;e.getters={},e._makeLocalGettersCache=Object.create(null);var s=e._wrappedGetters,i={};l(s,(function(t,n){i[n]=function(e,t){return function(){return e(t)}}(t,e),Object.defineProperty(e.getters,n,{get:function(){return i[n]()},enumerable:!0})})),e._state=(0,o.reactive)({data:t}),e.strict&&function(e){(0,o.watch)((function(){return e._state.data}),(function(){u(e._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,flush:"sync"})}(e),r&&n&&e._withCommit((function(){r.data=null}))}function h(e,t,n,o,r){var s=!n.length,i=e._modules.getNamespace(n);if(o.namespaced&&(e._modulesNamespaceMap[i]&&console.error("[vuex] duplicate namespace "+i+" for the namespaced module "+n.join("/")),e._modulesNamespaceMap[i]=o),!s&&!r){var a=v(t,n.slice(0,-1)),l=n[n.length-1];e._withCommit((function(){l in a&&console.warn('[vuex] state field "'+l+'" was overridden by a module with the same name at "'+n.join(".")+'"'),a[l]=o.state}))}var c=o.context=function(e,t,n){var o=""===t,r={dispatch:o?e.dispatch:function(n,o,r){var s=g(n,o,r),i=s.payload,a=s.options,l=s.type;if(a&&a.root||(l=t+l,e._actions[l]))return e.dispatch(l,i);console.error("[vuex] unknown local action type: "+s.type+", global type: "+l)},commit:o?e.commit:function(n,o,r){var s=g(n,o,r),i=s.payload,a=s.options,l=s.type;a&&a.root||(l=t+l,e._mutations[l])?e.commit(l,i,a):console.error("[vuex] unknown local mutation type: "+s.type+", global type: "+l)}};return Object.defineProperties(r,{getters:{get:o?function(){return e.getters}:function(){return m(e,t)}},state:{get:function(){return v(e.state,n)}}}),r}(e,i,n);o.forEachMutation((function(t,n){!function(e,t,n,o){(e._mutations[t]||(e._mutations[t]=[])).push((function(t){n.call(e,o.state,t)}))}(e,i+n,t,c)})),o.forEachAction((function(t,n){var o=t.root?n:i+n,r=t.handler||t;!function(e,t,n,o){(e._actions[t]||(e._actions[t]=[])).push((function(t){var r,s=n.call(e,{dispatch:o.dispatch,commit:o.commit,getters:o.getters,state:o.state,rootGetters:e.getters,rootState:e.state},t);return(r=s)&&"function"==typeof r.then||(s=Promise.resolve(s)),e._devtoolHook?s.catch((function(t){throw e._devtoolHook.emit("vuex:error",t),t})):s}))}(e,o,r,c)})),o.forEachGetter((function(t,n){!function(e,t,n,o){e._wrappedGetters[t]?console.error("[vuex] duplicate getter key: "+t):e._wrappedGetters[t]=function(e){return n(o.state,o.getters,e.state,e.getters)}}(e,i+n,t,c)})),o.forEachChild((function(o,s){h(e,t,n.concat(s),o,r)}))}function m(e,t){if(!e._makeLocalGettersCache[t]){var n={},o=t.length;Object.keys(e.getters).forEach((function(r){if(r.slice(0,o)===t){var s=r.slice(o);Object.defineProperty(n,s,{get:function(){return e.getters[r]},enumerable:!0})}})),e._makeLocalGettersCache[t]=n}return e._makeLocalGettersCache[t]}function v(e,t){return t.reduce((function(e,t){return e[t]}),e)}function g(e,t,n){return c(e)&&e.type&&(n=t,t=e,e=e.type),u("string"==typeof e,"expects string as the type, but found "+typeof e+"."),{type:e,payload:t,options:n}}var y="vuex:mutations",b="vuex:actions",_="vuex",w=0;function x(e,t){(0,r.setupDevtoolsPlugin)({id:"org.vuejs.vuex",app:e,label:"Vuex",homepage:"https://next.vuex.vuejs.org/",logo:"https://vuejs.org/images/icons/favicon-96x96.png",packageName:"vuex",componentStateTypes:["vuex bindings"]},(function(n){n.addTimelineLayer({id:y,label:"Vuex Mutations",color:S}),n.addTimelineLayer({id:b,label:"Vuex Actions",color:S}),n.addInspector({id:_,label:"Vuex",icon:"storage",treeFilterPlaceholder:"Filter stores..."}),n.on.getInspectorTree((function(n){if(n.app===e&&n.inspectorId===_)if(n.filter){var o=[];O(o,t._modules.root,n.filter,""),n.rootNodes=o}else n.rootNodes=[j(t._modules.root,"")]})),n.on.getInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId;m(t,o),n.state=function(e,t,n){t="root"===n?t:t[n];var o=Object.keys(t),r={state:Object.keys(e.state).map((function(t){return{key:t,editable:!0,value:e.state[t]}}))};if(o.length){var s=function(e){var t={};return Object.keys(e).forEach((function(n){var o=n.split("/");if(o.length>1){var r=t,s=o.pop();o.forEach((function(e){r[e]||(r[e]={_custom:{value:{},display:e,tooltip:"Module",abstract:!0}}),r=r[e]._custom.value})),r[s]=E((function(){return e[n]}))}else t[n]=E((function(){return e[n]}))})),t}(t);r.getters=Object.keys(s).map((function(e){return{key:e.endsWith("/")?C(e):e,editable:!1,value:E((function(){return s[e]}))}}))}return r}((r=t._modules,(i=(s=o).split("/").filter((function(e){return e}))).reduce((function(e,t,n){var o=e[t];if(!o)throw new Error('Missing module "'+t+'" for path "'+s+'".');return n===i.length-1?o:o._children}),"root"===s?r:r.root._children)),"root"===o?t.getters:t._makeLocalGettersCache,o)}var r,s,i})),n.on.editInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId,r=n.path;"root"!==o&&(r=o.split("/").filter(Boolean).concat(r)),t._withCommit((function(){n.set(t._state.data,r,n.state.value)}))}})),t.subscribe((function(e,t){var o={};e.payload&&(o.payload=e.payload),o.state=t,n.notifyComponentUpdate(),n.sendInspectorTree(_),n.sendInspectorState(_),n.addTimelineEvent({layerId:y,event:{time:Date.now(),title:e.type,data:o}})})),t.subscribeAction({before:function(e,t){var o={};e.payload&&(o.payload=e.payload),e._id=w++,e._time=Date.now(),o.state=t,n.addTimelineEvent({layerId:b,event:{time:e._time,title:e.type,groupId:e._id,subtitle:"start",data:o}})},after:function(e,t){var o={},r=Date.now()-e._time;o.duration={_custom:{type:"duration",display:r+"ms",tooltip:"Action duration",value:r}},e.payload&&(o.payload=e.payload),o.state=t,n.addTimelineEvent({layerId:b,event:{time:Date.now(),title:e.type,groupId:e._id,subtitle:"end",data:o}})}})}))}var S=8702998,k={label:"namespaced",textColor:16777215,backgroundColor:6710886};function C(e){return e&&"root"!==e?e.split("/").slice(-2,-1)[0]:"Root"}function j(e,t){return{id:t||"root",label:C(t),tags:e.namespaced?[k]:[],children:Object.keys(e._children).map((function(n){return j(e._children[n],t+n+"/")}))}}function O(e,t,n,o){o.includes(n)&&e.push({id:o||"root",label:o.endsWith("/")?o.slice(0,o.length-1):o||"Root",tags:t.namespaced?[k]:[]}),Object.keys(t._children).forEach((function(r){O(e,t._children[r],n,o+r+"/")}))}function E(e){try{return e()}catch(e){return e}}var R=function(e,t){this.runtime=t,this._children=Object.create(null),this._rawModule=e;var n=e.state;this.state=("function"==typeof n?n():n)||{}},A={namespaced:{configurable:!0}};A.namespaced.get=function(){return!!this._rawModule.namespaced},R.prototype.addChild=function(e,t){this._children[e]=t},R.prototype.removeChild=function(e){delete this._children[e]},R.prototype.getChild=function(e){return this._children[e]},R.prototype.hasChild=function(e){return e in this._children},R.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},R.prototype.forEachChild=function(e){l(this._children,e)},R.prototype.forEachGetter=function(e){this._rawModule.getters&&l(this._rawModule.getters,e)},R.prototype.forEachAction=function(e){this._rawModule.actions&&l(this._rawModule.actions,e)},R.prototype.forEachMutation=function(e){this._rawModule.mutations&&l(this._rawModule.mutations,e)},Object.defineProperties(R.prototype,A);var T=function(e){this.register([],e,!1)};function P(e,t,n){if(N(e,n),t.update(n),n.modules)for(var o in n.modules){if(!t.getChild(o))return void console.warn("[vuex] trying to add a new module '"+o+"' on hot reloading, manual reload is needed");P(e.concat(o),t.getChild(o),n.modules[o])}}T.prototype.get=function(e){return e.reduce((function(e,t){return e.getChild(t)}),this.root)},T.prototype.getNamespace=function(e){var t=this.root;return e.reduce((function(e,n){return e+((t=t.getChild(n)).namespaced?n+"/":"")}),"")},T.prototype.update=function(e){P([],this.root,e)},T.prototype.register=function(e,t,n){var o=this;void 0===n&&(n=!0),N(e,t);var r=new R(t,n);0===e.length?this.root=r:this.get(e.slice(0,-1)).addChild(e[e.length-1],r),t.modules&&l(t.modules,(function(t,r){o.register(e.concat(r),t,n)}))},T.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1],o=t.getChild(n);o?o.runtime&&t.removeChild(n):console.warn("[vuex] trying to unregister module '"+n+"', which is not registered")},T.prototype.isRegistered=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];return!!t&&t.hasChild(n)};var F={assert:function(e){return"function"==typeof e},expected:"function"},$={getters:F,mutations:F,actions:{assert:function(e){return"function"==typeof e||"object"==typeof e&&"function"==typeof e.handler},expected:'function or object with "handler" function'}};function N(e,t){Object.keys($).forEach((function(n){if(t[n]){var o=$[n];l(t[n],(function(t,r){u(o.assert(t),function(e,t,n,o,r){var s=t+" should be "+r+' but "'+t+"."+n+'"';return e.length>0&&(s+=' in module "'+e.join(".")+'"'),s+" is "+JSON.stringify(o)+"."}(e,n,r,t,o.expected))}))}}))}function M(e){return new I(e)}var I=function e(t){var n=this;void 0===t&&(t={}),u("undefined"!=typeof Promise,"vuex requires a Promise polyfill in this browser."),u(this instanceof e,"store must be called with the new operator.");var o=t.plugins;void 0===o&&(o=[]);var r=t.strict;void 0===r&&(r=!1);var s=t.devtools;this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new T(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null),this._devtools=s;var i=this,a=this.dispatch,l=this.commit;this.dispatch=function(e,t){return a.call(i,e,t)},this.commit=function(e,t,n){return l.call(i,e,t,n)},this.strict=r;var c=this._modules.root.state;h(this,c,[],this._modules.root),f(this,c),o.forEach((function(e){return e(n)}))},L={state:{configurable:!0}};I.prototype.install=function(e,t){e.provide(t||s,this),e.config.globalProperties.$store=this,(void 0===this._devtools||this._devtools)&&x(e,this)},L.state.get=function(){return this._state.data},L.state.set=function(e){u(!1,"use store.replaceState() to explicit replace store state.")},I.prototype.commit=function(e,t,n){var o=this,r=g(e,t,n),s=r.type,i=r.payload,a=r.options,l={type:s,payload:i},c=this._mutations[s];c?(this._withCommit((function(){c.forEach((function(e){e(i)}))})),this._subscribers.slice().forEach((function(e){return e(l,o.state)})),a&&a.silent&&console.warn("[vuex] mutation type: "+s+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+s)},I.prototype.dispatch=function(e,t){var n=this,o=g(e,t),r=o.type,s=o.payload,i={type:r,payload:s},a=this._actions[r];if(a){try{this._actionSubscribers.slice().filter((function(e){return e.before})).forEach((function(e){return e.before(i,n.state)}))}catch(e){console.warn("[vuex] error in before action subscribers: "),console.error(e)}var l=a.length>1?Promise.all(a.map((function(e){return e(s)}))):a[0](s);return new Promise((function(e,t){l.then((function(t){try{n._actionSubscribers.filter((function(e){return e.after})).forEach((function(e){return e.after(i,n.state)}))}catch(e){console.warn("[vuex] error in after action subscribers: "),console.error(e)}e(t)}),(function(e){try{n._actionSubscribers.filter((function(e){return e.error})).forEach((function(t){return t.error(i,n.state,e)}))}catch(e){console.warn("[vuex] error in error action subscribers: "),console.error(e)}t(e)}))}))}console.error("[vuex] unknown action type: "+r)},I.prototype.subscribe=function(e,t){return d(e,this._subscribers,t)},I.prototype.subscribeAction=function(e,t){return d("function"==typeof e?{before:e}:e,this._actionSubscribers,t)},I.prototype.watch=function(e,t,n){var r=this;return u("function"==typeof e,"store.watch only accepts a function."),(0,o.watch)((function(){return e(r.state,r.getters)}),t,Object.assign({},n))},I.prototype.replaceState=function(e){var t=this;this._withCommit((function(){t._state.data=e}))},I.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),u(e.length>0,"cannot register the root module by using registerModule."),this._modules.register(e,t),h(this,this.state,e,this._modules.get(e),n.preserveState),f(this,this.state)},I.prototype.unregisterModule=function(e){var t=this;"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.unregister(e),this._withCommit((function(){delete v(t.state,e.slice(0,-1))[e[e.length-1]]})),p(this)},I.prototype.hasModule=function(e){return"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.isRegistered(e)},I.prototype.hotUpdate=function(e){this._modules.update(e),p(this,!0)},I.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(I.prototype,L);var V=K((function(e,t){var n={};return G(t)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),z(t).forEach((function(t){var o=t.key,r=t.val;n[o]=function(){var t=this.$store.state,n=this.$store.getters;if(e){var o=Y(this.$store,"mapState",e);if(!o)return;t=o.context.state,n=o.context.getters}return"function"==typeof r?r.call(this,t,n):t[r]},n[o].vuex=!0})),n})),B=K((function(e,t){var n={};return G(t)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),z(t).forEach((function(t){var o=t.key,r=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.commit;if(e){var s=Y(this.$store,"mapMutations",e);if(!s)return;o=s.context.commit}return"function"==typeof r?r.apply(this,[o].concat(t)):o.apply(this.$store,[r].concat(t))}})),n})),D=K((function(e,t){var n={};return G(t)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),z(t).forEach((function(t){var o=t.key,r=t.val;r=e+r,n[o]=function(){if(!e||Y(this.$store,"mapGetters",e)){if(r in this.$store.getters)return this.$store.getters[r];console.error("[vuex] unknown getter: "+r)}},n[o].vuex=!0})),n})),H=K((function(e,t){var n={};return G(t)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),z(t).forEach((function(t){var o=t.key,r=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.dispatch;if(e){var s=Y(this.$store,"mapActions",e);if(!s)return;o=s.context.dispatch}return"function"==typeof r?r.apply(this,[o].concat(t)):o.apply(this.$store,[r].concat(t))}})),n})),U=function(e){return{mapState:V.bind(null,e),mapGetters:D.bind(null,e),mapMutations:B.bind(null,e),mapActions:H.bind(null,e)}};function z(e){return G(e)?Array.isArray(e)?e.map((function(e){return{key:e,val:e}})):Object.keys(e).map((function(t){return{key:t,val:e[t]}})):[]}function G(e){return Array.isArray(e)||c(e)}function K(e){return function(t,n){return"string"!=typeof t?(n=t,t=""):"/"!==t.charAt(t.length-1)&&(t+="/"),e(t,n)}}function Y(e,t,n){var o=e._modulesNamespaceMap[n];return o||console.error("[vuex] module namespace not found in "+t+"(): "+n),o}function W(e){void 0===e&&(e={});var t=e.collapsed;void 0===t&&(t=!0);var n=e.filter;void 0===n&&(n=function(e,t,n){return!0});var o=e.transformer;void 0===o&&(o=function(e){return e});var r=e.mutationTransformer;void 0===r&&(r=function(e){return e});var s=e.actionFilter;void 0===s&&(s=function(e,t){return!0});var i=e.actionTransformer;void 0===i&&(i=function(e){return e});var l=e.logMutations;void 0===l&&(l=!0);var c=e.logActions;void 0===c&&(c=!0);var u=e.logger;return void 0===u&&(u=console),function(e){var d=a(e.state);void 0!==u&&(l&&e.subscribe((function(e,s){var i=a(s);if(n(e,d,i)){var l=Q(),c=r(e),p="mutation "+e.type+l;q(u,p,t),u.log("%c prev state","color: #9E9E9E; font-weight: bold",o(d)),u.log("%c mutation","color: #03A9F4; font-weight: bold",c),u.log("%c next state","color: #4CAF50; font-weight: bold",o(i)),J(u)}d=i})),c&&e.subscribeAction((function(e,n){if(s(e,n)){var o=Q(),r=i(e),a="action "+e.type+o;q(u,a,t),u.log("%c action","color: #03A9F4; font-weight: bold",r),J(u)}})))}}function q(e,t,n){var o=n?e.groupCollapsed:e.group;try{o.call(e,t)}catch(n){e.log(t)}}function J(e){try{e.groupEnd()}catch(t){e.log("—— log end ——")}}function Q(){var e=new Date;return" @ "+X(e.getHours(),2)+":"+X(e.getMinutes(),2)+":"+X(e.getSeconds(),2)+"."+X(e.getMilliseconds(),3)}function X(e,t){return"0",n=t-e.toString().length,new Array(n+1).join("0")+e;var n}const Z={version:"4.0.2",Store:I,storeKey:s,createStore:M,useStore:i,mapState:V,mapMutations:B,mapGetters:D,mapActions:H,createNamespacedHelpers:U,createLogger:W}},"./node_modules/vue-router/dist/vue-router.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{NavigationFailureType:()=>I,RouterLink:()=>De,RouterView:()=>Ge,START_LOCATION:()=>N,createMemoryHistory:()=>P,createRouter:()=>at,createRouterMatcher:()=>Q,createWebHashHistory:()=>F,createWebHistory:()=>T,isNavigationFailure:()=>B,loadRouteLocation:()=>Ve,matchedRouteKey:()=>Ee,onBeforeRouteLeave:()=>Ne,onBeforeRouteUpdate:()=>Me,parseQuery:()=>Ce,routeLocationKey:()=>Te,routerKey:()=>Ae,routerViewLocationKey:()=>Pe,stringifyQuery:()=>je,useLink:()=>Be,useRoute:()=>ut,useRouter:()=>ct,viewDepthKey:()=>Re});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/index.js");const s="undefined"!=typeof window;function i(e){return e.__esModule||"Module"===e[Symbol.toStringTag]}const a=Object.assign;function l(e,t){const n={};for(const o in t){const r=t[o];n[o]=u(r)?r.map(e):e(r)}return n}const c=()=>{},u=Array.isArray;function d(e){const t=Array.from(arguments).slice(1);console.warn.apply(console,["[Vue Router warn]: "+e].concat(t))}const p=/\/$/;function f(e,t,n="/"){let o,r={},s="",i="";const a=t.indexOf("#");let l=t.indexOf("?");return a<l&&a>=0&&(l=-1),l>-1&&(o=t.slice(0,l),s=t.slice(l+1,a>-1?a:t.length),r=e(s)),a>-1&&(o=o||t.slice(0,a),i=t.slice(a,t.length)),o=function(e,t){if(e.startsWith("/"))return e;if(!t.startsWith("/"))return d(`Cannot resolve a relative location without an absolute path. Trying to resolve "${e}" from "${t}". It should look like "/${t}".`),e;if(!e)return t;const n=t.split("/"),o=e.split("/");let r,s,i=n.length-1;for(r=0;r<o.length;r++)if(s=o[r],"."!==s){if(".."!==s)break;i>1&&i--}return n.slice(0,i).join("/")+"/"+o.slice(r-(r===o.length?1:0)).join("/")}(null!=o?o:t,n),{fullPath:o+(s&&"?")+s+i,path:o,query:r,hash:i}}function h(e,t){return t&&e.toLowerCase().startsWith(t.toLowerCase())?e.slice(t.length)||"/":e}function m(e,t,n){const o=t.matched.length-1,r=n.matched.length-1;return o>-1&&o===r&&v(t.matched[o],n.matched[r])&&g(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function v(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function g(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!y(e[n],t[n]))return!1;return!0}function y(e,t){return u(e)?b(e,t):u(t)?b(t,e):e===t}function b(e,t){return u(t)?e.length===t.length&&e.every(((e,n)=>e===t[n])):1===e.length&&e[0]===t}var _,w;function x(e){if(!e)if(s){const t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return"/"!==e[0]&&"#"!==e[0]&&(e="/"+e),e.replace(p,"")}!function(e){e.pop="pop",e.push="push"}(_||(_={})),function(e){e.back="back",e.forward="forward",e.unknown=""}(w||(w={}));const S=/^[^#]+#/;function k(e,t){return e.replace(S,"#")+t}const C=()=>({left:window.pageXOffset,top:window.pageYOffset});function j(e,t){return(history.state?history.state.position-t:-1)+e}const O=new Map;let E=()=>location.protocol+"//"+location.host;function R(e,t){const{pathname:n,search:o,hash:r}=t,s=e.indexOf("#");if(s>-1){let t=r.includes(e.slice(s))?e.slice(s).length:1,n=r.slice(t);return"/"!==n[0]&&(n="/"+n),h(n,"")}return h(n,e)+o+r}function A(e,t,n,o=!1,r=!1){return{back:e,current:t,forward:n,replaced:o,position:window.history.length,scroll:r?C():null}}function T(e){const t=function(e){const{history:t,location:n}=window,o={value:R(e,n)},r={value:t.state};function s(o,s,i){const a=e.indexOf("#"),l=a>-1?(n.host&&document.querySelector("base")?e:e.slice(a))+o:E()+e+o;try{t[i?"replaceState":"pushState"](s,"",l),r.value=s}catch(e){d("Error with push/replace State",e),n[i?"replace":"assign"](l)}}return r.value||s(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0),{location:o,state:r,push:function(e,n){const i=a({},r.value,t.state,{forward:e,scroll:C()});t.state||d("history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\n\nhistory.replaceState(history.state, '', url)\n\nYou can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state."),s(i.current,i,!0),s(e,a({},A(o.value,e,null),{position:i.position+1},n),!1),o.value=e},replace:function(e,n){s(e,a({},t.state,A(r.value.back,e,r.value.forward,!0),n,{position:r.value.position}),!0),o.value=e}}}(e=x(e)),n=function(e,t,n,o){let r=[],s=[],i=null;const l=({state:s})=>{const a=R(e,location),l=n.value,c=t.value;let u=0;if(s){if(n.value=a,t.value=s,i&&i===l)return void(i=null);u=c?s.position-c.position:0}else o(a);r.forEach((e=>{e(n.value,l,{delta:u,type:_.pop,direction:u?u>0?w.forward:w.back:w.unknown})}))};function c(){const{history:e}=window;e.state&&e.replaceState(a({},e.state,{scroll:C()}),"")}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",c),{pauseListeners:function(){i=n.value},listen:function(e){r.push(e);const t=()=>{const t=r.indexOf(e);t>-1&&r.splice(t,1)};return s.push(t),t},destroy:function(){for(const e of s)e();s=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",c)}}}(e,t.state,t.location,t.replace),o=a({location:"",base:e,go:function(e,t=!0){t||n.pauseListeners(),history.go(e)},createHref:k.bind(null,e)},t,n);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function P(e=""){let t=[],n=[""],o=0;function r(e){o++,o===n.length||n.splice(o),n.push(e)}const s={location:"",state:{},base:e=x(e),createHref:k.bind(null,e),replace(e){n.splice(o--,1),r(e)},push(e,t){r(e)},listen:e=>(t.push(e),()=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)}),destroy(){t=[],n=[""],o=0},go(e,r=!0){const s=this.location,i=e<0?w.back:w.forward;o=Math.max(0,Math.min(o+e,n.length-1)),r&&function(e,n,{direction:o,delta:r}){const s={direction:o,delta:r,type:_.pop};for(const o of t)o(e,n,s)}(this.location,s,{direction:i,delta:e})}};return Object.defineProperty(s,"location",{enumerable:!0,get:()=>n[o]}),s}function F(e){return(e=location.host?e||location.pathname+location.search:"").includes("#")||(e+="#"),e.endsWith("#/")||e.endsWith("#")||d(`A hash base must end with a "#":\n"${e}" should be "${e.replace(/#.*$/,"#")}".`),T(e)}function $(e){return"string"==typeof e||"symbol"==typeof e}const N={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},M=Symbol("navigation failure");var I;!function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"}(I||(I={}));const L={1:({location:e,currentLocation:t})=>`No match for\n ${JSON.stringify(e)}${t?"\nwhile being at\n"+JSON.stringify(t):""}`,2:({from:e,to:t})=>`Redirected from "${e.fullPath}" to "${function(e){if("string"==typeof e)return e;if("path"in e)return e.path;const t={};for(const n of D)n in e&&(t[n]=e[n]);return JSON.stringify(t,null,2)}(t)}" via a navigation guard.`,4:({from:e,to:t})=>`Navigation aborted from "${e.fullPath}" to "${t.fullPath}" via a navigation guard.`,8:({from:e,to:t})=>`Navigation cancelled from "${e.fullPath}" to "${t.fullPath}" with a new navigation.`,16:({from:e,to:t})=>`Avoided redundant navigation to current location: "${e.fullPath}".`};function V(e,t){return a(new Error(L[e](t)),{type:e,[M]:!0},t)}function B(e,t){return e instanceof Error&&M in e&&(null==t||!!(e.type&t))}const D=["params","query","hash"],H="[^/]+?",U={sensitive:!1,strict:!1,start:!0,end:!0},z=/[.+*?^${}()[\]/\\]/g;function G(e,t){let n=0;for(;n<e.length&&n<t.length;){const o=t[n]-e[n];if(o)return o;n++}return e.length<t.length?1===e.length&&80===e[0]?-1:1:e.length>t.length?1===t.length&&80===t[0]?1:-1:0}function K(e,t){let n=0;const o=e.score,r=t.score;for(;n<o.length&&n<r.length;){const e=G(o[n],r[n]);if(e)return e;n++}if(1===Math.abs(r.length-o.length)){if(Y(o))return 1;if(Y(r))return-1}return r.length-o.length}function Y(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const W={type:0,value:""},q=/[a-zA-Z0-9_]/;function J(e,t,n){const o=function(e,t){const n=a({},U,t),o=[];let r=n.start?"^":"";const s=[];for(const t of e){const e=t.length?[]:[90];n.strict&&!t.length&&(r+="/");for(let o=0;o<t.length;o++){const i=t[o];let a=40+(n.sensitive?.25:0);if(0===i.type)o||(r+="/"),r+=i.value.replace(z,"\\$&"),a+=40;else if(1===i.type){const{value:e,repeatable:n,optional:l,regexp:c}=i;s.push({name:e,repeatable:n,optional:l});const u=c||H;if(u!==H){a+=10;try{new RegExp(`(${u})`)}catch(t){throw new Error(`Invalid custom RegExp for param "${e}" (${u}): `+t.message)}}let d=n?`((?:${u})(?:/(?:${u}))*)`:`(${u})`;o||(d=l&&t.length<2?`(?:/${d})`:"/"+d),l&&(d+="?"),r+=d,a+=20,l&&(a+=-8),n&&(a+=-20),".*"===u&&(a+=-50)}e.push(a)}o.push(e)}if(n.strict&&n.end){const e=o.length-1;o[e][o[e].length-1]+=.7000000000000001}n.strict||(r+="/?"),n.end?r+="$":n.strict&&(r+="(?:/|$)");const i=new RegExp(r,n.sensitive?"":"i");return{re:i,score:o,keys:s,parse:function(e){const t=e.match(i),n={};if(!t)return null;for(let e=1;e<t.length;e++){const o=t[e]||"",r=s[e-1];n[r.name]=o&&r.repeatable?o.split("/"):o}return n},stringify:function(t){let n="",o=!1;for(const r of e){o&&n.endsWith("/")||(n+="/"),o=!1;for(const e of r)if(0===e.type)n+=e.value;else if(1===e.type){const{value:s,repeatable:i,optional:a}=e,l=s in t?t[s]:"";if(u(l)&&!i)throw new Error(`Provided param "${s}" is an array but it is not repeatable (* or + modifiers)`);const c=u(l)?l.join("/"):l;if(!c){if(!a)throw new Error(`Missing required param "${s}"`);r.length<2&&(n.endsWith("/")?n=n.slice(0,-1):o=!0)}n+=c}}return n||"/"}}}(function(e){if(!e)return[[]];if("/"===e)return[[W]];if(!e.startsWith("/"))throw new Error(`Route paths should start with a "/": "${e}" should be "/${e}".`);function t(e){throw new Error(`ERR (${n})/"${c}": ${e}`)}let n=0,o=n;const r=[];let s;function i(){s&&r.push(s),s=[]}let a,l=0,c="",u="";function d(){c&&(0===n?s.push({type:0,value:c}):1===n||2===n||3===n?(s.length>1&&("*"===a||"+"===a)&&t(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),s.push({type:1,value:c,regexp:u,repeatable:"*"===a||"+"===a,optional:"*"===a||"?"===a})):t("Invalid state to consume buffer"),c="")}function p(){c+=a}for(;l<e.length;)if(a=e[l++],"\\"!==a||2===n)switch(n){case 0:"/"===a?(c&&d(),i()):":"===a?(d(),n=1):p();break;case 4:p(),n=o;break;case 1:"("===a?n=2:q.test(a)?p():(d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--);break;case 2:")"===a?"\\"==u[u.length-1]?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--,u="";break;default:t("Unknown state")}else o=n,n=4;return 2===n&&t(`Unfinished custom RegExp for param "${c}"`),d(),i(),r}(e.path),n);{const t=new Set;for(const n of o.keys)t.has(n.name)&&d(`Found duplicated params with name "${n.name}" for path "${e.path}". Only the last one will be available on "$route.params".`),t.add(n.name)}const r=a(o,{record:e,parent:t,children:[],alias:[]});return t&&!r.record.aliasOf==!t.record.aliasOf&&t.children.push(r),r}function Q(e,t){const n=[],o=new Map;function r(e,n,o){const l=!o,u=function(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:Z(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}(e);(function(e,t){t&&t.record.name&&!e.name&&!e.path&&d(`The route named "${String(t.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`)})(u,n),u.aliasOf=o&&o.record;const p=ne(t,e),f=[u];if("alias"in e){const t="string"==typeof e.alias?[e.alias]:e.alias;for(const e of t)f.push(a({},u,{components:o?o.record.components:u.components,path:e,aliasOf:o?o.record:u}))}let h,m;for(const t of f){const{path:a}=t;if(n&&"/"!==a[0]){const e=n.record.path,o="/"===e[e.length-1]?"":"/";t.path=n.record.path+(a&&o+a)}if("*"===t.path)throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');if(h=J(t,n,p),n&&"/"===a[0]&&se(h,n),o?(o.alias.push(h),re(o,h)):(m=m||h,m!==h&&m.alias.push(h),l&&e.name&&!ee(h)&&s(e.name)),u.children){const e=u.children;for(let t=0;t<e.length;t++)r(e[t],h,o&&o.children[t])}o=o||h,i(h)}return m?()=>{s(m)}:c}function s(e){if($(e)){const t=o.get(e);t&&(o.delete(e),n.splice(n.indexOf(t),1),t.children.forEach(s),t.alias.forEach(s))}else{const t=n.indexOf(e);t>-1&&(n.splice(t,1),e.record.name&&o.delete(e.record.name),e.children.forEach(s),e.alias.forEach(s))}}function i(e){let t=0;for(;t<n.length&&K(e,n[t])>=0&&(e.record.path!==n[t].record.path||!ie(e,n[t]));)t++;n.splice(t,0,e),e.record.name&&!ee(e)&&o.set(e.record.name,e)}return t=ne({strict:!1,end:!0,sensitive:!1},t),e.forEach((e=>r(e))),{addRoute:r,resolve:function(e,t){let r,s,i,l={};if("name"in e&&e.name){if(r=o.get(e.name),!r)throw V(1,{location:e});{const t=Object.keys(e.params||{}).filter((e=>!r.keys.find((t=>t.name===e))));t.length&&d(`Discarded invalid param(s) "${t.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`)}i=r.record.name,l=a(X(t.params,r.keys.filter((e=>!e.optional)).map((e=>e.name))),e.params&&X(e.params,r.keys.map((e=>e.name)))),s=r.stringify(l)}else if("path"in e)s=e.path,s.startsWith("/")||d(`The Matcher cannot resolve relative paths but received "${s}". Unless you directly called \`matcher.resolve("${s}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`),r=n.find((e=>e.re.test(s))),r&&(l=r.parse(s),i=r.record.name);else{if(r=t.name?o.get(t.name):n.find((e=>e.re.test(t.path))),!r)throw V(1,{location:e,currentLocation:t});i=r.record.name,l=a({},t.params,e.params),s=r.stringify(l)}const c=[];let u=r;for(;u;)c.unshift(u.record),u=u.parent;return{name:i,path:s,params:l,matched:c,meta:te(c)}},removeRoute:s,getRoutes:function(){return n},getRecordMatcher:function(e){return o.get(e)}}}function X(e,t){const n={};for(const o of t)o in e&&(n[o]=e[o]);return n}function Z(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const o in e.components)t[o]="boolean"==typeof n?n:n[o];return t}function ee(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function te(e){return e.reduce(((e,t)=>a(e,t.meta)),{})}function ne(e,t){const n={};for(const o in e)n[o]=o in t?t[o]:e[o];return n}function oe(e,t){return e.name===t.name&&e.optional===t.optional&&e.repeatable===t.repeatable}function re(e,t){for(const n of e.keys)if(!n.optional&&!t.keys.find(oe.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`);for(const n of t.keys)if(!n.optional&&!e.keys.find(oe.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`)}function se(e,t){for(const n of t.keys)if(!e.keys.find(oe.bind(null,n)))return d(`Absolute path "${e.record.path}" must have the exact same param named "${n.name}" as its parent "${t.record.path}".`)}function ie(e,t){return t.children.some((t=>t===e||ie(e,t)))}const ae=/#/g,le=/&/g,ce=/\//g,ue=/=/g,de=/\?/g,pe=/\+/g,fe=/%5B/g,he=/%5D/g,me=/%5E/g,ve=/%60/g,ge=/%7B/g,ye=/%7C/g,be=/%7D/g,_e=/%20/g;function we(e){return encodeURI(""+e).replace(ye,"|").replace(fe,"[").replace(he,"]")}function xe(e){return we(e).replace(pe,"%2B").replace(_e,"+").replace(ae,"%23").replace(le,"%26").replace(ve,"`").replace(ge,"{").replace(be,"}").replace(me,"^")}function Se(e){return null==e?"":function(e){return we(e).replace(ae,"%23").replace(de,"%3F")}(e).replace(ce,"%2F")}function ke(e){try{return decodeURIComponent(""+e)}catch(t){d(`Error decoding "${e}". Using original value`)}return""+e}function Ce(e){const t={};if(""===e||"?"===e)return t;const n=("?"===e[0]?e.slice(1):e).split("&");for(let e=0;e<n.length;++e){const o=n[e].replace(pe," "),r=o.indexOf("="),s=ke(r<0?o:o.slice(0,r)),i=r<0?null:ke(o.slice(r+1));if(s in t){let e=t[s];u(e)||(e=t[s]=[e]),e.push(i)}else t[s]=i}return t}function je(e){let t="";for(let n in e){const o=e[n];(n=xe(n).replace(ue,"%3D"),null!=o)?(u(o)?o.map((e=>e&&xe(e))):[o&&xe(o)]).forEach((e=>{void 0!==e&&(t+=(t.length?"&":"")+n,null!=e&&(t+="="+e))})):void 0!==o&&(t+=(t.length?"&":"")+n)}return t}function Oe(e){const t={};for(const n in e){const o=e[n];void 0!==o&&(t[n]=u(o)?o.map((e=>null==e?null:""+e)):null==o?o:""+o)}return t}const Ee=Symbol("router view location matched"),Re=Symbol("router view depth"),Ae=Symbol("router"),Te=Symbol("route location"),Pe=Symbol("router view location");function Fe(){let e=[];return{add:function(t){return e.push(t),()=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)}},list:()=>e,reset:function(){e=[]}}}function $e(e,t,n){const r=()=>{e[t].delete(n)};(0,o.onUnmounted)(r),(0,o.onDeactivated)(r),(0,o.onActivated)((()=>{e[t].add(n)})),e[t].add(n)}function Ne(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function");const t=(0,o.inject)(Ee,{}).value;t?$e(t,"leaveGuards",e):d("No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Me(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function");const t=(0,o.inject)(Ee,{}).value;t?$e(t,"updateGuards",e):d("No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Ie(e,t,n,o,r){const s=o&&(o.enterCallbacks[r]=o.enterCallbacks[r]||[]);return()=>new Promise(((i,a)=>{const l=e=>{var l;!1===e?a(V(4,{from:n,to:t})):e instanceof Error?a(e):"string"==typeof(l=e)||l&&"object"==typeof l?a(V(2,{from:t,to:e})):(s&&o.enterCallbacks[r]===s&&"function"==typeof e&&s.push(e),i())},c=e.call(o&&o.instances[r],t,n,function(e,t,n){let o=0;return function(){1==o++&&d(`The "next" callback was called more than once in one navigation guard when going from "${n.fullPath}" to "${t.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`),e._called=!0,1===o&&e.apply(null,arguments)}}(l,t,n));let u=Promise.resolve(c);if(e.length<3&&(u=u.then(l)),e.length>2){const t=`The "next" callback was never called inside of ${e.name?'"'+e.name+'"':""}:\n${e.toString()}\n. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;if("object"==typeof c&&"then"in c)u=u.then((e=>l._called?e:(d(t),Promise.reject(new Error("Invalid navigation guard")))));else if(void 0!==c&&!l._called)return d(t),void a(new Error("Invalid navigation guard"))}u.catch((e=>a(e)))}))}function Le(e,t,n,o){const r=[];for(const a of e){a.components||a.children.length||d(`Record with path "${a.path}" is either missing a "component(s)" or "children" property.`);for(const e in a.components){let l=a.components[e];if(!l||"object"!=typeof l&&"function"!=typeof l)throw d(`Component "${e}" in record with path "${a.path}" is not a valid component. Received "${String(l)}".`),new Error("Invalid route component");if("then"in l){d(`Component "${e}" in record with path "${a.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);const t=l;l=()=>t}else l.__asyncLoader&&!l.__warnedDefineAsync&&(l.__warnedDefineAsync=!0,d(`Component "${e}" in record with path "${a.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`));if("beforeRouteEnter"===t||a.instances[e])if("object"==typeof(s=l)||"displayName"in s||"props"in s||"__vccOpts"in s){const s=(l.__vccOpts||l)[t];s&&r.push(Ie(s,n,o,a,e))}else{let s=l();"catch"in s||(d(`Component "${e}" in record with path "${a.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`),s=Promise.resolve(s)),r.push((()=>s.then((r=>{if(!r)return Promise.reject(new Error(`Couldn't resolve component "${e}" at "${a.path}"`));const s=i(r)?r.default:r;a.components[e]=s;const l=(s.__vccOpts||s)[t];return l&&Ie(l,n,o,a,e)()}))))}}}var s;return r}function Ve(e){return e.matched.every((e=>e.redirect))?Promise.reject(new Error("Cannot load a route that redirects.")):Promise.all(e.matched.map((e=>e.components&&Promise.all(Object.keys(e.components).reduce(((t,n)=>{const o=e.components[n];return"function"!=typeof o||"displayName"in o||t.push(o().then((t=>{if(!t)return Promise.reject(new Error(`Couldn't resolve component "${n}" at "${e.path}". Ensure you passed a function that returns a promise.`));const o=i(t)?t.default:t;e.components[n]=o}))),t}),[]))))).then((()=>e))}function Be(e){const t=(0,o.inject)(Ae),n=(0,o.inject)(Te),r=(0,o.computed)((()=>t.resolve((0,o.unref)(e.to)))),i=(0,o.computed)((()=>{const{matched:e}=r.value,{length:t}=e,o=e[t-1],s=n.matched;if(!o||!s.length)return-1;const i=s.findIndex(v.bind(null,o));if(i>-1)return i;const a=He(e[t-2]);return t>1&&He(o)===a&&s[s.length-1].path!==a?s.findIndex(v.bind(null,e[t-2])):i})),a=(0,o.computed)((()=>i.value>-1&&function(e,t){for(const n in t){const o=t[n],r=e[n];if("string"==typeof o){if(o!==r)return!1}else if(!u(r)||r.length!==o.length||o.some(((e,t)=>e!==r[t])))return!1}return!0}(n.params,r.value.params))),l=(0,o.computed)((()=>i.value>-1&&i.value===n.matched.length-1&&g(n.params,r.value.params)));if(s){const e=(0,o.getCurrentInstance)();if(e){const t={route:r.value,isActive:a.value,isExactActive:l.value};e.__vrl_devtools=e.__vrl_devtools||[],e.__vrl_devtools.push(t),(0,o.watchEffect)((()=>{t.route=r.value,t.isActive=a.value,t.isExactActive=l.value}),{flush:"post"})}}return{route:r,href:(0,o.computed)((()=>r.value.href)),isActive:a,isExactActive:l,navigate:function(n={}){return function(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}(n)?t[(0,o.unref)(e.replace)?"replace":"push"]((0,o.unref)(e.to)).catch(c):Promise.resolve()}}}const De=(0,o.defineComponent)({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Be,setup(e,{slots:t}){const n=(0,o.reactive)(Be(e)),{options:r}=(0,o.inject)(Ae),s=(0,o.computed)((()=>({[Ue(e.activeClass,r.linkActiveClass,"router-link-active")]:n.isActive,[Ue(e.exactActiveClass,r.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive})));return()=>{const r=t.default&&t.default(n);return e.custom?r:(0,o.h)("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:s.value},r)}}});function He(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const Ue=(e,t,n)=>null!=e?e:null!=t?t:n;function ze(e,t){if(!e)return null;const n=e(t);return 1===n.length?n[0]:n}const Ge=(0,o.defineComponent)({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){!function(){const e=(0,o.getCurrentInstance)(),t=e.parent&&e.parent.type.name;if(t&&("KeepAlive"===t||t.includes("Transition"))){const e="KeepAlive"===t?"keep-alive":"transition";d(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\nUse slot props instead:\n\n<router-view v-slot="{ Component }">\n  <${e}>\n    <component :is="Component" />\n  </${e}>\n</router-view>`)}}();const r=(0,o.inject)(Pe),i=(0,o.computed)((()=>e.route||r.value)),l=(0,o.inject)(Re,0),c=(0,o.computed)((()=>{let e=(0,o.unref)(l);const{matched:t}=i.value;let n;for(;(n=t[e])&&!n.components;)e++;return e})),p=(0,o.computed)((()=>i.value.matched[c.value]));(0,o.provide)(Re,(0,o.computed)((()=>c.value+1))),(0,o.provide)(Ee,p),(0,o.provide)(Pe,i);const f=(0,o.ref)();return(0,o.watch)((()=>[f.value,p.value,e.name]),(([e,t,n],[o,r,s])=>{t&&(t.instances[n]=e,r&&r!==t&&e&&e===o&&(t.leaveGuards.size||(t.leaveGuards=r.leaveGuards),t.updateGuards.size||(t.updateGuards=r.updateGuards))),!e||!t||r&&v(t,r)&&o||(t.enterCallbacks[n]||[]).forEach((t=>t(e)))}),{flush:"post"}),()=>{const r=i.value,l=e.name,d=p.value,h=d&&d.components[l];if(!h)return ze(n.default,{Component:h,route:r});const m=d.props[l],v=m?!0===m?r.params:"function"==typeof m?m(r):m:null,g=(0,o.h)(h,a({},v,t,{onVnodeUnmounted:e=>{e.component.isUnmounted&&(d.instances[l]=null)},ref:f}));if(s&&g.ref){const e={depth:c.value,name:d.name,path:d.path,meta:d.meta};(u(g.ref)?g.ref.map((e=>e.i)):[g.ref.i]).forEach((t=>{t.__vrv_devtools=e}))}return ze(n.default,{Component:g,route:r})||g}}});function Ke(e,t){const n=a({},e,{matched:e.matched.map((e=>function(e,t){const n={};for(const o in e)t.includes(o)||(n[o]=e[o]);return n}(e,["instances","children","aliasOf"])))});return{_custom:{type:null,readOnly:!0,display:e.fullPath,tooltip:t,value:n}}}function Ye(e){return{_custom:{display:e}}}let We=0;function qe(e,t,n){if(t.__hasDevtools)return;t.__hasDevtools=!0;const s=We++;(0,r.setupDevtoolsPlugin)({id:"org.vuejs.router"+(s?"."+s:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:e},(r=>{"function"!=typeof r.now&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),r.on.inspectComponent(((e,n)=>{e.instanceData&&e.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:Ke(t.currentRoute.value,"Current Route")})})),r.on.visitComponentTree((({treeNode:e,componentInstance:t})=>{if(t.__vrv_devtools){const n=t.__vrv_devtools;e.tags.push({label:(n.name?`${n.name.toString()}: `:"")+n.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:Qe})}u(t.__vrl_devtools)&&(t.__devtoolsApi=r,t.__vrl_devtools.forEach((t=>{let n=et,o="";t.isExactActive?(n=Ze,o="This is exactly active"):t.isActive&&(n=Xe,o="This link is active"),e.tags.push({label:t.route.path,textColor:0,tooltip:o,backgroundColor:n})})))})),(0,o.watch)(t.currentRoute,(()=>{c(),r.notifyComponentUpdate(),r.sendInspectorTree(l),r.sendInspectorState(l)}));const i="router:navigations:"+s;r.addTimelineLayer({id:i,label:`Router${s?" "+s:""} Navigations`,color:4237508}),t.onError(((e,t)=>{r.addTimelineEvent({layerId:i,event:{title:"Error during Navigation",subtitle:t.fullPath,logType:"error",time:r.now(),data:{error:e},groupId:t.meta.__navigationId}})}));let a=0;t.beforeEach(((e,t)=>{const n={guard:Ye("beforeEach"),from:Ke(t,"Current Location during this navigation"),to:Ke(e,"Target location")};Object.defineProperty(e.meta,"__navigationId",{value:a++}),r.addTimelineEvent({layerId:i,event:{time:r.now(),title:"Start of navigation",subtitle:e.fullPath,data:n,groupId:e.meta.__navigationId}})})),t.afterEach(((e,t,n)=>{const o={guard:Ye("afterEach")};n?(o.failure={_custom:{type:Error,readOnly:!0,display:n?n.message:"",tooltip:"Navigation Failure",value:n}},o.status=Ye("❌")):o.status=Ye("✅"),o.from=Ke(t,"Current Location during this navigation"),o.to=Ke(e,"Target location"),r.addTimelineEvent({layerId:i,event:{title:"End of navigation",subtitle:e.fullPath,time:r.now(),data:o,logType:n?"warning":"default",groupId:e.meta.__navigationId}})}));const l="router-inspector:"+s;function c(){if(!d)return;const e=d;let o=n.getRoutes().filter((e=>!e.parent));o.forEach(st),e.filter&&(o=o.filter((t=>it(t,e.filter.toLowerCase())))),o.forEach((e=>rt(e,t.currentRoute.value))),e.rootNodes=o.map(tt)}let d;r.addInspector({id:l,label:"Routes"+(s?" "+s:""),icon:"book",treeFilterPlaceholder:"Search routes"}),r.on.getInspectorTree((t=>{d=t,t.app===e&&t.inspectorId===l&&c()})),r.on.getInspectorState((t=>{if(t.app===e&&t.inspectorId===l){const e=n.getRoutes().find((e=>e.record.__vd_id===t.nodeId));e&&(t.state={options:Je(e)})}})),r.sendInspectorTree(l),r.sendInspectorState(l)}))}function Je(e){const{record:t}=e,n=[{editable:!1,key:"path",value:t.path}];return null!=t.name&&n.push({editable:!1,key:"name",value:t.name}),n.push({editable:!1,key:"regexp",value:e.re}),e.keys.length&&n.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:e.keys.map((e=>`${e.name}${function(e){return e.optional?e.repeatable?"*":"?":e.repeatable?"+":""}(e)}`)).join(" "),tooltip:"Param keys",value:e.keys}}}),null!=t.redirect&&n.push({editable:!1,key:"redirect",value:t.redirect}),e.alias.length&&n.push({editable:!1,key:"aliases",value:e.alias.map((e=>e.record.path))}),Object.keys(e.record.meta).length&&n.push({editable:!1,key:"meta",value:e.record.meta}),n.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:e.score.map((e=>e.join(", "))).join(" | "),tooltip:"Score used to sort routes",value:e.score}}}),n}const Qe=15485081,Xe=2450411,Ze=8702998,et=16486972;function tt(e){const t=[],{record:n}=e;null!=n.name&&t.push({label:String(n.name),textColor:0,backgroundColor:2282478}),n.aliasOf&&t.push({label:"alias",textColor:0,backgroundColor:et}),e.__vd_match&&t.push({label:"matches",textColor:0,backgroundColor:Qe}),e.__vd_exactActive&&t.push({label:"exact",textColor:0,backgroundColor:Ze}),e.__vd_active&&t.push({label:"active",textColor:0,backgroundColor:Xe}),n.redirect&&t.push({label:"string"==typeof n.redirect?`redirect: ${n.redirect}`:"redirects",textColor:16777215,backgroundColor:6710886});let o=n.__vd_id;return null==o&&(o=String(nt++),n.__vd_id=o),{id:o,label:n.path,tags:t,children:e.children.map(tt)}}let nt=0;const ot=/^\/(.*)\/([a-z]*)$/;function rt(e,t){const n=t.matched.length&&v(t.matched[t.matched.length-1],e.record);e.__vd_exactActive=e.__vd_active=n,n||(e.__vd_active=t.matched.some((t=>v(t,e.record)))),e.children.forEach((e=>rt(e,t)))}function st(e){e.__vd_match=!1,e.children.forEach(st)}function it(e,t){const n=String(e.re).match(ot);if(e.__vd_match=!1,!n||n.length<3)return!1;if(new RegExp(n[1].replace(/\$$/,""),n[2]).test(t))return e.children.forEach((e=>it(e,t))),("/"!==e.record.path||"/"===t)&&(e.__vd_match=e.re.test(t),!0);const o=e.record.path.toLowerCase(),r=ke(o);return!(t.startsWith("/")||!r.includes(t)&&!o.includes(t))||!(!r.startsWith(t)&&!o.startsWith(t))||!(!e.record.name||!String(e.record.name).includes(t))||e.children.some((e=>it(e,t)))}function at(e){const t=Q(e.routes,e),n=e.parseQuery||Ce,r=e.stringifyQuery||je,i=e.history;if(!i)throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');const p=Fe(),h=Fe(),g=Fe(),y=(0,o.shallowRef)(N);let b=N;s&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const w=l.bind(null,(e=>""+e)),x=l.bind(null,Se),S=l.bind(null,ke);function k(e,o){if(o=a({},o||y.value),"string"==typeof e){const r=f(n,e,o.path),s=t.resolve({path:r.path},o),l=i.createHref(r.fullPath);return l.startsWith("//")?d(`Location "${e}" resolved to "${l}". A resolved location cannot start with multiple slashes.`):s.matched.length||d(`No match found for location with path "${e}"`),a(r,s,{params:S(s.params),hash:ke(r.hash),redirectedFrom:void 0,href:l})}let s;if("path"in e)"params"in e&&!("name"in e)&&Object.keys(e.params).length&&d(`Path "${e.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`),s=a({},e,{path:f(n,e.path,o.path).path});else{const t=a({},e.params);for(const e in t)null==t[e]&&delete t[e];s=a({},e,{params:x(e.params)}),o.params=x(o.params)}const l=t.resolve(s,o),c=e.hash||"";c&&!c.startsWith("#")&&d(`A \`hash\` should always start with the character "#". Replace "${c}" with "#${c}".`),l.params=w(S(l.params));const u=function(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}(r,a({},e,{hash:(p=c,we(p).replace(ge,"{").replace(be,"}").replace(me,"^")),path:l.path}));var p;const h=i.createHref(u);return h.startsWith("//")?d(`Location "${e}" resolved to "${h}". A resolved location cannot start with multiple slashes.`):l.matched.length||d(`No match found for location with path "${"path"in e?e.path:e}"`),a({fullPath:u,hash:c,query:r===je?Oe(e.query):e.query||{}},l,{redirectedFrom:void 0,href:h})}function E(e){return"string"==typeof e?f(n,e,y.value.path):a({},e)}function R(e,t){if(b!==e)return V(8,{from:t,to:e})}function A(e){return P(e)}function T(e){const t=e.matched[e.matched.length-1];if(t&&t.redirect){const{redirect:n}=t;let o="function"==typeof n?n(e):n;if("string"==typeof o&&(o=o.includes("?")||o.includes("#")?o=E(o):{path:o},o.params={}),!("path"in o)&&!("name"in o))throw d(`Invalid redirect found:\n${JSON.stringify(o,null,2)}\n when navigating to "${e.fullPath}". A redirect must contain a name or path. This will break in production.`),new Error("Invalid redirect");return a({query:e.query,hash:e.hash,params:"path"in o?{}:e.params},o)}}function P(e,t){const n=b=k(e),o=y.value,s=e.state,i=e.force,l=!0===e.replace,c=T(n);if(c)return P(a(E(c),{state:"object"==typeof c?a({},s,c.state):s,force:i,replace:l}),t||n);const u=n;let p;return u.redirectedFrom=t,!i&&m(r,o,n)&&(p=V(16,{to:u,from:o}),Y(o,o,!0,!1)),(p?Promise.resolve(p):M(u,o)).catch((e=>B(e)?B(e,2)?e:K(e):G(e,u,o))).then((e=>{if(e){if(B(e,2))return m(r,k(e.to),u)&&t&&(t._count=t._count?t._count+1:1)>10?(d(`Detected an infinite redirection in a navigation guard when going from "${o.fullPath}" to "${u.fullPath}". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`),Promise.reject(new Error("Infinite redirect in navigation guard"))):P(a({replace:l},E(e.to),{state:"object"==typeof e.to?a({},s,e.to.state):s,force:i}),t||u)}else e=L(u,o,!0,l,s);return I(u,o,e),e}))}function F(e,t){const n=R(e,t);return n?Promise.reject(n):Promise.resolve()}function M(e,t){let n;const[o,r,s]=function(e,t){const n=[],o=[],r=[],s=Math.max(t.matched.length,e.matched.length);for(let i=0;i<s;i++){const s=t.matched[i];s&&(e.matched.find((e=>v(e,s)))?o.push(s):n.push(s));const a=e.matched[i];a&&(t.matched.find((e=>v(e,a)))||r.push(a))}return[n,o,r]}(e,t);n=Le(o.reverse(),"beforeRouteLeave",e,t);for(const r of o)r.leaveGuards.forEach((o=>{n.push(Ie(o,e,t))}));const i=F.bind(null,e,t);return n.push(i),lt(n).then((()=>{n=[];for(const o of p.list())n.push(Ie(o,e,t));return n.push(i),lt(n)})).then((()=>{n=Le(r,"beforeRouteUpdate",e,t);for(const o of r)o.updateGuards.forEach((o=>{n.push(Ie(o,e,t))}));return n.push(i),lt(n)})).then((()=>{n=[];for(const o of e.matched)if(o.beforeEnter&&!t.matched.includes(o))if(u(o.beforeEnter))for(const r of o.beforeEnter)n.push(Ie(r,e,t));else n.push(Ie(o.beforeEnter,e,t));return n.push(i),lt(n)})).then((()=>(e.matched.forEach((e=>e.enterCallbacks={})),n=Le(s,"beforeRouteEnter",e,t),n.push(i),lt(n)))).then((()=>{n=[];for(const o of h.list())n.push(Ie(o,e,t));return n.push(i),lt(n)})).catch((e=>B(e,8)?e:Promise.reject(e)))}function I(e,t,n){for(const o of g.list())o(e,t,n)}function L(e,t,n,o,r){const l=R(e,t);if(l)return l;const c=t===N,u=s?history.state:{};n&&(o||c?i.replace(e.fullPath,a({scroll:c&&u&&u.scroll},r)):i.push(e.fullPath,r)),y.value=e,Y(e,t,n,c),K()}let D;let H,U=Fe(),z=Fe();function G(e,t,n){K(e);const o=z.list();return o.length?o.forEach((o=>o(e,t,n))):(d("uncaught error during route navigation:"),console.error(e)),Promise.reject(e)}function K(e){return H||(H=!e,D||(D=i.listen(((e,t,n)=>{if(!X.listening)return;const o=k(e),r=T(o);if(r)return void P(a(r,{replace:!0}),o).catch(c);b=o;const l=y.value;var u,d;s&&(u=j(l.fullPath,n.delta),d=C(),O.set(u,d)),M(o,l).catch((e=>B(e,12)?e:B(e,2)?(P(e.to,o).then((e=>{B(e,20)&&!n.delta&&n.type===_.pop&&i.go(-1,!1)})).catch(c),Promise.reject()):(n.delta&&i.go(-n.delta,!1),G(e,o,l)))).then((e=>{(e=e||L(o,l,!1))&&(n.delta&&!B(e,8)?i.go(-n.delta,!1):n.type===_.pop&&B(e,20)&&i.go(-1,!1)),I(o,l,e)})).catch(c)}))),U.list().forEach((([t,n])=>e?n(e):t())),U.reset()),e}function Y(t,n,r,i){const{scrollBehavior:a}=e;if(!s||!a)return Promise.resolve();const l=!r&&function(e){const t=O.get(e);return O.delete(e),t}(j(t.fullPath,0))||(i||!r)&&history.state&&history.state.scroll||null;return(0,o.nextTick)().then((()=>a(t,n,l))).then((e=>e&&function(e){let t;if("el"in e){const n=e.el,o="string"==typeof n&&n.startsWith("#");if(!("string"!=typeof e.el||o&&document.getElementById(e.el.slice(1))))try{const t=document.querySelector(e.el);if(o&&t)return void d(`The selector "${e.el}" should be passed as "el: document.querySelector('${e.el}')" because it starts with "#".`)}catch(t){return void d(`The selector "${e.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`)}const r="string"==typeof n?o?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!r)return void d(`Couldn't find element using selector "${e.el}" returned by scrollBehavior.`);t=function(e,t){const n=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{behavior:t.behavior,left:o.left-n.left-(t.left||0),top:o.top-n.top-(t.top||0)}}(r,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(null!=t.left?t.left:window.pageXOffset,null!=t.top?t.top:window.pageYOffset)}(e))).catch((e=>G(e,t,n)))}const W=e=>i.go(e);let q;const J=new Set,X={currentRoute:y,listening:!0,addRoute:function(e,n){let o,r;return $(e)?(o=t.getRecordMatcher(e),r=n):r=e,t.addRoute(r,o)},removeRoute:function(e){const n=t.getRecordMatcher(e);n?t.removeRoute(n):d(`Cannot remove non-existent route "${String(e)}"`)},hasRoute:function(e){return!!t.getRecordMatcher(e)},getRoutes:function(){return t.getRoutes().map((e=>e.record))},resolve:k,options:e,push:A,replace:function(e){return A(a(E(e),{replace:!0}))},go:W,back:()=>W(-1),forward:()=>W(1),beforeEach:p.add,beforeResolve:h.add,afterEach:g.add,onError:z.add,isReady:function(){return H&&y.value!==N?Promise.resolve():new Promise(((e,t)=>{U.add([e,t])}))},install(e){const n=this;e.component("RouterLink",De),e.component("RouterView",Ge),e.config.globalProperties.$router=n,Object.defineProperty(e.config.globalProperties,"$route",{enumerable:!0,get:()=>(0,o.unref)(y)}),s&&!q&&y.value===N&&(q=!0,A(i.location).catch((e=>{d("Unexpected error when starting the router:",e)})));const r={};for(const e in N)r[e]=(0,o.computed)((()=>y.value[e]));e.provide(Ae,n),e.provide(Te,(0,o.reactive)(r)),e.provide(Pe,y);const a=e.unmount;J.add(e),e.unmount=function(){J.delete(e),J.size<1&&(b=N,D&&D(),D=null,y.value=N,q=!1,H=!1),a()},s&&qe(e,n,t)}};return X}function lt(e){return e.reduce(((e,t)=>e.then((()=>t()))),Promise.resolve())}function ct(){return(0,o.inject)(Ae)}function ut(){return(0,o.inject)(Te)}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{"use strict";n.r(o);var e=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),t=n("./node_modules/@wordpress/hooks/build-module/index.js"),r=n("./src/App.vue"),s=n("./src/router/index.js"),i=(n("./src/i18n.js"),n("./src/styles/main.scss"),n("./src/mixins/i18n.js")),a=(n("./src/utils/menu-fix.js"),n("./src/store/index.js")),l=(0,e.createApp)({extends:r.default,mixins:[i.default]});l.use(s.default),l.use(a.default),l.config.devtools=!0,l.mount("#wp-vue-kit"),window.wpEmailerHooks=(0,t.createHooks)(),wpEmailerHooks.addFilter=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;wpEmailerHooks.hooks.addFilter(e,t,(function(e){return e.push(n),e}),o)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiOytNQXNCZSxTQUFTQSxFQUFTQyxHQUNoQyxJQUFJQyxHQUFRLGFBQVNELEdBRXJCLE9BQU8sU0FBVUUsR0FDaEIsT0FBTyxhQUFVRCxFQUFPQyxFQUN6QixDQUNELG1HQ3ZCQSxJQUFJQyxFQUFZLENBQ2YsSUFBSyxTQUFVQyxHQUNkLE9BQVNBLENBQ1YsRUFDQSxJQUFLLFNBQVVBLEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxJQUFLLFNBQVVELEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxJQUFLLFNBQVVELEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxJQUFLLFNBQVVELEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxJQUFLLFNBQVVELEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxJQUFLLFNBQVVELEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxLQUFNLFNBQVVELEVBQUdDLEdBQ2xCLE9BQU9ELEdBQUtDLENBQ2IsRUFDQSxJQUFLLFNBQVVELEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUlDLENBQ1osRUFDQSxLQUFNLFNBQVVELEVBQUdDLEdBQ2xCLE9BQU9ELEdBQUtDLENBQ2IsRUFDQSxLQUFNLFNBQVVELEVBQUdDLEdBQ2xCLE9BQU9ELElBQU1DLENBQ2QsRUFDQSxLQUFNLFNBQVVELEVBQUdDLEdBQ2xCLE9BQU9ELElBQU1DLENBQ2QsRUFDQSxLQUFNLFNBQVVELEVBQUdDLEdBQ2xCLE9BQU9ELEdBQUtDLENBQ2IsRUFDQSxLQUFNLFNBQVVELEVBQUdDLEdBQ2xCLE9BQU9ELEdBQUtDLENBQ2IsRUFDQSxLQUFNLFNBQVVELEVBQUdDLEVBQUdDLEdBQ3JCLEdBQUtGLEVBQ0osTUFBTUMsRUFHUCxPQUFPQyxDQUNSLEdBd0JjLFNBQVNDLEVBQVVDLEVBQVNOLEdBQzFDLElBQ0NPLEVBQUdDLEVBQUdDLEVBQU1DLEVBQW1CQyxFQUFNQyxFQURsQ0MsRUFBUSxHQUdaLElBQU1OLEVBQUksRUFBR0EsRUFBSUQsRUFBUVEsT0FBUVAsSUFBTSxDQUl0QyxHQUhBSSxFQUFPTCxFQUFTQyxHQUVoQkcsRUFBb0JULEVBQVdVLEdBQ04sQ0FJeEIsSUFGQUgsRUFBSUUsRUFBa0JJLE9BQ3RCTCxFQUFPTSxNQUFPUCxHQUNOQSxLQUNQQyxFQUFNRCxHQUFNSyxFQUFNRyxNQUduQixJQUNDSixFQUFRRixFQUFrQk8sTUFBTyxLQUFNUixFQUd4QyxDQUZFLE1BQVFTLEdBQ1QsT0FBT0EsQ0FDUixDQUNELE1BQ0NOLEVBRFdaLEVBQVVtQixlQUFnQlIsR0FDN0JYLEVBQVdXLElBRVZBLEVBR1ZFLEVBQU1PLEtBQU1SLEVBQ2IsQ0FFQSxPQUFPQyxFQUFPLEVBQ2YsMEpDbEdlLFNBQVNRLEVBQWF2QixHQUNwQyxJQUFJTyxHQUFXLGFBQVNQLEdBRXhCLE9BQU8sU0FBVXdCLEdBQ2hCLE9BQVFqQixFQUFVLENBQUVpQixFQUFHQSxHQUN4QixDQUNELG9FQ2pCQSxJQUFJQyxFQUFZQyxFQUFTQyxFQUFhQyxFQXdFdkIsU0FBU3BCLEVBQVNSLEdBS2hDLElBSkEsSUFFQzZCLEVBQU9DLEVBQVVqQixFQUFNa0IsRUFGcEI5QixFQUFRLEdBQ1hjLEVBQVEsR0FHQ2MsRUFBUTdCLEVBQVc2QixNQUFPRCxJQUFjLENBVWpELElBVEFFLEVBQVdELEVBQU8sSUFJbEJoQixFQUFPYixFQUFXZ0MsT0FBUSxFQUFHSCxFQUFNSSxPQUFRQyxTQUUxQ2pDLEVBQU1xQixLQUFNVCxHQUdIa0IsRUFBVWhCLEVBQU1HLE9BQVUsQ0FDbkMsR0FBS1MsRUFBYUcsSUFDakIsR0FBS0gsRUFBYUcsR0FBWSxLQUFRQyxFQUFVLENBSS9DRCxFQUFXSCxFQUFhRyxHQUFZLElBQU9BLEVBQzNDLEtBQ0QsT0FDTSxHQUFLSixFQUFRUyxRQUFTSixJQUFhLEdBQUtOLEVBQVlNLEdBQVlOLEVBQVlLLEdBQWEsQ0FHL0ZmLEVBQU1PLEtBQU1TLEdBQ1osS0FDRCxDQUdBOUIsRUFBTXFCLEtBQU1TLEVBQ2IsQ0FFT0osRUFBYUcsSUFDbkJmLEVBQU1PLEtBQU1RLEdBSWI5QixFQUFhQSxFQUFXZ0MsT0FBUUgsRUFBTUksTUFBUUgsRUFBU2QsT0FDeEQsQ0FTQSxPQU5BaEIsRUFBYUEsRUFBV2tDLFNBRXZCakMsRUFBTXFCLEtBQU10QixHQUlOQyxFQUFNbUMsT0FBUXJCLEVBQU1zQixVQUM1QiwrQkFwSEFaLEVBQWEsQ0FDWixJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLEtBQU0sRUFDTixJQUFLLEVBQ0wsS0FBTSxFQUNOLEtBQU0sRUFDTixLQUFNLEVBQ04sS0FBTSxFQUNOLEtBQU0sRUFDTixJQUFLLEVBQ0wsS0FBTSxHQVFQQyxFQUFVLENBQUUsSUFBSyxLQVNqQkMsRUFBYyxDQUNiLElBQUssQ0FBRSxLQUNQLElBQUssQ0FBRSxJQUFLLE9BUWJDLEVBQVUsb01DbkRILE1BQU1VLEVBQWEsd0JBQ2JDLEVBQTJCLGdHQ0RqQyxTQUFTQyxJQUNaLE9BQU9DLElBQVlDLDRCQUN2QixDQUNPLFNBQVNELElBRVosTUFBNkIsb0JBQWRFLFdBQStDLG9CQUFYQyxPQUM3Q0EsWUFDa0IsSUFBWCxFQUFBQyxFQUNILEVBQUFBLEVBQ0EsQ0FBQyxDQUNmLG9GQUNPLE1BQU1DLEVBQW9DLG1CQUFWQyxtYUNMaEMsU0FBU0MsRUFBb0JDLEVBQWtCQyxHQUNsRCxNQUFNQyxFQUFhRixFQUNiRyxHQUFTLElBQUFYLGFBQ1RZLEdBQU8sSUFBQWIseUJBQ1BjLEVBQWMsRUFBQVIsa0JBQW9CSyxFQUFXSSxpQkFDbkQsSUFBSUYsSUFBU0QsRUFBT0ksdUNBQTBDRixFQUd6RCxDQUNELE1BQU1HLEVBQVFILEVBQWMsSUFBSSxFQUFBSSxTQUFTUCxFQUFZRSxHQUFRLE1BQ2hERCxFQUFPTyx5QkFBMkJQLEVBQU9PLDBCQUE0QixJQUM3RXJDLEtBQUssQ0FDTjJCLGlCQUFrQkUsRUFDbEJELFVBQ0FPLFVBRUFBLEdBQ0FQLEVBQVFPLEVBQU1HLGNBQ3RCLE1BWklQLEVBQUtRLEtBQUssRUFBQXZCLFdBQVlXLEVBQWtCQyxFQWFoRCxrT0N2Qk8sTUFBTVEsRUFDVEksWUFBWUMsRUFBUVYsR0FDaEJXLEtBQUtaLE9BQVMsS0FDZFksS0FBS0MsWUFBYyxHQUNuQkQsS0FBS0UsUUFBVSxHQUNmRixLQUFLRCxPQUFTQSxFQUNkQyxLQUFLWCxLQUFPQSxFQUNaLE1BQU1jLEVBQWtCLENBQUMsRUFDekIsR0FBSUosRUFBT0ssU0FDUCxJQUFLLE1BQU1DLEtBQU1OLEVBQU9LLFNBQVUsQ0FDOUIsTUFBTUUsRUFBT1AsRUFBT0ssU0FBU0MsR0FDN0JGLEVBQWdCRSxHQUFNQyxFQUFLQyxZQUMvQixDQUVKLE1BQU1DLEVBQXNCLG1DQUFtQ1QsRUFBT00sS0FDdEUsSUFBSUksRUFBa0JDLE9BQU9DLE9BQU8sQ0FBQyxFQUFHUixHQUN4QyxJQUNJLE1BQU1TLEVBQU1DLGFBQWFDLFFBQVFOLEdBQzNCTyxFQUFPQyxLQUFLQyxNQUFNTCxHQUN4QkYsT0FBT0MsT0FBT0YsRUFBaUJNLEVBSW5DLENBRkEsTUFBT0csR0FFUCxDQUNBbEIsS0FBS21CLFVBQVksQ0FDYkMsWUFBVyxJQUNBWCxFQUVYWSxZQUFZdkUsR0FDUixJQUNJK0QsYUFBYVMsUUFBUWQsRUFBcUJRLEtBQUtPLFVBQVV6RSxHQUk3RCxDQUZBLE1BQU9vRSxHQUVQLENBQ0FULEVBQWtCM0QsQ0FDdEIsRUFDQTBFLElBQUcsS0FDUSxJQUFBQSxRQUdYbkMsR0FDQUEsRUFBS29DLEdBQUcsRUFBQWxELDBCQUEwQixDQUFDbUQsRUFBVTVFLEtBQ3JDNEUsSUFBYTFCLEtBQUtELE9BQU9NLElBQ3pCTCxLQUFLbUIsVUFBVUUsWUFBWXZFLEVBQy9CLElBR1JrRCxLQUFLMkIsVUFBWSxJQUFJNUMsTUFBTSxDQUFDLEVBQUcsQ0FDM0I2QyxJQUFLLENBQUNDLEVBQVNDLElBQ1A5QixLQUFLWixPQUNFWSxLQUFLWixPQUFPcUMsR0FBR0ssR0FHZixJQUFJbkYsS0FDUHFELEtBQUtFLFFBQVE1QyxLQUFLLENBQ2R5RSxPQUFRRCxFQUNSbkYsUUFDRixJQUtsQnFELEtBQUtKLGNBQWdCLElBQUliLE1BQU0sQ0FBQyxFQUFHLENBQy9CNkMsSUFBSyxDQUFDQyxFQUFTQyxJQUNQOUIsS0FBS1osT0FDRVksS0FBS1osT0FBTzBDLEdBRUwsT0FBVEEsRUFDRTlCLEtBQUsyQixVQUVQakIsT0FBT3NCLEtBQUtoQyxLQUFLbUIsV0FBV2MsU0FBU0gsR0FDbkMsSUFBSW5GLEtBQ1BxRCxLQUFLQyxZQUFZM0MsS0FBSyxDQUNsQnlFLE9BQVFELEVBQ1JuRixPQUNBdUYsUUFBUyxTQUVObEMsS0FBS21CLFVBQVVXLE1BQVNuRixJQUk1QixJQUFJQSxJQUNBLElBQUl3RixTQUFRRCxJQUNmbEMsS0FBS0MsWUFBWTNDLEtBQUssQ0FDbEJ5RSxPQUFRRCxFQUNSbkYsT0FDQXVGLFdBQ0YsS0FNMUIsQ0FDQUUsb0JBQW9CaEQsR0FDaEJZLEtBQUtaLE9BQVNBLEVBQ2QsSUFBSyxNQUFNa0IsS0FBUU4sS0FBS0UsUUFDcEJGLEtBQUtaLE9BQU9xQyxHQUFHbkIsRUFBS3lCLFdBQVd6QixFQUFLM0QsTUFFeEMsSUFBSyxNQUFNMkQsS0FBUU4sS0FBS0MsWUFDcEJLLEVBQUs0QixjQUFjbEMsS0FBS1osT0FBT2tCLEVBQUt5QixXQUFXekIsRUFBSzNELE1BRTVELDhFQ3pHSixJQUFJMEYsRUFDQUMsRUFDRyxTQUFTQyxJQUNaLElBQUlDLEVBQ0osWUFBa0JDLElBQWRKLElBR2tCLG9CQUFYekQsUUFBMEJBLE9BQU84RCxhQUN4Q0wsR0FBWSxFQUNaQyxFQUFPMUQsT0FBTzhELGtCQUVTLElBQVgsRUFBQTdELElBQXdELFFBQTVCMkQsRUFBSyxFQUFBM0QsRUFBTzhELGtCQUErQixJQUFQSCxPQUFnQixFQUFTQSxFQUFHRSxjQUN4R0wsR0FBWSxFQUNaQyxFQUFPLEVBQUF6RCxFQUFPOEQsV0FBV0QsYUFHekJMLEdBQVksR0FYTEEsQ0FjZixDQUNPLFNBQVNiLElBQ1osT0FBT2UsSUFBMkJELEVBQUtkLE1BQVFvQixLQUFLcEIsS0FDeEQsa3lCQ3BCQSxTQUFTcUIsRUFBS0MsS0FBUW5HLEdBQ2xCb0csUUFBUUYsS0FBSyxjQUFjQyxPQUFVbkcsRUFDekMsQ0FFQSxJQUFJcUcsRUFDSixNQUFNQyxFQUNGbkQsWUFBWW9ELEdBQVcsR0FDbkJsRCxLQUFLa0QsU0FBV0EsRUFJaEJsRCxLQUFLbUQsUUFBUyxFQUlkbkQsS0FBS29ELFFBQVUsR0FJZnBELEtBQUtxRCxTQUFXLEdBQ2hCckQsS0FBS3NELE9BQVNOLEdBQ1RFLEdBQVlGLElBQ2JoRCxLQUFLL0IsT0FDQStFLEVBQWtCTyxTQUFXUCxFQUFrQk8sT0FBUyxLQUFLakcsS0FBSzBDLE1BQVEsRUFFdkYsQ0FDQXdELElBQUlDLEdBQ0EsR0FBSXpELEtBQUttRCxPQUFRLENBQ2IsTUFBTU8sRUFBcUJWLEVBQzNCLElBRUksT0FEQUEsRUFBb0JoRCxLQUNieUQsR0FJWCxDQUZBLFFBQ0lULEVBQW9CVSxDQUN4QixDQUNKLE1BRUliLEVBQUssdUNBRWIsQ0FLQXBCLEtBQ0l1QixFQUFvQmhELElBQ3hCLENBS0EyRCxNQUNJWCxFQUFvQmhELEtBQUtzRCxNQUM3QixDQUNBTSxLQUFLQyxHQUNELEdBQUk3RCxLQUFLbUQsT0FBUSxDQUNiLElBQUkxRyxFQUFHcUgsRUFDUCxJQUFLckgsRUFBSSxFQUFHcUgsRUFBSTlELEtBQUtvRCxRQUFRcEcsT0FBUVAsRUFBSXFILEVBQUdySCxJQUN4Q3VELEtBQUtvRCxRQUFRM0csR0FBR21ILE9BRXBCLElBQUtuSCxFQUFJLEVBQUdxSCxFQUFJOUQsS0FBS3FELFNBQVNyRyxPQUFRUCxFQUFJcUgsRUFBR3JILElBQ3pDdUQsS0FBS3FELFNBQVM1RyxLQUVsQixHQUFJdUQsS0FBS3VELE9BQ0wsSUFBSzlHLEVBQUksRUFBR3FILEVBQUk5RCxLQUFLdUQsT0FBT3ZHLE9BQVFQLEVBQUlxSCxFQUFHckgsSUFDdkN1RCxLQUFLdUQsT0FBTzlHLEdBQUdtSCxNQUFLLEdBSTVCLElBQUs1RCxLQUFLa0QsVUFBWWxELEtBQUtzRCxTQUFXTyxFQUFZLENBRTlDLE1BQU1FLEVBQU8vRCxLQUFLc0QsT0FBT0MsT0FBT3JHLE1BQzVCNkcsR0FBUUEsSUFBUy9ELE9BQ2pCQSxLQUFLc0QsT0FBT0MsT0FBT3ZELEtBQUsvQixPQUFTOEYsRUFDakNBLEVBQUs5RixNQUFRK0IsS0FBSy9CLE1BRTFCLENBQ0ErQixLQUFLc0QsWUFBU2IsRUFDZHpDLEtBQUttRCxRQUFTLENBQ2xCLENBQ0osRUFFSixTQUFTYSxFQUFZZCxHQUNqQixPQUFPLElBQUlELEVBQVlDLEVBQzNCLENBQ0EsU0FBU2UsRUFBa0JDLEVBQVFDLEVBQVFuQixHQUNuQ21CLEdBQVNBLEVBQU1oQixRQUNmZ0IsRUFBTWYsUUFBUTlGLEtBQUs0RyxFQUUzQixDQUNBLFNBQVNFLElBQ0wsT0FBT3BCLENBQ1gsQ0FDQSxTQUFTcUIsRUFBZVosR0FDaEJULEVBQ0FBLEVBQWtCSyxTQUFTL0YsS0FBS21HLEdBR2hDWixFQUFLLHlGQUdiLENBRUEsTUFBTXlCLEVBQWFsQixJQUNmLE1BQU1tQixFQUFNLElBQUlDLElBQUlwQixHQUdwQixPQUZBbUIsRUFBSUUsRUFBSSxFQUNSRixFQUFJL0csRUFBSSxFQUNEK0csQ0FBRyxFQUVSRyxFQUFjSCxJQUFTQSxFQUFJRSxFQUFJRSxHQUFjLEVBQzdDQyxFQUFjTCxJQUFTQSxFQUFJL0csRUFBSW1ILEdBQWMsRUE0QjdDRSxFQUFZLElBQUlDLFFBRXRCLElBUUlDLEVBUkFDLEVBQW1CLEVBQ25CTCxFQUFhLEVBUWpCLE1BQU1NLEVBQWNDLE9BQWlELFdBQy9EQyxFQUFzQkQsT0FBaUQsbUJBQzdFLE1BQU1FLEVBQ0Z0RixZQUFZMkQsRUFBSTRCLEVBQVksS0FBTWxCLEdBQzlCbkUsS0FBS3lELEdBQUtBLEVBQ1Z6RCxLQUFLcUYsVUFBWUEsRUFDakJyRixLQUFLbUQsUUFBUyxFQUNkbkQsS0FBS3NGLEtBQU8sR0FDWnRGLEtBQUtzRCxZQUFTYixFQUNkd0IsRUFBa0JqRSxLQUFNbUUsRUFDNUIsQ0FDQVgsTUFDSSxJQUFLeEQsS0FBS21ELE9BQ04sT0FBT25ELEtBQUt5RCxLQUVoQixJQUFJSCxFQUFTeUIsRUFDVFEsRUFBa0JDLEVBQ3RCLEtBQU9sQyxHQUFRLENBQ1gsR0FBSUEsSUFBV3RELEtBQ1gsT0FFSnNELEVBQVNBLEVBQU9BLE1BQ3BCLENBQ0EsSUFXSSxPQVZBdEQsS0FBS3NELE9BQVN5QixFQUNkQSxFQUFlL0UsS0FDZndGLEdBQWMsRUFDZGIsRUFBYSxLQUFPSyxFQUNoQkEsR0E5Qk0sR0FwQ0MsR0FBR00sV0FDdEIsR0FBSUEsRUFBS3RJLE9BQ0wsSUFBSyxJQUFJUCxFQUFJLEVBQUdBLEVBQUk2SSxFQUFLdEksT0FBUVAsSUFDN0I2SSxFQUFLN0ksR0FBR2dJLEdBQUtFLENBRXJCLEVBOERZYyxDQUFlekYsTUFHZjBGLEVBQWMxRixNQUVYQSxLQUFLeUQsSUFhaEIsQ0FYQSxRQUNRdUIsR0F2Q00sSUE3QkssQ0FBQ2QsSUFDeEIsTUFBTSxLQUFFb0IsR0FBU3BCLEVBQ2pCLEdBQUlvQixFQUFLdEksT0FBUSxDQUNiLElBQUkySSxFQUFNLEVBQ1YsSUFBSyxJQUFJbEosRUFBSSxFQUFHQSxFQUFJNkksRUFBS3RJLE9BQVFQLElBQUssQ0FDbEMsTUFBTThILEVBQU1lLEVBQUs3SSxHQUNiaUksRUFBV0gsS0FBU0ssRUFBV0wsR0FDL0JBLEVBQUlxQixPQUFPMUIsR0FHWG9CLEVBQUtLLEtBQVNwQixFQUdsQkEsRUFBSUUsSUFBTUUsRUFDVkosRUFBSS9HLElBQU1tSCxDQUNkLENBQ0FXLEVBQUt0SSxPQUFTMkksQ0FDbEIsR0FvRFlFLENBQW1CN0YsTUFFdkIyRSxFQUFhLEtBQU9LLEVBQ3BCRCxFQUFlL0UsS0FBS3NELE9BQ3BCa0MsRUFBY0QsRUFDZHZGLEtBQUtzRCxZQUFTYixFQUNWekMsS0FBSzhGLFdBQ0w5RixLQUFLNEQsTUFFYixDQUNKLENBQ0FBLE9BRVFtQixJQUFpQi9FLEtBQ2pCQSxLQUFLOEYsV0FBWSxFQUVaOUYsS0FBS21ELFNBQ1Z1QyxFQUFjMUYsTUFDVkEsS0FBSytGLFFBQ0wvRixLQUFLK0YsU0FFVC9GLEtBQUttRCxRQUFTLEVBRXRCLEVBRUosU0FBU3VDLEVBQWN4QixHQUNuQixNQUFNLEtBQUVvQixHQUFTcEIsRUFDakIsR0FBSW9CLEVBQUt0SSxPQUFRLENBQ2IsSUFBSyxJQUFJUCxFQUFJLEVBQUdBLEVBQUk2SSxFQUFLdEksT0FBUVAsSUFDN0I2SSxFQUFLN0ksR0FBR21KLE9BQU8xQixHQUVuQm9CLEVBQUt0SSxPQUFTLENBQ2xCLENBQ0osQ0FDQSxTQUFTa0gsRUFBT1QsRUFBSXVDLEdBQ1p2QyxFQUFHUyxTQUNIVCxFQUFLQSxFQUFHUyxPQUFPVCxJQUVuQixNQUFNd0MsRUFBVSxJQUFJYixFQUFlM0IsR0FDL0J1QyxLQUNBLElBQUFFLFFBQU9ELEVBQVNELEdBQ1pBLEVBQVE3QixPQUNSRixFQUFrQmdDLEVBQVNELEVBQVE3QixRQUV0QzZCLEdBQVlBLEVBQVFHLE1BQ3JCRixFQUFRekMsTUFFWixNQUFNNEMsRUFBU0gsRUFBUXpDLElBQUk2QyxLQUFLSixHQUVoQyxPQURBRyxFQUFPbEMsT0FBUytCLEVBQ1RHLENBQ1gsQ0FDQSxTQUFTeEMsRUFBS3dDLEdBQ1ZBLEVBQU9sQyxPQUFPTixNQUNsQixDQUNBLElBQUk0QixHQUFjLEVBQ2xCLE1BQU1jLEVBQWEsR0FDbkIsU0FBU0MsSUFDTEQsRUFBV2hKLEtBQUtrSSxHQUNoQkEsR0FBYyxDQUNsQixDQUNBLFNBQVNnQixJQUNMRixFQUFXaEosS0FBS2tJLEdBQ2hCQSxHQUFjLENBQ2xCLENBQ0EsU0FBU2lCLElBQ0wsTUFBTTFDLEVBQU91QyxFQUFXcEosTUFDeEJzSSxPQUF1Qi9DLElBQVRzQixHQUE0QkEsQ0FDOUMsQ0FDQSxTQUFTMkMsRUFBTXRILEVBQVF1SCxFQUFNQyxHQUN6QixHQUFJcEIsR0FBZVQsRUFBYyxDQUM3QixJQUFJOEIsRUFBVWhDLEVBQVVqRCxJQUFJeEMsR0FDdkJ5SCxHQUNEaEMsRUFBVWlDLElBQUkxSCxFQUFTeUgsRUFBVSxJQUFJRSxLQUV6QyxJQUFJeEMsRUFBTXNDLEVBQVFqRixJQUFJZ0YsR0FDakJyQyxHQUNEc0MsRUFBUUMsSUFBSUYsRUFBTXJDLEVBQU1ELEtBSzVCMEMsRUFBYXpDLEVBRlAsQ0FBRUwsT0FBUWEsRUFBYzNGLFNBQVF1SCxPQUFNQyxPQUdoRCxDQUNKLENBQ0EsU0FBU0ksRUFBYXpDLEVBQUswQyxHQUN2QixJQUFJekIsR0FBYyxFQUNkUixHQTlIYyxHQStIVEosRUFBV0wsS0FDWkEsRUFBSS9HLEdBQUttSCxFQUNUYSxHQUFlZCxFQUFXSCxJQUs5QmlCLEdBQWVqQixFQUFJMkMsSUFBSW5DLEdBRXZCUyxJQUNBakIsRUFBSTRDLElBQUlwQyxHQUNSQSxFQUFhTyxLQUFLaEksS0FBS2lILEdBQ3dCUSxFQUFhcUMsU0FDeERyQyxFQUFhcUMsUUFBUTFHLE9BQU9DLE9BQU8sQ0FBRXVELE9BQVFhLEdBQWdCa0MsSUFHekUsQ0FDQSxTQUFTSSxFQUFRakksRUFBUXVILEVBQU1DLEVBQUtVLEVBQVVDLEVBQVVDLEdBQ3BELE1BQU1YLEVBQVVoQyxFQUFVakQsSUFBSXhDLEdBQzlCLElBQUt5SCxFQUVELE9BRUosSUFBSXZCLEVBQU8sR0FDWCxHQUFhLFVBQVRxQixFQUdBckIsRUFBTyxJQUFJdUIsRUFBUVksZUFFbEIsR0FBWSxXQUFSYixJQUFvQixJQUFBYyxTQUFRdEksR0FDakN5SCxFQUFRYyxTQUFRLENBQUNwRCxFQUFLcUMsTUFDTixXQUFSQSxHQUFvQkEsR0FBT1UsSUFDM0JoQyxFQUFLaEksS0FBS2lILEVBQ2QsU0FTSixZQUpZLElBQVJxQyxHQUNBdEIsRUFBS2hJLEtBQUt1SixFQUFRakYsSUFBSWdGLElBR2xCRCxHQUNKLElBQUssT0FDSSxJQUFBZSxTQUFRdEksSUFNSixJQUFBd0ksY0FBYWhCLElBRWxCdEIsRUFBS2hJLEtBQUt1SixFQUFRakYsSUFBSSxZQVB0QjBELEVBQUtoSSxLQUFLdUosRUFBUWpGLElBQUlxRCxLQUNsQixJQUFBNEMsT0FBTXpJLElBQ05rRyxFQUFLaEksS0FBS3VKLEVBQVFqRixJQUFJdUQsS0FPOUIsTUFDSixJQUFLLFVBQ0ksSUFBQXVDLFNBQVF0SSxLQUNUa0csRUFBS2hJLEtBQUt1SixFQUFRakYsSUFBSXFELEtBQ2xCLElBQUE0QyxPQUFNekksSUFDTmtHLEVBQUtoSSxLQUFLdUosRUFBUWpGLElBQUl1RCxLQUc5QixNQUNKLElBQUssT0FDRyxJQUFBMEMsT0FBTXpJLElBQ05rRyxFQUFLaEksS0FBS3VKLEVBQVFqRixJQUFJcUQsSUFLdEMsTUFBTTZDLEVBQ0EsQ0FBRTFJLFNBQVF1SCxPQUFNQyxNQUFLVSxXQUFVQyxXQUFVQyxhQUUvQyxHQUFvQixJQUFoQmxDLEVBQUt0SSxPQUNEc0ksRUFBSyxJQUVEeUMsRUFBZXpDLEVBQUssR0FBSXdDLE9BTy9CLENBQ0QsTUFBTTFFLEVBQVUsR0FDaEIsSUFBSyxNQUFNbUIsS0FBT2UsRUFDVmYsR0FDQW5CLEVBQVE5RixRQUFRaUgsR0FJcEJ3RCxFQUFlekQsRUFBVWxCLEdBQVUwRSxFQUszQyxDQUNKLENBQ0EsU0FBU0MsRUFBZXhELEVBQUswQyxHQUV6QixNQUFNN0QsR0FBVSxJQUFBc0UsU0FBUW5ELEdBQU9BLEVBQU0sSUFBSUEsR0FDekMsSUFBSyxNQUFNTCxLQUFVZCxFQUNiYyxFQUFPOEQsVUFDUEMsRUFBYy9ELEVBQVErQyxHQUc5QixJQUFLLE1BQU0vQyxLQUFVZCxFQUNaYyxFQUFPOEQsVUFDUkMsRUFBYy9ELEVBQVErQyxFQUdsQyxDQUNBLFNBQVNnQixFQUFjL0QsRUFBUStDLElBQ3ZCL0MsSUFBV2EsR0FBZ0JiLEVBQU9nRSxnQkFDYWhFLEVBQU9pRSxXQUNsRGpFLEVBQU9pRSxXQUFVLElBQUFqQyxRQUFPLENBQUVoQyxVQUFVK0MsSUFFcEMvQyxFQUFPbUIsVUFDUG5CLEVBQU9tQixZQUdQbkIsRUFBT1YsTUFHbkIsQ0FFQSxNQUFNNEUsR0FBbUMsSUFBQUMsU0FBUSwrQkFDM0NDLEVBQWlCLElBQUk5RCxJQUUzQjlELE9BQU82SCxvQkFBb0JyRCxRQUl0QnNELFFBQU81QixHQUFlLGNBQVJBLEdBQStCLFdBQVJBLElBQ3JDNkIsS0FBSTdCLEdBQU8xQixPQUFPMEIsS0FDbEI0QixPQUFPLEVBQUFFLFdBQ045RyxFQUFvQitHLElBQ3BCQyxFQUEyQkQsR0FBYSxHQUFPLEdBQy9DRSxFQUE0QkYsR0FBYSxHQUN6Q0csRUFBbUNILEdBQWEsR0FBTSxHQUN0REksRUFBc0NDLElBQzVDLFNBQVNBLElBQ0wsTUFBTUMsRUFBbUIsQ0FBQyxFQTBCMUIsTUF6QkEsQ0FBQyxXQUFZLFVBQVcsZUFBZXRCLFNBQVFmLElBQzNDcUMsRUFBaUJyQyxHQUFPLFlBQWFqSyxHQUNqQyxNQUFNdU0sRUFBTUMsR0FBTW5KLE1BQ2xCLElBQUssSUFBSXZELEVBQUksRUFBR3FILEVBQUk5RCxLQUFLaEQsT0FBUVAsRUFBSXFILEVBQUdySCxJQUNwQ2lLLEVBQU13QyxFQUFLLE1BQThCek0sRUFBSSxJQUdqRCxNQUFNMk0sRUFBTUYsRUFBSXRDLE1BQVFqSyxHQUN4QixPQUFhLElBQVR5TSxJQUFzQixJQUFSQSxFQUVQRixFQUFJdEMsTUFBUWpLLEVBQUs4TCxJQUFJVSxLQUdyQkMsQ0FFZixDQUFDLElBRUwsQ0FBQyxPQUFRLE1BQU8sUUFBUyxVQUFXLFVBQVV6QixTQUFRZixJQUNsRHFDLEVBQWlCckMsR0FBTyxZQUFhakssR0FDakM0SixJQUNBLE1BQU02QyxFQUFNRCxHQUFNbkosTUFBTTRHLEdBQUt6SixNQUFNNkMsS0FBTXJELEdBRXpDLE9BREE4SixJQUNPMkMsQ0FDWCxDQUFDLElBRUVILENBQ1gsQ0FDQSxTQUFTTixFQUFhVSxHQUFhLEVBQU9DLEdBQVUsR0FDaEQsT0FBTyxTQUFhbEssRUFBUXdILEVBQUsyQyxHQUM3QixHQUFZLG1CQUFSM0MsRUFDQSxPQUFReUMsRUFFUCxHQUFZLG1CQUFSekMsRUFDTCxPQUFPeUMsRUFFTixHQUFZLGtCQUFSekMsRUFDTCxPQUFPMEMsRUFFTixHQUFZLFlBQVIxQyxHQUNMMkMsS0FDS0YsRUFDS0MsRUFDSUUsR0FDQUMsR0FDSkgsRUFDSUksR0FDQUMsSUFBYS9ILElBQUl4QyxHQUMvQixPQUFPQSxFQUVYLE1BQU13SyxHQUFnQixJQUFBbEMsU0FBUXRJLEdBQzlCLElBQUtpSyxHQUFjTyxJQUFpQixJQUFBQyxRQUFPZCxFQUF1Qm5DLEdBQzlELE9BQU9rRCxRQUFRbEksSUFBSW1ILEVBQXVCbkMsRUFBSzJDLEdBRW5ELE1BQU1ILEVBQU1VLFFBQVFsSSxJQUFJeEMsRUFBUXdILEVBQUsyQyxHQUNyQyxRQUFJLElBQUFiLFVBQVM5QixHQUFPMEIsRUFBZXBCLElBQUlOLEdBQU93QixFQUFtQnhCLElBQ3REd0MsR0FFTkMsR0FDRDNDLEVBQU10SCxFQUFRLE1BQThCd0gsR0FFNUMwQyxFQUNPRixFQUVQVyxHQUFNWCxHQUVDUSxJQUFpQixJQUFBaEMsY0FBYWhCLEdBQU93QyxFQUFNQSxFQUFJdE0sT0FFdEQsSUFBQWtOLFVBQVNaLEdBSUZDLEVBQWFZLEdBQVNiLEdBQU9jLEdBQVNkLEdBRTFDQSxFQUNYLENBQ0osQ0FDQSxNQUFNdEMsRUFBb0JxRCxJQUNwQkMsRUFBMkJELEdBQWEsR0FDOUMsU0FBU0EsRUFBYWIsR0FBVSxHQUM1QixPQUFPLFNBQWFsSyxFQUFRd0gsRUFBSzlKLEVBQU95TSxHQUNwQyxJQUFJaEMsRUFBV25JLEVBQU93SCxHQUN0QixHQUFJeUMsR0FBVzlCLElBQWF3QyxHQUFNeEMsS0FBY3dDLEdBQU1qTixHQUNsRCxPQUFPLEVBRVgsSUFBS3dNLElBQ0llLEdBQVV2TixJQUFXdU0sR0FBV3ZNLEtBQ2pDeUssRUFBVzRCLEdBQU01QixHQUNqQnpLLEVBQVFxTSxHQUFNck0sTUFFYixJQUFBNEssU0FBUXRJLElBQVcySyxHQUFNeEMsS0FBY3dDLEdBQU1qTixJQUU5QyxPQURBeUssRUFBU3pLLE1BQVFBLEdBQ1YsRUFHZixNQUFNd04sR0FBUyxJQUFBNUMsU0FBUXRJLEtBQVcsSUFBQXdJLGNBQWFoQixHQUN6QzJELE9BQU8zRCxHQUFPeEgsRUFBT3BDLFFBQ3JCLElBQUE2TSxRQUFPekssRUFBUXdILEdBQ2Y0RCxFQUFTVixRQUFRaEQsSUFBSTFILEVBQVF3SCxFQUFLOUosRUFBT3lNLEdBVS9DLE9BUkluSyxJQUFXK0osR0FBTUksS0FDWmUsR0FHSSxJQUFBRyxZQUFXM04sRUFBT3lLLElBQ3ZCRixFQUFRakksRUFBUSxNQUFnQ3dILEVBQUs5SixFQUFPeUssR0FINURGLEVBQVFqSSxFQUFRLE1BQWdDd0gsRUFBSzlKLElBTXREME4sQ0FDWCxDQUNKLENBcUJBLE1BQU1FLEVBQWtCLENBQ3BCOUksTUFDQWtGLE1BQ0E2RCxlQXZCSixTQUF3QnZMLEVBQVF3SCxHQUM1QixNQUFNMEQsR0FBUyxJQUFBVCxRQUFPekssRUFBUXdILEdBQ3hCVyxFQUFXbkksRUFBT3dILEdBQ2xCNEQsRUFBU1YsUUFBUWEsZUFBZXZMLEVBQVF3SCxHQUk5QyxPQUhJNEQsR0FBVUYsR0FDVmpELEVBQVFqSSxFQUFRLFNBQXNDd0gsT0FBS25FLEVBQVc4RSxHQUVuRWlELENBQ1gsRUFnQkl0RCxJQWZKLFNBQWE5SCxFQUFRd0gsR0FDakIsTUFBTTRELEVBQVNWLFFBQVE1QyxJQUFJOUgsRUFBUXdILEdBSW5DLE9BSEssSUFBQThCLFVBQVM5QixJQUFTMEIsRUFBZXBCLElBQUlOLElBQ3RDRixFQUFNdEgsRUFBUSxNQUE4QndILEdBRXpDNEQsQ0FDWCxFQVVJSSxRQVRKLFNBQWlCeEwsR0FFYixPQURBc0gsRUFBTXRILEVBQVEsV0FBc0MsSUFBQXNJLFNBQVF0SSxHQUFVLFNBQVc2RixHQUMxRTZFLFFBQVFjLFFBQVF4TCxFQUMzQixHQVFNeUwsRUFBbUIsQ0FDckJqSixJQUFLaUgsRUFDTC9CLElBQUcsQ0FBQzFILEVBQVF3SCxLQUVKL0QsRUFBSyx5QkFBeUJpSSxPQUFPbEUsa0NBQXFDeEgsSUFFdkUsR0FFWHVMLGVBQWMsQ0FBQ3ZMLEVBQVF3SCxLQUVmL0QsRUFBSyw0QkFBNEJpSSxPQUFPbEUsa0NBQXFDeEgsSUFFMUUsSUFHVDJMLEdBQXdDLElBQUE3RSxRQUFPLENBQUMsRUFBR3dFLEVBQWlCLENBQ3RFOUksSUFBS2dILEVBQ0w5QixJQUFLc0QsSUFLSFksR0FBd0MsSUFBQTlFLFFBQU8sQ0FBQyxFQUFHMkUsRUFBa0IsQ0FDdkVqSixJQUFLa0gsSUFHSG1DLEVBQWFuTyxHQUFVQSxFQUN2Qm9PLEVBQVlDLEdBQU1yQixRQUFRc0IsZUFBZUQsR0FDL0MsU0FBU0UsRUFBTWpNLEVBQVF3SCxFQUFLeUMsR0FBYSxFQUFPZ0IsR0FBWSxHQUl4RCxNQUFNaUIsRUFBWW5DLEdBRGxCL0osRUFBU0EsRUFBd0MsU0FFM0NtTSxFQUFTcEMsR0FBTXZDLEdBQ2hCeUMsSUFDR3pDLElBQVEyRSxHQUNSN0UsRUFBTTRFLEVBQVcsTUFBOEIxRSxHQUVuREYsRUFBTTRFLEVBQVcsTUFBOEJDLElBRW5ELE1BQU0sSUFBRXJFLEdBQVFnRSxFQUFTSSxHQUNuQkUsRUFBT25CLEVBQVlZLEVBQVk1QixFQUFhb0MsR0FBYUMsR0FDL0QsT0FBSXhFLEVBQUl5RSxLQUFLTCxFQUFXMUUsR0FDYjRFLEVBQUtwTSxFQUFPd0MsSUFBSWdGLElBRWxCTSxFQUFJeUUsS0FBS0wsRUFBV0MsR0FDbEJDLEVBQUtwTSxFQUFPd0MsSUFBSTJKLFNBRWxCbk0sSUFBV2tNLEdBR2hCbE0sRUFBT3dDLElBQUlnRixHQUVuQixDQUNBLFNBQVNnRixFQUFNaEYsRUFBS3lDLEdBQWEsR0FDN0IsTUFBTWpLLEVBQVNZLEtBQXNDLFFBQy9Dc0wsRUFBWW5DLEdBQU0vSixHQUNsQm1NLEVBQVNwQyxHQUFNdkMsR0FPckIsT0FOS3lDLElBQ0d6QyxJQUFRMkUsR0FDUjdFLEVBQU00RSxFQUFXLE1BQThCMUUsR0FFbkRGLEVBQU00RSxFQUFXLE1BQThCQyxJQUU1QzNFLElBQVEyRSxFQUNUbk0sRUFBTzhILElBQUlOLEdBQ1h4SCxFQUFPOEgsSUFBSU4sSUFBUXhILEVBQU84SCxJQUFJcUUsRUFDeEMsQ0FDQSxTQUFTTSxHQUFLek0sRUFBUWlLLEdBQWEsR0FHL0IsT0FGQWpLLEVBQVNBLEVBQXdDLFNBQ2hEaUssR0FBYzNDLEVBQU15QyxHQUFNL0osR0FBUyxVQUFzQzZGLEdBQ25FNkUsUUFBUWxJLElBQUl4QyxFQUFRLE9BQVFBLEVBQ3ZDLENBQ0EsU0FBUytILEdBQUlySyxHQUNUQSxFQUFRcU0sR0FBTXJNLEdBQ2QsTUFBTXNDLEVBQVMrSixHQUFNbkosTUFPckIsT0FOY2tMLEVBQVM5TCxHQUNGOEgsSUFBSXlFLEtBQUt2TSxFQUFRdEMsS0FFbENzQyxFQUFPK0gsSUFBSXJLLEdBQ1h1SyxFQUFRakksRUFBUSxNQUFnQ3RDLEVBQU9BLElBRXBEa0QsSUFDWCxDQUNBLFNBQVM4TCxHQUFNbEYsRUFBSzlKLEdBQ2hCQSxFQUFRcU0sR0FBTXJNLEdBQ2QsTUFBTXNDLEVBQVMrSixHQUFNbkosT0FDZixJQUFFa0gsRUFBRyxJQUFFdEYsR0FBUXNKLEVBQVM5TCxHQUM5QixJQUFJa0wsRUFBU3BELEVBQUl5RSxLQUFLdk0sRUFBUXdILEdBQ3pCMEQsRUFLRHlCLEdBQWtCM00sRUFBUThILEVBQUtOLElBSi9CQSxFQUFNdUMsR0FBTXZDLEdBQ1owRCxFQUFTcEQsRUFBSXlFLEtBQUt2TSxFQUFRd0gsSUFLOUIsTUFBTVcsRUFBVzNGLEVBQUkrSixLQUFLdk0sRUFBUXdILEdBUWxDLE9BUEF4SCxFQUFPMEgsSUFBSUYsRUFBSzlKLEdBQ1h3TixHQUdJLElBQUFHLFlBQVczTixFQUFPeUssSUFDdkJGLEVBQVFqSSxFQUFRLE1BQWdDd0gsRUFBSzlKLEVBQU95SyxHQUg1REYsRUFBUWpJLEVBQVEsTUFBZ0N3SCxFQUFLOUosR0FLbERrRCxJQUNYLENBQ0EsU0FBU2dNLEdBQVlwRixHQUNqQixNQUFNeEgsRUFBUytKLEdBQU1uSixPQUNmLElBQUVrSCxFQUFHLElBQUV0RixHQUFRc0osRUFBUzlMLEdBQzlCLElBQUlrTCxFQUFTcEQsRUFBSXlFLEtBQUt2TSxFQUFRd0gsR0FDekIwRCxFQUtEeUIsR0FBa0IzTSxFQUFROEgsRUFBS04sSUFKL0JBLEVBQU11QyxHQUFNdkMsR0FDWjBELEVBQVNwRCxFQUFJeUUsS0FBS3ZNLEVBQVF3SCxJQUs5QixNQUFNVyxFQUFXM0YsRUFBTUEsRUFBSStKLEtBQUt2TSxFQUFRd0gsUUFBT25FLEVBRXpDK0gsRUFBU3BMLEVBQU93RyxPQUFPZ0IsR0FJN0IsT0FISTBELEdBQ0FqRCxFQUFRakksRUFBUSxTQUFzQ3dILE9BQUtuRSxFQUFXOEUsR0FFbkVpRCxDQUNYLENBQ0EsU0FBU3lCLEtBQ0wsTUFBTTdNLEVBQVMrSixHQUFNbkosTUFDZmtNLEVBQTJCLElBQWhCOU0sRUFBT3lNLEtBQ2xCckUsR0FDQSxJQUFBSyxPQUFNekksR0FDRixJQUFJMkgsSUFBSTNILEdBQ1IsSUFBSW9GLElBQUlwRixHQUdab0wsRUFBU3BMLEVBQU82TSxRQUl0QixPQUhJQyxHQUNBN0UsRUFBUWpJLEVBQVEsYUFBb0NxRCxPQUFXQSxFQUFXK0UsR0FFdkVnRCxDQUNYLENBQ0EsU0FBUzJCLEdBQWM5QyxFQUFZZ0IsR0FDL0IsT0FBTyxTQUFpQitCLEVBQVVDLEdBQzlCLE1BQU1DLEVBQVd0TSxLQUNYWixFQUFTa04sRUFBMEMsUUFDbkRoQixFQUFZbkMsR0FBTS9KLEdBQ2xCb00sRUFBT25CLEVBQVlZLEVBQVk1QixFQUFhb0MsR0FBYUMsR0FFL0QsT0FEQ3JDLEdBQWMzQyxFQUFNNEUsRUFBVyxVQUFzQ3JHLEdBQy9EN0YsRUFBT3VJLFNBQVEsQ0FBQzdLLEVBQU84SixJQUluQndGLEVBQVNULEtBQUtVLEVBQVNiLEVBQUsxTyxHQUFRME8sRUFBSzVFLEdBQU0wRixJQUU5RCxDQUNKLENBQ0EsU0FBU0MsR0FBcUJ4SyxFQUFRc0gsRUFBWWdCLEdBQzlDLE9BQU8sWUFBYTFOLEdBQ2hCLE1BQU15QyxFQUFTWSxLQUFzQyxRQUMvQ3NMLEVBQVluQyxHQUFNL0osR0FDbEJvTixHQUFjLElBQUEzRSxPQUFNeUQsR0FDcEJtQixFQUFvQixZQUFYMUssR0FBeUJBLElBQVdtRCxPQUFPd0gsVUFBWUYsRUFDaEVHLEVBQXVCLFNBQVg1SyxHQUFxQnlLLEVBQ2pDSSxFQUFnQnhOLEVBQU8yQyxNQUFXcEYsR0FDbEM2TyxFQUFPbkIsRUFBWVksRUFBWTVCLEVBQWFvQyxHQUFhQyxHQUsvRCxPQUpDckMsR0FDRzNDLEVBQU00RSxFQUFXLFVBQXNDcUIsRUFBWXhILEVBQXNCRixHQUd0RixDQUVINEgsT0FDSSxNQUFNLE1BQUUvUCxFQUFLLEtBQUVnUSxHQUFTRixFQUFjQyxPQUN0QyxPQUFPQyxFQUNELENBQUVoUSxRQUFPZ1EsUUFDVCxDQUNFaFEsTUFBTzJQLEVBQVMsQ0FBQ2pCLEVBQUsxTyxFQUFNLElBQUswTyxFQUFLMU8sRUFBTSxLQUFPME8sRUFBSzFPLEdBQ3hEZ1EsT0FFWixFQUVBLENBQUM1SCxPQUFPd0gsWUFDSixPQUFPMU0sSUFDWCxFQUVSLENBQ0osQ0FDQSxTQUFTK00sR0FBcUJwRyxHQUMxQixPQUFPLFlBQWFoSyxHQUM2QixDQUN6QyxNQUFNaUssRUFBTWpLLEVBQUssR0FBSyxXQUFXQSxFQUFLLE9BQVMsR0FDL0NvRyxRQUFRRixLQUFLLElBQUcsSUFBQW1LLFlBQVdyRyxnQkFBbUJDLCtCQUFrQ3VDLEdBQU1uSixNQUMxRixDQUNBLE1BQWdCLFdBQVQyRyxHQUF3RDNHLElBQ25FLENBQ0osQ0FDQSxTQUFTaU4sS0FDTCxNQUFNQyxFQUEwQixDQUM1QnRMLElBQUlnRixHQUNBLE9BQU95RSxFQUFNckwsS0FBTTRHLEVBQ3ZCLEVBQ0lpRixXQUNBLE9BQU9BLEdBQUs3TCxLQUNoQixFQUNBa0gsSUFBSzBFLEVBQ0x6RSxPQUNBTCxJQUFLZ0YsR0FDTGxHLE9BQVFvRyxHQUNSQyxTQUNBdEUsUUFBU3dFLElBQWMsR0FBTyxJQUU1QmdCLEVBQTBCLENBQzVCdkwsSUFBSWdGLEdBQ0EsT0FBT3lFLEVBQU1yTCxLQUFNNEcsR0FBSyxHQUFPLEVBQ25DLEVBQ0lpRixXQUNBLE9BQU9BLEdBQUs3TCxLQUNoQixFQUNBa0gsSUFBSzBFLEVBQ0x6RSxPQUNBTCxJQUFLZ0YsR0FDTGxHLE9BQVFvRyxHQUNSQyxTQUNBdEUsUUFBU3dFLElBQWMsR0FBTyxJQUU1QmlCLEVBQTJCLENBQzdCeEwsSUFBSWdGLEdBQ0EsT0FBT3lFLEVBQU1yTCxLQUFNNEcsR0FBSyxFQUM1QixFQUNJaUYsV0FDQSxPQUFPQSxHQUFLN0wsTUFBTSxFQUN0QixFQUNBa0gsSUFBSU4sR0FDQSxPQUFPZ0YsRUFBTUQsS0FBSzNMLEtBQU00RyxHQUFLLEVBQ2pDLEVBQ0FPLElBQUs0RixHQUFxQixPQUMxQmpHLElBQUtpRyxHQUFxQixPQUMxQm5ILE9BQVFtSCxHQUFxQixVQUM3QmQsTUFBT2MsR0FBcUIsU0FDNUJwRixRQUFTd0UsSUFBYyxHQUFNLElBRTNCa0IsRUFBa0MsQ0FDcEN6TCxJQUFJZ0YsR0FDQSxPQUFPeUUsRUFBTXJMLEtBQU00RyxHQUFLLEdBQU0sRUFDbEMsRUFDSWlGLFdBQ0EsT0FBT0EsR0FBSzdMLE1BQU0sRUFDdEIsRUFDQWtILElBQUlOLEdBQ0EsT0FBT2dGLEVBQU1ELEtBQUszTCxLQUFNNEcsR0FBSyxFQUNqQyxFQUNBTyxJQUFLNEYsR0FBcUIsT0FDMUJqRyxJQUFLaUcsR0FBcUIsT0FDMUJuSCxPQUFRbUgsR0FBcUIsVUFDN0JkLE1BQU9jLEdBQXFCLFNBQzVCcEYsUUFBU3dFLElBQWMsR0FBTSxJQVNqQyxNQVB3QixDQUFDLE9BQVEsU0FBVSxVQUFXakgsT0FBT3dILFVBQzdDL0UsU0FBUTVGLElBQ3BCbUwsRUFBd0JuTCxHQUFVd0ssR0FBcUJ4SyxHQUFRLEdBQU8sR0FDdEVxTCxFQUF5QnJMLEdBQVV3SyxHQUFxQnhLLEdBQVEsR0FBTSxHQUN0RW9MLEVBQXdCcEwsR0FBVXdLLEdBQXFCeEssR0FBUSxHQUFPLEdBQ3RFc0wsRUFBZ0N0TCxHQUFVd0ssR0FBcUJ4SyxHQUFRLEdBQU0sRUFBSyxJQUUvRSxDQUNIbUwsRUFDQUUsRUFDQUQsRUFDQUUsRUFFUixDQUNBLE1BQU9ILEdBQXlCRSxHQUEwQkQsR0FBeUJFLElBQWtESixLQUNySSxTQUFTSyxHQUE0QmpFLEVBQVlDLEdBQzdDLE1BQU1MLEVBQW1CSyxFQUNuQkQsRUFDSWdFLEdBQ0FGLEdBQ0o5RCxFQUNJK0QsR0FDQUYsR0FDVixNQUFPLENBQUM5TixFQUFRd0gsRUFBSzJDLElBQ0wsbUJBQVIzQyxHQUNReUMsRUFFSyxtQkFBUnpDLEVBQ0V5QyxFQUVNLFlBQVJ6QyxFQUNFeEgsRUFFSjBLLFFBQVFsSSxLQUFJLElBQUFpSSxRQUFPWixFQUFrQnJDLElBQVFBLEtBQU94SCxFQUNyRDZKLEVBQ0E3SixFQUFRd0gsRUFBSzJDLEVBRTNCLENBQ0EsTUFBTWdFLEdBQTRCLENBQzlCM0wsSUFBbUIwTCxJQUE0QixHQUFPLElBRXBERSxHQUE0QixDQUM5QjVMLElBQW1CMEwsSUFBNEIsR0FBTyxJQUVwREcsR0FBNkIsQ0FDL0I3TCxJQUFtQjBMLElBQTRCLEdBQU0sSUFFbkRJLEdBQW9DLENBQ3RDOUwsSUFBbUIwTCxJQUE0QixHQUFNLElBRXpELFNBQVN2QixHQUFrQjNNLEVBQVE4SCxFQUFLTixHQUNwQyxNQUFNMkUsRUFBU3BDLEdBQU12QyxHQUNyQixHQUFJMkUsSUFBVzNFLEdBQU9NLEVBQUl5RSxLQUFLdk0sRUFBUW1NLEdBQVMsQ0FDNUMsTUFBTTVFLEdBQU8sSUFBQWdILFdBQVV2TyxHQUN2QjJELFFBQVFGLEtBQUssWUFBWThELG1FQUNrQixRQUFUQSxFQUFpQixXQUFhLGlLQUlwRSxDQUNKLENBRUEsTUFBTWdELEdBQWMsSUFBSTdFLFFBQ2xCNEUsR0FBcUIsSUFBSTVFLFFBQ3pCMkUsR0FBYyxJQUFJM0UsUUFDbEIwRSxHQUFxQixJQUFJMUUsUUFvQi9CLFNBQVNvRixHQUFTOUssR0FFZCxPQUFJaUssR0FBV2pLLEdBQ0pBLEVBRUp3TyxHQUFxQnhPLEdBQVEsRUFBT3NMLEVBQWlCNkMsR0FBMkI1RCxHQUMzRixDQU1BLFNBQVNrRSxHQUFnQnpPLEdBQ3JCLE9BQU93TyxHQUFxQnhPLEdBQVEsRUFBTzJMLEVBQXlCeUMsR0FBMkI5RCxHQUNuRyxDQUtBLFNBQVNPLEdBQVM3SyxHQUNkLE9BQU93TyxHQUFxQnhPLEdBQVEsRUFBTXlMLEVBQWtCNEMsR0FBNEJoRSxHQUM1RixDQU9BLFNBQVNxRSxHQUFnQjFPLEdBQ3JCLE9BQU93TyxHQUFxQnhPLEdBQVEsRUFBTTRMLEVBQXlCMEMsR0FBbUNsRSxHQUMxRyxDQUNBLFNBQVNvRSxHQUFxQnhPLEVBQVFpSyxFQUFZMEUsRUFBY0MsRUFBb0JDLEdBQ2hGLEtBQUssSUFBQWpFLFVBQVM1SyxHQUlWLE9BRkkyRCxRQUFRRixLQUFLLGtDQUFrQ2lJLE9BQU8xTCxNQUVuREEsRUFJWCxHQUFJQSxFQUF3QyxXQUN0Q2lLLElBQWNqSyxFQUF1RCxnQkFDdkUsT0FBT0EsRUFHWCxNQUFNOE8sRUFBZ0JELEVBQVNyTSxJQUFJeEMsR0FDbkMsR0FBSThPLEVBQ0EsT0FBT0EsRUFHWCxNQUFNQyxHQXZEYXJSLEVBdURjc0MsR0F0RGUsV0FBTXNCLE9BQU8wTixhQUFhdFIsR0FDcEUsRUFoQlYsU0FBdUJ1UixHQUNuQixPQUFRQSxHQUNKLElBQUssU0FDTCxJQUFLLFFBQ0QsT0FBTyxFQUNYLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxVQUNMLElBQUssVUFDRCxPQUFPLEVBQ1gsUUFDSSxPQUFPLEVBRW5CLENBSVVDLEVBQWMsSUFBQVgsV0FBVTdRLElBSGxDLElBQXVCQSxFQXdEbkIsR0FBbUIsSUFBZnFSLEVBQ0EsT0FBTy9PLEVBRVgsTUFBTUssRUFBUSxJQUFJVixNQUFNSyxFQUF1QixJQUFmK08sRUFBK0NILEVBQXFCRCxHQUVwRyxPQURBRSxFQUFTbkgsSUFBSTFILEVBQVFLLEdBQ2RBLENBQ1gsQ0FDQSxTQUFTOE8sR0FBV3pSLEdBQ2hCLE9BQUl1TSxHQUFXdk0sR0FDSnlSLEdBQVd6UixFQUF1QyxZQUVuREEsSUFBU0EsRUFBc0QsZUFDN0UsQ0FDQSxTQUFTdU0sR0FBV3ZNLEdBQ2hCLFNBQVVBLElBQVNBLEVBQXNELGVBQzdFLENBQ0EsU0FBU3VOLEdBQVV2TixHQUNmLFNBQVVBLElBQVNBLEVBQW9ELGNBQzNFLENBQ0EsU0FBUzBSLEdBQVExUixHQUNiLE9BQU95UixHQUFXelIsSUFBVXVNLEdBQVd2TSxFQUMzQyxDQUNBLFNBQVNxTSxHQUFNbUQsR0FDWCxNQUFNMUwsRUFBTTBMLEdBQVlBLEVBQTBDLFFBQ2xFLE9BQU8xTCxFQUFNdUksR0FBTXZJLEdBQU8wTCxDQUM5QixDQUNBLFNBQVNtQyxHQUFRM1IsR0FFYixPQURBLElBQUE0UixLQUFJNVIsRUFBTyxZQUFxQyxHQUN6Q0EsQ0FDWCxDQUNBLE1BQU00TyxHQUFjNU8sSUFBVSxJQUFBa04sVUFBU2xOLEdBQVNvTixHQUFTcE4sR0FBU0EsRUFDNUQyTyxHQUFjM08sSUFBVSxJQUFBa04sVUFBU2xOLEdBQVNtTixHQUFTbk4sR0FBU0EsRUFFbEUsU0FBUzZSLEdBQWNDLEdBQ2ZwSixHQUFlVCxHQUdYaUMsR0FGSjRILEVBQU16RixHQUFNeUYsSUFFU3JLLE1BQVFxSyxFQUFJckssSUFBTUQsS0FBYyxDQUM3Q2xGLE9BQVF3UCxFQUNSakksS0FBTSxNQUNOQyxJQUFLLFNBT3JCLENBQ0EsU0FBU2lJLEdBQWdCRCxFQUFLRSxJQUMxQkYsRUFBTXpGLEdBQU15RixJQUNKckssS0FFQXdELEVBQWU2RyxFQUFJckssSUFBSyxDQUNwQm5GLE9BQVF3UCxFQUNSakksS0FBTSxNQUNOQyxJQUFLLFFBQ0xVLFNBQVV3SCxHQU8xQixDQUNBLFNBQVMvRSxHQUFNZ0YsR0FDWCxTQUFVQSxJQUFxQixJQUFoQkEsRUFBRUMsVUFDckIsQ0FDQSxTQUFTSixHQUFJOVIsR0FDVCxPQUFPbVMsR0FBVW5TLEdBQU8sRUFDNUIsQ0FDQSxTQUFTb1MsR0FBV3BTLEdBQ2hCLE9BQU9tUyxHQUFVblMsR0FBTyxFQUM1QixDQUNBLFNBQVNtUyxHQUFVRSxFQUFVN0YsR0FDekIsT0FBSVMsR0FBTW9GLEdBQ0NBLEVBRUosSUFBSUMsR0FBUUQsRUFBVTdGLEVBQ2pDLENBQ0EsTUFBTThGLEdBQ0Z0UCxZQUFZaEQsRUFBT3VTLEdBQ2ZyUCxLQUFLcVAsY0FBZ0JBLEVBQ3JCclAsS0FBS3VFLFNBQU05QixFQUNYekMsS0FBS2dQLFdBQVksRUFDakJoUCxLQUFLc1AsVUFBWUQsRUFBZ0J2UyxFQUFRcU0sR0FBTXJNLEdBQy9Da0QsS0FBS3VQLE9BQVNGLEVBQWdCdlMsRUFBUTRPLEdBQVc1TyxFQUNyRCxDQUNJQSxZQUVBLE9BREE2UixHQUFjM08sTUFDUEEsS0FBS3VQLE1BQ2hCLENBQ0l6UyxVQUFNZ1MsR0FDTixNQUFNVSxFQUFpQnhQLEtBQUtxUCxlQUFpQmhGLEdBQVV5RSxJQUFXekYsR0FBV3lGLEdBQzdFQSxFQUFTVSxFQUFpQlYsRUFBUzNGLEdBQU0yRixJQUNyQyxJQUFBckUsWUFBV3FFLEVBQVE5TyxLQUFLc1AsYUFDeEJ0UCxLQUFLc1AsVUFBWVIsRUFDakI5TyxLQUFLdVAsT0FBU0MsRUFBaUJWLEVBQVNwRCxHQUFXb0QsR0FDbkRELEdBQWdCN08sS0FBTThPLEdBRTlCLEVBRUosU0FBU1csR0FBV2IsR0FDaEJDLEdBQWdCRCxFQUErQ0EsRUFBSTlSLE1BQ3ZFLENBQ0EsU0FBUzRTLEdBQU1kLEdBQ1gsT0FBTzdFLEdBQU02RSxHQUFPQSxFQUFJOVIsTUFBUThSLENBQ3BDLENBQ0EsTUFBTWUsR0FBd0IsQ0FDMUIvTixJQUFLLENBQUN4QyxFQUFRd0gsRUFBSzJDLElBQWFtRyxHQUFNNUYsUUFBUWxJLElBQUl4QyxFQUFRd0gsRUFBSzJDLElBQy9EekMsSUFBSyxDQUFDMUgsRUFBUXdILEVBQUs5SixFQUFPeU0sS0FDdEIsTUFBTWhDLEVBQVduSSxFQUFPd0gsR0FDeEIsT0FBSW1ELEdBQU14QyxLQUFjd0MsR0FBTWpOLElBQzFCeUssRUFBU3pLLE1BQVFBLEdBQ1YsR0FHQWdOLFFBQVFoRCxJQUFJMUgsRUFBUXdILEVBQUs5SixFQUFPeU0sRUFDM0MsR0FHUixTQUFTcUcsR0FBVUMsR0FDZixPQUFPdEIsR0FBV3NCLEdBQ1pBLEVBQ0EsSUFBSTlRLE1BQU04USxFQUFnQkYsR0FDcEMsQ0FDQSxNQUFNRyxHQUNGaFEsWUFBWWlRLEdBQ1IvUCxLQUFLdUUsU0FBTTlCLEVBQ1h6QyxLQUFLZ1AsV0FBWSxFQUNqQixNQUFNLElBQUVwTixFQUFHLElBQUVrRixHQUFRaUosR0FBUSxJQUFNcEIsR0FBYzNPLFFBQU8sSUFBTTZPLEdBQWdCN08sUUFDOUVBLEtBQUtnUSxLQUFPcE8sRUFDWjVCLEtBQUtpUSxLQUFPbkosQ0FDaEIsQ0FDSWhLLFlBQ0EsT0FBT2tELEtBQUtnUSxNQUNoQixDQUNJbFQsVUFBTWdTLEdBQ045TyxLQUFLaVEsS0FBS25CLEVBQ2QsRUFFSixTQUFTb0IsR0FBVUgsR0FDZixPQUFPLElBQUlELEdBQWNDLEVBQzdCLENBQ0EsU0FBU0ksR0FBT0MsR0FDb0M1QixHQUFRNEIsSUFDcERyTixRQUFRRixLQUFLLGdFQUVqQixNQUFNd04sR0FBTSxJQUFBM0ksU0FBUTBJLEdBQVUsSUFBSW5ULE1BQU1tVCxFQUFPcFQsUUFBVSxDQUFDLEVBQzFELElBQUssTUFBTTRKLEtBQU93SixFQUNkQyxFQUFJekosR0FBTzBKLEdBQU1GLEVBQVF4SixHQUU3QixPQUFPeUosQ0FDWCxDQUNBLE1BQU1FLEdBQ0Z6USxZQUFZMFEsRUFBU0MsRUFBTUMsR0FDdkIxUSxLQUFLd1EsUUFBVUEsRUFDZnhRLEtBQUt5USxLQUFPQSxFQUNaelEsS0FBSzBRLGNBQWdCQSxFQUNyQjFRLEtBQUtnUCxXQUFZLENBQ3JCLENBQ0lsUyxZQUNBLE1BQU02VCxFQUFNM1EsS0FBS3dRLFFBQVF4USxLQUFLeVEsTUFDOUIsWUFBZWhPLElBQVJrTyxFQUFvQjNRLEtBQUswUSxjQUFnQkMsQ0FDcEQsQ0FDSTdULFVBQU1nUyxHQUNOOU8sS0FBS3dRLFFBQVF4USxLQUFLeVEsTUFBUTNCLENBQzlCLEVBRUosU0FBU3dCLEdBQU1GLEVBQVF4SixFQUFLckcsR0FDeEIsTUFBTW9RLEVBQU1QLEVBQU94SixHQUNuQixPQUFPbUQsR0FBTTRHLEdBQ1BBLEVBQ0EsSUFBSUosR0FBY0gsRUFBUXhKLEVBQUtyRyxFQUN6QyxDQUVBLElBQUlpQyxHQXlEQW9PLEdBeERKLE1BQU1DLEdBQ0YvUSxZQUFZZ1IsRUFBUUMsRUFBUzFILEVBQVkySCxHQUNyQ2hSLEtBQUsrUSxRQUFVQSxFQUNmL1EsS0FBS3VFLFNBQU05QixFQUNYekMsS0FBS2dQLFdBQVksRUFDakJoUCxLQUFLd0MsS0FBTSxFQUNYeEMsS0FBS2lSLFFBQVMsRUFDZGpSLEtBQUtrRSxPQUFTLElBQUlrQixFQUFlMEwsR0FBUSxLQUNoQzlRLEtBQUtpUixTQUNOalIsS0FBS2lSLFFBQVMsRUFDZHBDLEdBQWdCN08sTUFDcEIsSUFFSkEsS0FBS2tFLE9BQU84RCxTQUFXaEksS0FDdkJBLEtBQUtrRSxPQUFPZixPQUFTbkQsS0FBS2tSLFlBQWNGLEVBQ3hDaFIsS0FBcUQsZUFBSXFKLENBQzdELENBQ0l2TSxZQUVBLE1BQU1xVSxFQUFPaEksR0FBTW5KLE1BTW5CLE9BTEEyTyxHQUFjd0MsSUFDVkEsRUFBS0YsUUFBV0UsRUFBS0QsYUFDckJDLEVBQUtGLFFBQVMsRUFDZEUsRUFBSzVCLE9BQVM0QixFQUFLak4sT0FBT1YsT0FFdkIyTixFQUFLNUIsTUFDaEIsQ0FDSXpTLFVBQU13SyxHQUNOdEgsS0FBSytRLFFBQVF6SixFQUNqQixFQUdKLFNBQVNVLEdBQVNvSixFQUFpQkMsRUFBY0wsR0FBUSxHQUNyRCxJQUFJRixFQUNBUSxFQUNKLE1BQU1DLEdBQWEsSUFBQUMsWUFBV0osR0FDMUJHLEdBQ0FULEVBQVNNLEVBQ1RFLEVBQ00sS0FDRXZPLFFBQVFGLEtBQUsscURBQXFELElBSzFFaU8sRUFBU00sRUFBZ0J4UCxJQUN6QjBQLEVBQVNGLEVBQWdCdEssS0FFN0IsTUFBTTJLLEVBQU8sSUFBSVosR0FBZ0JDLEVBQVFRLEVBQVFDLElBQWVELEVBQVFOLEdBS3hFLE9BSitDSyxJQUFpQkwsSUFDNURTLEVBQUt2TixPQUFPa0QsUUFBVWlLLEVBQWFqSyxRQUNuQ3FLLEVBQUt2TixPQUFPaUUsVUFBWWtKLEVBQWFsSixXQUVsQ3NKLENBQ1gsQ0F2QkFqUCxHQUFLLGlCQTBCTCxNQUFNa1AsR0FBcUJ2UCxRQUFRRCxVQUM3QnlQLEdBQVEsR0FDZCxJQUFJQyxJQUFTLEVBQ2IsTUFPTUMsR0FBUSxLQUNWLElBQUssSUFBSXBWLEVBQUksRUFBR0EsRUFBSWtWLEdBQU0zVSxPQUFRUCxJQUM5QmtWLEdBQU1sVixLQUVWa1YsR0FBTTNVLE9BQVMsRUFDZjRVLElBQVMsQ0FBSyxFQUVsQixNQUFNRSxHQUNGaFMsWUFBWWdSLEdBS1IsSUFBSWlCLEVBSkovUixLQUFLdUUsU0FBTTlCLEVBQ1h6QyxLQUFLaVIsUUFBUyxFQUNkalIsS0FBS2dQLFdBQVksRUFDakJoUCxLQUFLNFEsS0FBUSxFQUViLElBQUlvQixHQUFtQixFQUNuQkMsR0FBWSxFQUNoQmpTLEtBQUtrRSxPQUFTLElBQUlrQixFQUFlMEwsR0FBU29CLElBQ3RDLEdBQUlsUyxLQUFLdUUsSUFBSyxDQUNWLEdBQUkyTixFQUNBSCxFQUFnQi9SLEtBQUt1UCxPQUNyQnlDLEdBQW1CLE9BRWxCLElBQUtDLEVBQVcsQ0FDakIsTUFBTUUsRUFBaUJILEVBQW1CRCxFQUFnQi9SLEtBQUt1UCxPQUMvRDBDLEdBQVksRUFDWkQsR0FBbUIsRUFoQ3BCdk8sRUFpQ1csS0FDRnpELEtBQUtrRSxPQUFPZixRQUFVbkQsS0FBS2dRLFNBQVdtQyxHQUN0Q3RELEdBQWdCN08sTUFFcEJpUyxHQUFZLENBQUssRUFwQ3JDTixHQUFNclUsS0FBS21HLEdBQ05tTyxLQUNEQSxJQUFTLEVBQ1RGLEdBQUtVLEtBQUtQLElBbUNGLENBSUEsSUFBSyxNQUFNM1EsS0FBS2xCLEtBQUt1RSxJQUNickQsRUFBRThHLG9CQUFvQjhKLElBQ3RCNVEsRUFBRW1FLFdBQVUsRUFHeEIsQ0FoRE0sSUFBQzVCLEVBaURQekQsS0FBS2lSLFFBQVMsQ0FBSSxJQUV0QmpSLEtBQUtrRSxPQUFPOEQsU0FBV2hJLElBQzNCLENBQ0FnUSxPQUNJLE9BQUloUSxLQUFLaVIsUUFDTGpSLEtBQUtpUixRQUFTLEVBQ05qUixLQUFLdVAsT0FBU3ZQLEtBQUtrRSxPQUFPVixPQUUvQnhELEtBQUt1UCxNQUNoQixDQUNJelMsWUFHQSxPQUZBNlIsR0FBYzNPLE1BRVBtSixHQUFNbkosTUFBTWdRLE1BQ3ZCLEVBR0osU0FBU3FDLEdBQWlCdkIsR0FDdEIsT0FBTyxJQUFJZ0IsR0FBd0JoQixFQUN2QyxDQUhBRixHQUFPLG8rRkM5dENQLE1BQU03VCxFQUFRLEdBQ2QsU0FBU3VWLEVBQW1CQyxHQUN4QnhWLEVBQU1PLEtBQUtpVixFQUNmLENBQ0EsU0FBU0MsSUFDTHpWLEVBQU1HLEtBQ1YsQ0FDQSxTQUFTMkYsRUFBS0MsS0FBUW5HLElBR2xCLElBQUE0SixpQkFDQSxNQUFNa00sRUFBVzFWLEVBQU1DLE9BQVNELEVBQU1BLEVBQU1DLE9BQVMsR0FBRzBWLFVBQVksS0FDOURDLEVBQWlCRixHQUFZQSxFQUFTRyxXQUFXQyxPQUFPQyxZQUN4REMsRUF1QlYsV0FDSSxJQUFJQyxFQUFlalcsRUFBTUEsRUFBTUMsT0FBUyxHQUN4QyxJQUFLZ1csRUFDRCxNQUFPLEdBS1gsTUFBTUMsRUFBa0IsR0FDeEIsS0FBT0QsR0FBYyxDQUNqQixNQUFNalAsRUFBT2tQLEVBQWdCLEdBQ3pCbFAsR0FBUUEsRUFBS3dPLFFBQVVTLEVBQ3ZCalAsRUFBS21QLGVBR0xELEVBQWdCM1YsS0FBSyxDQUNqQmlWLE1BQU9TLEVBQ1BFLGFBQWMsSUFHdEIsTUFBTUMsRUFBaUJILEVBQWFOLFdBQWFNLEVBQWFOLFVBQVVwUCxPQUN4RTBQLEVBQWVHLEdBQWtCQSxFQUFlWixLQUNwRCxDQUNBLE9BQU9VLENBQ1gsQ0EvQ2tCRyxHQUNkLEdBQUlULEVBQ0FVLEVBQXNCVixFQUFnQkYsRUFBVSxHQUFzQyxDQUNsRjNQLEVBQU1uRyxFQUFLMlcsS0FBSyxJQUNoQmIsR0FBWUEsRUFBU2hULE1BQ3JCc1QsRUFDS3RLLEtBQUksRUFBRzhKLFdBQVksT0FBT2dCLEdBQW9CZCxFQUFVRixFQUFNNUwsV0FDOUQyTSxLQUFLLE1BQ1ZQLFFBR0gsQ0FDRCxNQUFNUyxFQUFXLENBQUMsZUFBZTFRLE9BQVVuRyxHQUV2Q29XLEVBQU0vVixRQUdOd1csRUFBU2xXLEtBQUssUUFnQzFCLFNBQXFCeVYsR0FDakIsTUFBTVUsRUFBTyxHQUliLE9BSEFWLEVBQU1wTCxTQUFRLENBQUMrTCxFQUFPalgsS0FDbEJnWCxFQUFLblcsUUFBZSxJQUFOYixFQUFVLEdBQUssQ0FBQyxTQUl0QyxVQUEwQixNQUFFOFYsRUFBSyxhQUFFVyxJQUMvQixNQUFNMVcsRUFBVTBXLEVBQWUsRUFBSSxRQUFRQSxxQkFBa0MsR0FDdkVTLElBQVNwQixFQUFNRyxXQUFzQyxNQUExQkgsRUFBTUcsVUFBVXBQLE9BQzNDc1EsRUFBTyxRQUFRTCxHQUFvQmhCLEVBQU1HLFVBQVdILEVBQU01TCxLQUFNZ04sS0FDaEVFLEVBQVEsSUFBTXJYLEVBQ3BCLE9BQU8rVixFQUFNdUIsTUFDUCxDQUFDRixLQUFTRyxFQUFZeEIsRUFBTXVCLE9BQVFELEdBQ3BDLENBQUNELEVBQU9DLEVBQ2xCLENBWmlERyxDQUFpQk4sR0FBTyxJQUU5REQsQ0FDWCxDQXRDbUNRLENBQVlsQixJQUV2Q2hRLFFBQVFGLFFBQVEyUSxFQUNwQixFQUNBLElBQUEvTSxnQkFDSixDQTRDQSxTQUFTc04sRUFBWUQsR0FDakIsTUFBTTFLLEVBQU0sR0FDTnBILEVBQU90QixPQUFPc0IsS0FBSzhSLEdBT3pCLE9BTkE5UixFQUFLa1MsTUFBTSxFQUFHLEdBQUd2TSxTQUFRZixJQUNyQndDLEVBQUk5TCxRQUFRNlcsRUFBV3ZOLEVBQUtrTixFQUFNbE4sSUFBTSxJQUV4QzVFLEVBQUtoRixPQUFTLEdBQ2RvTSxFQUFJOUwsS0FBSyxRQUVOOEwsQ0FDWCxDQUVBLFNBQVMrSyxFQUFXdk4sRUFBSzlKLEVBQU84RCxHQUM1QixPQUFJLElBQUF3VCxVQUFTdFgsSUFDVEEsRUFBUWtFLEtBQUtPLFVBQVV6RSxHQUNoQjhELEVBQU05RCxFQUFRLENBQUMsR0FBRzhKLEtBQU85SixNQUVWLGlCQUFWQSxHQUNLLGtCQUFWQSxHQUNFLE1BQVRBLEVBQ084RCxFQUFNOUQsRUFBUSxDQUFDLEdBQUc4SixLQUFPOUosTUFFM0IsSUFBQWlOLE9BQU1qTixJQUNYQSxFQUFRcVgsRUFBV3ZOLEdBQUssSUFBQXVDLE9BQU1yTSxFQUFNQSxRQUFRLEdBQ3JDOEQsRUFBTTlELEVBQVEsQ0FBQyxHQUFHOEosU0FBWTlKLEVBQU8sT0FFdkMsSUFBQTBVLFlBQVcxVSxHQUNULENBQUMsR0FBRzhKLE9BQVM5SixFQUFNdVgsS0FBTyxJQUFJdlgsRUFBTXVYLFFBQVUsT0FHckR2WCxHQUFRLElBQUFxTSxPQUFNck0sR0FDUDhELEVBQU05RCxFQUFRLENBQUMsR0FBRzhKLEtBQVE5SixHQUV6QyxDQUVBLE1BQU13WCxFQUFtQixDQUNyQixHQUE2QyxzQkFDN0MsR0FBMkMsb0JBQzNDLEVBQW9DLGVBQ3BDLEdBQTBDLG1CQUMxQyxFQUFvQyxlQUNwQyxHQUEyQyxvQkFDM0MsRUFBb0MsVUFDcEMsSUFBNkMscUJBQzdDLEdBQXVDLGlCQUN2QyxFQUFzQyxpQkFDdEMsR0FBeUMsbUJBQ3pDLEdBQTRDLHFCQUM1QyxJQUE2QyxxQkFDN0MsSUFBK0MsdUJBQy9DLEVBQXFDLGlCQUNyQyxFQUFzQyxrQkFDdEMsRUFBbUMsaUJBQ25DLEVBQXFDLG1CQUNyQyxFQUFvQywyQkFDcEMsRUFBMkMsdUJBQzNDLEVBQThDLDBCQUM5QyxFQUFpQyxhQUNqQyxFQUFxQyxpQkFDckMsRUFBc0Msa0JBQ3RDLEdBQXlDLG1CQUN6QyxHQUF3QyxrQkFDeEMsR0FBb0MsZUFDcEMsR0FBOEMseUJBQzlDLEdBQWlDLDZIQUdyQyxTQUFTakIsRUFBc0I1UCxFQUFJZ1AsRUFBVTlMLEVBQU1oSyxHQUMvQyxJQUFJeU0sRUFDSixJQUNJQSxFQUFNek0sRUFBTzhHLEtBQU05RyxHQUFROEcsR0FJL0IsQ0FGQSxNQUFPOFEsR0FDSEMsRUFBWUQsRUFBSzlCLEVBQVU5TCxFQUMvQixDQUNBLE9BQU95QyxDQUNYLENBQ0EsU0FBU3FMLEVBQTJCaFIsRUFBSWdQLEVBQVU5TCxFQUFNaEssR0FDcEQsSUFBSSxJQUFBNlUsWUFBVy9OLEdBQUssQ0FDaEIsTUFBTTJGLEVBQU1pSyxFQUFzQjVQLEVBQUlnUCxFQUFVOUwsRUFBTWhLLEdBTXRELE9BTEl5TSxJQUFPLElBQUFzTCxXQUFVdEwsSUFDakJBLEVBQUl1TCxPQUFNSixJQUNOQyxFQUFZRCxFQUFLOUIsRUFBVTlMLEVBQUssSUFHakN5QyxDQUNYLENBQ0EsTUFBTTNCLEVBQVMsR0FDZixJQUFLLElBQUloTCxFQUFJLEVBQUdBLEVBQUlnSCxFQUFHekcsT0FBUVAsSUFDM0JnTCxFQUFPbkssS0FBS21YLEVBQTJCaFIsRUFBR2hILEdBQUlnVyxFQUFVOUwsRUFBTWhLLElBRWxFLE9BQU84SyxDQUNYLENBQ0EsU0FBUytNLEVBQVlELEVBQUs5QixFQUFVOUwsRUFBTWlPLEdBQWEsR0FDbkQsTUFBTUMsRUFBZXBDLEVBQVdBLEVBQVNGLE1BQVEsS0FDakQsR0FBSUUsRUFBVSxDQUNWLElBQUlxQyxFQUFNckMsRUFBU25QLE9BRW5CLE1BQU15UixFQUFrQnRDLEVBQVNoVCxNQUUzQnVWLEVBQXNEVixFQUFpQjNOLEdBQzdFLEtBQU9tTyxHQUFLLENBQ1IsTUFBTUcsRUFBcUJILEVBQUlJLEdBQy9CLEdBQUlELEVBQ0EsSUFBSyxJQUFJeFksRUFBSSxFQUFHQSxFQUFJd1ksRUFBbUJqWSxPQUFRUCxJQUMzQyxJQUErRCxJQUEzRHdZLEVBQW1CeFksR0FBRzhYLEVBQUtRLEVBQWlCQyxHQUM1QyxPQUlaRixFQUFNQSxFQUFJeFIsTUFDZCxDQUVBLE1BQU02UixFQUFrQjFDLEVBQVNHLFdBQVdDLE9BQU91QyxhQUNuRCxHQUFJRCxFQUVBLFlBREE5QixFQUFzQjhCLEVBQWlCLEtBQU0sR0FBdUMsQ0FBQ1osRUFBS1EsRUFBaUJDLEdBR25ILEVBR0osU0FBa0JULEVBQUs1TixFQUFNa08sRUFBY0QsR0FBYSxHQUNQLENBQ3pDLE1BQU1TLEVBQU9mLEVBQWlCM04sR0FTOUIsR0FSSWtPLEdBQ0F2QyxFQUFtQnVDLEdBRXZCaFMsRUFBSyxtQkFBa0J3UyxFQUFPLHdCQUF3QkEsSUFBUyxLQUMzRFIsR0FDQXJDLElBR0FvQyxFQUNBLE1BQU1MLEVBR054UixRQUFRdVMsTUFBTWYsRUFFdEIsQ0FLSixDQXhCSWdCLENBQVNoQixFQUFLNU4sRUFBTWtPLEVBQWNELEVBQ3RDLENBeUJBLElBQUlZLEdBQWEsRUFDYkMsR0FBaUIsRUFDckIsTUFBTTlELEVBQVEsR0FDZCxJQUFJK0QsRUFBYSxFQUNqQixNQUFNQyxFQUFzQixHQUM1QixJQUFJQyxFQUFxQixLQUNyQkMsRUFBaUIsRUFDckIsTUFBTUMsRUFBZ0MzVCxRQUFRRCxVQUM5QyxJQUFJNlQsRUFBc0IsS0FFMUIsU0FBU0MsRUFBU3ZTLEdBQ2QsTUFBTXdTLEVBQUlGLEdBQXVCRCxFQUNqQyxPQUFPclMsRUFBS3dTLEVBQUU3RCxLQUFLcFMsS0FBT3lELEVBQUc0QyxLQUFLckcsTUFBUXlELEdBQU13UyxDQUNwRCxDQWdCQSxTQUFTQyxFQUFTQyxHQU9UeEUsRUFBTTNVLFFBQ04yVSxFQUFNMVAsU0FBU2tVLEVBQUtYLEdBQWNXLEVBQUlqTyxhQUFld04sRUFBYSxFQUFJQSxLQUN6RCxNQUFWUyxFQUFJOVYsR0FDSnNSLEVBQU1yVSxLQUFLNlksR0FHWHhFLEVBQU15RSxPQXhCbEIsU0FBNEIvVixHQUV4QixJQUFJZ1csRUFBUVgsRUFBYSxFQUNyQlksRUFBTTNFLEVBQU0zVSxPQUNoQixLQUFPcVosRUFBUUMsR0FBSyxDQUNoQixNQUFNQyxFQUFVRixFQUFRQyxJQUFTLEVBQ2JFLEVBQU03RSxFQUFNNEUsSUFDbEJsVyxFQUFNZ1csRUFBUUUsRUFBUyxFQUFNRCxFQUFNQyxDQUNyRCxDQUNBLE9BQU9GLENBQ1gsQ0FjeUJJLENBQW1CTixFQUFJOVYsSUFBSyxFQUFHOFYsR0FFaERPLElBRVIsQ0FDQSxTQUFTQSxJQUNBbEIsR0FBZUMsSUFDaEJBLEdBQWlCLEVBQ2pCTSxFQUFzQkQsRUFBZ0IxRCxLQUFLdUUsR0FFbkQsQ0FPQSxTQUFTQyxFQUFpQkMsSUFDakIsSUFBQW5QLFNBQVFtUCxHQVVUbEIsRUFBb0JyWSxRQUFRdVosR0FUdkJqQixHQUNBQSxFQUFtQjNULFNBQVM0VSxFQUFJQSxFQUFHM08sYUFBZTJOLEVBQWlCLEVBQUlBLElBQ3hFRixFQUFvQnJZLEtBQUt1WixHQVNqQ0gsR0FDSixDQUNBLFNBQVNJLEVBQWlCQyxFQUUxQnRhLEdBQUkrWSxFQUFhRSxFQUFhLEVBQUksSUFJOUIsSUFGSXFCLEVBQU9BLEdBQVEsSUFBSWhRLElBRWhCdEssRUFBSWtWLEVBQU0zVSxPQUFRUCxJQUFLLENBQzFCLE1BQU1vYSxFQUFLbEYsRUFBTWxWLEdBQ2pCLEdBQUlvYSxHQUFNQSxFQUFHRyxJQUFLLENBQ2QsR0FBK0NDLEVBQXNCRixFQUFNRixHQUN2RSxTQUVKbEYsRUFBTXlFLE9BQU8zWixFQUFHLEdBQ2hCQSxJQUNBb2EsR0FDSixDQUNKLENBQ0osQ0FDQSxTQUFTSyxFQUFrQkgsR0FDdkIsR0FBSXBCLEVBQW9CM1ksT0FBUSxDQUM1QixNQUFNbWEsRUFBVSxJQUFJLElBQUkzUyxJQUFJbVIsSUFHNUIsR0FGQUEsRUFBb0IzWSxPQUFTLEVBRXpCNFksRUFFQSxZQURBQSxFQUFtQnRZLFFBQVE2WixHQVEvQixJQUxBdkIsRUFBcUJ1QixFQUVqQkosRUFBT0EsR0FBUSxJQUFJaFEsSUFFdkI2TyxFQUFtQndCLE1BQUssQ0FBQ2hiLEVBQUdDLElBQU1tYSxFQUFNcGEsR0FBS29hLEVBQU1uYSxLQUM5Q3daLEVBQWlCLEVBQUdBLEVBQWlCRCxFQUFtQjVZLE9BQVE2WSxJQUU3RG9CLEVBQXNCRixFQUFNbkIsRUFBbUJDLEtBR25ERCxFQUFtQkMsS0FFdkJELEVBQXFCLEtBQ3JCQyxFQUFpQixDQUNyQixDQUNKLENBQ0EsTUFBTVcsRUFBU0wsR0FBa0IsTUFBVkEsRUFBSTlWLEdBQWFnWCxJQUFXbEIsRUFBSTlWLEdBQ2pEaVgsRUFBYSxDQUFDbGIsRUFBR0MsS0FDbkIsTUFBTWtiLEVBQU9mLEVBQU1wYSxHQUFLb2EsRUFBTW5hLEdBQzlCLEdBQWEsSUFBVGtiLEVBQVksQ0FDWixHQUFJbmIsRUFBRTRhLE1BQVEzYSxFQUFFMmEsSUFDWixPQUFRLEVBQ1osR0FBSTNhLEVBQUUyYSxNQUFRNWEsRUFBRTRhLElBQ1osT0FBTyxDQUNmLENBQ0EsT0FBT08sQ0FBSSxFQUVmLFNBQVNaLEVBQVVJLEdBQ2Z0QixHQUFpQixFQUNqQkQsR0FBYSxFQUVUdUIsRUFBT0EsR0FBUSxJQUFJaFEsSUFTdkI0SyxFQUFNeUYsS0FBS0UsR0FNWCxNQUFNRSxFQUNDckIsR0FBUWMsRUFBc0JGLEVBQU1aLEdBRTNDLElBQ0ksSUFBS1QsRUFBYSxFQUFHQSxFQUFhL0QsRUFBTTNVLE9BQVEwWSxJQUFjLENBQzFELE1BQU1TLEVBQU14RSxFQUFNK0QsR0FDbEIsR0FBSVMsSUFBc0IsSUFBZkEsRUFBSWhULE9BQWtCLENBQzdCLEdBQStDcVUsRUFBTXJCLEdBQ2pELFNBR0o5QyxFQUFzQjhDLEVBQUssS0FBTSxHQUNyQyxDQUNKLENBYUosQ0FYQSxRQUNJVCxFQUFhLEVBQ2IvRCxFQUFNM1UsT0FBUyxFQUNma2EsRUFBa0JILEdBQ2xCdkIsR0FBYSxFQUNiTyxFQUFzQixNQUdsQnBFLEVBQU0zVSxRQUFVMlksRUFBb0IzWSxTQUNwQzJaLEVBQVVJLEVBRWxCLENBQ0osQ0FDQSxTQUFTRSxFQUFzQkYsRUFBTXRULEdBQ2pDLEdBQUtzVCxFQUFLN1AsSUFBSXpELEdBR1QsQ0FDRCxNQUFNZ1UsRUFBUVYsRUFBS25WLElBQUk2QixHQUN2QixHQUFJZ1UsRUE1S1ksSUE0S2EsQ0FDekIsTUFBTWhGLEVBQVdoUCxFQUFHaVUsY0FDZEMsRUFBZ0JsRixHQUFZbUYsR0FBaUJuRixFQUFTOUwsTUFNNUQsT0FMQTlELEVBQUsscUNBQXFDOFUsRUFBZ0Isa0JBQWtCQSxLQUFtQixtT0FLeEYsQ0FDWCxDQUVJWixFQUFLalEsSUFBSXJELEVBQUlnVSxFQUFRLEVBRTdCLE1BakJJVixFQUFLalEsSUFBSXJELEVBQUksRUFrQnJCLENBR0EsSUFBSW9VLEdBQWdCLEVBQ3BCLE1BQU1DLEVBQXFCLElBQUl0VCxLQU8zQixJQUFBdVQsaUJBQWdCQyxvQkFBc0IsQ0FDbENDLGFBQWNDLEVBQVFELEdBQ3RCRSxTQUFVRCxHQThCbEIsU0FBa0I3WCxFQUFJK1gsR0FDbEIsTUFBTUMsRUFBUzVQLEVBQUk3RyxJQUFJdkIsR0FDbEJnWSxJQUlMQSxFQUFPQyxXQUFXQyxPQUFTSCxFQUMzQixJQUFJQyxFQUFPRyxXQUFXN1EsU0FBUThLLElBQ3RCMkYsSUFDQTNGLEVBQVM4RixPQUFTSCxFQUNsQkssRUFBd0JoRyxFQUFTOUwsTUFBTTRSLE9BQVNILEdBRXBEM0YsRUFBU2lHLFlBQWMsR0FFdkJiLEdBQWdCLEVBQ2hCcEYsRUFBU2tHLFNBQ1RkLEdBQWdCLENBQUssSUFFN0IsSUEvQ1FlLE9BQVFWLEdBZ0RoQixTQUFnQjdYLEVBQUl3WSxHQUNoQixNQUFNUixFQUFTNVAsRUFBSTdHLElBQUl2QixHQUN2QixJQUFLZ1ksRUFDRCxPQUNKUSxFQUFVSixFQUF3QkksR0FFbENDLEVBQW1CVCxFQUFPQyxXQUFZTyxHQUV0QyxNQUFNTCxFQUFZLElBQUlILEVBQU9HLFdBQzdCLElBQUssTUFBTS9GLEtBQVkrRixFQUFXLENBQzlCLE1BQU1PLEVBQVVOLEVBQXdCaEcsRUFBUzlMLE1BQzVDbVIsRUFBbUI1USxJQUFJNlIsS0FFcEJBLElBQVlWLEVBQU9DLFlBQ25CUSxFQUFtQkMsRUFBU0YsR0FJaENmLEVBQW1CM1EsSUFBSTRSLElBRzNCdEcsRUFBU0csV0FBV29HLGFBQWFwVCxPQUFPNk0sRUFBUzlMLE1BRTdDOEwsRUFBU3dHLFVBRVRuQixFQUFtQjNRLElBQUk0UixHQUN2QnRHLEVBQVN3RyxTQUFTSixFQUFRSyxRQUMxQnBCLEVBQW1CbFMsT0FBT21ULElBRXJCdEcsRUFBU25QLFFBSWQ0UyxFQUFTekQsRUFBU25QLE9BQU9xVixRQUdyQmxHLEVBQVNuUCxPQUFPcUQsS0FBS3dTLGVBQ3JCMUcsRUFBU25QLE9BQU8yVixVQUNoQnhHLEVBQVNuUCxPQUFPMlYsU0FBU0osRUFBUUssU0FHaEN6RyxFQUFTRyxXQUFXZ0csT0FFekJuRyxFQUFTRyxXQUFXZ0csU0FFRyxvQkFBWGhhLE9BRVpBLE9BQU93YSxTQUFTUixTQUdoQjdWLFFBQVFGLEtBQUssMEVBRXJCLENBRUErVCxHQUFpQixLQUNiLElBQUssTUFBTW5FLEtBQVkrRixFQUNuQlYsRUFBbUJsUyxPQUFPNlMsRUFBd0JoRyxFQUFTOUwsTUFDL0QsR0FFUixLQXhHQSxNQUFNOEIsRUFBTSxJQUFJMUIsSUFhaEIsU0FBU2tSLEVBQWE1WCxFQUFJaVksR0FDdEIsT0FBSTdQLEVBQUl2QixJQUFJN0csS0FHWm9JLEVBQUkzQixJQUFJekcsRUFBSSxDQUNSaVksV0FBWUcsRUFBd0JILEdBQ3BDRSxVQUFXLElBQUloVSxPQUVaLEVBQ1gsQ0FDQSxTQUFTaVUsRUFBd0IvRixHQUM3QixPQUFPMkcsR0FBaUIzRyxHQUFhQSxFQUFVNEcsVUFBWTVHLENBQy9ELENBZ0ZBLFNBQVNvRyxFQUFtQkMsRUFBU0YsSUFDakMsSUFBQTNTLFFBQU82UyxFQUFTRixHQUNoQixJQUFLLE1BQU1qUyxLQUFPbVMsRUFDRixXQUFSblMsR0FBc0JBLEtBQU9pUyxVQUN0QkUsRUFBUW5TLEVBRzNCLENBQ0EsU0FBU3NSLEVBQVF6VSxHQUNiLE1BQU8sQ0FBQ3BELEVBQUlrWixLQUNSLElBQ0ksT0FBTzlWLEVBQUdwRCxFQUFJa1osRUFNbEIsQ0FKQSxNQUFPclksR0FDSDZCLFFBQVF1UyxNQUFNcFUsR0FDZDZCLFFBQVFGLEtBQUssb0ZBRWpCLEVBRVIsQ0FFQSxJQUFJMlcsRUFDQUMsRUFBUyxHQUNUQyxHQUF1QixFQUMzQixTQUFTN1osRUFBSzhaLEtBQVVoZCxHQUNoQjZjLEVBQ0FBLEVBQVMzWixLQUFLOFosS0FBVWhkLEdBRWxCK2MsR0FDTkQsRUFBT25jLEtBQUssQ0FBRXFjLFFBQU9oZCxRQUU3QixDQUNBLFNBQVNpZCxFQUFnQnZhLEVBQU1ELEdBQzNCLElBQUlvRCxFQUFJcVgsRUFDUkwsRUFBV25hLEVBQ1BtYSxHQUNBQSxFQUFTTSxTQUFVLEVBQ25CTCxFQUFPOVIsU0FBUSxFQUFHZ1MsUUFBT2hkLFVBQVc2YyxFQUFTM1osS0FBSzhaLEtBQVVoZCxLQUM1RDhjLEVBQVMsSUFNSyxvQkFBWDdhLFFBRUhBLE9BQU9tYixlQUVnRixRQUFwRkYsRUFBaUMsUUFBM0JyWCxFQUFLNUQsT0FBT0QsaUJBQThCLElBQVA2RCxPQUFnQixFQUFTQSxFQUFHd1gsaUJBQThCLElBQVBILE9BQWdCLEVBQVNBLEVBQUc1WCxTQUFTLFlBQ3BIN0MsRUFBTzZhLDZCQUNuQjdhLEVBQU82YSw4QkFBZ0MsSUFDcEMzYyxNQUFNNGMsSUFDVE4sRUFBZ0JNLEVBQVM5YSxFQUFPLElBSXBDK2EsWUFBVyxLQUNGWCxJQUNEcGEsRUFBTzZhLDZCQUErQixLQUN0Q1AsR0FBdUIsRUFDdkJELEVBQVMsR0FDYixHQUNELE9BSUhDLEdBQXVCLEVBQ3ZCRCxFQUFTLEdBRWpCLENBWUEsTUFBTVcsRUFBdUNDLEVBQTRCLG1CQUNuRUMsRUFDUUQsRUFBNEIscUJBQ3BDRSxFQUEwQ0YsRUFBNEIscUJBUzVFLFNBQVNBLEVBQTRCaGIsR0FDakMsT0FBUXFULElBQ0o3UyxFQUFLUixFQUFNcVQsRUFBVUUsV0FBVzRILElBQUs5SCxFQUFVK0gsSUFBSy9ILEVBQVVwUCxPQUFTb1AsRUFBVXBQLE9BQU9tWCxTQUFNaFksRUFBV2lRLEVBQVUsQ0FFM0gsQ0FDQSxNQUFNZ0ksRUFBa0NDLEVBQThCLGNBQ2hFQyxFQUFnQ0QsRUFBOEIsWUFDcEUsU0FBU0EsRUFBOEJ0YixHQUNuQyxNQUFPLENBQUNxVCxFQUFXL0wsRUFBTWtVLEtBQ3JCaGIsRUFBS1IsRUFBTXFULEVBQVVFLFdBQVc0SCxJQUFLOUgsRUFBVStILElBQUsvSCxFQUFXL0wsRUFBTWtVLEVBQUssQ0FFbEYsQ0FLQSxTQUFTQyxFQUFPckksRUFBVWtILEtBQVVvQixHQUNoQyxHQUFJdEksRUFBU3VJLFlBQ1QsT0FDSixNQUFNbEgsRUFBUXJCLEVBQVNGLE1BQU11QixPQUFTLEVBQUFtSCxVQUNPLENBQ3pDLE1BQU0sYUFBRUMsRUFBY0MsY0FBZUEsSUFBa0IxSSxFQUN2RCxHQUFJeUksRUFDQSxHQUFNdkIsS0FBU3VCLEVBT1YsQ0FDRCxNQUFNRSxFQUFZRixFQUFhdkIsSUFDM0IsSUFBQW5JLFlBQVc0SixLQUNLQSxLQUFhTCxJQUV6QmxZLEVBQUssK0RBQStEOFcsT0FHaEYsTUFiU3dCLElBQWtCLElBQUFFLGNBQWExQixLQUFVd0IsR0FDMUN0WSxFQUFLLDRCQUE0QjhXLGlFQUNFLElBQUEwQixjQUFhMUIsWUFhaEUsQ0FDQSxJQUFJaGQsRUFBT29lLEVBQ1gsTUFBTU8sRUFBa0IzQixFQUFNNEIsV0FBVyxXQUVuQ0MsRUFBV0YsR0FBbUIzQixFQUFNekYsTUFBTSxHQUNoRCxHQUFJc0gsR0FBWUEsS0FBWTFILEVBQU8sQ0FDL0IsTUFBTTJILEVBQWUsR0FBZ0IsZUFBYkQsRUFBNEIsUUFBVUEsY0FDeEQsT0FBRUUsRUFBTSxLQUFFeGQsR0FBUzRWLEVBQU0ySCxJQUFpQixFQUFBUixVQUM1Qy9jLElBQ0F2QixFQUFPb2UsRUFBUXRTLEtBQUlyTSxHQUFLQSxFQUFFOEIsVUFFMUJ3ZCxJQUNBL2UsRUFBT29lLEVBQVF0UyxJQUFJLEVBQUFrVCxVQUUzQixFQTFDSixTQUErQmpKLEVBQVdpSCxFQUFPaUMsR0FDN0MvYixFQUFLLGlCQUFxRDZTLEVBQVVFLFdBQVc0SCxJQUFLOUgsRUFBV2lILEVBQU9pQyxFQUMxRyxDQTBDUUMsQ0FBc0JwSixFQUFVa0gsRUFBT2hkLEdBRUUsQ0FDekMsTUFBTW1mLEVBQWlCbkMsRUFBTW9DLGNBQ3pCRCxJQUFtQm5DLEdBQVM3RixHQUFNLElBQUF1SCxjQUFhUyxLQUMvQ2paLEVBQUssVUFBVWlaLDhCQUNSdkksR0FBb0JkLEVBQVVBLEVBQVM5TCw0Q0FBNENnVCxtS0FHMUQsSUFBQXFDLFdBQVVyQyxtQkFBdUJBLE1BRXpFLENBQ0EsSUFBSXNDLEVBQ0FDLEVBQVVwSSxFQUFPbUksR0FBYyxJQUFBWixjQUFhMUIsS0FFNUM3RixFQUFPbUksR0FBYyxJQUFBWixlQUFhLElBQUFjLFVBQVN4QyxNQUcxQ3VDLEdBQVdaLElBQ1pZLEVBQVVwSSxFQUFPbUksR0FBYyxJQUFBWixlQUFhLElBQUFXLFdBQVVyQyxNQUV0RHVDLEdBQ0F6SCxFQUEyQnlILEVBQVN6SixFQUFVLEVBQTRDOVYsR0FFOUYsTUFBTXlmLEVBQWN0SSxFQUFNbUksRUFBYyxRQUN4QyxHQUFJRyxFQUFhLENBQ2IsR0FBSzNKLEVBQVM0SixTQUdULEdBQUk1SixFQUFTNEosUUFBUUosR0FDdEIsWUFIQXhKLEVBQVM0SixRQUFVLENBQUMsRUFLeEI1SixFQUFTNEosUUFBUUosSUFBZSxFQUNoQ3hILEVBQTJCMkgsRUFBYTNKLEVBQVUsRUFBNEM5VixFQUNsRyxDQUNKLENBQ0EsU0FBUzJmLEdBQXNCQyxFQUFNM0osRUFBWTRKLEdBQVUsR0FDdkQsTUFBTUMsRUFBUTdKLEVBQVc4SixXQUNuQkMsRUFBU0YsRUFBTTdhLElBQUkyYSxHQUN6QixRQUFlOVosSUFBWGthLEVBQ0EsT0FBT0EsRUFFWCxNQUFNL2IsRUFBTTJiLEVBQUtLLE1BQ2pCLElBQUlDLEVBQWEsQ0FBQyxFQUVkQyxHQUFhLEVBQ2pCLEdBQUlDLHVCQUF3QixJQUFBdkwsWUFBVytLLEdBQU8sQ0FDMUMsTUFBTVMsRUFBZXBjLElBQ2pCLE1BQU1xYyxFQUF1QlgsR0FBc0IxYixFQUFLZ1MsR0FBWSxHQUNoRXFLLElBQ0FILEdBQWEsR0FDYixJQUFBNVcsUUFBTzJXLEVBQVlJLEdBQ3ZCLEdBRUNULEdBQVc1SixFQUFXc0ssT0FBT2xnQixRQUM5QjRWLEVBQVdzSyxPQUFPdlYsUUFBUXFWLEdBRTFCVCxFQUFLWSxTQUNMSCxFQUFZVCxFQUFLWSxTQUVqQlosRUFBS1csUUFDTFgsRUFBS1csT0FBT3ZWLFFBQVFxVixFQUU1QixDQUNBLE9BQUtwYyxHQUFRa2MsSUFNVCxJQUFBcFYsU0FBUTlHLEdBQ1JBLEVBQUkrRyxTQUFRZixHQUFRaVcsRUFBV2pXLEdBQU8sUUFHdEMsSUFBQVYsUUFBTzJXLEVBQVlqYyxJQUVuQixJQUFBb0osVUFBU3VTLElBQ1RFLEVBQU0zVixJQUFJeVYsRUFBTU0sR0FFYkEsS0FkQyxJQUFBN1MsVUFBU3VTLElBQ1RFLEVBQU0zVixJQUFJeVYsRUFBTSxNQUViLEtBWWYsQ0FJQSxTQUFTYSxHQUFlcFgsRUFBU1ksR0FDN0IsU0FBS1osS0FBWSxJQUFBcVgsTUFBS3pXLE1BR3RCQSxFQUFNQSxFQUFJc04sTUFBTSxHQUFHb0osUUFBUSxRQUFTLEtBQzVCLElBQUF6VCxRQUFPN0QsRUFBU1ksRUFBSSxHQUFHbVYsY0FBZ0JuVixFQUFJc04sTUFBTSxNQUNyRCxJQUFBckssUUFBTzdELEdBQVMsSUFBQWdXLFdBQVVwVixNQUMxQixJQUFBaUQsUUFBTzdELEVBQVNZLEdBQ3hCLENBTUEsSUFBSTJXLEdBQTJCLEtBQzNCQyxHQUFpQixLQVdyQixTQUFTQyxHQUE0QmhMLEdBQ2pDLE1BQU1pTCxFQUFPSCxHQUdiLE9BRkFBLEdBQTJCOUssRUFDM0IrSyxHQUFrQi9LLEdBQVlBLEVBQVM5TCxLQUFLZ1gsV0FBYyxLQUNuREQsQ0FDWCxDQUtBLFNBQVNFLEdBQVl2ZCxHQUNqQm1kLEdBQWlCbmQsQ0FDckIsQ0FNQSxTQUFTd2QsS0FDTEwsR0FBaUIsSUFDckIsQ0FLQSxNQUFNTSxHQUFlQyxHQUFRQyxHQUs3QixTQUFTQSxHQUFRdmEsRUFBSXdhLEVBQU1WLEdBQTBCVyxHQUVqRCxJQUFLRCxFQUNELE9BQU94YSxFQUVYLEdBQUlBLEVBQUcwYSxHQUNILE9BQU8xYSxFQUVYLE1BQU0yYSxFQUFzQixJQUFJemhCLEtBTXhCeWhCLEVBQW9CQyxJQUNwQkMsSUFBa0IsR0FFdEIsTUFBTUMsRUFBZWQsR0FBNEJRLEdBQ2pELElBQUk3VSxFQUNKLElBQ0lBLEVBQU0zRixLQUFNOUcsRUFPaEIsQ0FMQSxRQUNJOGdCLEdBQTRCYyxHQUN4QkgsRUFBb0JDLElBQ3BCQyxHQUFpQixFQUV6QixDQUlBLE9BRkloRSxFQUF5QjJELEdBRXRCN1UsQ0FBRyxFQVVkLE9BUEFnVixFQUFvQkQsSUFBSyxFQUl6QkMsRUFBb0JJLElBQUssRUFFekJKLEVBQW9CQyxJQUFLLEVBQ2xCRCxDQUNYLENBT0EsSUFBSUssSUFBZ0IsRUFDcEIsU0FBU0MsS0FDTEQsSUFBZ0IsQ0FDcEIsQ0FDQSxTQUFTRSxHQUFvQmxNLEdBQ3pCLE1BQVE5TCxLQUFNaVksRUFBUyxNQUFFck0sRUFBSyxNQUFFOVMsRUFBSyxVQUFFb2YsRUFBUyxNQUFFL0ssRUFBT3FILGNBQWVBLEdBQWEsTUFBRTJELEVBQUssTUFBRUMsRUFBSyxLQUFFbGYsRUFBSSxPQUFFMFksRUFBTSxZQUFFRyxFQUFXLEtBQUUzWCxFQUFJLFdBQUVpZSxFQUFVLElBQUVmLEVBQUcsYUFBRWdCLEdBQWlCeE0sRUFDeEssSUFBSWpJLEVBQ0EwVSxFQUNKLE1BQU14QixFQUFPRCxHQUE0QmhMLEdBRXJDZ00sSUFBZ0IsRUFFcEIsSUFDSSxHQUFzQixFQUFsQmxNLEVBQU00TSxVQUFtRCxDQUd6RCxNQUFNQyxFQUFhUCxHQUFhcGYsRUFDaEMrSyxFQUFTNlUsR0FBZTlHLEVBQU81TSxLQUFLeVQsRUFBWUEsRUFBWTFHLEVBQWE1RSxFQUFPa0wsRUFBWWplLEVBQU1rZCxJQUNsR2lCLEVBQW1CSCxDQUN2QixLQUNLLENBRUQsTUFBTXhHLEVBQVNxRyxFQUVnQ0csSUFBVWpMLEdBQ3JENEssS0FFSmxVLEVBQVM2VSxHQUFlOUcsRUFBT3ZiLE9BQVMsRUFDbEN1YixFQUFPekUsRUFDSCxDQUNNaUwsWUFFQSxPQURBTCxLQUNPSyxDQUNYLEVBQ0FELFFBQ0FqZixTQUdOMFksRUFBT3pFLEVBQU8sT0FDcEJvTCxFQUFtQk4sRUFBVTlLLE1BQ3ZCaUwsRUFDQU8sR0FBeUJQLEVBQ25DLENBTUosQ0FKQSxNQUFPeEssR0FDSGdMLEdBQVd2aUIsT0FBUyxFQUNwQndYLEVBQVlELEVBQUs5QixFQUFVLEdBQzNCakksRUFBU2dWLEdBQVlDLEdBQ3pCLENBSUEsSUFDSUMsRUFEQUMsRUFBT25WLEVBT1gsR0FKSUEsRUFBT29WLFVBQVksR0FDQSxLQUFuQnBWLEVBQU9vVixhQUNORCxFQUFNRCxHQUFXRyxHQUFhclYsSUFFL0IwVSxJQUFxQyxJQUFqQkQsRUFBd0IsQ0FDNUMsTUFBTWpkLEVBQU90QixPQUFPc0IsS0FBS2tkLElBQ25CLFVBQUVDLEdBQWNRLEVBQ3RCLEdBQUkzZCxFQUFLaEYsT0FDTCxHQUFnQixFQUFabWlCLEVBQ0loRSxHQUFnQm5aLEVBQUs4ZCxLQUFLLEVBQUF4RSxtQkFLMUI0RCxFQUFtQmEsR0FBcUJiLEVBQWtCL0QsSUFFOUR3RSxFQUFPSyxHQUFXTCxFQUFNVCxRQUV2QixJQUFnRFQsSUFBaUJrQixFQUFLaFosT0FBUzhZLEdBQVMsQ0FDekYsTUFBTVEsRUFBV3ZmLE9BQU9zQixLQUFLK2MsR0FDdkJtQixFQUFhLEdBQ2JDLEVBQWEsR0FDbkIsSUFBSyxJQUFJMWpCLEVBQUksRUFBR3FILEVBQUltYyxFQUFTampCLE9BQVFQLEVBQUlxSCxFQUFHckgsSUFBSyxDQUM3QyxNQUFNbUssRUFBTXFaLEVBQVN4akIsSUFDakIsSUFBQTRnQixNQUFLelcsSUFFQSxJQUFBMFUsaUJBQWdCMVUsSUFHakJzWixFQUFXNWlCLEtBQUtzSixFQUFJLEdBQUdtVixjQUFnQm5WLEVBQUlzTixNQUFNLElBSXJEaU0sRUFBVzdpQixLQUFLc0osRUFFeEIsQ0FDSXVaLEVBQVduakIsUUFDWDZGLEVBQ0ksb0NBQUdzZCxFQUFXN00sS0FBSyxtSUFJdkI0TSxFQUFXbGpCLFFBQ1g2RixFQUNJLHlDQUFHcWQsRUFBVzVNLEtBQUssaVBBTS9CLENBRVIsQ0EwQkEsT0F4QklmLEVBQU02TixPQUMwQ0MsR0FBY1YsSUFDMUQ5YyxFQUFLLGlIQUlUOGMsRUFBT0ssR0FBV0wsR0FDbEJBLEVBQUtTLEtBQU9ULEVBQUtTLEtBQU9ULEVBQUtTLEtBQUtoaUIsT0FBT21VLEVBQU02TixNQUFRN04sRUFBTTZOLE1BRzdEN04sRUFBTStOLGFBQzBDRCxHQUFjVixJQUMxRDljLEVBQUssd0ZBR1Q4YyxFQUFLVyxXQUFhL04sRUFBTStOLFlBRW1CWixFQUMzQ0EsRUFBUUMsR0FHUm5WLEVBQVNtVixFQUVibEMsR0FBNEJDLEdBQ3JCbFQsQ0FDWCxDQU9BLE1BQU1xVixHQUFnQnROLElBQ2xCLE1BQU1nTyxFQUFjaE8sRUFBTWlPLFNBQ3BCQyxFQUFrQmxPLEVBQU1rTyxnQkFDeEJDLEVBQVlDLEdBQWlCSixHQUNuQyxJQUFLRyxFQUNELE1BQU8sQ0FBQ25PLE9BQU85UCxHQUVuQixNQUFNeEUsRUFBUXNpQixFQUFZcGlCLFFBQVF1aUIsR0FDNUJFLEVBQWVILEVBQWtCQSxFQUFnQnRpQixRQUFRdWlCLElBQWMsRUFZN0UsTUFBTyxDQUFDckIsR0FBZXFCLEdBWE5HLElBQ2JOLEVBQVl0aUIsR0FBUzRpQixFQUNqQkosSUFDSUcsR0FBZ0IsRUFDaEJILEVBQWdCRyxHQUFnQkMsRUFFM0JBLEVBQVlqQixVQUFZLElBQzdCck4sRUFBTWtPLGdCQUFrQixJQUFJQSxFQUFpQkksSUFFckQsRUFFdUMsRUFFL0MsU0FBU0YsR0FBaUJILEdBQ3RCLElBQUlNLEVBQ0osSUFBSyxJQUFJcmtCLEVBQUksRUFBR0EsRUFBSStqQixFQUFTeGpCLE9BQVFQLElBQUssQ0FDdEMsTUFBTXNrQixFQUFRUCxFQUFTL2pCLEdBQ3ZCLElBQUl1a0IsR0FBUUQsR0FhUixPQVhBLEdBQUlBLEVBQU1wYSxPQUFTOFksSUFBOEIsU0FBbkJzQixFQUFNUCxTQUFxQixDQUNyRCxHQUFJTSxFQUVBLE9BR0FBLEVBQWFDLENBRXJCLENBS1IsQ0FDQSxPQUFPRCxDQUNYLENBQ0EsTUFBTXhCLEdBQTRCUCxJQUM5QixJQUFJM1YsRUFDSixJQUFLLE1BQU14QyxLQUFPbVksR0FDRixVQUFSblksR0FBMkIsVUFBUkEsSUFBbUIsSUFBQXlXLE1BQUt6VyxPQUMxQ3dDLElBQVFBLEVBQU0sQ0FBQyxJQUFJeEMsR0FBT21ZLEVBQU1uWSxJQUd6QyxPQUFPd0MsQ0FBRyxFQUVSMlcsR0FBdUIsQ0FBQ2hCLEVBQU9qTCxLQUNqQyxNQUFNMUssRUFBTSxDQUFDLEVBQ2IsSUFBSyxNQUFNeEMsS0FBT21ZLEdBQ1QsSUFBQXpELGlCQUFnQjFVLElBQVVBLEVBQUlzTixNQUFNLEtBQU1KLElBQzNDMUssRUFBSXhDLEdBQU9tWSxFQUFNblksSUFHekIsT0FBT3dDLENBQUcsRUFFUmlYLEdBQWlCOU4sR0FDTyxFQUFsQkEsRUFBTTRNLFdBQ1Y1TSxFQUFNNUwsT0FBUzhZLEdBOER2QixTQUFTd0IsR0FBZ0JDLEVBQVdDLEVBQVdqRyxHQUMzQyxNQUFNa0csRUFBVzFnQixPQUFPc0IsS0FBS21mLEdBQzdCLEdBQUlDLEVBQVNwa0IsU0FBVzBELE9BQU9zQixLQUFLa2YsR0FBV2xrQixPQUMzQyxPQUFPLEVBRVgsSUFBSyxJQUFJUCxFQUFJLEVBQUdBLEVBQUkya0IsRUFBU3BrQixPQUFRUCxJQUFLLENBQ3RDLE1BQU1tSyxFQUFNd2EsRUFBUzNrQixHQUNyQixHQUFJMGtCLEVBQVV2YSxLQUFTc2EsRUFBVXRhLEtBQzVCd1csR0FBZWxDLEVBQWN0VSxHQUM5QixPQUFPLENBRWYsQ0FDQSxPQUFPLENBQ1gsQ0FDQSxTQUFTeWEsSUFBZ0IsTUFBRTlPLEVBQUssT0FBRWpQLEdBQVVnZSxHQUV4QyxLQUFPaGUsR0FBVUEsRUFBT2llLFVBQVloUCxJQUMvQkEsRUFBUWpQLEVBQU9pUCxPQUFPK08sR0FBS0EsRUFDNUJoZSxFQUFTQSxFQUFPQSxNQUV4QixDQUVBLE1BQU1rZSxHQUFjN2EsR0FBU0EsRUFBSzhhLGFBMEI1QkMsR0F0QmUsQ0FDakJyTixLQUFNLFdBS05vTixjQUFjLEVBQ2RFLFFBQVFDLEVBQUlDLEVBQUlDLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsRUFFekZDLEdBQ2MsTUFBTlQsRUFvQlosU0FBdUJyUCxFQUFPdVAsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxFQUFXQyxHQUM5RyxNQUFRcE0sRUFBR3FNLEVBQU9DLEdBQUcsY0FBRUMsSUFBb0JILEVBQ3JDSSxFQUFrQkQsRUFBYyxPQUNoQ0UsRUFBWW5RLEVBQU1tUSxTQUFXQyxHQUF1QnBRLEVBQU8wUCxFQUFnQkQsRUFBaUJGLEVBQVdXLEVBQWlCVixFQUFRRyxFQUFPQyxFQUFjQyxFQUFXQyxHQUV0S0MsRUFBTSxLQUFPSSxFQUFTRSxjQUFnQnJRLEVBQU1zUSxVQUFZSixFQUFpQixLQUFNVCxFQUFpQlUsRUFBVVIsRUFBT0MsR0FFN0dPLEVBQVNwZCxLQUFPLEdBR2hCd2QsR0FBYXZRLEVBQU8sYUFDcEJ1USxHQUFhdlEsRUFBTyxjQUVwQitQLEVBQU0sS0FBTS9QLEVBQU13USxXQUFZakIsRUFBV0MsRUFBUUMsRUFBaUIsS0FDbEVFLEVBQU9DLEdBQ1BhLEdBQWdCTixFQUFVblEsRUFBTXdRLGFBSWhDTCxFQUFTeGdCLFNBRWpCLENBeENZK2dCLENBQWNwQixFQUFJQyxFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEVBQVdDLEdBeUNsSCxTQUF1QlQsRUFBSUMsRUFBSUMsRUFBV0MsRUFBUUMsRUFBaUJFLEVBQU9DLEVBQWNDLEdBQWFuTSxFQUFHcU0sRUFBT1ksR0FBSUMsRUFBU1osR0FBRyxjQUFFQyxLQUM3SCxNQUFNRSxFQUFZYixFQUFHYSxTQUFXZCxFQUFHYyxTQUNuQ0EsRUFBU25RLE1BQVFzUCxFQUNqQkEsRUFBR1AsR0FBS00sRUFBR04sR0FDWCxNQUFNOEIsRUFBWXZCLEVBQUdnQixVQUNmUSxFQUFjeEIsRUFBR2tCLFlBQ2pCLGFBQUVPLEVBQVksY0FBRVYsRUFBYSxhQUFFVyxFQUFZLFlBQUVDLEdBQWdCZCxFQUNuRSxHQUFJRSxFQUNBRixFQUFTRSxjQUFnQlEsRUFDckJLLEdBQWdCTCxFQUFXUixJQUUzQk4sRUFBTU0sRUFBZVEsRUFBV1YsRUFBU0QsZ0JBQWlCLEtBQU1ULEVBQWlCVSxFQUFVUixFQUFPQyxFQUFjQyxHQUM1R00sRUFBU3BkLE1BQVEsRUFDakJvZCxFQUFTeGdCLFVBRUpxaEIsSUFDTGpCLEVBQU1nQixFQUFjRCxFQUFhdkIsRUFBV0MsRUFBUUMsRUFBaUIsS0FDckVFLEVBQU9DLEVBQWNDLEdBQ3JCWSxHQUFnQk4sRUFBVVcsTUFLOUJYLEVBQVNnQixZQUNMRixHQUlBZCxFQUFTYyxhQUFjLEVBQ3ZCZCxFQUFTWSxhQUFlVixHQUd4Qk8sRUFBUVAsRUFBZVosRUFBaUJVLEdBSTVDQSxFQUFTcGQsS0FBTyxFQUVoQm9kLEVBQVN0ZixRQUFRcEcsT0FBUyxFQUUxQjBsQixFQUFTRCxnQkFBa0JELEVBQWMsT0FDckNlLEdBRUFqQixFQUFNLEtBQU1jLEVBQVdWLEVBQVNELGdCQUFpQixLQUFNVCxFQUFpQlUsRUFBVVIsRUFBT0MsRUFBY0MsR0FDbkdNLEVBQVNwZCxNQUFRLEVBQ2pCb2QsRUFBU3hnQixXQUdUb2dCLEVBQU1nQixFQUFjRCxFQUFhdkIsRUFBV0MsRUFBUUMsRUFBaUIsS0FDckVFLEVBQU9DLEVBQWNDLEdBQ3JCWSxHQUFnQk4sRUFBVVcsS0FHekJDLEdBQWdCRyxHQUFnQkwsRUFBV0UsSUFFaERoQixFQUFNZ0IsRUFBY0YsRUFBV3RCLEVBQVdDLEVBQVFDLEVBQWlCVSxFQUFVUixFQUFPQyxFQUFjQyxHQUVsR00sRUFBU3hnQixTQUFRLEtBSWpCb2dCLEVBQU0sS0FBTWMsRUFBV1YsRUFBU0QsZ0JBQWlCLEtBQU1ULEVBQWlCVSxFQUFVUixFQUFPQyxFQUFjQyxHQUNuR00sRUFBU3BkLE1BQVEsR0FDakJvZCxFQUFTeGdCLGlCQU1yQixHQUFJb2hCLEdBQWdCRyxHQUFnQkwsRUFBV0UsR0FFM0NoQixFQUFNZ0IsRUFBY0YsRUFBV3RCLEVBQVdDLEVBQVFDLEVBQWlCVSxFQUFVUixFQUFPQyxFQUFjQyxHQUNsR1ksR0FBZ0JOLEVBQVVVLFFBVTFCLEdBTEFOLEdBQWFqQixFQUFJLGFBRWpCYSxFQUFTRSxjQUFnQlEsRUFDekJWLEVBQVNnQixZQUNUcEIsRUFBTSxLQUFNYyxFQUFXVixFQUFTRCxnQkFBaUIsS0FBTVQsRUFBaUJVLEVBQVVSLEVBQU9DLEVBQWNDLEdBQ25HTSxFQUFTcGQsTUFBUSxFQUVqQm9kLEVBQVN4Z0IsY0FFUixDQUNELE1BQU0sUUFBRXloQixFQUFPLFVBQUVELEdBQWNoQixFQUMzQmlCLEVBQVUsRUFDVnhKLFlBQVcsS0FDSHVJLEVBQVNnQixZQUFjQSxHQUN2QmhCLEVBQVNrQixTQUFTUCxFQUN0QixHQUNETSxHQUVjLElBQVpBLEdBQ0xqQixFQUFTa0IsU0FBU1AsRUFFMUIsQ0FHWixDQTNJWVEsQ0FBY2pDLEVBQUlDLEVBQUlDLEVBQVdDLEVBQVFDLEVBQWlCRSxFQUFPQyxFQUFjQyxFQUFXQyxFQUVsRyxFQUNBeUIsUUF5VUosU0FBeUJDLEVBQU14UixFQUFPeVAsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxFQUFXQyxFQUFtQjJCLEdBRXRILE1BQU10QixFQUFZblEsRUFBTW1RLFNBQVdDLEdBQXVCcFEsRUFBTzBQLEVBQWdCRCxFQUFpQitCLEVBQUtFLFdBQVlDLFNBQVMxQixjQUFjLE9BQVEsS0FBTU4sRUFBT0MsRUFBY0MsRUFBV0MsR0FBbUIsR0FPck03WCxFQUFTd1osRUFBWUQsRUFBT3JCLEVBQVNFLGNBQWdCclEsRUFBTXNRLFVBQVliLEVBQWlCVSxFQUFVUCxFQUFjQyxHQUl0SCxPQUhzQixJQUFsQk0sRUFBU3BkLE1BQ1RvZCxFQUFTeGdCLFVBRU5zSSxDQUVYLEVBdlZJMlosT0FBUXhCLEdBQ1J5QixVQXVWSixTQUFtQzdSLEdBQy9CLE1BQU0sVUFBRTRNLEVBQVMsU0FBRXFCLEdBQWFqTyxFQUMxQjhSLEVBQTZCLEdBQVpsRixFQUN2QjVNLEVBQU1zUSxVQUFZeUIsR0FBc0JELEVBQWlCN0QsRUFBUytELFFBQVUvRCxHQUM1RWpPLEVBQU13USxXQUFhc0IsRUFDYkMsR0FBc0I5RCxFQUFTb0QsVUFDL0JwRSxHQUFZQyxHQUN0QixHQXpWQSxTQUFTcUQsR0FBYXZRLEVBQU84QixHQUN6QixNQUFNbVEsRUFBZ0JqUyxFQUFNdUIsT0FBU3ZCLEVBQU11QixNQUFNTyxJQUM3QyxJQUFBN0MsWUFBV2dULElBQ1hBLEdBRVIsQ0E2SEEsSUFBSUMsSUFBWSxFQUNoQixTQUFTOUIsR0FBdUJwUSxFQUFPalAsRUFBUTBlLEVBQWlCRixFQUFXVyxFQUFpQlYsRUFBUUcsRUFBT0MsRUFBY0MsRUFBV0MsRUFBbUJtQixHQUFjLEdBRXZHaUIsS0FDdERBLElBQVksRUFFWjFoQixRQUFRQSxRQUFRc1MsS0FBTyxPQUFTLE9BQU8sMEVBRTNDLE1BQVFZLEVBQUdxTSxFQUFPb0MsRUFBR0MsRUFBTXpCLEdBQUlDLEVBQVMzbEIsRUFBR3FQLEVBQU0wVixHQUFHLFdBQUUwQixFQUFVLE9BQUVXLElBQWF2QyxFQUN6RXNCLEdBQVUsSUFBQWhJLFVBQVNwSixFQUFNdUIsT0FBU3ZCLEVBQU11QixNQUFNNlAsU0FDOUNqQixFQUFXLENBQ2JuUSxRQUNBalAsU0FDQTBlLGtCQUNBRSxRQUNBSixZQUNBVyxrQkFDQVYsU0FDQXpjLEtBQU0sRUFDTm9lLFVBQVcsRUFDWEMsUUFBNEIsaUJBQVpBLEVBQXVCQSxHQUFXLEVBQ2xETCxhQUFjLEtBQ2RWLGNBQWUsS0FDZlcsY0FBYyxFQUNkQyxjQUNBeEksYUFBYSxFQUNiNVgsUUFBUyxHQUNUbEIsUUFBUTJpQixHQUFTLEdBRVQsSUFBS0EsSUFBV25DLEVBQVNFLGNBQ3JCLE1BQU0sSUFBSWtDLE1BQU0sMERBRXBCLEdBQUlwQyxFQUFTMUgsWUFDVCxNQUFNLElBQUk4SixNQUFNLDJFQUd4QixNQUFNLE1BQUV2UyxFQUFLLGFBQUUrUSxFQUFZLGNBQUVWLEVBQWEsVUFBRWMsRUFBUyxRQUFFdGdCLEVBQU8sZ0JBQUU0ZSxFQUFlLFVBQUVGLEdBQWNZLEVBQy9GLEdBQUlBLEVBQVNjLFlBQ1RkLEVBQVNjLGFBQWMsT0FFdEIsSUFBS3FCLEVBQVEsQ0FDZCxNQUFNRSxFQUFhekIsR0FDZlYsRUFBY3RDLFlBQ29CLFdBQWxDc0MsRUFBY3RDLFdBQVcwRSxLQUN6QkQsSUFDQXpCLEVBQWFoRCxXQUFXMkUsV0FBYSxLQUM3QnZCLElBQWNoQixFQUFTZ0IsV0FDdkJpQixFQUFLL0IsRUFBZWQsRUFBV0MsRUFBUSxFQUMzQyxHQUlSLElBQUksT0FBRUEsR0FBV1csRUFFYlksSUFHQXZCLEVBQVNsVixFQUFLeVcsR0FDZEgsRUFBUUcsRUFBY3RCLEVBQWlCVSxHQUFVLElBRWhEcUMsR0FFREosRUFBSy9CLEVBQWVkLEVBQVdDLEVBQVEsRUFFL0MsQ0FDQWlCLEdBQWdCTixFQUFVRSxHQUMxQkYsRUFBU0UsY0FBZ0IsS0FDekJGLEVBQVNhLGNBQWUsRUFHeEIsSUFBSWpnQixFQUFTb2YsRUFBU3BmLE9BQ2xCNGhCLEdBQXdCLEVBQzVCLEtBQU81aEIsR0FBUSxDQUNYLEdBQUlBLEVBQU9zZixjQUFlLENBR3RCdGYsRUFBT0YsUUFBUTlGLFFBQVE4RixHQUN2QjhoQixHQUF3QixFQUN4QixLQUNKLENBQ0E1aEIsRUFBU0EsRUFBT0EsTUFDcEIsQ0FFSzRoQixHQUNEdE8sRUFBaUJ4VCxHQUVyQnNmLEVBQVN0ZixRQUFVLEdBRW5CMGYsR0FBYXZRLEVBQU8sWUFDeEIsRUFDQXFSLFNBQVN1QixHQUNMLElBQUt6QyxFQUFTRSxjQUNWLE9BRUosTUFBTSxNQUFFclEsRUFBSyxhQUFFK1EsRUFBWSxnQkFBRXRCLEVBQWUsVUFBRUYsRUFBUyxNQUFFSSxHQUFVUSxFQUVuRUksR0FBYXZRLEVBQU8sY0FDcEIsTUFBTXdQLEVBQVNsVixFQUFLeVcsR0FDZDhCLEVBQWdCLEtBQ2IxQyxFQUFTYSxlQUlkakIsRUFBTSxLQUFNNkMsRUFBZXJELEVBQVdDLEVBQVFDLEVBQWlCLEtBQy9ERSxFQUFPQyxFQUFjQyxHQUNyQlksR0FBZ0JOLEVBQVV5QyxHQUFjLEVBRXRDSixFQUFhSSxFQUFjN0UsWUFBZ0QsV0FBbEM2RSxFQUFjN0UsV0FBVzBFLEtBQ3BFRCxJQUNBekIsRUFBYWhELFdBQVcyRSxXQUFhRyxHQUV6QzFDLEVBQVNhLGNBQWUsRUFFeEJKLEVBQVFHLEVBQWN0QixFQUFpQixNQUN2QyxHQUVLK0MsR0FDREssR0FFUixFQUNBVCxLQUFLN0MsRUFBV0MsRUFBUXBiLEdBQ3BCK2IsRUFBU1ksY0FDTHFCLEVBQUtqQyxFQUFTWSxhQUFjeEIsRUFBV0MsRUFBUXBiLEdBQ25EK2IsRUFBU1osVUFBWUEsQ0FDekIsRUFDQWpWLEtBQUksSUFDTzZWLEVBQVNZLGNBQWdCelcsRUFBSzZWLEVBQVNZLGNBRWxEK0IsWUFBWTVTLEVBQVU2UyxHQUNsQixNQUFNQyxJQUF3QjdDLEVBQVNFLGNBQ25DMkMsR0FDQTdDLEVBQVNwZCxPQUViLE1BQU1rZ0IsRUFBYS9TLEVBQVNGLE1BQU0rTyxHQUNsQzdPLEVBQ0tnVCxTQUFTOVEsT0FBTUosSUFDaEJDLEVBQVlELEVBQUs5QixFQUFVLEVBQWtDLElBRTVETCxNQUFLc1QsSUFHTixHQUFJalQsRUFBU3VJLGFBQ1QwSCxFQUFTMUgsYUFDVDBILEVBQVNnQixZQUFjalIsRUFBU2tULFdBQ2hDLE9BR0psVCxFQUFTbVQsZUFBZ0IsRUFDekIsTUFBTSxNQUFFclQsR0FBVUUsRUFFZEgsRUFBbUJDLEdBRXZCc1QsR0FBa0JwVCxFQUFVaVQsR0FBa0IsR0FDMUNGLElBR0FqVCxFQUFNK08sR0FBS2tFLEdBRWYsTUFBTU0sR0FBZU4sR0FBYy9TLEVBQVM4TyxRQUFRRCxHQUNwRGdFLEVBQWtCN1MsRUFBVUYsRUFJNUIwUixFQUFXdUIsR0FBYy9TLEVBQVM4TyxRQUFRRCxJQUcxQ2tFLEVBQWEsS0FBTzNZLEVBQUs0RixFQUFTOE8sU0FBVW1CLEVBQVVSLEVBQU9FLEdBQ3pEMEQsR0FDQWxCLEVBQU9rQixHQUVYekUsR0FBZ0I1TyxFQUFVRixFQUFNK08sSUFFNUI5TyxJQUdBK1MsR0FBMkMsS0FBbEI3QyxFQUFTcGQsTUFDbENvZCxFQUFTeGdCLFNBQ2IsR0FFUixFQUNBaWhCLFFBQVFsQixFQUFnQjhELEdBQ3BCckQsRUFBUzFILGFBQWMsRUFDbkIwSCxFQUFTWSxjQUNUSCxFQUFRVCxFQUFTWSxhQUFjdEIsRUFBaUJDLEVBQWdCOEQsR0FFaEVyRCxFQUFTRSxlQUNUTyxFQUFRVCxFQUFTRSxjQUFlWixFQUFpQkMsRUFBZ0I4RCxFQUV6RSxHQUVKLE9BQU9yRCxDQUNYLENBeUJBLFNBQVM0QixHQUFzQjBCLEdBQzNCLElBQUlDLEVBQ0osSUFBSSxJQUFBelUsWUFBV3dVLEdBQUksQ0FDZixNQUFNRSxFQUFhQyxJQUFzQkgsRUFBRXhILEdBQ3ZDMEgsSUFJQUYsRUFBRTNILElBQUssRUFDUCtILE1BRUpKLEVBQUlBLElBQ0FFLElBQ0FGLEVBQUUzSCxJQUFLLEVBQ1A0SCxFQUFRSSxHQUNSQyxLQUVSLENBQ0EsSUFBSSxJQUFBNWUsU0FBUXNlLEdBQUksQ0FDWixNQUFNTyxFQUFjNUYsR0FBaUJxRixHQUNXTyxHQUM1QzFqQixFQUFLLCtDQUVUbWpCLEVBQUlPLENBQ1IsQ0FLQSxPQUpBUCxFQUFJM0csR0FBZTJHLEdBQ2ZDLElBQVVELEVBQUV2RixrQkFDWnVGLEVBQUV2RixnQkFBa0J3RixFQUFNemQsUUFBT2xNLEdBQUtBLElBQU0wcEIsS0FFekNBLENBQ1gsQ0FDQSxTQUFTUSxHQUF3Qi9pQixFQUFJaWYsR0FDN0JBLEdBQVlBLEVBQVNFLGVBQ2pCLElBQUFsYixTQUFRakUsR0FDUmlmLEVBQVN0ZixRQUFROUYsUUFBUW1HLEdBR3pCaWYsRUFBU3RmLFFBQVE5RixLQUFLbUcsR0FJMUJtVCxFQUFpQm5ULEVBRXpCLENBQ0EsU0FBU3VmLEdBQWdCTixFQUFVK0QsR0FDL0IvRCxFQUFTWSxhQUFlbUQsRUFDeEIsTUFBTSxNQUFFbFUsRUFBSyxnQkFBRXlQLEdBQW9CVSxFQUM3QnBCLEVBQU0vTyxFQUFNK08sR0FBS21GLEVBQU9uRixHQUcxQlUsR0FBbUJBLEVBQWdCVCxVQUFZaFAsSUFDL0N5UCxFQUFnQnpQLE1BQU0rTyxHQUFLQSxFQUMzQkQsR0FBZ0JXLEVBQWlCVixHQUV6QyxDQUVBLFNBQVNvRixHQUFROWYsRUFBSzlKLEdBQ2xCLEdBQUs2cEIsR0FLQSxDQUNELElBQUlDLEVBQVdELEdBQWdCQyxTQU0vQixNQUFNQyxFQUFpQkYsR0FBZ0JyakIsUUFBVXFqQixHQUFnQnJqQixPQUFPc2pCLFNBQ3BFQyxJQUFtQkQsSUFDbkJBLEVBQVdELEdBQWdCQyxTQUFXbG1CLE9BQU95akIsT0FBTzBDLElBR3hERCxFQUFTaGdCLEdBQU85SixDQUNwQixNQWhCUStGLEVBQUssNkNBaUJqQixDQUNBLFNBQVNpa0IsR0FBT2xnQixFQUFLckcsRUFBY3dtQixHQUF3QixHQUd2RCxNQUFNdFUsRUFBV2tVLElBQW1CcEosR0FDcEMsR0FBSTlLLEVBQVUsQ0FJVixNQUFNbVUsRUFBOEIsTUFBbkJuVSxFQUFTblAsT0FDcEJtUCxFQUFTRixNQUFNSyxZQUFjSCxFQUFTRixNQUFNSyxXQUFXZ1UsU0FDdkRuVSxFQUFTblAsT0FBT3NqQixTQUN0QixHQUFJQSxHQUFZaGdCLEtBQU9nZ0IsRUFFbkIsT0FBT0EsRUFBU2hnQixHQUVmLEdBQUlvZ0IsVUFBVWhxQixPQUFTLEVBQ3hCLE9BQU8rcEIsSUFBeUIsSUFBQXZWLFlBQVdqUixHQUNyQ0EsRUFBYW9MLEtBQUs4RyxFQUFTaFQsT0FDM0JjLEVBR05zQyxFQUFLLGNBQWNpSSxPQUFPbEUsaUJBRWxDLE1BRUkvRCxFQUFLLHFFQUViLENBR0EsU0FBU29rQixHQUFZL2lCLEVBQVE4QixHQUN6QixPQUFPa2hCLEdBQVFoakIsRUFBUSxLQUFNOEIsRUFDakMsQ0FDQSxTQUFTbWhCLEdBQWdCampCLEVBQVE4QixHQUM3QixPQUFPa2hCLEdBQVFoakIsRUFBUSxLQUNqQnhELE9BQU9DLE9BQU9ELE9BQU9DLE9BQU8sQ0FBQyxFQUFHcUYsR0FBVSxDQUFFNkwsTUFBTyxTQUM3RCxDQUNBLFNBQVN1VixHQUFnQmxqQixFQUFROEIsR0FDN0IsT0FBT2toQixHQUFRaGpCLEVBQVEsS0FDakJ4RCxPQUFPQyxPQUFPRCxPQUFPQyxPQUFPLENBQUMsRUFBR3FGLEdBQVUsQ0FBRTZMLE1BQU8sU0FDN0QsQ0FFQSxNQUFNd1YsR0FBd0IsQ0FBQyxFQUUvQixTQUFTQyxHQUFNQyxFQUFRMVEsRUFBSTdRLEdBTXZCLE9BTGdELElBQUF3TCxZQUFXcUYsSUFDdkRoVSxFQUFLLGdMQUlGcWtCLEdBQVFLLEVBQVExUSxFQUFJN1EsRUFDL0IsQ0FDQSxTQUFTa2hCLEdBQVFLLEVBQVExUSxHQUFJLFVBQUUyUSxFQUFTLEtBQUVDLEVBQUksTUFBRTVWLEVBQUssUUFBRXpLLEVBQU8sVUFBRWUsR0FBYyxFQUFBOFMsV0FDMUJwRSxTQUMxQnBVLElBQWQra0IsR0FDQTNrQixFQUFLLGlIQUdJSixJQUFUZ2xCLEdBQ0E1a0IsRUFBSyx3R0FJYixNQUFNNmtCLEVBQXFCMUIsSUFDdkJuakIsRUFBSyx5QkFBMEJtakIsRUFBRyw2R0FDbUIsRUFFbkR2VCxFQUFXa1UsR0FDakIsSUFBSTdWLEVBdURBNlcsRUF0REFDLEdBQWUsRUFDZkMsR0FBZ0IsRUFpRHBCLElBaERJLElBQUE5ZCxPQUFNd2QsSUFDTnpXLEVBQVMsSUFBTXlXLEVBQU96cUIsTUFDdEI4cUIsR0FBZSxJQUFBdmQsV0FBWWtkLEtBRXRCLElBQUFoWixZQUFXZ1osSUFDaEJ6VyxFQUFTLElBQU15VyxFQUNmRSxHQUFPLElBRUYsSUFBQS9mLFNBQVE2ZixJQUNiTSxHQUFnQixFQUNoQkQsRUFBZUwsRUFBT3pILE1BQUtrRyxJQUFLLElBQUF6WCxZQUFXeVgsS0FBTSxJQUFBM2IsV0FBWTJiLEtBQzdEbFYsRUFBUyxJQUFNeVcsRUFBTzllLEtBQUl1ZCxJQUNsQixJQUFBamMsT0FBTWljLEdBQ0NBLEVBQUVscEIsT0FFSixJQUFBeVIsWUFBV3lYLEdBQ1Q4QixHQUFTOUIsSUFFWCxJQUFBeFUsWUFBV3dVLEdBQ1QzUyxFQUFzQjJTLEVBQUd2VCxFQUFVLFFBR0NpVixFQUFrQjFCLE9BSWhFLElBQUF4VSxZQUFXK1YsR0FHWnpXLEVBRkErRixFQUVTLElBQU14RCxFQUFzQmtVLEVBQVE5VSxFQUFVLEdBSTlDLEtBQ0wsSUFBSUEsSUFBWUEsRUFBU3VJLFlBTXpCLE9BSEkyTSxHQUNBQSxJQUVHbFQsRUFBMkI4UyxFQUFROVUsRUFBVSxFQUFtQyxDQUFDc1YsR0FBVyxHQUszR2pYLEVBQVMsRUFBQWtYLEtBQ2tDTixFQUFrQkgsSUFFN0QxUSxHQUFNNFEsRUFBTSxDQUNaLE1BQU1RLEVBQWFuWCxFQUNuQkEsRUFBUyxJQUFNZ1gsR0FBU0csSUFDNUIsQ0FFQSxJQUFJRixFQUFhdGtCLElBQ2Jra0IsRUFBVXpqQixFQUFPNkIsT0FBUyxLQUN0QnNOLEVBQXNCNVAsRUFBSWdQLEVBQVUsRUFBaUMsQ0FDeEUsRUFJTCxHQUFJeVYsR0FhQSxPQVhBSCxFQUFZLEVBQUFDLEtBQ1BuUixFQUdJMlEsR0FDTC9TLEVBQTJCb0MsRUFBSXBFLEVBQVUsRUFBbUMsQ0FDeEUzQixJQUNBK1csRUFBZ0IsUUFBS3BsQixFQUNyQnNsQixJQU5KalgsSUFTRyxFQUFBa1gsS0FFWCxJQUFJemdCLEVBQVdzZ0IsRUFBZ0IsR0FBS1IsR0FDcEMsTUFBTWxSLEVBQU0sS0FDUixHQUFLalMsRUFBT2YsT0FHWixHQUFJMFQsRUFBSSxDQUVKLE1BQU12UCxFQUFXcEQsRUFBT1YsT0FDcEJpa0IsR0FDQUcsSUFDQ0MsRUFDS3ZnQixFQUFTd1ksTUFBSyxDQUFDM1UsRUFBRzFPLEtBQU0sSUFBQWdPLFlBQVdVLEVBQUc1RCxFQUFTOUssT0FDL0MsSUFBQWdPLFlBQVduRCxFQUFVQyxPQUd2Qm9nQixHQUNBQSxJQUVKbFQsRUFBMkJvQyxFQUFJcEUsRUFBVSxFQUFtQyxDQUN4RW5MLEVBRUFDLElBQWE4ZixRQUF3QjVrQixFQUFZOEUsRUFDakR3Z0IsSUFFSnhnQixFQUFXRCxFQUVuQixNQUdJcEQsRUFBT1YsS0FDWCxFQUtKLElBQUk2QixFQURKOFEsRUFBSWpPLGVBQWlCMk8sRUFFUCxTQUFWaEYsRUFDQXhNLEVBQVk4USxFQUVHLFNBQVZ0RSxFQUNMeE0sRUFBWSxJQUFNOGlCLEdBQXNCaFMsRUFBSzFELEdBQVlBLEVBQVNpUSxXQUlsRXZNLEVBQUlhLEtBQU0sRUFDTnZFLElBQ0EwRCxFQUFJOVYsR0FBS29TLEVBQVNnSSxLQUN0QnBWLEVBQVksSUFBTTZRLEVBQVNDLElBRS9CLE1BQU1qUyxFQUFTLElBQUksRUFBQWtCLGVBQWUwTCxFQUFRekwsR0FvQjFDLE9BbEJJbkIsRUFBT2tELFFBQVVBLEVBQ2pCbEQsRUFBT2lFLFVBQVlBLEVBR25CME8sRUFDSTJRLEVBQ0FyUixJQUdBNU8sRUFBV3JELEVBQU9WLE1BR1AsU0FBVnFPLEVBQ0xzVyxHQUFzQmprQixFQUFPVixJQUFJNkMsS0FBS25DLEdBQVN1TyxHQUFZQSxFQUFTaVEsVUFHcEV4ZSxFQUFPVixNQUVKLEtBQ0hVLEVBQU9OLE9BQ0g2TyxHQUFZQSxFQUFTdE8sUUFDckIsSUFBQXlnQixRQUFPblMsRUFBU3RPLE1BQU1mLFFBQVNjLEVBQ25DLENBRVIsQ0FFQSxTQUFTa2tCLEdBQWNiLEVBQVF6cUIsRUFBT2tKLEdBQ2xDLE1BQU1xaUIsRUFBYXJvQixLQUFLUCxNQUNsQnFSLEdBQVMsSUFBQXNELFVBQVNtVCxHQUNsQkEsRUFBT3RsQixTQUFTLEtBQ1pxbUIsR0FBaUJELEVBQVlkLEdBQzdCLElBQU1jLEVBQVdkLEdBQ3JCQSxFQUFPbGhCLEtBQUtnaUIsRUFBWUEsR0FDOUIsSUFBSXhSLEdBQ0EsSUFBQXJGLFlBQVcxVSxHQUNYK1osRUFBSy9aLEdBR0wrWixFQUFLL1osRUFBTW9mLFFBQ1hsVyxFQUFVbEosR0FFZCxNQUFNZ1ksRUFBTTZSLEdBQ1o0QixHQUFtQnZvQixNQUNuQixNQUFNb0osRUFBTThkLEdBQVFwVyxFQUFRK0YsRUFBR3hRLEtBQUtnaUIsR0FBYXJpQixHQU9qRCxPQU5JOE8sRUFDQXlULEdBQW1CelQsR0FHbkIwVCxLQUVHcGYsQ0FDWCxDQUNBLFNBQVNrZixHQUFpQnJLLEVBQUt3SyxHQUMzQixNQUFNQyxFQUFXRCxFQUFLRSxNQUFNLEtBQzVCLE1BQU8sS0FDSCxJQUFJN1QsRUFBTW1KLEVBQ1YsSUFBSyxJQUFJeGhCLEVBQUksRUFBR0EsRUFBSWlzQixFQUFTMXJCLFFBQVU4WCxFQUFLclksSUFDeENxWSxFQUFNQSxFQUFJNFQsRUFBU2pzQixJQUV2QixPQUFPcVksQ0FBRyxDQUVsQixDQUNBLFNBQVNnVCxHQUFTaHJCLEVBQU9pYSxHQUNyQixLQUFLLElBQUEvTSxVQUFTbE4sSUFBVUEsRUFBeUMsU0FDN0QsT0FBT0EsRUFHWCxJQURBaWEsRUFBT0EsR0FBUSxJQUFJdlMsS0FDVjBDLElBQUlwSyxHQUNULE9BQU9BLEVBR1gsR0FEQWlhLEVBQUs1UCxJQUFJckssSUFDTCxJQUFBaU4sT0FBTWpOLEdBQ05nckIsR0FBU2hyQixFQUFNQSxNQUFPaWEsUUFFckIsSUFBSSxJQUFBclAsU0FBUTVLLEdBQ2IsSUFBSyxJQUFJTCxFQUFJLEVBQUdBLEVBQUlLLEVBQU1FLE9BQVFQLElBQzlCcXJCLEdBQVNockIsRUFBTUwsR0FBSXNhLFFBR3RCLElBQUksSUFBQTZSLE9BQU05ckIsS0FBVSxJQUFBK0ssT0FBTS9LLEdBQzNCQSxFQUFNNkssU0FBU3dELElBQ1gyYyxHQUFTM2MsRUFBRzRMLEVBQUssU0FHcEIsSUFBSSxJQUFBOFIsZUFBYy9yQixHQUNuQixJQUFLLE1BQU04SixLQUFPOUosRUFDZGdyQixHQUFTaHJCLEVBQU04SixHQUFNbVEsR0FHN0IsT0FBT2phLENBQ1gsQ0FFQSxTQUFTZ3NCLEtBQ0wsTUFBTUMsRUFBUSxDQUNWQyxXQUFXLEVBQ1hDLFdBQVcsRUFDWEMsY0FBYyxFQUNkQyxjQUFlLElBQUlwaUIsS0FRdkIsT0FOQXFpQixJQUFVLEtBQ05MLEVBQU1DLFdBQVksQ0FBSSxJQUUxQkssSUFBZ0IsS0FDWk4sRUFBTUcsY0FBZSxDQUFJLElBRXRCSCxDQUNYLENBQ0EsTUFBTU8sR0FBMEIsQ0FBQ0MsU0FBVXRzQixPQTZIckN1c0IsR0E1SHFCLENBQ3ZCblYsS0FBTSxpQkFDTlAsTUFBTyxDQUNIa1IsS0FBTWxhLE9BQ04yZSxPQUFRQyxRQUNSQyxVQUFXRCxRQUVYRSxjQUFlTixHQUNmTyxRQUFTUCxHQUNUUSxhQUFjUixHQUNkUyxpQkFBa0JULEdBRWxCVSxjQUFlVixHQUNmVyxRQUFTWCxHQUNUWSxhQUFjWixHQUNkYSxpQkFBa0JiLEdBRWxCYyxlQUFnQmQsR0FDaEJlLFNBQVVmLEdBQ1ZnQixjQUFlaEIsR0FDZmlCLGtCQUFtQmpCLElBRXZCa0IsTUFBTTFXLEdBQU8sTUFBRWdMLElBQ1gsTUFBTXJNLEVBQVdnWSxLQUNYMUIsRUFBUUQsS0FDZCxJQUFJNEIsRUFDSixNQUFPLEtBQ0gsTUFBTWxLLEVBQVcxQixFQUFNeUYsU0FBV29HLEdBQXlCN0wsRUFBTXlGLFdBQVcsR0FDNUUsSUFBSy9ELElBQWFBLEVBQVN4akIsT0FDdkIsT0FFSixJQUFJK2pCLEVBQVFQLEVBQVMsR0FDckIsR0FBSUEsRUFBU3hqQixPQUFTLEVBQUcsQ0FDckIsSUFBSTR0QixHQUFXLEVBRWYsSUFBSyxNQUFNdHVCLEtBQUtra0IsRUFDWixHQUFJbGtCLEVBQUVxSyxPQUFTOFksR0FBUyxDQUNwQixHQUErQ21MLEVBQVUsQ0FFckQvbkIsRUFBSyxxR0FFTCxLQUNKLENBQ0FrZSxFQUFRemtCLEVBQ1JzdUIsR0FBVyxDQUdmLENBRVIsQ0FHQSxNQUFNQyxHQUFXLElBQUExaEIsT0FBTTJLLElBQ2pCLEtBQUVrUixHQUFTNkYsRUFTakIsR0FOSTdGLEdBQ1MsV0FBVEEsR0FDUyxXQUFUQSxHQUNTLFlBQVRBLEdBQ0FuaUIsRUFBSyw4QkFBOEJtaUIsS0FFbkMrRCxFQUFNRSxVQUNOLE9BQU82QixHQUFpQi9KLEdBSTVCLE1BQU1nSyxFQUFhQyxHQUFrQmpLLEdBQ3JDLElBQUtnSyxFQUNELE9BQU9ELEdBQWlCL0osR0FFNUIsTUFBTWtLLEVBQWFDLEdBQXVCSCxFQUFZRixFQUFVOUIsRUFBT3RXLEdBQ3ZFMFksR0FBbUJKLEVBQVlFLEdBQy9CLE1BQU1HLEVBQVczWSxFQUFTOE8sUUFDcEI4SixFQUFnQkQsR0FBWUosR0FBa0JJLEdBQ3BELElBQUlFLEdBQXVCLEVBQzNCLE1BQU0saUJBQUVDLEdBQXFCUixFQUFXcGtCLEtBQ3hDLEdBQUk0a0IsRUFBa0IsQ0FDbEIsTUFBTTNrQixFQUFNMmtCLFNBQ2M5b0IsSUFBdEJpb0IsRUFDQUEsRUFBb0I5akIsRUFFZkEsSUFBUThqQixJQUNiQSxFQUFvQjlqQixFQUNwQjBrQixHQUF1QixFQUUvQixDQUVBLEdBQUlELEdBQ0FBLEVBQWMxa0IsT0FBUzhZLE1BQ3JCZ0UsR0FBZ0JzSCxFQUFZTSxJQUFrQkMsR0FBdUIsQ0FDdkUsTUFBTUUsRUFBZU4sR0FBdUJHLEVBQWVSLEVBQVU5QixFQUFPdFcsR0FJNUUsR0FGQTBZLEdBQW1CRSxFQUFlRyxHQUVyQixXQUFUeEcsRUFPQSxPQU5BK0QsRUFBTUUsV0FBWSxFQUVsQnVDLEVBQWF2RyxXQUFhLEtBQ3RCOEQsRUFBTUUsV0FBWSxFQUNsQnhXLEVBQVNrRyxRQUFRLEVBRWRtUyxHQUFpQi9KLEdBRVYsV0FBVGlFLEdBQXFCK0YsRUFBV3BrQixPQUFTOFksS0FDOUMrTCxFQUFhQyxXQUFhLENBQUNuSyxFQUFJb0ssRUFBYUMsS0FDYkMsR0FBdUI3QyxFQUFPc0MsR0FDdEN2Z0IsT0FBT3VnQixFQUFjemtCLE1BQVF5a0IsRUFFaEQvSixFQUFHdUssU0FBVyxLQUNWSCxJQUNBcEssRUFBR3VLLGNBQVdwcEIsU0FDUHdvQixFQUFXVSxZQUFZLEVBRWxDVixFQUFXVSxhQUFlQSxDQUFZLEVBR2xELENBQ0EsT0FBTzVLLENBQUssQ0FFcEIsR0FLSixTQUFTNkssR0FBdUI3QyxFQUFPeFcsR0FDbkMsTUFBTSxjQUFFNFcsR0FBa0JKLEVBQzFCLElBQUkrQyxFQUFxQjNDLEVBQWN2bkIsSUFBSTJRLEVBQU01TCxNQUtqRCxPQUpLbWxCLElBQ0RBLEVBQXFCcHJCLE9BQU95akIsT0FBTyxNQUNuQ2dGLEVBQWNyaUIsSUFBSXlMLEVBQU01TCxLQUFNbWxCLElBRTNCQSxDQUNYLENBR0EsU0FBU1osR0FBdUIzWSxFQUFPdUIsRUFBT2lWLEVBQU90VyxHQUNqRCxNQUFNLE9BQUVnWCxFQUFNLEtBQUV6RSxFQUFJLFVBQUUyRSxHQUFZLEVBQUssY0FBRUMsRUFBYSxRQUFFQyxFQUFPLGFBQUVDLEVBQVksaUJBQUVDLEVBQWdCLGNBQUVDLEVBQWEsUUFBRUMsRUFBTyxhQUFFQyxFQUFZLGlCQUFFQyxFQUFnQixlQUFFQyxFQUFjLFNBQUVDLEVBQVEsY0FBRUMsRUFBYSxrQkFBRUMsR0FBc0J6VyxFQUNsTmxOLEVBQU1rRSxPQUFPeUgsRUFBTTNMLEtBQ25Ca2xCLEVBQXFCRixHQUF1QjdDLEVBQU94VyxHQUNuRHdaLEVBQVcsQ0FBQzFzQixFQUFNMUMsS0FDcEIwQyxHQUNJb1YsRUFBMkJwVixFQUFNb1QsRUFBVSxFQUFvQzlWLEVBQUssRUFFdEZxdkIsRUFBZ0IsQ0FBQzNzQixFQUFNMUMsS0FDekIsTUFBTW1RLEVBQU9uUSxFQUFLLEdBQ2xCb3ZCLEVBQVMxc0IsRUFBTTFDLElBQ1gsSUFBQStLLFNBQVFySSxHQUNKQSxFQUFLNHNCLE9BQU01c0IsR0FBUUEsRUFBS3JDLFFBQVUsS0FDbEM4UCxJQUVDek4sRUFBS3JDLFFBQVUsR0FDcEI4UCxHQUNKLEVBRUVvZixFQUFRLENBQ1ZsSCxPQUNBMkUsWUFDQXdDLFlBQVk3SyxHQUNSLElBQUlqaUIsRUFBT3VxQixFQUNYLElBQUtiLEVBQU1DLFVBQVcsQ0FDbEIsSUFBSVMsRUFJQSxPQUhBcHFCLEVBQU8rcUIsR0FBa0JSLENBS2pDLENBRUl0SSxFQUFHdUssVUFDSHZLLEVBQUd1SyxVQUFTLEdBR2hCLE1BQU1PLEVBQWVOLEVBQW1CbGxCLEdBQ3BDd2xCLEdBQ0EzSSxHQUFnQmxSLEVBQU82WixJQUN2QkEsRUFBYTlLLEdBQUd1SyxVQUVoQk8sRUFBYTlLLEdBQUd1SyxXQUVwQkUsRUFBUzFzQixFQUFNLENBQUNpaUIsR0FDcEIsRUFDQStLLE1BQU0vSyxHQUNGLElBQUlqaUIsRUFBT3dxQixFQUNQeUMsRUFBWXhDLEVBQ1p5QyxFQUFheEMsRUFDakIsSUFBS2hCLEVBQU1DLFVBQVcsQ0FDbEIsSUFBSVMsRUFNQSxPQUxBcHFCLEVBQU9nckIsR0FBWVIsRUFDbkJ5QyxFQUFZaEMsR0FBaUJSLEVBQzdCeUMsRUFBYWhDLEdBQXFCUixDQUsxQyxDQUNBLElBQUl5QyxHQUFTLEVBQ2IsTUFBTTFmLEVBQVF3VSxFQUFHbUwsU0FBWUMsSUFDckJGLElBRUpBLEdBQVMsRUFFTFQsRUFEQVcsRUFDU0gsRUFHQUQsRUFIWSxDQUFDaEwsSUFLdEI0SyxFQUFNUCxjQUNOTyxFQUFNUCxlQUVWckssRUFBR21MLGNBQVdocUIsRUFBUyxFQUV2QnBELEVBQ0Eyc0IsRUFBYzNzQixFQUFNLENBQUNpaUIsRUFBSXhVLElBR3pCQSxHQUVSLEVBQ0E2ZixNQUFNckwsRUFBSXNELEdBQ04sTUFBTWhlLEVBQU1rRSxPQUFPeUgsRUFBTTNMLEtBSXpCLEdBSEkwYSxFQUFHbUwsVUFDSG5MLEVBQUdtTCxVQUFTLEdBRVoxRCxFQUFNRyxhQUNOLE9BQU90RSxJQUVYbUgsRUFBUy9CLEVBQWUsQ0FBQzFJLElBQ3pCLElBQUlrTCxHQUFTLEVBQ2IsTUFBTTFmLEVBQVF3VSxFQUFHdUssU0FBWWEsSUFDckJGLElBRUpBLEdBQVMsRUFDVDVILElBRUltSCxFQURBVyxFQUNTdkMsRUFHQUQsRUFIa0IsQ0FBQzVJLElBS2hDQSxFQUFHdUssY0FBV3BwQixFQUNWcXBCLEVBQW1CbGxCLEtBQVMyTCxVQUNyQnVaLEVBQW1CbGxCLEdBQzlCLEVBRUprbEIsRUFBbUJsbEIsR0FBTzJMLEVBQ3RCMFgsRUFDQStCLEVBQWMvQixFQUFTLENBQUMzSSxFQUFJeFUsSUFHNUJBLEdBRVIsRUFDQThmLE1BQU1yYSxHQUNLMlksR0FBdUIzWSxFQUFPdUIsRUFBT2lWLEVBQU90VyxJQUczRCxPQUFPeVosQ0FDWCxDQUtBLFNBQVNwQixHQUFpQnZZLEdBQ3RCLEdBQUlzYSxHQUFZdGEsR0FHWixPQUZBQSxFQUFReU4sR0FBV3pOLElBQ2JpTyxTQUFXLEtBQ1ZqTyxDQUVmLENBQ0EsU0FBU3lZLEdBQWtCelksR0FDdkIsT0FBT3NhLEdBQVl0YSxHQUNiQSxFQUFNaU8sU0FDRmpPLEVBQU1pTyxTQUFTLFFBQ2YvZCxFQUNKOFAsQ0FDVixDQUNBLFNBQVM0WSxHQUFtQjVZLEVBQU8yWixHQUNULEVBQWxCM1osRUFBTTRNLFdBQTRDNU0sRUFBTUcsVUFDeER5WSxHQUFtQjVZLEVBQU1HLFVBQVU2TyxRQUFTMkssR0FFckIsSUFBbEIzWixFQUFNNE0sV0FDWDVNLEVBQU1zUSxVQUFVdkMsV0FBYTRMLEVBQU1VLE1BQU1yYSxFQUFNc1EsV0FDL0N0USxFQUFNd1EsV0FBV3pDLFdBQWE0TCxFQUFNVSxNQUFNcmEsRUFBTXdRLGFBR2hEeFEsRUFBTStOLFdBQWE0TCxDQUUzQixDQUNBLFNBQVN2QixHQUF5Qm5LLEVBQVVzTSxHQUFjLEVBQU9DLEdBQzdELElBQUkxYyxFQUFNLEdBQ04yYyxFQUFxQixFQUN6QixJQUFLLElBQUl2d0IsRUFBSSxFQUFHQSxFQUFJK2pCLEVBQVN4akIsT0FBUVAsSUFBSyxDQUN0QyxJQUFJc2tCLEVBQVFQLEVBQVMvakIsR0FFckIsTUFBTW1LLEVBQW1CLE1BQWJtbUIsRUFDTmhNLEVBQU1uYSxJQUNOa0UsT0FBT2lpQixHQUFhamlCLE9BQW9CLE1BQWJpVyxFQUFNbmEsSUFBY21hLEVBQU1uYSxJQUFNbkssR0FFN0Rza0IsRUFBTXBhLE9BQVNzbUIsSUFDTyxJQUFsQmxNLEVBQU1uQixXQUNOb04sSUFDSjNjLEVBQU1BLEVBQUlqUyxPQUFPdXNCLEdBQXlCNUosRUFBTVAsU0FBVXNNLEVBQWFsbUIsTUFHbEVrbUIsR0FBZS9MLEVBQU1wYSxPQUFTOFksS0FDbkNwUCxFQUFJL1MsS0FBWSxNQUFQc0osRUFBY29aLEdBQVdlLEVBQU8sQ0FBRW5hLFFBQVNtYSxFQUU1RCxDQUtBLEdBQUlpTSxFQUFxQixFQUNyQixJQUFLLElBQUl2d0IsRUFBSSxFQUFHQSxFQUFJNFQsRUFBSXJULE9BQVFQLElBQzVCNFQsRUFBSTVULEdBQUdtakIsV0FBYSxFQUc1QixPQUFPdlAsQ0FDWCxDQUdBLFNBQVM2YyxHQUFnQmxuQixHQUNyQixPQUFPLElBQUF3TCxZQUFXeEwsR0FBVyxDQUFFd2tCLE1BQU94a0IsRUFBU3FPLEtBQU1yTyxFQUFRcU8sTUFBU3JPLENBQzFFLENBRUEsTUFBTW1uQixHQUFrQjF3QixLQUFRQSxFQUFFa0ssS0FBS3dTLGNBQ3ZDLFNBQVNpVSxHQUFxQjdGLElBQ3RCLElBQUEvVixZQUFXK1YsS0FDWEEsRUFBUyxDQUFFOEYsT0FBUTlGLElBRXZCLE1BQU0sT0FBRThGLEVBQU0saUJBQUVDLEVBQWdCLGVBQUVDLEVBQWMsTUFBRUMsRUFBUSxJQUFHLFFBQUU3SixFQUFPLFlBQ3RFOEosR0FBYyxFQUFNQyxRQUFTQyxHQUFnQnBHLEVBQzdDLElBQ0lxRyxFQURBQyxFQUFpQixLQUVqQkMsRUFBVSxFQUNkLE1BS01DLEVBQU8sS0FDVCxJQUFJQyxFQUNKLE9BQVFILElBQ0hHLEVBQWNILEVBQ1hSLElBQ0sxWSxPQUFNSixJQUVQLEdBREFBLEVBQU1BLGFBQWV1USxNQUFRdlEsRUFBTSxJQUFJdVEsTUFBTWhhLE9BQU95SixJQUNoRG9aLEVBQ0EsT0FBTyxJQUFJeHJCLFNBQVEsQ0FBQ0QsRUFBUytyQixLQUd6Qk4sRUFBWXBaLEdBRk0sSUFBTXJTLEdBYjVDNHJCLElBQ0FELEVBQWlCLEtBQ1ZFLFFBWThCLElBQU1FLEVBQU8xWixJQUNRdVosRUFBVSxFQUFFLElBSXRELE1BQU12WixDQUNWLElBRUNuQyxNQUFNbUssSUFDUCxHQUFJeVIsSUFBZ0JILEdBQWtCQSxFQUNsQyxPQUFPQSxFQVdYLEdBVGdEdFIsR0FDNUMxWixFQUFLLGlIQUlMMFosSUFDQ0EsRUFBSzJSLFlBQTJDLFdBQTdCM1IsRUFBS3JYLE9BQU9pcEIsZ0JBQ2hDNVIsRUFBT0EsRUFBS2dJLFNBRStCaEksS0FBUyxJQUFBdlMsVUFBU3VTLE1BQVUsSUFBQS9LLFlBQVcrSyxHQUNsRixNQUFNLElBQUl1SSxNQUFNLHdDQUF3Q3ZJLEtBRzVELE9BREFxUixFQUFlclIsRUFDUkEsQ0FBSSxJQUNYLEVBRWhCLE9BQU8yUSxHQUFnQixDQUNuQjdZLEtBQU0sd0JBQ044RSxjQUFlNFUsRUFDWEssc0JBQ0EsT0FBT1IsQ0FDWCxFQUNBcEQsUUFDSSxNQUFNL1gsRUFBV2tVLEdBRWpCLEdBQUlpSCxFQUNBLE1BQU8sSUFBTVMsR0FBZ0JULEVBQWNuYixHQUUvQyxNQUFNaWIsRUFBV25aLElBQ2JzWixFQUFpQixLQUNqQnJaLEVBQVlELEVBQUs5QixFQUFVLElBQTZDOGEsRUFBMEUsRUFHdEosR0FBS0UsR0FBZWhiLEVBQVNpUSxVQUN6QixHQUNBLE9BQU9xTCxJQUNGM2IsTUFBS21LLEdBQ0MsSUFBTThSLEdBQWdCOVIsRUFBTTlKLEtBRWxDa0MsT0FBTUosSUFDUG1aLEVBQVFuWixHQUNELElBQU1nWixFQUNQL04sR0FBWStOLEVBQWdCLENBQzFCalksTUFBT2YsSUFFVCxRQUdkLE1BQU0rWixHQUFTLElBQUExZixNQUFJLEdBQ2IwRyxHQUFRLElBQUExRyxPQUNSMmYsR0FBVSxJQUFBM2YsT0FBTTRlLEdBNEJ0QixPQTNCSUEsR0FDQXJULFlBQVcsS0FDUG9VLEVBQVF6eEIsT0FBUSxDQUFLLEdBQ3RCMHdCLEdBRVEsTUFBWDdKLEdBQ0F4SixZQUFXLEtBQ1AsSUFBS21VLEVBQU94eEIsUUFBVXdZLEVBQU14WSxNQUFPLENBQy9CLE1BQU15WCxFQUFNLElBQUl1USxNQUFNLG1DQUFtQ25CLFFBQ3pEK0osRUFBUW5aLEdBQ1JlLEVBQU14WSxNQUFReVgsQ0FDbEIsSUFDRG9QLEdBRVBvSyxJQUNLM2IsTUFBSyxLQUNOa2MsRUFBT3h4QixPQUFRLEVBQ1gyVixFQUFTblAsUUFBVXVwQixHQUFZcGEsRUFBU25QLE9BQU9pUCxRQUcvQzJELEVBQVN6RCxFQUFTblAsT0FBT3FWLE9BQzdCLElBRUNoRSxPQUFNSixJQUNQbVosRUFBUW5aLEdBQ1JlLEVBQU14WSxNQUFReVgsQ0FBRyxJQUVkLElBQ0MrWixFQUFPeHhCLE9BQVM4d0IsRUFDVFMsR0FBZ0JULEVBQWNuYixHQUVoQzZDLEVBQU14WSxPQUFTeXdCLEVBQ2IvTixHQUFZK04sRUFBZ0IsQ0FDL0JqWSxNQUFPQSxFQUFNeFksUUFHWnd3QixJQUFxQmlCLEVBQVF6eEIsTUFDM0IwaUIsR0FBWThOLFFBRGxCLENBSWIsR0FFUixDQUNBLFNBQVNlLEdBQWdCOVIsR0FBUWhLLE9BQU8sSUFBRTNELEVBQUcsTUFBRWtGLEVBQUssU0FBRTBNLEVBQVEsVUFBRXJCLEdBQVcsT0FBRTdiLElBQ3pFLE1BQU1pUCxFQUFRaU4sR0FBWWpELEVBQU16SSxFQUFPME0sR0FHdkMsT0FEQWpPLEVBQU0zRCxJQUFNQSxFQUNMMkQsQ0FDWCxDQUVBLE1BQU1zYSxHQUFldGEsR0FBVUEsRUFBTTVMLEtBQUs2bkIsY0FtTnBDQyxHQWxOZ0IsQ0FDbEJwYSxLQUFNLFlBSU5tYSxlQUFlLEVBQ2YxYSxNQUFPLENBQ0g0YSxRQUFTLENBQUM1akIsT0FBUTZqQixPQUFRMXhCLE9BQzFCMnhCLFFBQVMsQ0FBQzlqQixPQUFRNmpCLE9BQVExeEIsT0FDMUI0eEIsSUFBSyxDQUFDL2pCLE9BQVFQLFNBRWxCaWdCLE1BQU0xVyxHQUFPLE1BQUVnTCxJQUNYLE1BQU1yTSxFQUFXZ1ksS0FNWHFFLEVBQWdCcmMsRUFBU3dMLElBRy9CLElBQUs2USxFQUFjQyxTQUNmLE1BQU8sS0FDSCxNQUFNdk8sRUFBVzFCLEVBQU15RixTQUFXekYsRUFBTXlGLFVBQ3hDLE9BQU8vRCxHQUFnQyxJQUFwQkEsRUFBU3hqQixPQUFld2pCLEVBQVMsR0FBS0EsQ0FBUSxFQUd6RSxNQUFNL0QsRUFBUSxJQUFJMVYsSUFDWi9FLEVBQU8sSUFBSXdDLElBQ2pCLElBQUl3cUIsRUFBVSxLQUVWdmMsRUFBU3djLFVBQVl4UyxFQUV6QixNQUFNd0YsRUFBaUJ4UCxFQUFTaVEsVUFDeEJxTSxVQUFZOVksRUFBR3FNLEVBQU9vQyxFQUFHQyxFQUFNekIsR0FBSWdNLEVBQVUzTSxHQUFHLGNBQUVDLEtBQXNCc00sRUFDMUVLLEVBQW1CM00sRUFBYyxPQXVDdkMsU0FBU1csRUFBUTVRLEdBRWI2YyxHQUFlN2MsR0FDZjJjLEVBQVMzYyxFQUFPRSxFQUFVd1AsR0FBZ0IsRUFDOUMsQ0FDQSxTQUFTb04sRUFBVzdtQixHQUNoQmlVLEVBQU05VSxTQUFRLENBQUM0SyxFQUFPM0wsS0FDbEIsTUFBTXlOLEVBQU91RCxHQUFpQnJGLEVBQU01TCxPQUNoQzBOLEdBQVU3TCxHQUFXQSxFQUFPNkwsSUFDNUJpYixFQUFnQjFvQixFQUNwQixHQUVSLENBQ0EsU0FBUzBvQixFQUFnQjFvQixHQUNyQixNQUFNK1YsRUFBU0YsRUFBTTdhLElBQUlnRixHQUNwQm9vQixHQUFXclMsRUFBT2hXLE9BQVNxb0IsRUFBUXJvQixLQUcvQnFvQixHQUdMSSxHQUFlSixHQUxmN0wsRUFBUXhHLEdBT1pGLEVBQU03VyxPQUFPZ0IsR0FDYjVFLEVBQUs0RCxPQUFPZ0IsRUFDaEIsQ0EvREFrb0IsRUFBY1MsU0FBVyxDQUFDaGQsRUFBT3VQLEVBQVdDLEVBQVFHLEVBQU9FLEtBQ3ZELE1BQU0zUCxFQUFXRixFQUFNRyxVQUN2QmlTLEVBQUtwUyxFQUFPdVAsRUFBV0MsRUFBUSxFQUF3QkUsR0FFdkRLLEVBQU03UCxFQUFTRixNQUFPQSxFQUFPdVAsRUFBV0MsRUFBUXRQLEVBQVV3UCxFQUFnQkMsRUFBTzNQLEVBQU00UCxhQUFjQyxHQUNyRytGLElBQXNCLEtBQ2xCMVYsRUFBUytjLGVBQWdCLEVBQ3JCL2MsRUFBU3JXLElBQ1QsSUFBQXF6QixnQkFBZWhkLEVBQVNyVyxHQUU1QixNQUFNc3pCLEVBQVluZCxFQUFNdUIsT0FBU3ZCLEVBQU11QixNQUFNNmIsZUFDekNELEdBQ0FFLEdBQWdCRixFQUFXamQsRUFBU25QLE9BQVFpUCxFQUNoRCxHQUNEMFAsR0FHQzdILEVBQXVCM0gsRUFDM0IsRUFFSnFjLEVBQWNlLFdBQWN0ZCxJQUN4QixNQUFNRSxFQUFXRixFQUFNRyxVQUN2QmlTLEVBQUtwUyxFQUFPNGMsRUFBa0IsS0FBTSxFQUF3QmxOLEdBQzVEa0csSUFBc0IsS0FDZDFWLEVBQVNxZCxLQUNULElBQUFMLGdCQUFlaGQsRUFBU3FkLElBRTVCLE1BQU1KLEVBQVluZCxFQUFNdUIsT0FBU3ZCLEVBQU11QixNQUFNaWMsaUJBQ3pDTCxHQUNBRSxHQUFnQkYsRUFBV2pkLEVBQVNuUCxPQUFRaVAsR0FFaERFLEVBQVMrYyxlQUFnQixDQUFJLEdBQzlCdk4sR0FHQzdILEVBQXVCM0gsRUFDM0IsRUE2Qko2VSxJQUFNLElBQU0sQ0FBQ3hULEVBQU00YSxRQUFTNWEsRUFBTThhLFdBQVUsRUFBRUYsRUFBU0UsTUFDbkRGLEdBQVdXLEdBQVdoYixHQUFRMmIsR0FBUXRCLEVBQVNyYSxLQUMvQ3VhLEdBQVdTLEdBQVdoYixJQUFTMmIsR0FBUXBCLEVBQVN2YSxJQUFNLEdBRzFELENBQUV4QyxNQUFPLE9BQVE0VixNQUFNLElBRXZCLElBQUl3SSxFQUFrQixLQUN0QixNQUFNQyxFQUFlLEtBRU0sTUFBbkJELEdBQ0F4VCxFQUFNM1YsSUFBSW1wQixFQUFpQkUsR0FBYzFkLEVBQVM4TyxTQUN0RCxFQW1CSixPQWpCQTZILEdBQVU4RyxHQUNWRSxHQUFVRixHQUNWN0csSUFBZ0IsS0FDWjVNLEVBQU05VSxTQUFRZ1YsSUFDVixNQUFNLFFBQUU0RSxFQUFPLFNBQUVtQixHQUFhalEsRUFDeEJGLEVBQVE0ZCxHQUFjNU8sR0FDNUIsR0FBSTVFLEVBQU9oVyxPQUFTNEwsRUFBTTVMLEtBUTFCd2MsRUFBUXhHLE9BUlIsQ0FFSXlTLEdBQWU3YyxHQUVmLE1BQU11ZCxFQUFLdmQsRUFBTUcsVUFBVW9kLEdBQzNCQSxHQUFNM0gsR0FBc0IySCxFQUFJcE4sRUFFcEMsQ0FDZSxHQUNqQixJQUVDLEtBRUgsR0FEQXVOLEVBQWtCLE1BQ2JuUixFQUFNeUYsUUFDUCxPQUFPLEtBRVgsTUFBTS9ELEVBQVcxQixFQUFNeUYsVUFDakI4TCxFQUFXN1AsRUFBUyxHQUMxQixHQUFJQSxFQUFTeGpCLE9BQVMsRUFLbEIsT0FISTZGLEVBQUsseURBRVRtc0IsRUFBVSxLQUNIeE8sRUFFTixJQUFLUSxHQUFRcVAsTUFDVSxFQUFyQkEsRUFBU2xSLFdBQ2UsSUFBckJrUixFQUFTbFIsV0FFZixPQURBNlAsRUFBVSxLQUNIcUIsRUFFWCxJQUFJOWQsRUFBUTRkLEdBQWNFLEdBQzFCLE1BQU05VCxFQUFPaEssRUFBTTVMLEtBR2IwTixFQUFPdUQsR0FBaUJ1VixHQUFlNWEsR0FDdkNBLEVBQU01TCxLQUFLeW5CLGlCQUFtQixDQUFDLEVBQy9CN1IsSUFDQSxRQUFFbVMsRUFBTyxRQUFFRSxFQUFPLElBQUVDLEdBQVEvYSxFQUNsQyxHQUFLNGEsS0FBYXJhLElBQVMyYixHQUFRdEIsRUFBU3JhLEtBQ3ZDdWEsR0FBV3ZhLEdBQVEyYixHQUFRcEIsRUFBU3ZhLEdBRXJDLE9BREEyYSxFQUFVemMsRUFDSDhkLEVBRVgsTUFBTXpwQixFQUFtQixNQUFiMkwsRUFBTTNMLElBQWMyVixFQUFPaEssRUFBTTNMLElBQ3ZDMHBCLEVBQWM3VCxFQUFNN2EsSUFBSWdGLEdBc0M5QixPQXBDSTJMLEVBQU0rTyxLQUNOL08sRUFBUXlOLEdBQVd6TixHQUNNLElBQXJCOGQsRUFBU2xSLFlBQ1RrUixFQUFTeE4sVUFBWXRRLElBUTdCMGQsRUFBa0JycEIsRUFDZDBwQixHQUVBL2QsRUFBTStPLEdBQUtnUCxFQUFZaFAsR0FDdkIvTyxFQUFNRyxVQUFZNGQsRUFBWTVkLFVBQzFCSCxFQUFNK04sWUFFTjZLLEdBQW1CNVksRUFBT0EsRUFBTStOLFlBR3BDL04sRUFBTTRNLFdBQWEsSUFFbkJuZCxFQUFLNEQsT0FBT2dCLEdBQ1o1RSxFQUFLbUYsSUFBSVAsS0FHVDVFLEVBQUttRixJQUFJUCxHQUVMaW9CLEdBQU83c0IsRUFBSzZKLEtBQU8wa0IsU0FBUzFCLEVBQUssS0FDakNTLEVBQWdCdHRCLEVBQUt5RixTQUFTb0YsT0FBTy9QLFFBSTdDeVYsRUFBTTRNLFdBQWEsSUFDbkI2UCxFQUFVemMsRUFDSGlQLEdBQVc2TyxFQUFTMXBCLE1BQVEwcEIsRUFBVzlkLENBQUssQ0FFM0QsR0FLSixTQUFTeWQsR0FBUVEsRUFBU25jLEdBQ3RCLE9BQUksSUFBQTNNLFNBQVE4b0IsR0FDREEsRUFBUTFRLE1BQU03SixHQUFNK1osR0FBUS9aLEVBQUc1QixNQUVqQyxJQUFBRCxVQUFTb2MsR0FDUEEsRUFBUTdILE1BQU0sS0FBSzFtQixTQUFTb1MsS0FFOUJtYyxFQUFRQyxNQUNORCxFQUFRQyxLQUFLcGMsRUFJNUIsQ0FDQSxTQUFTcWMsR0FBWXJ4QixFQUFNRCxHQUN2QnV4QixHQUFzQnR4QixFQUFNLElBQW9DRCxFQUNwRSxDQUNBLFNBQVN3eEIsR0FBY3Z4QixFQUFNRCxHQUN6QnV4QixHQUFzQnR4QixFQUFNLEtBQXVDRCxFQUN2RSxDQUNBLFNBQVN1eEIsR0FBc0J0eEIsRUFBTXNILEVBQU12SCxFQUFTdW5CLElBSWhELE1BQU1rSyxFQUFjeHhCLEVBQUt5eEIsUUFDcEJ6eEIsRUFBS3l4QixNQUFRLEtBRVYsSUFBSTlCLEVBQVU1dkIsRUFDZCxLQUFPNHZCLEdBQVMsQ0FDWixHQUFJQSxFQUFRUSxjQUNSLE9BRUpSLEVBQVVBLEVBQVExckIsTUFDdEIsQ0FDQSxPQUFPakUsR0FBTSxHQVFyQixHQU5BMHhCLEdBQVdwcUIsRUFBTWtxQixFQUFhenhCLEdBTTFCQSxFQUFRLENBQ1IsSUFBSTR2QixFQUFVNXZCLEVBQU9rRSxPQUNyQixLQUFPMHJCLEdBQVdBLEVBQVExckIsUUFDbEJ1cEIsR0FBWW1DLEVBQVExckIsT0FBT2lQLFFBQzNCeWUsR0FBc0JILEVBQWFscUIsRUFBTXZILEVBQVE0dkIsR0FFckRBLEVBQVVBLEVBQVExckIsTUFFMUIsQ0FDSixDQUNBLFNBQVMwdEIsR0FBc0IzeEIsRUFBTXNILEVBQU12SCxFQUFRNnhCLEdBRy9DLE1BQU1DLEVBQVdILEdBQVdwcUIsRUFBTXRILEVBQU00eEIsR0FBZSxHQUN2REUsSUFBWSxNQUNSLElBQUF2TSxRQUFPcU0sRUFBY3RxQixHQUFPdXFCLEVBQVMsR0FDdEM5eEIsRUFDUCxDQUNBLFNBQVNnd0IsR0FBZTdjLEdBQ3BCLElBQUk0TSxFQUFZNU0sRUFBTTRNLFVBQ04sSUFBWkEsSUFDQUEsR0FBYSxLQUVELElBQVpBLElBQ0FBLEdBQWEsS0FFakI1TSxFQUFNNE0sVUFBWUEsQ0FDdEIsQ0FDQSxTQUFTZ1IsR0FBYzVkLEdBQ25CLE9BQXlCLElBQWxCQSxFQUFNNE0sVUFBNEM1TSxFQUFNc1EsVUFBWXRRLENBQy9FLENBRUEsU0FBU3dlLEdBQVdwcUIsRUFBTXRILEVBQU1ELEVBQVN1bkIsR0FBaUJ5SyxHQUFVLEdBQ2hFLEdBQUloeUIsRUFBUSxDQUNSLE1BQU04c0IsRUFBUTlzQixFQUFPdUgsS0FBVXZILEVBQU91SCxHQUFRLElBSXhDa3FCLEVBQWN4eEIsRUFBS2d5QixRQUNwQmh5QixFQUFLZ3lCLE1BQVEsSUFBSTEwQixLQUNkLEdBQUl5QyxFQUFPNGIsWUFDUCxRQUlKLElBQUF6VSxpQkFJQWdpQixHQUFtQm5wQixHQUNuQixNQUFNZ0ssRUFBTXFMLEVBQTJCcFYsRUFBTUQsRUFBUXVILEVBQU1oSyxHQUczRCxPQUZBNnJCLE1BQ0EsSUFBQS9oQixpQkFDTzJDLENBQUcsR0FRbEIsT0FOSWdvQixFQUNBbEYsRUFBTW9GLFFBQVFULEdBR2QzRSxFQUFNNXVCLEtBQUt1ekIsR0FFUkEsQ0FDWCxDQUdJaHVCLEVBQUssSUFEVyxJQUFBd1ksY0FBYS9HLEVBQWlCM04sR0FBTTJXLFFBQVEsU0FBVSxrUUFROUUsQ0FDQSxNQUFNaVUsR0FBY0MsR0FBYyxDQUFDbnlCLEVBQU1ELEVBQVN1bkIsT0FFaER1QixJQUF1QyxPQUFkc0osSUFDdkJULEdBQVdTLEdBQVcsSUFBSTcwQixJQUFTMEMsS0FBUTFDLElBQU95QyxHQUNoRHF5QixHQUFnQkYsR0FBVyxNQUMzQm5JLEdBQVltSSxHQUFXLEtBQ3ZCRyxHQUFpQkgsR0FBVyxNQUM1Qm5CLEdBQVltQixHQUFXLEtBQ3ZCbEksR0FBa0JrSSxHQUFXLE9BQzdCSixHQUFjSSxHQUFXLE1BQ3pCSSxHQUFtQkosR0FBVyxNQUM5QkssR0FBb0JMLEdBQVcsT0FDL0JNLEdBQWtCTixHQUFXLE9BQ25DLFNBQVNPLEdBQWdCenlCLEVBQU1ELEVBQVN1bkIsSUFDcENvSyxHQUFXLEtBQTBDMXhCLEVBQU1ELEVBQy9ELENBY0EsU0FBUzJ5QixHQUFzQjFkLElBQ3ZCLElBQUEyZCxvQkFBbUIzZCxJQUNuQnhSLEVBQUssNkRBQStEd1IsRUFFNUUsQ0FJQSxTQUFTNGQsR0FBZTFmLEVBQU8yZixHQUMzQixNQUFNQyxFQUFtQjVVLEdBQ3pCLEdBQXlCLE9BQXJCNFUsRUFFQSxPQUQyQ3R2QixFQUFLLDREQUN6QzBQLEVBRVgsTUFBTUUsRUFBVzJmLEdBQWVELElBQzVCQSxFQUFpQjF5QixNQUNmNHlCLEVBQVc5ZixFQUFNNk4sT0FBUzdOLEVBQU02TixLQUFPLElBQzdDLElBQUssSUFBSTNqQixFQUFJLEVBQUdBLEVBQUl5MUIsRUFBV2wxQixPQUFRUCxJQUFLLENBQ3hDLElBQUs2MUIsRUFBS3gxQixFQUFPeWMsRUFBS2daLEVBQVksRUFBQXRYLFdBQWFpWCxFQUFXejFCLElBQ3RELElBQUErVSxZQUFXOGdCLEtBQ1hBLEVBQU0sQ0FDRkUsUUFBU0YsRUFDVEcsUUFBU0gsSUFHYkEsRUFBSTdLLE1BQ0pLLEdBQVNockIsR0FFYnUxQixFQUFTLzBCLEtBQUssQ0FDVmcxQixNQUNBN2YsV0FDQTNWLFFBQ0F5SyxjQUFVLEVBQ1ZnUyxNQUNBZ1osYUFFUixDQUNBLE9BQU9oZ0IsQ0FDWCxDQUNBLFNBQVNtZ0IsR0FBb0JuZ0IsRUFBT29nQixFQUFXbGdCLEVBQVU0QixHQUNyRCxNQUFNZ2UsRUFBVzlmLEVBQU02TixLQUNqQndTLEVBQWNELEdBQWFBLEVBQVV2UyxLQUMzQyxJQUFLLElBQUkzakIsRUFBSSxFQUFHQSxFQUFJNDFCLEVBQVNyMUIsT0FBUVAsSUFBSyxDQUN0QyxNQUFNbzJCLEVBQVVSLEVBQVM1MUIsR0FDckJtMkIsSUFDQUMsRUFBUXRyQixTQUFXcXJCLEVBQVluMkIsR0FBR0ssT0FFdEMsSUFBSXVDLEVBQU93ekIsRUFBUVAsSUFBSWplLEdBQ25CaFYsS0FHQSxJQUFBa0gsaUJBQ0FrTyxFQUEyQnBWLEVBQU1vVCxFQUFVLEVBQW1DLENBQzFFRixFQUFNK08sR0FDTnVSLEVBQ0F0Z0IsRUFDQW9nQixLQUVKLElBQUFsc0IsaUJBRVIsQ0FDSixDQUVBLE1BQU1xc0IsR0FBYSxhQUtuQixTQUFTQyxHQUFpQjFlLEVBQU0yZSxHQUM1QixPQUFPQyxHQUFhSCxHQUFZemUsR0FBTSxFQUFNMmUsSUFBdUIzZSxDQUN2RSxDQUNBLE1BQU02ZSxHQUF5Qmh1QixTQUkvQixTQUFTaXVCLEdBQXdCemdCLEdBQzdCLE9BQUksSUFBQTBCLFVBQVMxQixHQUNGdWdCLEdBQWFILEdBQVlwZ0IsR0FBVyxJQUFVQSxFQUk3Q0EsR0FBYXdnQixFQUU3QixDQUlBLFNBQVNFLEdBQWlCL2UsR0FDdEIsT0FBTzRlLEdBeEJRLGFBd0JpQjVlLEVBQ3BDLENBRUEsU0FBUzRlLEdBQWF0c0IsRUFBTTBOLEVBQU1nZixHQUFjLEVBQU1MLEdBQXFCLEdBQ3ZFLE1BQU12Z0IsRUFBVzhLLElBQTRCb0osR0FDN0MsR0FBSWxVLEVBQVUsQ0FDVixNQUFNbU0sRUFBWW5NLEVBQVM5TCxLQUUzQixHQUFJQSxJQUFTbXNCLEdBQVksQ0FDckIsTUFBTVEsRUFBVzFiLEdBQWlCZ0gsR0FBVyxHQUM3QyxHQUFJMFUsSUFDQ0EsSUFBYWpmLEdBQ1ZpZixLQUFhLElBQUFuWCxVQUFTOUgsSUFDdEJpZixLQUFhLElBQUF0bUIsYUFBVyxJQUFBbVAsVUFBUzlILEtBQ3JDLE9BQU91SyxDQUVmLENBQ0EsTUFBTXhWLEVBR05sSCxHQUFRdVEsRUFBUzlMLElBQVNpWSxFQUFValksR0FBTzBOLElBRXZDblMsR0FBUXVRLEVBQVNHLFdBQVdqTSxHQUFPME4sR0FDdkMsSUFBS2pMLEdBQU80cEIsRUFFUixPQUFPcFUsRUFFWCxHQUErQ3lVLElBQWdCanFCLEVBQUssQ0FDaEUsTUFBTW1xQixFQUFRNXNCLElBQVNtc0IsR0FDakIsK0hBRUEsR0FDTmp3QixFQUFLLHFCQUFxQjhELEVBQUt1TixNQUFNLEdBQUksT0FBT0csSUFBT2tmLElBQzNELENBQ0EsT0FBT25xQixDQUNYLENBRUl2RyxFQUFLLFdBQVUsSUFBQW1LLFlBQVdyRyxFQUFLdU4sTUFBTSxHQUFJLCtDQUdqRCxDQUNBLFNBQVNoUyxHQUFRc3hCLEVBQVVuZixHQUN2QixPQUFRbWYsSUFDSEEsRUFBU25mLElBQ05tZixHQUFTLElBQUFyWCxVQUFTOUgsS0FDbEJtZixHQUFTLElBQUF4bUIsYUFBVyxJQUFBbVAsVUFBUzlILEtBQ3pDLENBS0EsU0FBU29mLEdBQVdsTSxFQUFRbU0sRUFBWWpYLEVBQU94ZSxHQUMzQyxJQUFJb1MsRUFDSixNQUFNc00sRUFBVUYsR0FBU0EsRUFBTXhlLEdBQy9CLElBQUksSUFBQXlKLFNBQVE2ZixLQUFXLElBQUFuVCxVQUFTbVQsR0FBUyxDQUNyQ2xYLEVBQU0sSUFBSXBULE1BQU1zcUIsRUFBT3ZxQixRQUN2QixJQUFLLElBQUlQLEVBQUksRUFBR3FILEVBQUl5akIsRUFBT3ZxQixPQUFRUCxFQUFJcUgsRUFBR3JILElBQ3RDNFQsRUFBSTVULEdBQUtpM0IsRUFBV25NLEVBQU85cUIsR0FBSUEsT0FBR2dHLEVBQVdrYSxHQUFVQSxFQUFPbGdCLEdBRXRFLE1BQ0ssR0FBc0IsaUJBQVg4cUIsRUFBcUIsQ0FDZWhkLE9BQU9vcEIsVUFBVXBNLElBQzdEMWtCLEVBQUssbURBQW1EMGtCLE1BRTVEbFgsRUFBTSxJQUFJcFQsTUFBTXNxQixHQUNoQixJQUFLLElBQUk5cUIsRUFBSSxFQUFHQSxFQUFJOHFCLEVBQVE5cUIsSUFDeEI0VCxFQUFJNVQsR0FBS2kzQixFQUFXajNCLEVBQUksRUFBR0EsT0FBR2dHLEVBQVdrYSxHQUFVQSxFQUFPbGdCLEdBRWxFLE1BQ0ssSUFBSSxJQUFBdU4sVUFBU3VkLEdBQ2QsR0FBSUEsRUFBT3JpQixPQUFPd0gsVUFDZDJELEVBQU1wVCxNQUFNMjJCLEtBQUtyTSxHQUFRLENBQUNqbkIsRUFBTTdELElBQU1pM0IsRUFBV3B6QixFQUFNN0QsT0FBR2dHLEVBQVdrYSxHQUFVQSxFQUFPbGdCLFVBRXJGLENBQ0QsTUFBTXVGLEVBQU90QixPQUFPc0IsS0FBS3VsQixHQUN6QmxYLEVBQU0sSUFBSXBULE1BQU0rRSxFQUFLaEYsUUFDckIsSUFBSyxJQUFJUCxFQUFJLEVBQUdxSCxFQUFJOUIsRUFBS2hGLE9BQVFQLEVBQUlxSCxFQUFHckgsSUFBSyxDQUN6QyxNQUFNbUssRUFBTTVFLEVBQUt2RixHQUNqQjRULEVBQUk1VCxHQUFLaTNCLEVBQVduTSxFQUFPM2dCLEdBQU1BLEVBQUtuSyxFQUFHa2dCLEdBQVVBLEVBQU9sZ0IsR0FDOUQsQ0FDSixNQUdBNFQsRUFBTSxHQUtWLE9BSElvTSxJQUNBQSxFQUFNeGUsR0FBU29TLEdBRVpBLENBQ1gsQ0FNQSxTQUFTd2pCLEdBQVkvVSxFQUFPZ1YsR0FDeEIsSUFBSyxJQUFJcjNCLEVBQUksRUFBR0EsRUFBSXEzQixFQUFhOTJCLE9BQVFQLElBQUssQ0FDMUMsTUFBTXMzQixFQUFPRCxFQUFhcjNCLEdBRTFCLElBQUksSUFBQWlMLFNBQVFxc0IsR0FDUixJQUFLLElBQUlyM0IsRUFBSSxFQUFHQSxFQUFJcTNCLEVBQUsvMkIsT0FBUU4sSUFDN0JvaUIsRUFBTWlWLEVBQUtyM0IsR0FBRzJYLE1BQVEwZixFQUFLcjNCLEdBQUcrRyxRQUc3QnN3QixJQUVMalYsRUFBTWlWLEVBQUsxZixNQUFRMGYsRUFBS250QixJQUNsQixJQUFJakssS0FDRixNQUFNeU0sRUFBTTJxQixFQUFLdHdCLE1BQU05RyxHQUt2QixPQUZJeU0sSUFDQUEsRUFBSXhDLElBQU1tdEIsRUFBS250QixLQUNad0MsQ0FBRyxFQUVaMnFCLEVBQUt0d0IsR0FFbkIsQ0FDQSxPQUFPcWIsQ0FDWCxDQU1BLFNBQVNrVixHQUFXbFYsRUFBT3pLLEVBQU1QLEVBQVEsQ0FBQyxFQUcxQzhQLEVBQVVxUSxHQUNOLEdBQUkxVyxHQUF5QjJXLE1BQ3hCM1csR0FBeUJqYSxRQUN0QjZwQixHQUFlNVAsR0FBeUJqYSxTQUN4Q2lhLEdBQXlCamEsT0FBTzR3QixLQUNwQyxPQUFPMVUsR0FBWSxPQUFpQixZQUFUbkwsRUFBcUIsS0FBTyxDQUFFQSxRQUFRdVAsR0FBWUEsS0FFakYsSUFBSW1RLEVBQU9qVixFQUFNekssR0FDOEIwZixHQUFRQSxFQUFLLzJCLE9BQVMsSUFDakU2RixFQUFLLDRKQUdMa3hCLEVBQU8sSUFBTSxJQU1iQSxHQUFRQSxFQUFLdlYsS0FDYnVWLEVBQUsxVixJQUFLLEdBRWQrSCxLQUNBLE1BQU0rTixFQUFtQkosR0FBUUssR0FBaUJMLEVBQUtqZ0IsSUFDakR1Z0IsRUFBV0MsR0FBWXJILEdBQVUsQ0FDbkNybUIsSUFBS2tOLEVBQU1sTixLQUdOdXRCLEdBQW9CQSxFQUFpQnZ0QixLQUN0QyxJQUFJeU4sS0FDVDhmLElBQXFCdlEsRUFBV0EsSUFBYSxJQUFLdVEsR0FBZ0MsSUFBWnJWLEVBQU15VixFQUN6RSxJQUNDLEdBT1AsT0FOS04sR0FBYUksRUFBU0csVUFDdkJILEVBQVNsUyxhQUFlLENBQUNrUyxFQUFTRyxRQUFVLE9BRTVDVCxHQUFRQSxFQUFLdlYsS0FDYnVWLEVBQUsxVixJQUFLLEdBRVBnVyxDQUNYLENBQ0EsU0FBU0QsR0FBaUJLLEdBQ3RCLE9BQU9BLEVBQU8zVSxNQUFLaUIsSUFDVkMsR0FBUUQsSUFFVEEsRUFBTXBhLE9BQVM4WSxNQUVmc0IsRUFBTXBhLE9BQVNzbUIsS0FDZG1ILEdBQWlCclQsRUFBTVAsYUFJMUJpVSxFQUNBLElBQ1YsQ0FNQSxTQUFTQyxHQUFXQyxFQUFLQyxHQUNyQixNQUFNdmtCLEVBQU0sQ0FBQyxFQUNiLEtBQWdELElBQUFyRyxVQUFTMnFCLEdBRXJELE9BREE5eEIsRUFBSyxrREFDRXdOLEVBRVgsSUFBSyxNQUFNekosS0FBTyt0QixFQUNkdGtCLEVBQUl1a0IsR0FBMkIsUUFBUW5FLEtBQUs3cEIsR0FDdEMsTUFBTUEsS0FDTixJQUFBeVUsY0FBYXpVLElBQVErdEIsRUFBSS90QixHQUVuQyxPQUFPeUosQ0FDWCxDQU9BLE1BQU13a0IsR0FBcUJwNEIsR0FDbEJBLEVBRURxNEIsR0FBb0JyNEIsR0FDYjIxQixHQUFlMzFCLElBQU1BLEVBQUVnRCxNQUMzQm8xQixHQUFrQnA0QixFQUFFNkcsUUFIaEIsS0FLVHl4QixJQUdRLElBQUE3dUIsUUFBT3hGLE9BQU95akIsT0FBTyxNQUFPLENBQ3RDNlEsRUFBR3Y0QixHQUFLQSxFQUNSdzRCLElBQUt4NEIsR0FBS0EsRUFBRThWLE1BQU0rTyxHQUNsQjRULE1BQU96NEIsR0FBS0EsRUFBRXNFLEtBQ2RvMEIsT0FBUTE0QixJQUFnRCxJQUFBcVIsaUJBQWdCclIsRUFBRXFYLE9BQzFFc2hCLE9BQVEzNEIsSUFBZ0QsSUFBQXFSLGlCQUFnQnJSLEVBQUVzaUIsT0FDMUVzVyxPQUFRNTRCLElBQWdELElBQUFxUixpQkFBZ0JyUixFQUFFcWlCLE9BQzFFd1csTUFBTzc0QixJQUFnRCxJQUFBcVIsaUJBQWdCclIsRUFBRTg0QixNQUN6RUMsUUFBUy80QixHQUFLbzRCLEdBQWtCcDRCLEVBQUU2RyxRQUNsQ215QixNQUFPaDVCLEdBQUtvNEIsR0FBa0JwNEIsRUFBRWtqQixNQUNoQytWLE1BQU9qNUIsR0FBS0EsRUFBRW9ELEtBQ2Q4MUIsU0FBVWw1QixHQUFNc2dCLG9CQUFzQjZZLEdBQXFCbjVCLEdBQUtBLEVBQUVrSyxLQUNsRWt2QixhQUFjcDVCLEdBQUtBLEVBQUVxNUIsSUFBTXI1QixFQUFFcTVCLEVBQUksSUFBTTVmLEVBQVN6WixFQUFFa2MsU0FDbERvZCxVQUFXdDVCLEdBQUtBLEVBQUVlLElBQU1mLEVBQUVlLEVBQUl3WSxFQUFTM1AsS0FBSzVKLEVBQUVnRCxRQUM5Q3UyQixPQUFRdjVCLEdBQU1zZ0Isb0JBQXNCcUwsR0FBYy9oQixLQUFLNUosR0FBSyxFQUFBdXJCLE9BRTFEaU8sR0FBb0JydkIsR0FBZ0IsTUFBUkEsR0FBdUIsTUFBUkEsRUFDM0NzdkIsR0FBOEIsQ0FDaEN0MEIsS0FBTTJ5QixFQUFHOWhCLEdBQVk3TCxHQUNqQixNQUFNLElBQUVxWCxFQUFHLFdBQUVlLEVBQVUsS0FBRWplLEVBQUksTUFBRStTLEVBQUssWUFBRXFpQixFQUFXLEtBQUV4dkIsRUFBSSxXQUFFaU0sR0FBZUgsRUFFeEUsR0FBdUQsWUFBUjdMLEVBQzNDLE9BQU8sRUFNWCxHQUNJb1ksSUFBZSxFQUFBL0QsV0FDZitELEVBQVdvWCxrQkFDWCxJQUFBdnNCLFFBQU9tVixFQUFZcFksR0FDbkIsT0FBT29ZLEVBQVdwWSxHQVF0QixJQUFJeXZCLEVBQ0osR0FBZSxNQUFYenZCLEVBQUksR0FBWSxDQUNoQixNQUFNcEosRUFBSTI0QixFQUFZdnZCLEdBQ3RCLFFBQVVuRSxJQUFOakYsRUFDQSxPQUFRQSxHQUNKLEtBQUssRUFDRCxPQUFPd2hCLEVBQVdwWSxHQUN0QixLQUFLLEVBQ0QsT0FBTzdGLEVBQUs2RixHQUNoQixLQUFLLEVBQ0QsT0FBT3FYLEVBQUlyWCxHQUNmLEtBQUssRUFDRCxPQUFPa04sRUFBTWxOLE9BSXBCLElBQUlvWSxJQUFlLEVBQUEvRCxZQUFhLElBQUFwUixRQUFPbVYsRUFBWXBZLEdBRXBELE9BREF1dkIsRUFBWXZ2QixHQUFPLEVBQ1pvWSxFQUFXcFksR0FFakIsR0FBSTdGLElBQVMsRUFBQWthLFlBQWEsSUFBQXBSLFFBQU85SSxFQUFNNkYsR0FFeEMsT0FEQXV2QixFQUFZdnZCLEdBQU8sRUFDWjdGLEVBQUs2RixHQUVYLElBR0p5dkIsRUFBa0I1akIsRUFBUzBJLGFBQWEsTUFDckMsSUFBQXRSLFFBQU93c0IsRUFBaUJ6dkIsR0FFeEIsT0FEQXV2QixFQUFZdnZCLEdBQU8sRUFDWmtOLEVBQU1sTixHQUVaLEdBQUlxWCxJQUFRLEVBQUFoRCxZQUFhLElBQUFwUixRQUFPb1UsRUFBS3JYLEdBRXRDLE9BREF1dkIsRUFBWXZ2QixHQUFPLEVBQ1pxWCxFQUFJclgsR0FFTG1XLHNCQUF1QnVaLEtBQzdCSCxFQUFZdnZCLEdBQU8sRUFDdkIsQ0FDSixDQUNBLE1BQU0ydkIsRUFBZXhCLEdBQW9CbnVCLEdBQ3pDLElBQUk0dkIsRUFBV0MsRUFFZixPQUFJRixHQUNZLFdBQVIzdkIsS0FDQSxJQUFBRixPQUFNK0wsRUFBVSxNQUE4QjdMLEdBQ0g4WCxNQUV4QzZYLEVBQWE5akIsS0FJdkIrakIsRUFBWTd2QixFQUFLK3ZCLGdCQUNiRixFQUFZQSxFQUFVNXZCLElBQ2hCNHZCLEVBRUZ2WSxJQUFRLEVBQUFoRCxZQUFhLElBQUFwUixRQUFPb1UsRUFBS3JYLElBRXRDdXZCLEVBQVl2dkIsR0FBTyxFQUNacVgsRUFBSXJYLEtBSWI2dkIsRUFBbUI3akIsRUFBV0MsT0FBTzRqQixrQkFDbkMsSUFBQTVzQixRQUFPNHNCLEVBQWtCN3ZCLEdBRWQ2dkIsRUFBaUI3dkIsU0FJNUIyVyxLQUNFLElBQUFuSixVQUFTeE4sSUFHZ0IsSUFBdkJBLEVBQUl6SSxRQUFRLFNBQ1o0QyxJQUFTLEVBQUFrYSxXQUFhZ2IsR0FBaUJydkIsRUFBSSxNQUFPLElBQUFpRCxRQUFPOUksRUFBTTZGLEdBQy9EL0QsRUFBSyxZQUFZN0IsS0FBS08sVUFBVXFGLG9JQUczQjZMLElBQWE4SyxJQUNsQjFhLEVBQUssWUFBWTdCLEtBQUtPLFVBQVVxRixtRUFJNUMsRUFDQUUsS0FBTXl0QixFQUFHOWhCLEdBQVk3TCxFQUFLOUosR0FDdEIsTUFBTSxLQUFFaUUsRUFBSSxXQUFFaWUsRUFBVSxJQUFFZixHQUFReEwsRUFDbEMsT0FBSXVNLElBQWUsRUFBQS9ELFlBQWEsSUFBQXBSLFFBQU9tVixFQUFZcFksSUFDL0NvWSxFQUFXcFksR0FBTzlKLEdBQ1gsR0FFRmlFLElBQVMsRUFBQWthLFlBQWEsSUFBQXBSLFFBQU85SSxFQUFNNkYsSUFDeEM3RixFQUFLNkYsR0FBTzlKLEdBQ0wsSUFFRixJQUFBK00sUUFBTzRJLEVBQVNxQixNQUFPbE4sSUFFeEIvRCxFQUFLLDhCQUE4QitELDBCQUE2QjZMLElBQzdELEdBRUksTUFBWDdMLEVBQUksSUFBY0EsRUFBSXNOLE1BQU0sS0FBTXpCLEdBRTlCNVAsRUFBSyx5Q0FBeUMrRCw0REFDZTZMLElBQzFELElBR3dDN0wsS0FBTzZMLEVBQVNHLFdBQVdDLE9BQU80akIsaUJBQzdFLzFCLE9BQU9pMkIsZUFBZTFZLEVBQUtyWCxFQUFLLENBQzVCZ3dCLFlBQVksRUFDWkMsY0FBYyxFQUNkLzVCLFVBSUptaEIsRUFBSXJYLEdBQU85SixHQUdaLEVBQ1gsRUFDQW9LLEtBQU1xdEIsR0FBRyxLQUFFeHpCLEVBQUksV0FBRWllLEVBQVUsWUFBRW1YLEVBQVcsSUFBRWxZLEVBQUcsV0FBRXJMLEVBQVUsYUFBRXVJLElBQWtCdlUsR0FDekUsSUFBSXl2QixFQUNKLFFBQVVGLEVBQVl2dkIsSUFDakI3RixJQUFTLEVBQUFrYSxZQUFhLElBQUFwUixRQUFPOUksRUFBTTZGLElBQ25Db1ksSUFBZSxFQUFBL0QsWUFBYSxJQUFBcFIsUUFBT21WLEVBQVlwWSxLQUM5Q3l2QixFQUFrQmxiLEVBQWEsTUFBTyxJQUFBdFIsUUFBT3dzQixFQUFpQnp2QixLQUNoRSxJQUFBaUQsUUFBT29VLEVBQUtyWCxLQUNaLElBQUFpRCxRQUFPa3JCLEdBQXFCbnVCLEtBQzVCLElBQUFpRCxRQUFPK0ksRUFBV0MsT0FBTzRqQixpQkFBa0I3dkIsRUFDbkQsRUFDQSt2QixlQUFldjNCLEVBQVF3SCxFQUFLekgsR0FReEIsT0FQc0IsTUFBbEJBLEVBQVd5QyxJQUVYeEMsRUFBT20xQixFQUFFNEIsWUFBWXZ2QixHQUFPLEdBRXZCLElBQUFpRCxRQUFPMUssRUFBWSxVQUN4QmEsS0FBSzhHLElBQUkxSCxFQUFRd0gsRUFBS3pILEVBQVdyQyxNQUFPLE1BRXJDZ04sUUFBUTZzQixlQUFldjNCLEVBQVF3SCxFQUFLekgsRUFDL0MsRUFHQSsyQixRQUF1QzkyQixJQUNuQ3lELEVBQUsscUpBRUVpSCxRQUFRYyxRQUFReEwsS0FHekIwM0IsSUFBMkQsSUFBQTV3QixRQUFPLENBQUMsRUFBR2d3QixHQUE2QixDQUNyR3QwQixJQUFJeEMsRUFBUXdILEdBRVIsR0FBSUEsSUFBUTFCLE9BQU82eEIsWUFHbkIsT0FBT2IsR0FBNEJ0MEIsSUFBSXhDLEVBQVF3SCxFQUFLeEgsRUFDeEQsRUFDQThILElBQUlxdEIsRUFBRzN0QixHQUNILE1BQU1NLEVBQWlCLE1BQVhOLEVBQUksTUFBZSxJQUFBb3dCLHVCQUFzQnB3QixHQUlyRCxPQUhnRE0sR0FBT2d2QixHQUE0Qmh2QixJQUFJcXRCLEVBQUczdEIsSUFDdEYvRCxFQUFLLFlBQVk3QixLQUFLTyxVQUFVcUYsNEVBRTdCTSxDQUNYLElBd0VKLElBQUlvdkIsSUFBb0IsRUFzUHhCLFNBQVN2SyxHQUFTMXNCLEVBQU1vVCxFQUFVOUwsR0FDOUI4TixHQUEyQixJQUFBL00sU0FBUXJJLEdBQzdCQSxFQUFLb0osS0FBSXd1QixHQUFLQSxFQUFFNXdCLEtBQUtvTSxFQUFTaFQsU0FDOUJKLEVBQUtnSCxLQUFLb00sRUFBU2hULE9BQVFnVCxFQUFVOUwsRUFDL0MsQ0FDQSxTQUFTdXdCLEdBQWN0MkIsRUFBS3FkLEVBQUtvSyxFQUFZemhCLEdBQ3pDLE1BQU1rSyxFQUFTbEssRUFBSTNFLFNBQVMsS0FDdEJxbUIsR0FBaUJELEVBQVl6aEIsR0FDN0IsSUFBTXloQixFQUFXemhCLEdBQ3ZCLElBQUksSUFBQXdOLFVBQVN4VCxHQUFNLENBQ2YsTUFBTXNiLEVBQVUrQixFQUFJcmQsSUFDaEIsSUFBQTRRLFlBQVcwSyxHQUNYb0wsR0FBTXhXLEVBQVFvTCxHQUdkclosRUFBSywyQ0FBMkNqQyxLQUFRc2IsRUFFaEUsTUFDSyxJQUFJLElBQUExSyxZQUFXNVEsR0FDaEIwbUIsR0FBTXhXLEVBQVFsUSxFQUFJeUYsS0FBS2dpQixTQUV0QixJQUFJLElBQUFyZSxVQUFTcEosR0FDZCxJQUFJLElBQUE4RyxTQUFROUcsR0FDUkEsRUFBSStHLFNBQVFvSCxHQUFLbW9CLEdBQWNub0IsRUFBR2tQLEVBQUtvSyxFQUFZemhCLFNBRWxELENBQ0QsTUFBTXNWLEdBQVUsSUFBQTFLLFlBQVc1USxFQUFJc2IsU0FDekJ0YixFQUFJc2IsUUFBUTdWLEtBQUtnaUIsR0FDakJwSyxFQUFJcmQsRUFBSXNiLFVBQ1YsSUFBQTFLLFlBQVcwSyxHQUNYb0wsR0FBTXhXLEVBQVFvTCxFQUFTdGIsR0FHdkJpQyxFQUFLLDJDQUEyQ2pDLEVBQUlzYixXQUFZQSxFQUV4RSxNQUdBclosRUFBSywwQkFBMEIrRCxLQUFRaEcsRUFFL0MsQ0FNQSxTQUFTZzFCLEdBQXFCbmpCLEdBQzFCLE1BQU0wa0IsRUFBTzFrQixFQUFTOUwsTUFDaEIsT0FBRXVXLEVBQVFDLFFBQVNpYSxHQUFtQkQsR0FDcENqYSxPQUFRbWEsRUFBY3JlLGFBQWN5RCxFQUFPNUosUUFBUSxzQkFBRXlrQixJQUE0QjdrQixFQUFTRyxXQUM1RitKLEVBQVNGLEVBQU03YSxJQUFJdTFCLEdBQ3pCLElBQUlJLEVBbUJKLE9BbEJJNWEsRUFDQTRhLEVBQVc1YSxFQUVMMGEsRUFBYXI2QixRQUFXa2dCLEdBQVdrYSxHQU16Q0csRUFBVyxDQUFDLEVBQ1JGLEVBQWFyNkIsUUFDYnE2QixFQUFhMXZCLFNBQVErYyxHQUFLOFMsR0FBYUQsRUFBVTdTLEVBQUc0UyxHQUF1QixLQUUvRUUsR0FBYUQsRUFBVUosRUFBTUcsSUFSekJDLEVBQVdKLEdBVWYsSUFBQW50QixVQUFTbXRCLElBQ1QxYSxFQUFNM1YsSUFBSXF3QixFQUFNSSxHQUViQSxDQUNYLENBQ0EsU0FBU0MsR0FBYUMsRUFBSTdELEVBQU04RCxFQUFRbGIsR0FBVSxHQUM5QyxNQUFNLE9BQUVVLEVBQVFDLFFBQVNpYSxHQUFtQnhELEVBQ3hDd0QsR0FDQUksR0FBYUMsRUFBSUwsRUFBZ0JNLEdBQVEsR0FFekN4YSxHQUNBQSxFQUFPdlYsU0FBUytjLEdBQU04UyxHQUFhQyxFQUFJL1MsRUFBR2dULEdBQVEsS0FFdEQsSUFBSyxNQUFNOXdCLEtBQU9ndEIsRUFDZCxHQUFJcFgsR0FBbUIsV0FBUjVWLEVBRVAvRCxFQUFLLCtIQUdSLENBQ0QsTUFBTTgwQixFQUFRQyxHQUEwQmh4QixJQUFTOHdCLEdBQVVBLEVBQU85d0IsR0FDbEU2d0IsRUFBRzd3QixHQUFPK3dCLEVBQVFBLEVBQU1GLEVBQUc3d0IsR0FBTWd0QixFQUFLaHRCLElBQVFndEIsRUFBS2h0QixFQUN2RCxDQUVKLE9BQU82d0IsQ0FDWCxDQUNBLE1BQU1HLEdBQTRCLENBQzlCNzJCLEtBQU04MkIsR0FDTi9qQixNQUFPZ2tCLEdBQ1BsYixNQUFPa2IsR0FFUEMsUUFBU0QsR0FDVDl2QixTQUFVOHZCLEdBRVZFLGFBQWNDLEdBQ2RDLFFBQVNELEdBQ1RFLFlBQWFGLEdBQ2J6RixRQUFTeUYsR0FDVEcsYUFBY0gsR0FDZHhGLFFBQVN3RixHQUNUSSxjQUFlSixHQUNmSyxjQUFlTCxHQUNmTSxVQUFXTixHQUNYTyxVQUFXUCxHQUNYUSxVQUFXUixHQUNYUyxZQUFhVCxHQUNiVSxjQUFlVixHQUNmVyxlQUFnQlgsR0FFaEJZLFdBQVlmLEdBQ1o1RixXQUFZNEYsR0FFWnhRLE1BbUNKLFNBQTJCbVEsRUFBSTdELEdBQzNCLElBQUs2RCxFQUNELE9BQU83RCxFQUNYLElBQUtBLEVBQ0QsT0FBTzZELEVBQ1gsTUFBTXFCLEdBQVMsSUFBQTV5QixRQUFPeEYsT0FBT3lqQixPQUFPLE1BQU9zVCxHQUMzQyxJQUFLLE1BQU03d0IsS0FBT2d0QixFQUNka0YsRUFBT2x5QixHQUFPcXhCLEdBQWFSLEVBQUc3d0IsR0FBTWd0QixFQUFLaHRCLElBRTdDLE9BQU9reUIsQ0FDWCxFQTNDSXBTLFFBQVNtUixHQUNUL1EsT0FhSixTQUFxQjJRLEVBQUk3RCxHQUNyQixPQUFPa0UsR0FBbUJpQixHQUFnQnRCLEdBQUtzQixHQUFnQm5GLEdBQ25FLEdBYkEsU0FBU2lFLEdBQVlKLEVBQUk3RCxHQUNyQixPQUFLQSxFQUdBNkQsRUFHRSxXQUNILE9BQU8sRUFBQyxFQUFBdnhCLFNBQVEsSUFBQXNMLFlBQVdpbUIsR0FBTUEsRUFBRzlyQixLQUFLM0wsS0FBTUEsTUFBUXkzQixHQUFJLElBQUFqbUIsWUFBV29pQixHQUFRQSxFQUFLam9CLEtBQUszTCxLQUFNQSxNQUFRNHpCLEVBQzFHLEVBSldBLEVBSEE2RCxDQVFmLENBSUEsU0FBU3NCLEdBQWdCbjRCLEdBQ3JCLElBQUksSUFBQThHLFNBQVE5RyxHQUFNLENBQ2QsTUFBTXdJLEVBQU0sQ0FBQyxFQUNiLElBQUssSUFBSTNNLEVBQUksRUFBR0EsRUFBSW1FLEVBQUk1RCxPQUFRUCxJQUM1QjJNLEVBQUl4SSxFQUFJbkUsSUFBTW1FLEVBQUluRSxHQUV0QixPQUFPMk0sQ0FDWCxDQUNBLE9BQU94SSxDQUNYLENBQ0EsU0FBU3EzQixHQUFhUixFQUFJN0QsR0FDdEIsT0FBTzZELEVBQUssSUFBSSxJQUFJanpCLElBQUksR0FBR3BHLE9BQU9xNUIsRUFBSTdELEtBQVVBLENBQ3BELENBQ0EsU0FBU2tFLEdBQW1CTCxFQUFJN0QsR0FDNUIsT0FBTzZELEdBQUssSUFBQXZ4QixTQUFPLElBQUFBLFFBQU94RixPQUFPeWpCLE9BQU8sTUFBT3NULEdBQUs3RCxHQUFRQSxDQUNoRSxDQXNKQSxTQUFTb0YsR0FBYXZtQixFQUFVb1ksRUFBVS9XLEVBQU9pTCxHQUM3QyxNQUFPL1ksRUFBU2l6QixHQUFnQnhtQixFQUFTMEksYUFDekMsSUFDSStkLEVBREFDLEdBQWtCLEVBRXRCLEdBQUl0TyxFQUNBLElBQUssSUFBSWprQixLQUFPaWtCLEVBQVUsQ0FFdEIsSUFBSSxJQUFBdU8sZ0JBQWV4eUIsR0FDZixTQUVKLE1BQU05SixFQUFRK3RCLEVBQVNqa0IsR0FHdkIsSUFBSXl5QixFQUNBcnpCLElBQVcsSUFBQTZELFFBQU83RCxFQUFVcXpCLEdBQVcsSUFBQWxkLFVBQVN2VixJQUMzQ3F5QixHQUFpQkEsRUFBYWgzQixTQUFTbzNCLElBSXZDSCxJQUFrQkEsRUFBZ0IsQ0FBQyxJQUFJRyxHQUFZdjhCLEVBSHBEZ1gsRUFBTXVsQixHQUFZdjhCLEVBTWhCc2dCLEdBQWUzSyxFQUFTeUksYUFBY3RVLElBQ3RDQSxLQUFPbVksR0FBVWppQixJQUFVaWlCLEVBQU1uWSxLQUNuQ21ZLEVBQU1uWSxHQUFPOUosRUFDYnE4QixHQUFrQixFQUc5QixDQUVKLEdBQUlGLEVBQWMsQ0FDZCxNQUFNSyxHQUFrQixJQUFBbndCLE9BQU0ySyxHQUN4QnlsQixFQUFhTCxHQUFpQixFQUFBamUsVUFDcEMsSUFBSyxJQUFJeGUsRUFBSSxFQUFHQSxFQUFJdzhCLEVBQWFqOEIsT0FBUVAsSUFBSyxDQUMxQyxNQUFNbUssRUFBTXF5QixFQUFheDhCLEdBQ3pCcVgsRUFBTWxOLEdBQU80eUIsR0FBaUJ4ekIsRUFBU3N6QixFQUFpQjF5QixFQUFLMnlCLEVBQVczeUIsR0FBTTZMLElBQVcsSUFBQTVJLFFBQU8wdkIsRUFBWTN5QixHQUNoSCxDQUNKLENBQ0EsT0FBT3V5QixDQUNYLENBQ0EsU0FBU0ssR0FBaUJ4ekIsRUFBUzhOLEVBQU9sTixFQUFLOUosRUFBTzJWLEVBQVVnbkIsR0FDNUQsTUFBTUMsRUFBTTF6QixFQUFRWSxHQUNwQixHQUFXLE1BQVA4eUIsRUFBYSxDQUNiLE1BQU1DLEdBQWEsSUFBQTl2QixRQUFPNnZCLEVBQUssV0FFL0IsR0FBSUMsUUFBd0JsM0IsSUFBVjNGLEVBQXFCLENBQ25DLE1BQU15RCxFQUFlbTVCLEVBQUluVixRQUN6QixHQUFJbVYsRUFBSS95QixPQUFTNGlCLFdBQVksSUFBQS9YLFlBQVdqUixHQUFlLENBQ25ELE1BQU0sY0FBRXE1QixHQUFrQm5uQixFQUN0QjdMLEtBQU9nekIsRUFDUDk4QixFQUFRODhCLEVBQWNoekIsSUFHdEIyaEIsR0FBbUI5VixHQUNuQjNWLEVBQVE4OEIsRUFBY2h6QixHQUFPckcsRUFBYW9MLEtBQUssS0FBTW1JLEdBQ3JEMFUsS0FFUixNQUVJMXJCLEVBQVF5RCxDQUVoQixDQUVJbTVCLEVBQUksS0FDQUQsSUFBYUUsRUFDYjc4QixHQUFRLEdBRUg0OEIsRUFBSSxJQUNFLEtBQVY1OEIsR0FBZ0JBLEtBQVUsSUFBQWtmLFdBQVVwVixLQUNyQzlKLEdBQVEsR0FHcEIsQ0FDQSxPQUFPQSxDQUNYLENBQ0EsU0FBUys4QixHQUFzQnRkLEVBQU0zSixFQUFZNEosR0FBVSxHQUN2RCxNQUFNQyxFQUFRN0osRUFBV2tuQixXQUNuQm5kLEVBQVNGLEVBQU03YSxJQUFJMmEsR0FDekIsR0FBSUksRUFDQSxPQUFPQSxFQUVYLE1BQU0vYixFQUFNMmIsRUFBS3pJLE1BQ1grSSxFQUFhLENBQUMsRUFDZG9jLEVBQWUsR0FFckIsSUFBSW5jLEdBQWEsRUFDakIsR0FBSUMsdUJBQXdCLElBQUF2TCxZQUFXK0ssR0FBTyxDQUMxQyxNQUFNd2QsRUFBZW41QixJQUNqQmtjLEdBQWEsRUFDYixNQUFPaEosRUFBTzlSLEdBQVE2M0IsR0FBc0JqNUIsRUFBS2dTLEdBQVksSUFDN0QsSUFBQTFNLFFBQU8yVyxFQUFZL0ksR0FDZjlSLEdBQ0FpM0IsRUFBYTM3QixRQUFRMEUsRUFBSyxHQUU3QndhLEdBQVc1SixFQUFXc0ssT0FBT2xnQixRQUM5QjRWLEVBQVdzSyxPQUFPdlYsUUFBUW95QixHQUUxQnhkLEVBQUtZLFNBQ0w0YyxFQUFZeGQsRUFBS1ksU0FFakJaLEVBQUtXLFFBQ0xYLEVBQUtXLE9BQU92VixRQUFRb3lCLEVBRTVCLENBQ0EsSUFBS241QixJQUFRa2MsRUFJVCxPQUhJLElBQUE5UyxVQUFTdVMsSUFDVEUsRUFBTTNWLElBQUl5VixFQUFNLEVBQUF5ZCxXQUViLEVBQUFBLFVBRVgsSUFBSSxJQUFBdHlCLFNBQVE5RyxHQUNSLElBQUssSUFBSW5FLEVBQUksRUFBR0EsRUFBSW1FLEVBQUk1RCxPQUFRUCxJQUFLLEVBQ2UsSUFBQTJYLFVBQVN4VCxFQUFJbkUsS0FDekRvRyxFQUFLLGlEQUFrRGpDLEVBQUluRSxJQUUvRCxNQUFNdzlCLEdBQWdCLElBQUE5ZCxVQUFTdmIsRUFBSW5FLElBQy9CeTlCLEdBQWlCRCxLQUNqQnBkLEVBQVdvZCxHQUFpQixFQUFBaGYsVUFFcEMsTUFFQyxHQUFJcmEsRUFBSyxFQUNzQyxJQUFBb0osVUFBU3BKLElBQ3JEaUMsRUFBSyx3QkFBeUJqQyxHQUVsQyxJQUFLLE1BQU1nRyxLQUFPaEcsRUFBSyxDQUNuQixNQUFNcTVCLEdBQWdCLElBQUE5ZCxVQUFTdlYsR0FDL0IsR0FBSXN6QixHQUFpQkQsR0FBZ0IsQ0FDakMsTUFBTVAsRUFBTTk0QixFQUFJZ0csR0FDVjlFLEVBQVErYSxFQUFXb2QsSUFDckIsSUFBQXZ5QixTQUFRZ3lCLEtBQVEsSUFBQWxvQixZQUFXa29CLEdBQU8sQ0FBRS95QixLQUFNK3lCLEdBQVFBLEVBQ3RELEdBQUk1M0IsRUFBTSxDQUNOLE1BQU1xNEIsRUFBZUMsR0FBYTFRLFFBQVM1bkIsRUFBSzZFLE1BQzFDMHpCLEVBQWNELEdBQWF0dkIsT0FBUWhKLEVBQUs2RSxNQUM5QzdFLEVBQUssR0FBbUNxNEIsR0FBZ0IsRUFDeERyNEIsRUFBSyxHQUNEdTRCLEVBQWMsR0FBS0YsRUFBZUUsR0FFbENGLEdBQWdCLElBQUssSUFBQXR3QixRQUFPL0gsRUFBTSxhQUNsQ20zQixFQUFhMzdCLEtBQUsyOEIsRUFFMUIsQ0FDSixDQUNKLENBQ0osQ0FDQSxNQUFNN3dCLEVBQU0sQ0FBQ3lULEVBQVlvYyxHQUl6QixPQUhJLElBQUFqdkIsVUFBU3VTLElBQ1RFLEVBQU0zVixJQUFJeVYsRUFBTW5ULEdBRWJBLENBQ1gsQ0FDQSxTQUFTOHdCLEdBQWlCdHpCLEdBQ3RCLE1BQWUsTUFBWEEsRUFBSSxLQUlKL0QsRUFBSyx1QkFBdUIrRCwrQkFFekIsRUFDWCxDQUdBLFNBQVMwekIsR0FBUUMsR0FDYixNQUFNMThCLEVBQVEwOEIsR0FBUUEsRUFBS0MsV0FBVzM4QixNQUFNLHNCQUM1QyxPQUFPQSxFQUFRQSxFQUFNLEdBQWMsT0FBVDA4QixFQUFnQixPQUFTLEVBQ3ZELENBQ0EsU0FBU0UsR0FBV3IrQixFQUFHQyxHQUNuQixPQUFPaStCLEdBQVFsK0IsS0FBT2srQixHQUFRaitCLEVBQ2xDLENBQ0EsU0FBUys5QixHQUFhenpCLEVBQU0rekIsR0FDeEIsT0FBSSxJQUFBaHpCLFNBQVFnekIsR0FDREEsRUFBY0MsV0FBVUMsR0FBS0gsR0FBV0csRUFBR2owQixNQUU3QyxJQUFBNkssWUFBV2twQixJQUNURCxHQUFXQyxFQUFlL3pCLEdBQVEsR0FFckMsQ0FDWixDQUlBLFNBQVNrMEIsR0FBY2hRLEVBQVUvVyxFQUFPckIsR0FDcEMsTUFBTXFvQixHQUFpQixJQUFBM3hCLE9BQU0ySyxHQUN2QjlOLEVBQVV5TSxFQUFTMEksYUFBYSxHQUN0QyxJQUFLLE1BQU12VSxLQUFPWixFQUFTLENBQ3ZCLElBQUkwekIsRUFBTTF6QixFQUFRWSxHQUNQLE1BQVA4eUIsR0FFSnFCLEdBQWFuMEIsRUFBS2swQixFQUFlbDBCLEdBQU04eUIsSUFBTSxJQUFBN3ZCLFFBQU9naEIsRUFBVWprQixNQUFTLElBQUFpRCxRQUFPZ2hCLEdBQVUsSUFBQTdPLFdBQVVwVixJQUN0RyxDQUNKLENBSUEsU0FBU20wQixHQUFhMW1CLEVBQU12WCxFQUFPZ0YsRUFBTTIzQixHQUNyQyxNQUFNLEtBQUU5eUIsRUFBSSxTQUFFcTBCLEVBQVEsVUFBRTVmLEdBQWN0WixFQUV0QyxHQUFJazVCLEdBQVl2QixFQUNaNTJCLEVBQUssMkJBQTZCd1IsRUFBTyxVQUk3QyxHQUFhLE1BQVR2WCxHQUFrQmdGLEVBQUtrNUIsU0FBM0IsQ0FJQSxHQUFZLE1BQVJyMEIsSUFBeUIsSUFBVEEsRUFBZSxDQUMvQixJQUFJczBCLEdBQVUsRUFDZCxNQUFNQyxHQUFRLElBQUF4ekIsU0FBUWYsR0FBUUEsRUFBTyxDQUFDQSxHQUNoQyt6QixFQUFnQixHQUV0QixJQUFLLElBQUlqK0IsRUFBSSxFQUFHQSxFQUFJeStCLEVBQU1sK0IsU0FBV2krQixFQUFTeCtCLElBQUssQ0FDL0MsTUFBTSxNQUFFMCtCLEVBQUssYUFBRUMsR0FBaUJDLEdBQVd2K0IsRUFBT28rQixFQUFNeitCLElBQ3hEaStCLEVBQWNwOUIsS0FBSzg5QixHQUFnQixJQUNuQ0gsRUFBVUUsQ0FDZCxDQUNBLElBQUtGLEVBRUQsWUFEQXA0QixFQTRDWixTQUErQndSLEVBQU12WCxFQUFPNDlCLEdBQ3hDLElBQUlZLEVBQVUsNkNBQTZDam5CLGdCQUMxQ3FtQixFQUFjanlCLElBQUksRUFBQXVFLFlBQVlzRyxLQUFLLFNBQ3BELE1BQU04bkIsRUFBZVYsRUFBYyxHQUM3QmEsR0FBZSxJQUFBNXRCLFdBQVU3USxHQUN6QjArQixFQUFnQkMsR0FBVzMrQixFQUFPcytCLEdBQ2xDTSxFQUFnQkQsR0FBVzMrQixFQUFPeStCLEdBWXhDLE9BVjZCLElBQXpCYixFQUFjMTlCLFFBQ2QyK0IsR0FBYVAsS0FtQ3JCLFlBQXNCeitCLEdBQ2xCLE9BQU9BLEVBQUttakIsTUFBSzhiLEdBQStCLFlBQXZCQSxFQUFLN2YsZUFDbEMsQ0FwQ1M4ZixDQUFVVCxFQUFjRyxLQUN6QkQsR0FBVyxlQUFlRSxLQUU5QkYsR0FBVyxTQUFTQyxLQUVoQkksR0FBYUosS0FDYkQsR0FBVyxjQUFjSSxNQUV0QkosQ0FDWCxDQS9EaUJRLENBQXNCem5CLEVBQU12WCxFQUFPNDlCLEdBR2hELENBRUl0ZixJQUFjQSxFQUFVdGUsSUFDeEIrRixFQUFLLHlEQUEyRHdSLEVBQU8sS0FuQjNFLENBcUJKLENBQ0EsTUFBTTBuQixJQUE2QixJQUFBMXpCLFNBQVEsZ0RBSTNDLFNBQVNnekIsR0FBV3YrQixFQUFPNkosR0FDdkIsSUFBSXcwQixFQUNKLE1BQU1DLEVBQWVkLEdBQVEzekIsR0FDN0IsR0FBSW8xQixHQUFhWCxHQUFlLENBQzVCLE1BQU1SLFNBQVc5OUIsRUFDakJxK0IsRUFBUVAsSUFBTVEsRUFBYXJmLGNBRXRCb2YsR0FBZSxXQUFOUCxJQUNWTyxFQUFRcitCLGFBQWlCNkosRUFFakMsTUFFSXcwQixFQURzQixXQUFqQkMsR0FDRyxJQUFBcHhCLFVBQVNsTixHQUVLLFVBQWpCcytCLEdBQ0csSUFBQTF6QixTQUFRNUssR0FFTSxTQUFqQnMrQixFQUNhLE9BQVZ0K0IsRUFHQUEsYUFBaUI2SixFQUU3QixNQUFPLENBQ0h3MEIsUUFDQUMsZUFFUixDQTJCQSxTQUFTSyxHQUFXMytCLEVBQU82SixHQUN2QixNQUFhLFdBQVRBLEVBQ08sSUFBSTdKLEtBRUcsV0FBVDZKLEVBQ0UsR0FBRzRELE9BQU96TixLQUdWLEdBQUdBLEdBRWxCLENBSUEsU0FBUzYrQixHQUFhaDFCLEdBRWxCLE1BRHNCLENBQUMsU0FBVSxTQUFVLFdBQ3RCbVosTUFBSzhiLEdBQVFqMUIsRUFBS29WLGdCQUFrQjZmLEdBQzdELENBUUEsTUFBTUksR0FBaUJwMUIsR0FBbUIsTUFBWEEsRUFBSSxJQUFzQixZQUFSQSxFQUMzQ3ExQixHQUFzQm4vQixJQUFVLElBQUE0SyxTQUFRNUssR0FDeENBLEVBQU0yTCxJQUFJNFcsSUFDVixDQUFDQSxHQUFldmlCLElBQ2hCby9CLEdBQWdCLENBQUN0MUIsRUFBS3UxQixFQUFTbGUsS0FDakMsR0FBSWtlLEVBQVFoZSxHQUVSLE9BQU9nZSxFQUVYLE1BQU10ZixFQUFhbUIsSUFBUSxJQUFJcmhCLEtBQ29CZ3FCLElBQzNDOWpCLEVBQUssU0FBUytELDhKQUlYcTFCLEdBQW1CRSxLQUFXeC9CLE1BQ3RDc2hCLEdBRUgsT0FEQXBCLEVBQVcyQixJQUFLLEVBQ1QzQixDQUFVLEVBRWZ1ZixHQUF1QixDQUFDQyxFQUFVdmQsRUFBT3JNLEtBQzNDLE1BQU13TCxFQUFNb2UsRUFBU0MsS0FDckIsSUFBSyxNQUFNMTFCLEtBQU95MUIsRUFBVSxDQUN4QixHQUFJTCxHQUFjcDFCLEdBQ2QsU0FDSixNQUFNOUosRUFBUXUvQixFQUFTejFCLEdBQ3ZCLElBQUksSUFBQTRLLFlBQVcxVSxHQUNYZ2lCLEVBQU1sWSxHQUFPczFCLEdBQWN0MUIsRUFBSzlKLEVBQU9taEIsUUFFdEMsR0FBYSxNQUFUbmhCLEVBQWUsQ0FHaEIrRixFQUFLLDRDQUE0QytELHFEQUdyRCxNQUFNaVcsRUFBYW9mLEdBQW1Cbi9CLEdBQ3RDZ2lCLEVBQU1sWSxHQUFPLElBQU1pVyxDQUN2QixDQUNKLEdBRUUwZixHQUFzQixDQUFDOXBCLEVBQVUrTixLQUU5QnFNLEdBQVlwYSxFQUFTRixRQUV0QjFQLEVBQUssa0dBR1QsTUFBTWdhLEVBQWFvZixHQUFtQnpiLEdBQ3RDL04sRUFBU3FNLE1BQU15RixRQUFVLElBQU0xSCxDQUFVLEVBNEU3QyxTQUFTMmYsS0FDTCxNQUFPLENBQ0hoaUIsSUFBSyxLQUNMM0gsT0FBUSxDQUNKNHBCLFlBQWEsRUFBQUMsR0FDYmg2QixhQUFhLEVBQ2IrekIsaUJBQWtCLENBQUMsRUFDbkJhLHNCQUF1QixDQUFDLEVBQ3hCbGlCLGtCQUFjM1MsRUFDZHFRLGlCQUFhclEsRUFDYms2QixnQkFBaUIsQ0FBQyxHQUV0QnpmLE9BQVEsR0FDUjJiLFdBQVksQ0FBQyxFQUNiM0csV0FBWSxDQUFDLEVBQ2J0TCxTQUFVbG1CLE9BQU95akIsT0FBTyxNQUN4Qm5MLGFBQWMsSUFBSWxVLFFBQ2xCZzFCLFdBQVksSUFBSWgxQixRQUNoQjRYLFdBQVksSUFBSTVYLFFBRXhCLENBQ0EsSUFBSTJWLEdBQU0sRUFDVixTQUFTbWlCLEdBQWFya0IsRUFBUXVMLEdBQzFCLE9BQU8sU0FBbUIrWSxFQUFlQyxFQUFZLE9BQzVDLElBQUF0ckIsWUFBV3FyQixLQUNaQSxFQUFnQm44QixPQUFPQyxPQUFPLENBQUMsRUFBR2s4QixJQUVyQixNQUFiQyxJQUFzQixJQUFBOXlCLFVBQVM4eUIsS0FDWWo2QixFQUFLLHVEQUNoRGk2QixFQUFZLE1BRWhCLE1BQU1DLEVBQVVQLEtBQ1ZRLEVBQW1CLElBQUl4NEIsSUFDN0IsSUFBSXdrQixHQUFZLEVBQ2hCLE1BQU14TyxFQUFPdWlCLEVBQVF2aUIsSUFBTSxDQUN2QnlpQixLQUFNeGlCLEtBQ055aUIsV0FBWUwsRUFDWk0sT0FBUUwsRUFDUk0sV0FBWSxLQUNaQyxTQUFVTixFQUNWTyxVQUFXLEtBQ1hDLFdBQ0kxcUIsYUFDQSxPQUFPa3FCLEVBQVFscUIsTUFDbkIsRUFDSUEsV0FBTzFILEdBRUh0SSxFQUFLLG9FQUViLEVBQ0EyNkIsSUFBRyxDQUFDejlCLEtBQVdpRyxLQUNQZzNCLEVBQWlCOTFCLElBQUluSCxHQUNzQjhDLEVBQUssa0RBRTNDOUMsSUFBVSxJQUFBeVIsWUFBV3pSLEVBQU8wOUIsVUFDakNULEVBQWlCNzFCLElBQUlwSCxHQUNyQkEsRUFBTzA5QixRQUFRampCLEtBQVF4VSxLQUVsQixJQUFBd0wsWUFBV3pSLElBQ2hCaTlCLEVBQWlCNzFCLElBQUlwSCxHQUNyQkEsRUFBT3lhLEtBQVF4VSxJQUdmbkQsRUFBSywrRUFHRjJYLEdBRVhrakIsTUFBTUEsSUFDRTNnQixvQkFDS2dnQixFQUFRN2YsT0FBT2piLFNBQVN5N0IsR0FJekI3NkIsRUFBSyxnREFDQTY2QixFQUFNcnBCLEtBQU8sS0FBS3FwQixFQUFNcnBCLE9BQVMsS0FKdEMwb0IsRUFBUTdmLE9BQU81ZixLQUFLb2dDLEdBUXhCNzZCLEVBQUssOERBRUYyWCxHQUVYOUgsVUFBUyxDQUFDMkIsRUFBTTNCLEtBRVJpckIsR0FBc0J0cEIsRUFBTTBvQixFQUFRbHFCLFFBRW5DSCxHQUcwQ3FxQixFQUFRbEUsV0FBV3hrQixJQUM5RHhSLEVBQUssY0FBY3dSLGlEQUV2QjBvQixFQUFRbEUsV0FBV3hrQixHQUFRM0IsRUFDcEI4SCxHQU5JdWlCLEVBQVFsRSxXQUFXeGtCLElBUWxDdXBCLFVBQVMsQ0FBQ3ZwQixFQUFNdXBCLEtBRVI3TCxHQUFzQjFkLEdBRXJCdXBCLEdBRzBDYixFQUFRN0ssV0FBVzdkLElBQzlEeFIsRUFBSyxjQUFjd1IsaURBRXZCMG9CLEVBQVE3SyxXQUFXN2QsR0FBUXVwQixFQUNwQnBqQixHQU5JdWlCLEVBQVE3SyxXQUFXN2QsSUFRbEN3cEIsTUFBTUMsRUFBZUMsRUFBVzdiLEdBQzVCLElBQUs4RyxFQUFXLENBRW1DOFUsRUFBY0UsYUFDekRuN0IsRUFBSyx5TUFJVCxNQUFNMFAsRUFBUWlOLEdBQVlxZCxFQUFlQyxHQXVCekMsT0FwQkF2cUIsRUFBTUssV0FBYW1xQixFQUdmQSxFQUFRbmtCLE9BQVMsS0FDYkwsRUFBT3lILEdBQVd6TixHQUFRdXJCLEVBQWU1YixFQUFNLEVBR25ENmIsR0FBYWphLEVBQ2JBLEVBQVF2UixFQUFPdXJCLEdBR2Z2bEIsRUFBT2hHLEVBQU91ckIsRUFBZTViLEdBRWpDOEcsR0FBWSxFQUNaeE8sRUFBSTRpQixXQUFhVSxFQUNqQkEsRUFBY0UsWUFBY3hqQixFQUV4QkEsRUFBSThpQixVQUFZL3FCLEVBQU1HLFVBcnZIOUMsU0FBeUI4SCxFQUFLK2lCLEdBQzFCMTlCLEVBQUssV0FBeUMyYSxFQUFLK2lCLEVBQVMsQ0FDeER0USxZQUNBZ1IsUUFDQXhlLFdBQ0F5ZSxXQUVSLENBK3VId0JDLENBQWdCM2pCLEVBQUsraUIsSUFFbEJuTCxHQUFlN2YsRUFBTUcsWUFBY0gsRUFBTUcsVUFBVWpULEtBQzlELENBRUlvRCxFQUFLLDJOQUtiLEVBQ0FzZ0IsVUFDUTZGLEdBQ0F6USxFQUFPLEtBQU1pQyxFQUFJNGlCLFlBRWI1aUIsRUFBSThpQixVQUFZLEtBN3ZIeEMsU0FBNEI5aUIsR0FDeEIzYSxFQUFLLGNBQStDMmEsRUFDeEQsQ0E0dkh3QjRqQixDQUFtQjVqQixVQUVoQkEsRUFBSTRpQixXQUFXWSxhQUd0Qm43QixFQUFLLDZDQUViLEVBQ0E2akIsUUFBTyxDQUFDOWYsRUFBSzlKLEtBQ3NDOEosS0FBT20yQixFQUFRblcsVUFDMUQvakIsRUFBSywyQ0FBMkNpSSxPQUFPbEUsbURBRzNEbTJCLEVBQVFuVyxTQUFTaGdCLEdBQU85SixFQUNqQjBkLElBR2YsT0FBT0EsQ0FDWCxDQUNKLENBS0EsU0FBUzZqQixHQUFPQyxFQUFRQyxFQUFXdGMsRUFBZ0IxUCxFQUFPaXNCLEdBQVksR0FDbEUsSUFBSSxJQUFBOTJCLFNBQVE0MkIsR0FFUixZQURBQSxFQUFPMzJCLFNBQVEsQ0FBQ29ILEVBQUd0UyxJQUFNNGhDLEdBQU90dkIsRUFBR3d2QixLQUFjLElBQUE3MkIsU0FBUTYyQixHQUFhQSxFQUFVOWhDLEdBQUs4aEMsR0FBWXRjLEVBQWdCMVAsRUFBT2lzQixLQUc1SCxHQUFJclIsR0FBZTVhLEtBQVdpc0IsRUFHMUIsT0FFSixNQUFNQyxFQUE2QixFQUFsQmxzQixFQUFNNE0sVUFDakJpVCxHQUFlN2YsRUFBTUcsWUFBY0gsRUFBTUcsVUFBVWpULE1BQ25EOFMsRUFBTStPLEdBQ054a0IsRUFBUTBoQyxFQUFZLEtBQU9DLEdBQ3pCaGlDLEVBQUdpaUMsRUFBTzN2QixFQUFHSCxHQUFRMHZCLEVBQzdCLElBQWdESSxFQUc1QyxZQUZBNzdCLEVBQUssaUlBSVQsTUFBTTg3QixFQUFTSixHQUFhQSxFQUFVeHZCLEVBQ2hDd21CLEVBQU9tSixFQUFNbkosT0FBUyxFQUFBdGEsVUFBYXlqQixFQUFNbkosS0FBTyxDQUFDLEVBQUttSixFQUFNbkosS0FDNUR2VyxFQUFhMGYsRUFBTTFmLFdBYXpCLEdBWGMsTUFBVjJmLEdBQWtCQSxJQUFXL3ZCLEtBQ3pCLElBQUF3RixVQUFTdXFCLElBQ1RwSixFQUFLb0osR0FBVSxNQUNYLElBQUE5MEIsUUFBT21WLEVBQVkyZixLQUNuQjNmLEVBQVcyZixHQUFVLFFBR3BCLElBQUE1MEIsT0FBTTQwQixLQUNYQSxFQUFPN2hDLE1BQVEsUUFHbkIsSUFBQTBVLFlBQVc1QyxHQUNYeUUsRUFBc0J6RSxFQUFLOHZCLEVBQU8sR0FBa0MsQ0FBQzVoQyxFQUFPeTRCLFFBRTNFLENBQ0QsTUFBTXFKLEdBQVksSUFBQXhxQixVQUFTeEYsR0FDckJpd0IsR0FBUyxJQUFBOTBCLE9BQU02RSxHQUNyQixHQUFJZ3dCLEdBQWFDLEVBQVEsQ0FDckIsTUFBTUMsRUFBUSxLQUNWLEdBQUlSLEVBQU94SSxFQUFHLENBQ1YsTUFBTWlKLEVBQVdILEdBQ1gsSUFBQS8wQixRQUFPbVYsRUFBWXBRLEdBQ2ZvUSxFQUFXcFEsR0FDWDJtQixFQUFLM21CLEdBQ1RBLEVBQUk5UixNQUNOMGhDLEdBQ0EsSUFBQTkyQixTQUFRcTNCLEtBQWEsSUFBQW5hLFFBQU9tYSxFQUFVTixJQUdqQyxJQUFBLzJCLFNBQVFxM0IsR0FhSEEsRUFBUzk4QixTQUFTdzhCLElBQ3hCTSxFQUFTemhDLEtBQUttaEMsR0FiVkcsR0FDQXJKLEVBQUszbUIsR0FBTyxDQUFDNnZCLElBQ1QsSUFBQTUwQixRQUFPbVYsRUFBWXBRLEtBQ25Cb1EsRUFBV3BRLEdBQU8ybUIsRUFBSzNtQixNQUkzQkEsRUFBSTlSLE1BQVEsQ0FBQzJoQyxHQUNUSCxFQUFPVSxJQUNQekosRUFBSytJLEVBQU9VLEdBQUtwd0IsRUFBSTlSLE9BT3pDLE1BQ1M4aEMsR0FDTHJKLEVBQUszbUIsR0FBTzlSLEdBQ1IsSUFBQStNLFFBQU9tVixFQUFZcFEsS0FDbkJvUSxFQUFXcFEsR0FBTzlSLElBR2pCK2hDLEdBQ0xqd0IsRUFBSTlSLE1BQVFBLEVBQ1J3aEMsRUFBT1UsSUFDUHpKLEVBQUsrSSxFQUFPVSxHQUFLbGlDLElBR3JCK0YsRUFBSyw2QkFBOEIrTCxFQUFLLFdBQVdBLEtBQ3ZELEVBRUE5UixHQUNBZ2lDLEVBQU16K0IsSUFBTSxFQUNaOG5CLEdBQXNCMlcsRUFBTzdjLElBRzdCNmMsR0FFUixNQUVJajhCLEVBQUssNkJBQThCK0wsRUFBSyxXQUFXQSxLQUUzRCxDQUNKLENBRUEsSUFBSXF3QixJQUFjLEVBQ2xCLE1BQU1DLEdBQWtCcGQsR0FBYyxNQUFNMk8sS0FBSzNPLEVBQVVxZCxlQUF1QyxrQkFBdEJyZCxFQUFVc2QsUUFDaEZDLEdBQWF0YixHQUEyQixJQUFsQkEsRUFBS3ViLFNBTWpDLFNBQVNDLEdBQXlCbGQsR0FDOUIsTUFBUW1kLEdBQUlDLEVBQWdCeHBCLEVBQUdxTSxFQUFPQyxHQUFHLFVBQUVtZCxFQUFTLFdBQUVDLEVBQVUsWUFBRUMsRUFBVyxXQUFFM2IsRUFBVSxPQUFFVyxFQUFNLE9BQUVpYixFQUFNLGNBQUVDLElBQW9CemQsRUFvQnpIMkIsRUFBYyxDQUFDRCxFQUFNeFIsRUFBT3lQLEVBQWlCQyxFQUFnQkUsRUFBY0MsR0FBWSxLQUN6RixNQUFNMmQsRUFBa0JWLEdBQVV0YixJQUF1QixNQUFkQSxFQUFLaGpCLEtBQzFDaS9CLEVBQWEsSUFBTUMsRUFBZWxjLEVBQU14UixFQUFPeVAsRUFBaUJDLEVBQWdCRSxFQUFjNGQsSUFDOUYsS0FBRXA1QixFQUFJLElBQUVpSSxFQUFHLFVBQUV1USxFQUFTLFVBQUVTLEdBQWNyTixFQUM1QyxJQUFJMnRCLEVBQVVuYyxFQUFLdWIsU0FDbkIvc0IsRUFBTStPLEdBQUt5QyxHQUNRLElBQWZuRSxJQUNBd0MsR0FBWSxFQUNaN1AsRUFBTWtPLGdCQUFrQixNQUU1QixJQUFJMGYsRUFBVyxLQUNmLE9BQVF4NUIsR0FDSixLQUFLczNCLEdBQ2UsSUFBWmlDLEVBR3VCLEtBQW5CM3RCLEVBQU1pTyxVQUNOcWYsRUFBUXR0QixFQUFNK08sR0FBS3FlLEVBQVcsSUFBTTFiLEVBQVdGLEdBQU9BLEdBQ3REb2MsRUFBV3BjLEdBR1hvYyxFQUFXSCxLQUlYamMsRUFBS2hqQixPQUFTd1IsRUFBTWlPLFdBQ3BCeWUsSUFBYyxFQUVWcDhCLEVBQ0ksdUNBQWU3QixLQUFLTyxVQUFVd2lCLEVBQUtoakIsb0JBQ3BCQyxLQUFLTyxVQUFVZ1IsRUFBTWlPLGFBQzVDdUQsRUFBS2hqQixLQUFPd1IsRUFBTWlPLFVBRXRCMmYsRUFBV1AsRUFBWTdiLElBRTNCLE1BQ0osS0FBS3RFLEdBRUcwZ0IsRUFEWSxJQUFaRCxHQUE0Q0gsRUFDakNDLElBR0FKLEVBQVk3YixHQUUzQixNQUNKLEtBQUttYSxHQU1ELEdBTEk2QixJQUdBRyxHQURBbmMsRUFBTzZiLEVBQVk3YixJQUNKdWIsVUFFSCxJQUFaWSxHQUF3RCxJQUFaQSxFQUF1QyxDQUVuRkMsRUFBV3BjLEVBR1gsTUFBTXFjLEdBQXNCN3RCLEVBQU1pTyxTQUFTeGpCLE9BQzNDLElBQUssSUFBSVAsRUFBSSxFQUFHQSxFQUFJOFYsRUFBTTh0QixZQUFhNWpDLElBQy9CMmpDLElBQ0E3dEIsRUFBTWlPLFVBQ29CLElBQXRCMmYsRUFBU2IsU0FDSGEsRUFBU0csVUFDVEgsRUFBU3AvQixNQUNuQnRFLElBQU04VixFQUFNOHRCLFlBQWMsSUFDMUI5dEIsRUFBTXdQLE9BQVNvZSxHQUVuQkEsRUFBV1AsRUFBWU8sR0FFM0IsT0FBT0osRUFBa0JILEVBQVlPLEdBQVlBLENBQ3JELENBRUlILElBRUosTUFDSixLQUFLL1MsR0FLR2tULEVBSkNKLEVBSVVRLEVBQWdCeGMsRUFBTXhSLEVBQU95UCxFQUFpQkMsRUFBZ0JFLEVBQWNDLEdBSDVFNGQsSUFLZixNQUNKLFFBQ0ksR0FBZ0IsRUFBWjdnQixFQUlJZ2hCLEVBSFksSUFBWkQsR0FDQTN0QixFQUFNNUwsS0FBS29WLGdCQUNQZ0ksRUFBS3FiLFFBQVFyakIsY0FDTmlrQixJQUdBUSxFQUFlemMsRUFBTXhSLEVBQU95UCxFQUFpQkMsRUFBZ0JFLEVBQWNDLFFBR3pGLEdBQWdCLEVBQVpqRCxFQUEwQyxDQUkvQzVNLEVBQU00UCxhQUFlQSxFQUNyQixNQUFNTCxFQUFZbUMsRUFBV0YsR0FrQjdCLEdBakJBMGIsRUFBZWx0QixFQUFPdVAsRUFBVyxLQUFNRSxFQUFpQkMsRUFBZ0JpZCxHQUFlcGQsR0FBWU0sR0FJbkcrZCxFQUFXSixFQUNMVSxFQUF5QjFjLEdBQ3pCNmIsRUFBWTdiLEdBRWRvYyxHQUNBZCxHQUFVYyxJQUNRLGlCQUFsQkEsRUFBU3AvQixPQUNUby9CLEVBQVdQLEVBQVlPLElBTXZCaFQsR0FBZTVhLEdBQVEsQ0FDdkIsSUFBSWdQLEVBQ0F3ZSxHQUNBeGUsRUFBVS9CLEdBQVl5TixJQUN0QjFMLEVBQVFRLE9BQVNvZSxFQUNYQSxFQUFTTyxnQkFDVDVlLEVBQVU2ZSxXQUdoQnBmLEVBQ3NCLElBQWxCd0MsRUFBS3ViLFNBQWlCc0IsR0FBZ0IsSUFBTXBoQixHQUFZLE9BRWhFK0IsRUFBUUQsR0FBS3lDLEVBQ2J4UixFQUFNRyxVQUFVNk8sUUFBVUEsQ0FDOUIsQ0FDSixNQUNxQixHQUFacEMsRUFFRGdoQixFQURZLElBQVpELEVBQ1dGLElBR0F6dEIsRUFBTTVMLEtBQUttZCxRQUFRQyxFQUFNeFIsRUFBT3lQLEVBQWlCQyxFQUFnQkUsRUFBY0MsRUFBV0MsRUFBbUJ3ZSxHQUczRyxJQUFaMWhCLEVBQ0xnaEIsRUFBVzV0QixFQUFNNUwsS0FBS21kLFFBQVFDLEVBQU14UixFQUFPeVAsRUFBaUJDLEVBQWdCaWQsR0FBZWpiLEVBQVdGLElBQVE1QixFQUFjQyxFQUFXQyxFQUFtQjJCLEdBRzFKbmhCLEVBQUssMEJBQTJCOEQsRUFBTSxXQUFXQSxNQU03RCxPQUhXLE1BQVBpSSxHQUNBeXZCLEdBQU96dkIsRUFBSyxLQUFNcVQsRUFBZ0IxUCxHQUUvQjR0QixDQUFRLEVBRWJLLEVBQWlCLENBQUNsZixFQUFJL08sRUFBT3lQLEVBQWlCQyxFQUFnQkUsRUFBY0MsS0FDOUVBLEVBQVlBLEtBQWU3UCxFQUFNa08sZ0JBQ2pDLE1BQU0sS0FBRTlaLEVBQUksTUFBRW1OLEVBQUssVUFBRThMLEVBQVMsVUFBRVQsRUFBUyxLQUFFaUIsR0FBUzdOLEVBRzlDdXVCLEVBQTRCLFVBQVRuNkIsR0FBb0J5WixHQUFrQixXQUFUelosRUFHdUQsQ0FLekcsR0FKSXlaLEdBQ0FzUyxHQUFvQm5nQixFQUFPLEtBQU15UCxFQUFpQixXQUdsRGxPLEVBQ0EsR0FBSWd0QixJQUNDMWUsR0FDVyxHQUFaeEMsRUFDQSxJQUFLLE1BQU1oWixLQUFPa04sR0FDVGd0QixHQUFtQmw2QixFQUFJbTZCLFNBQVMsV0FDaEMsSUFBQTFqQixNQUFLelcsTUFBUyxJQUFBd3lCLGdCQUFleHlCLEtBQzlCODRCLEVBQVVwZSxFQUFJMWEsRUFBSyxLQUFNa04sRUFBTWxOLElBQU0sT0FBT25FLEVBQVd1ZixRQUkxRGxPLEVBQU1rdEIsU0FHWHRCLEVBQVVwZSxFQUFJLFVBQVcsS0FBTXhOLEVBQU1rdEIsU0FBUyxPQUFPditCLEVBQVd1ZixHQUl4RSxJQUFJaWYsRUFjSixJQWJLQSxFQUFhbnRCLEdBQVNBLEVBQU1vdEIscUJBQzdCdFIsR0FBZ0JxUixFQUFZamYsRUFBaUJ6UCxHQUU3QzZOLEdBQ0FzUyxHQUFvQm5nQixFQUFPLEtBQU15UCxFQUFpQixpQkFFakRpZixFQUFhbnRCLEdBQVNBLEVBQU02YixpQkFBbUJ2UCxJQUNoRG9HLElBQXdCLEtBQ3BCeWEsR0FBY3JSLEdBQWdCcVIsRUFBWWpmLEVBQWlCelAsR0FDM0Q2TixHQUFRc1MsR0FBb0JuZ0IsRUFBTyxLQUFNeVAsRUFBaUIsVUFBVSxHQUNyRUMsR0FHUyxHQUFaOUMsS0FFRXJMLElBQVVBLEVBQU1xdEIsWUFBYXJ0QixFQUFNc3RCLGFBQWUsQ0FDcEQsSUFBSXYwQixFQUFPZzBCLEVBQWdCdmYsRUFBRytmLFdBQVk5dUIsRUFBTytPLEVBQUlVLEVBQWlCQyxFQUFnQkUsRUFBY0MsR0FDaEdxQyxHQUFZLEVBQ2hCLEtBQU81WCxHQUFNLENBQ1RveUIsSUFBYyxFQUNrQ3hhLElBQzVDNWhCLEVBQUssbUNBQW1DMFAsRUFBTTVMLDhFQUU5QzhkLEdBQVksR0FHaEIsTUFBTTNQLEVBQU1qSSxFQUNaQSxFQUFPQSxFQUFLK3lCLFlBQ1poYixFQUFPOVAsRUFDWCxDQUNKLE1BQ3FCLEVBQVpxSyxHQUNEbUMsRUFBRzhmLGNBQWdCN3VCLEVBQU1pTyxXQUN6QnllLElBQWMsRUFFVnA4QixFQUFLLHVDQUF1QzBQLEVBQU01TCxxQkFDakMyYSxFQUFHOGYsMEJBQ0g3dUIsRUFBTWlPLFlBQzNCYyxFQUFHOGYsWUFBYzd1QixFQUFNaU8sU0FHbkMsQ0FDQSxPQUFPYyxFQUFHc2UsV0FBVyxFQUVuQmlCLEVBQWtCLENBQUM5YyxFQUFNdWQsRUFBYXhmLEVBQVdFLEVBQWlCQyxFQUFnQkUsRUFBY0MsS0FDbEdBLEVBQVlBLEtBQWVrZixFQUFZN2dCLGdCQUN2QyxNQUFNRCxFQUFXOGdCLEVBQVk5Z0IsU0FDdkIxYyxFQUFJMGMsRUFBU3hqQixPQUNuQixJQUFJeW5CLEdBQVksRUFDaEIsSUFBSyxJQUFJaG9CLEVBQUksRUFBR0EsRUFBSXFILEVBQUdySCxJQUFLLENBQ3hCLE1BQU04VixFQUFRNlAsRUFDUjVCLEVBQVMvakIsR0FDUitqQixFQUFTL2pCLEdBQUs0aUIsR0FBZW1CLEVBQVMvakIsSUFDN0MsR0FBSXNuQixFQUNBQSxFQUFPQyxFQUFZRCxFQUFNeFIsRUFBT3lQLEVBQWlCQyxFQUFnQkUsRUFBY0MsT0FFOUUsSUFBSTdQLEVBQU01TCxPQUFTczNCLEtBQVMxckIsRUFBTWlPLFNBQ25DLFNBR0F5ZSxJQUFjLEVBQ2tDeGEsSUFDNUM1aEIsRUFBSyxtQ0FBbUNpZixFQUFVc2QsUUFBUXJqQix3RkFFMUQwSSxHQUFZLEdBR2hCbkMsRUFBTSxLQUFNL1AsRUFBT3VQLEVBQVcsS0FBTUUsRUFBaUJDLEVBQWdCaWQsR0FBZXBkLEdBQVlLLEVBQ3BHLENBQ0osQ0FDQSxPQUFPNEIsQ0FBSSxFQUVUd2MsRUFBa0IsQ0FBQ3hjLEVBQU14UixFQUFPeVAsRUFBaUJDLEVBQWdCRSxFQUFjQyxLQUNqRixNQUFRRCxhQUFjb2YsR0FBeUJodkIsRUFDM0NndkIsSUFDQXBmLEVBQWVBLEVBQ1RBLEVBQWEvakIsT0FBT21qQyxHQUNwQkEsR0FFVixNQUFNemYsRUFBWW1DLEVBQVdGLEdBQ3ZCbFgsRUFBT2cwQixFQUFnQmpCLEVBQVk3YixHQUFPeFIsRUFBT3VQLEVBQVdFLEVBQWlCQyxFQUFnQkUsRUFBY0MsR0FDakgsT0FBSXZWLEdBQVF3eUIsR0FBVXh5QixJQUF1QixNQUFkQSxFQUFLOUwsS0FDekI2K0IsRUFBYXJ0QixFQUFNd1AsT0FBU2xWLElBS25Db3lCLElBQWMsRUFFZFksRUFBUXR0QixFQUFNd1AsT0FBUytkLEVBQWMsS0FBT2hlLEVBQVdqVixHQUNoREEsRUFDWCxFQUVFb3pCLEVBQWlCLENBQUNsYyxFQUFNeFIsRUFBT3lQLEVBQWlCQyxFQUFnQkUsRUFBY3FmLEtBU2hGLEdBUkF2QyxJQUFjLEVBRVZwOEIsRUFBSyw0Q0FBNkMwUCxFQUFNNUwsS0FBTSwyQkFBNEJvZCxFQUF3QixJQUFsQkEsRUFBS3ViLFNBQy9GLFNBQ0FELEdBQVV0YixJQUF1QixNQUFkQSxFQUFLaGpCLEtBQ3BCLHNCQUNBLElBQ2R3UixFQUFNK08sR0FBSyxLQUNQa2dCLEVBQVksQ0FFWixNQUFNbHJCLEVBQU1tcUIsRUFBeUIxYyxHQUNyQyxPQUFhLENBQ1QsTUFBTWxYLEVBQU8reUIsRUFBWTdiLEdBQ3pCLElBQUlsWCxHQUFRQSxJQUFTeUosRUFJakIsTUFIQXNPLEVBQU8vWCxFQUtmLENBQ0osQ0FDQSxNQUFNQSxFQUFPK3lCLEVBQVk3YixHQUNuQmpDLEVBQVltQyxFQUFXRixHQUc3QixPQUZBYSxFQUFPYixHQUNQekIsRUFBTSxLQUFNL1AsRUFBT3VQLEVBQVdqVixFQUFNbVYsRUFBaUJDLEVBQWdCaWQsR0FBZXBkLEdBQVlLLEdBQ3pGdFYsQ0FBSSxFQUVUNHpCLEVBQTRCMWMsSUFDOUIsSUFBSWxtQixFQUFRLEVBQ1osS0FBT2ttQixHQUVILElBREFBLEVBQU82YixFQUFZN2IsS0FDUHNiLEdBQVV0YixLQUNBLE1BQWRBLEVBQUtoakIsTUFDTGxELElBQ2MsTUFBZGttQixFQUFLaGpCLE1BQWMsQ0FDbkIsR0FBYyxJQUFWbEQsRUFDQSxPQUFPK2hDLEVBQVk3YixHQUduQmxtQixHQUVSLENBR1IsT0FBT2ttQixDQUFJLEVBRWYsTUFBTyxDQXRWUyxDQUFDeFIsRUFBT3VQLEtBQ3BCLElBQUtBLEVBQVUyZixnQkFPWCxPQUxJNStCLEVBQUssZ0dBRVR5ZixFQUFNLEtBQU0vUCxFQUFPdVAsR0FDbkI1SyxTQUNBNEssRUFBVTRmLE9BQVNudkIsR0FHdkIwc0IsSUFBYyxFQUNkamIsRUFBWWxDLEVBQVV1ZixXQUFZOXVCLEVBQU8sS0FBTSxLQUFNLE1BQ3JEMkUsSUFDQTRLLEVBQVU0ZixPQUFTbnZCLEVBQ2Ywc0IsSUFFQWw4QixRQUFRdVMsTUFBTSwrQ0FDbEIsRUFxVWEwTyxFQUNyQixDQUdBLElBQUkzaEIsR0FDQUMsR0FDSixTQUFTcS9CLEdBQWFsdkIsRUFBVTlMLEdBQ3hCOEwsRUFBU0csV0FBV0MsT0FBT25RLGFBQWVrL0IsTUFDMUN0L0IsR0FBS3UvQixLQUFLLE9BQU9sN0IsS0FBUThMLEVBQVNnSSxPQUdsQ0MsRUFBa0JqSSxFQUFVOUwsRUFBTWk3QixLQUFnQnQvQixHQUFLZCxNQUFRb0IsS0FBS3BCLE1BRTVFLENBQ0EsU0FBU3NnQyxHQUFXcnZCLEVBQVU5TCxHQUMxQixHQUFJOEwsRUFBU0csV0FBV0MsT0FBT25RLGFBQWVrL0IsS0FBZSxDQUN6RCxNQUFNRyxFQUFXLE9BQU9wN0IsS0FBUThMLEVBQVNnSSxNQUNuQ3VuQixFQUFTRCxFQUFXLE9BQzFCei9CLEdBQUt1L0IsS0FBS0csR0FDVjEvQixHQUFLMi9CLFFBQVEsSUFBSTF1QixHQUFvQmQsRUFBVUEsRUFBUzlMLFVBQVVBLElBQVFvN0IsRUFBVUMsR0FDcEYxL0IsR0FBSzQvQixXQUFXSCxHQUNoQnovQixHQUFLNC9CLFdBQVdGLEVBQ3BCLENBRUlwbkIsRUFBZ0JuSSxFQUFVOUwsRUFBTWk3QixLQUFnQnQvQixHQUFLZCxNQUFRb0IsS0FBS3BCLE1BRTFFLENBQ0EsU0FBU29nQyxLQUNMLFlBQWtCbi9CLElBQWRKLEtBR2tCLG9CQUFYekQsUUFBMEJBLE9BQU84RCxhQUN4Q0wsSUFBWSxFQUNaQyxHQUFPMUQsT0FBTzhELGFBR2RMLElBQVksR0FQTEEsRUFVZixDQTZCQSxNQUFNOGxCLEdBQXdCM0IsR0FpQjlCLFNBQVMyYixHQUFlbjhCLEdBQ3BCLE9BQU9vOEIsR0FBbUJwOEIsRUFDOUIsQ0FJQSxTQUFTcThCLEdBQXdCcjhCLEdBQzdCLE9BQU9vOEIsR0FBbUJwOEIsRUFBU3U1QixHQUN2QyxDQUVBLFNBQVM2QyxHQUFtQnA4QixFQUFTczhCLElBL0NyQyxXQUNJLE1BQU1DLEVBQVcsR0FTakIsR0FSbUMsa0JBQXhCeGxCLHNCQUNvQ3dsQixFQUFTamxDLEtBQUssd0JBQ3pELElBQUF5YSxpQkFBZ0JnRixxQkFBc0IsR0FFTCxrQkFBMUJ5bEIsd0JBQ29DRCxFQUFTamxDLEtBQUssMEJBQ3pELElBQUF5YSxpQkFBZ0J5cUIsdUJBQXdCLEdBRUdELEVBQVN2bEMsT0FBUSxDQUM1RCxNQUFNeWxDLEVBQVFGLEVBQVN2bEMsT0FBUyxFQUNoQytGLFFBQVFGLEtBQUssZUFBZTQvQixFQUFRLElBQU0sTUFBTUYsRUFBU2p2QixLQUFLLFNBQVNtdkIsRUFBUSxNQUFRLHdTQUszRixDQUNKLENBZ0NRQyxHQUVKLE1BQU10akMsR0FBUyxJQUFBMlksaUJBQ2YzWSxFQUFPdWpDLFNBQVUsRUFFYi9vQixFQUFnQnhhLEVBQU9WLDZCQUE4QlUsR0FFekQsTUFBUXlnQyxPQUFRK0MsRUFBWWhlLE9BQVFpZSxFQUFZbkQsVUFBV29ELEVBQWV0Z0IsY0FBZXVnQixFQUFtQnBELFdBQVlxRCxFQUFnQmxELGNBQWVtRCxFQUFtQkMsUUFBU0MsRUFBYUMsZUFBZ0JDLEVBQW9CcGYsV0FBWXFmLEVBQWdCMUQsWUFBYTJELEVBQWlCQyxXQUFZQyxFQUFpQixFQUFBemIsS0FBTTBiLG9CQUFxQkMsR0FBNEIzOUIsRUFHNVdzYyxFQUFRLENBQUNWLEVBQUlDLEVBQUlDLEVBQVdDLEVBQVMsS0FBTUMsRUFBa0IsS0FBTUMsRUFBaUIsS0FBTUMsR0FBUSxFQUFPQyxFQUFlLEtBQU1DLEdBQXVEdkssS0FBMEJnSyxFQUFHcEIsbUJBQ3BOLEdBQUltQixJQUFPQyxFQUNQLE9BR0FELElBQU82QixHQUFnQjdCLEVBQUlDLEtBQzNCRSxFQUFTNmhCLEdBQWdCaGlCLEdBQ3pCdUIsR0FBUXZCLEVBQUlJLEVBQWlCQyxHQUFnQixHQUM3Q0wsRUFBSyxPQUVhLElBQWxCQyxFQUFHakMsWUFDSHdDLEdBQVksRUFDWlAsRUFBR3BCLGdCQUFrQixNQUV6QixNQUFNLEtBQUU5WixFQUFJLElBQUVpSSxFQUFHLFVBQUV1USxHQUFjMEMsRUFDakMsT0FBUWxiLEdBQ0osS0FBS3MzQixHQUNENEYsRUFBWWppQixFQUFJQyxFQUFJQyxFQUFXQyxHQUMvQixNQUNKLEtBQUt0QyxHQUNEcWtCLEVBQW1CbGlCLEVBQUlDLEVBQUlDLEVBQVdDLEdBQ3RDLE1BQ0osS0FBS21jLEdBQ1MsTUFBTnRjLEVBQ0FtaUIsRUFBZ0JsaUIsRUFBSUMsRUFBV0MsRUFBUUcsR0FHdkM4aEIsRUFBZ0JwaUIsRUFBSUMsRUFBSUMsRUFBV0ksR0FFdkMsTUFDSixLQUFLK0ssR0FDRGdYLEVBQWdCcmlCLEVBQUlDLEVBQUlDLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsR0FDakcsTUFDSixRQUNvQixFQUFaakQsRUFDQStrQixFQUFldGlCLEVBQUlDLEVBQUlDLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsR0FFL0UsRUFBWmpELEVBQ0xnbEIsRUFBaUJ2aUIsRUFBSUMsRUFBSUMsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUVqRixHQUFaakQsR0FHWSxJQUFaQSxFQUZMeFksRUFBS2diLFFBQVFDLEVBQUlDLEVBQUlDLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsRUFBV2dpQixJQU16R3ZoQyxFQUFLLHNCQUF1QjhELEVBQU0sV0FBV0EsTUFJOUMsTUFBUGlJLEdBQWVvVCxHQUNmcWMsR0FBT3p2QixFQUFLZ1QsR0FBTUEsRUFBR2hULElBQUtxVCxFQUFnQkosR0FBTUQsR0FBS0MsRUFDekQsRUFFRWdpQixFQUFjLENBQUNqaUIsRUFBSUMsRUFBSUMsRUFBV0MsS0FDcEMsR0FBVSxNQUFOSCxFQUNBZ2hCLEVBQVkvZ0IsRUFBR1AsR0FBSzBoQixFQUFlbmhCLEVBQUdyQixVQUFZc0IsRUFBV0MsT0FFNUQsQ0FDRCxNQUFNVCxFQUFNTyxFQUFHUCxHQUFLTSxFQUFHTixHQUNuQk8sRUFBR3JCLFdBQWFvQixFQUFHcEIsVUFDbkIyaUIsRUFBWTdoQixFQUFJTyxFQUFHckIsU0FFM0IsR0FFRXNqQixFQUFxQixDQUFDbGlCLEVBQUlDLEVBQUlDLEVBQVdDLEtBQ2pDLE1BQU5ILEVBQ0FnaEIsRUFBWS9nQixFQUFHUCxHQUFLMmhCLEVBQWtCcGhCLEVBQUdyQixVQUFZLElBQU1zQixFQUFXQyxHQUl0RUYsRUFBR1AsR0FBS00sRUFBR04sRUFDZixFQUVFeWlCLEVBQWtCLENBQUNsaUIsRUFBSUMsRUFBV0MsRUFBUUcsTUFDM0NMLEVBQUdQLEdBQUlPLEVBQUdFLFFBQVU0aEIsRUFBd0I5aEIsRUFBR3JCLFNBQVVzQixFQUFXQyxFQUFRRyxFQUFPTCxFQUFHUCxHQUFJTyxFQUFHRSxPQUFPLEVBS25HaWlCLEVBQWtCLENBQUNwaUIsRUFBSUMsRUFBSUMsRUFBV0ksS0FFeEMsR0FBSUwsRUFBR3JCLFdBQWFvQixFQUFHcEIsU0FBVSxDQUM3QixNQUFNdUIsRUFBU3doQixFQUFnQjNoQixFQUFHRyxRQUVsQ3NpQixFQUFpQnppQixJQUNoQkMsRUFBR1AsR0FBSU8sRUFBR0UsUUFBVTRoQixFQUF3QjloQixFQUFHckIsU0FBVXNCLEVBQVdDLEVBQVFHLEVBQ2pGLE1BRUlMLEVBQUdQLEdBQUtNLEVBQUdOLEdBQ1hPLEVBQUdFLE9BQVNILEVBQUdHLE1BQ25CLEVBV0VzaUIsRUFBbUIsRUFBRy9pQixLQUFJUyxhQUM1QixJQUFJbFYsRUFDSixLQUFPeVUsR0FBTUEsSUFBT1MsR0FDaEJsVixFQUFPMDJCLEVBQWdCamlCLEdBQ3ZCdWhCLEVBQVd2aEIsR0FDWEEsRUFBS3pVLEVBRVRnMkIsRUFBVzlnQixFQUFPLEVBRWhCbWlCLEVBQWlCLENBQUN0aUIsRUFBSUMsRUFBSUMsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxLQUNyR0YsRUFBUUEsR0FBcUIsUUFBWkwsRUFBR2xiLEtBQ1YsTUFBTmliLEVBQ0EwaUIsRUFBYXppQixFQUFJQyxFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEdBRzFGbWlCLEVBQWEzaUIsRUFBSUMsRUFBSUcsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxFQUMvRSxFQUVFa2lCLEVBQWUsQ0FBQy94QixFQUFPdVAsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxLQUNsRyxJQUFJZCxFQUNBb08sRUFDSixNQUFNLEtBQUUvb0IsRUFBSSxNQUFFbU4sRUFBSyxVQUFFcUwsRUFBUyxXQUFFbUIsRUFBVSxLQUFFRixHQUFTN04sRUFjckQsR0FiQStPLEVBQUsvTyxFQUFNK08sR0FBS3loQixFQUFrQnh3QixFQUFNNUwsS0FBTXViLEVBQU9wTyxHQUFTQSxFQUFNMHdCLEdBQUkxd0IsR0FHeEQsRUFBWnFMLEVBQ0Fra0IsRUFBbUIvaEIsRUFBSS9PLEVBQU1pTyxVQUVaLEdBQVpyQixHQUNMc2xCLEVBQWNseUIsRUFBTWlPLFNBQVVjLEVBQUksS0FBTVUsRUFBaUJDLEVBQWdCQyxHQUFrQixrQkFBVHZiLEVBQTBCd2IsRUFBY0MsR0FFMUhoQyxHQUNBc1MsR0FBb0JuZ0IsRUFBTyxLQUFNeVAsRUFBaUIsV0FHbERsTyxFQUFPLENBQ1AsSUFBSyxNQUFNbE4sS0FBT2tOLEVBQ0YsVUFBUmxOLElBQW9CLElBQUF3eUIsZ0JBQWV4eUIsSUFDbkNrOEIsRUFBY3hoQixFQUFJMWEsRUFBSyxLQUFNa04sRUFBTWxOLEdBQU1zYixFQUFPM1AsRUFBTWlPLFNBQVV3QixFQUFpQkMsRUFBZ0J5aUIsSUFZckcsVUFBVzV3QixHQUNYZ3ZCLEVBQWN4aEIsRUFBSSxRQUFTLEtBQU14TixFQUFNaFgsUUFFdEM0eUIsRUFBWTViLEVBQU1vdEIscUJBQ25CdFIsR0FBZ0JGLEVBQVcxTixFQUFpQnpQLEVBRXBELENBRUFpeEIsRUFBV2xpQixFQUFJL08sRUFBT0EsRUFBTWlpQixRQUFTclMsRUFBY0gsR0FFL0N0aEIsT0FBT2kyQixlQUFlclYsRUFBSSxVQUFXLENBQ2pDeGtCLE1BQU95VixFQUNQcWtCLFlBQVksSUFFaEJsMkIsT0FBT2kyQixlQUFlclYsRUFBSSx1QkFBd0IsQ0FDOUN4a0IsTUFBT2tsQixFQUNQNFUsWUFBWSxJQUdoQnhXLEdBQ0FzUyxHQUFvQm5nQixFQUFPLEtBQU15UCxFQUFpQixlQUl0RCxNQUFNMmlCLElBQTRCMWlCLEdBQW1CQSxJQUFtQkEsRUFBZVcsZ0JBQ25GdEMsSUFDQ0EsRUFBV3FKLFVBQ1pnYixHQUNBcmtCLEVBQVc2TCxZQUFZN0ssR0FFM0JzaEIsRUFBV3RoQixFQUFJUSxFQUFXQyxLQUNyQjJOLEVBQVk1YixHQUFTQSxFQUFNNmIsaUJBQzVCZ1YsR0FDQXZrQixJQUNBK0gsSUFBc0IsS0FDbEJ1SCxHQUFhRSxHQUFnQkYsRUFBVzFOLEVBQWlCelAsR0FDekRveUIsR0FBMkJya0IsRUFBVytMLE1BQU0vSyxHQUM1Q2xCLEdBQVFzUyxHQUFvQm5nQixFQUFPLEtBQU15UCxFQUFpQixVQUFVLEdBQ3JFQyxFQUNQLEVBRUV1aEIsRUFBYSxDQUFDbGlCLEVBQUkvTyxFQUFPaWlCLEVBQVNyUyxFQUFjSCxLQUlsRCxHQUhJd1MsR0FDQWlQLEVBQWVuaUIsRUFBSWtULEdBRW5CclMsRUFDQSxJQUFLLElBQUkxbEIsRUFBSSxFQUFHQSxFQUFJMGxCLEVBQWFubEIsT0FBUVAsSUFDckNnbkMsRUFBZW5pQixFQUFJYSxFQUFhMWxCLElBR3hDLEdBQUl1bEIsRUFBaUIsQ0FDakIsSUFBSVQsRUFBVVMsRUFBZ0JULFFBTzlCLEdBTElBLEVBQVEzQixVQUFZLEdBQ0EsS0FBcEIyQixFQUFRM0IsWUFDUjJCLEVBQ0laLEdBQWlCWSxFQUFRZixXQUFhZSxHQUUxQ2hQLElBQVVnUCxFQUFTLENBQ25CLE1BQU0rZixFQUFjdGYsRUFBZ0J6UCxNQUNwQ2l4QixFQUFXbGlCLEVBQUlnZ0IsRUFBYUEsRUFBWTlNLFFBQVM4TSxFQUFZbmYsYUFBY0gsRUFBZ0IxZSxPQUMvRixDQUNKLEdBRUVtaEMsRUFBZ0IsQ0FBQ2prQixFQUFVc0IsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxFQUFXL0wsRUFBUSxLQUN6SCxJQUFLLElBQUk1WixFQUFJNFosRUFBTzVaLEVBQUkrakIsRUFBU3hqQixPQUFRUCxJQUFLLENBQzFDLE1BQU1za0IsRUFBU1AsRUFBUy9qQixHQUFLMmxCLEVBQ3ZCd2lCLEdBQWVwa0IsRUFBUy9qQixJQUN4QjRpQixHQUFlbUIsRUFBUy9qQixJQUM5QjZsQixFQUFNLEtBQU12QixFQUFPZSxFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEVBQ2hHLEdBRUVtaUIsRUFBZSxDQUFDM2lCLEVBQUlDLEVBQUlHLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsS0FDaEYsTUFBTWQsRUFBTU8sRUFBR1AsR0FBS00sRUFBR04sR0FDdkIsSUFBSSxVQUFFMUIsRUFBUyxnQkFBRWEsRUFBZSxLQUFFTCxHQUFTeUIsRUFHM0NqQyxHQUE0QixHQUFmZ0MsRUFBR2hDLFVBQ2hCLE1BQU1pbEIsRUFBV2pqQixFQUFHOU4sT0FBUyxFQUFBbUgsVUFDdkI2cEIsRUFBV2pqQixFQUFHL04sT0FBUyxFQUFBbUgsVUFDN0IsSUFBSXlVLEVBRUoxTixHQUFtQitpQixHQUFjL2lCLEdBQWlCLElBQzdDME4sRUFBWW9WLEVBQVNFLHNCQUN0QnBWLEdBQWdCRixFQUFXMU4sRUFBaUJILEVBQUlELEdBRWhEeEIsR0FDQXNTLEdBQW9CN1EsRUFBSUQsRUFBSUksRUFBaUIsZ0JBRWpEQSxHQUFtQitpQixHQUFjL2lCLEdBQWlCLEdBQ0huSyxJQUUzQytILEVBQVksRUFDWndDLEdBQVksRUFDWjNCLEVBQWtCLE1BRXRCLE1BQU13a0IsRUFBaUIvaUIsR0FBcUIsa0JBQVpMLEVBQUdsYixLQVduQyxHQVZJOFosR0FDQXlrQixFQUFtQnRqQixFQUFHbkIsZ0JBQWlCQSxFQUFpQmEsRUFBSVUsRUFBaUJDLEVBQWdCZ2pCLEVBQWdCOWlCLEdBQzlESCxHQUFtQkEsRUFBZ0JyYixLQUFLdytCLFNBQ25GQyxHQUF1QnhqQixFQUFJQyxJQUd6Qk8sR0FFTmlqQixFQUFjempCLEVBQUlDLEVBQUlQLEVBQUksS0FBTVUsRUFBaUJDLEVBQWdCZ2pCLEVBQWdCOWlCLEdBQWMsR0FFL0Z2QyxFQUFZLEVBQUcsQ0FLZixHQUFnQixHQUFaQSxFQUVBMGxCLEVBQVdoa0IsRUFBSU8sRUFBSWdqQixFQUFVQyxFQUFVOWlCLEVBQWlCQyxFQUFnQkMsUUFxQnhFLEdBaEJnQixFQUFadEMsR0FDSWlsQixFQUFTVSxRQUFVVCxFQUFTUyxPQUM1QnpDLEVBQWN4aEIsRUFBSSxRQUFTLEtBQU13akIsRUFBU1MsTUFBT3JqQixHQUt6QyxFQUFadEMsR0FDQWtqQixFQUFjeGhCLEVBQUksUUFBU3VqQixFQUFTVyxNQUFPVixFQUFTVSxNQUFPdGpCLEdBUS9DLEVBQVp0QyxFQUFzQyxDQUV0QyxNQUFNNmxCLEVBQWdCNWpCLEVBQUc2akIsYUFDekIsSUFBSyxJQUFJanBDLEVBQUksRUFBR0EsRUFBSWdwQyxFQUFjem9DLE9BQVFQLElBQUssQ0FDM0MsTUFBTW1LLEVBQU02K0IsRUFBY2hwQyxHQUNwQmloQixFQUFPbW5CLEVBQVNqK0IsR0FDaEJpRyxFQUFPaTRCLEVBQVNsK0IsR0FFbEJpRyxJQUFTNlEsR0FBZ0IsVUFBUjlXLEdBQ2pCazhCLEVBQWN4aEIsRUFBSTFhLEVBQUs4VyxFQUFNN1EsRUFBTXFWLEVBQU9OLEVBQUdwQixTQUFVd0IsRUFBaUJDLEVBQWdCeWlCLEdBRWhHLENBQ0osQ0FJWSxFQUFaOWtCLEdBQ0lnQyxFQUFHcEIsV0FBYXFCLEVBQUdyQixVQUNuQjZpQixFQUFtQi9oQixFQUFJTyxFQUFHckIsU0FHdEMsTUFDVTRCLEdBQWdDLE1BQW5CM0IsR0FFbkI2a0IsRUFBV2hrQixFQUFJTyxFQUFJZ2pCLEVBQVVDLEVBQVU5aUIsRUFBaUJDLEVBQWdCQyxLQUV2RXdOLEVBQVlvVixFQUFTYSxpQkFBbUJ2bEIsSUFDekMrSCxJQUFzQixLQUNsQnVILEdBQWFFLEdBQWdCRixFQUFXMU4sRUFBaUJILEVBQUlELEdBQzdEeEIsR0FBUXNTLEdBQW9CN1EsRUFBSUQsRUFBSUksRUFBaUIsVUFBVSxHQUNoRUMsRUFDUCxFQUdFaWpCLEVBQXFCLENBQUNVLEVBQWFDLEVBQWFDLEVBQW1COWpCLEVBQWlCQyxFQUFnQkMsRUFBT0MsS0FDN0csSUFBSyxJQUFJMWxCLEVBQUksRUFBR0EsRUFBSW9wQyxFQUFZN29DLE9BQVFQLElBQUssQ0FDekMsTUFBTXNwQyxFQUFXSCxFQUFZbnBDLEdBQ3ZCdXBDLEVBQVdILEVBQVlwcEMsR0FFdkJxbEIsRUFHTmlrQixFQUFTemtCLEtBR0p5a0IsRUFBU3AvQixPQUFTc21CLEtBR2R4SixHQUFnQnNpQixFQUFVQyxJQUVOLEdBQXJCRCxFQUFTNW1CLFdBQ1hta0IsRUFBZXlDLEVBQVN6a0IsSUFHdEJ3a0IsRUFDUnhqQixFQUFNeWpCLEVBQVVDLEVBQVVsa0IsRUFBVyxLQUFNRSxFQUFpQkMsRUFBZ0JDLEVBQU9DLEdBQWMsRUFDckcsR0FFRW1qQixFQUFhLENBQUNoa0IsRUFBSS9PLEVBQU9zeUIsRUFBVUMsRUFBVTlpQixFQUFpQkMsRUFBZ0JDLEtBQ2hGLEdBQUkyaUIsSUFBYUMsRUFBVSxDQUN2QixHQUFJRCxJQUFhLEVBQUE1cEIsVUFDYixJQUFLLE1BQU1yVSxLQUFPaStCLEdBQ1QsSUFBQXpMLGdCQUFleHlCLElBQVVBLEtBQU9rK0IsR0FDakNoQyxFQUFjeGhCLEVBQUkxYSxFQUFLaStCLEVBQVNqK0IsR0FBTSxLQUFNc2IsRUFBTzNQLEVBQU1pTyxTQUFVd0IsRUFBaUJDLEVBQWdCeWlCLElBSWhILElBQUssTUFBTTk5QixLQUFPaytCLEVBQVUsQ0FFeEIsSUFBSSxJQUFBMUwsZ0JBQWV4eUIsR0FDZixTQUNKLE1BQU1pRyxFQUFPaTRCLEVBQVNsK0IsR0FDaEI4VyxFQUFPbW5CLEVBQVNqK0IsR0FFbEJpRyxJQUFTNlEsR0FBZ0IsVUFBUjlXLEdBQ2pCazhCLEVBQWN4aEIsRUFBSTFhLEVBQUs4VyxFQUFNN1EsRUFBTXFWLEVBQU8zUCxFQUFNaU8sU0FBVXdCLEVBQWlCQyxFQUFnQnlpQixHQUVuRyxDQUNJLFVBQVdJLEdBQ1hoQyxFQUFjeGhCLEVBQUksUUFBU3VqQixFQUFTL25DLE1BQU9nb0MsRUFBU2hvQyxNQUU1RCxHQUVFbW5DLEVBQWtCLENBQUNyaUIsRUFBSUMsRUFBSUMsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxLQUN0RyxNQUFNNmpCLEVBQXVCcGtCLEVBQUdQLEdBQUtNLEVBQUtBLEVBQUdOLEdBQUswaEIsRUFBZSxJQUMzRGtELEVBQXFCcmtCLEVBQUdFLE9BQVNILEVBQUtBLEVBQUdHLE9BQVNpaEIsRUFBZSxJQUN2RSxJQUFJLFVBQUVwakIsRUFBUyxnQkFBRWEsRUFBaUIwQixhQUFjb2YsR0FBeUIxZixHQUdwRWhLLEdBQTZCLEtBQVorSCxLQUVsQkEsRUFBWSxFQUNad0MsR0FBWSxFQUNaM0IsRUFBa0IsTUFHbEI4Z0IsSUFDQXBmLEVBQWVBLEVBQ1RBLEVBQWEvakIsT0FBT21qQyxHQUNwQkEsR0FFQSxNQUFOM2YsR0FDQWdoQixFQUFXcUQsRUFBcUJua0IsRUFBV0MsR0FDM0M2Z0IsRUFBV3NELEVBQW1CcGtCLEVBQVdDLEdBSXpDMGlCLEVBQWM1aUIsRUFBR3JCLFNBQVVzQixFQUFXb2tCLEVBQW1CbGtCLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsSUFHM0d4QyxFQUFZLEdBQ0EsR0FBWkEsR0FDQWEsR0FHQW1CLEVBQUduQixpQkFHSHlrQixFQUFtQnRqQixFQUFHbkIsZ0JBQWlCQSxFQUFpQnFCLEVBQVdFLEVBQWlCQyxFQUFnQkMsRUFBT0MsR0FDNURILEdBQW1CQSxFQUFnQnJiLEtBQUt3K0IsUUFDbkZDLEdBQXVCeGpCLEVBQUlDLElBT3JCLE1BQVZBLEVBQUdqYixLQUNFb2IsR0FBbUJILElBQU9HLEVBQWdCVCxVQUMzQzZqQixHQUF1QnhqQixFQUFJQyxHQUFJLElBUW5Dd2pCLEVBQWN6akIsRUFBSUMsRUFBSUMsRUFBV29rQixFQUFtQmxrQixFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEVBRWxILEVBRUUraEIsRUFBbUIsQ0FBQ3ZpQixFQUFJQyxFQUFJQyxFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEtBQ3ZHUCxFQUFHTSxhQUFlQSxFQUNSLE1BQU5QLEVBQ21CLElBQWZDLEVBQUcxQyxVQUNINkMsRUFBZ0IvRCxJQUFJc1IsU0FBUzFOLEVBQUlDLEVBQVdDLEVBQVFHLEVBQU9FLEdBRzNEcWQsRUFBZTVkLEVBQUlDLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0UsR0FJbEYrakIsRUFBZ0J2a0IsRUFBSUMsRUFBSU8sRUFDNUIsRUFFRXFkLEVBQWlCLENBQUMyRyxFQUFjdGtCLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0UsS0FDN0YsTUFBTTNQLEVBQVkyekIsRUFBYTF6QixVQUFZMnpCLEdBQXdCRCxFQUFjcGtCLEVBQWlCQyxHQXdCbEcsR0F2QitDeFAsRUFBUzlMLEtBQUt3K0IsU0F6N0pyRSxTQUFxQjF5QixHQUNqQixNQUFNcFMsRUFBS29TLEVBQVM5TCxLQUFLdytCLFFBQ3pCLElBQUk5c0IsRUFBUzVQLEVBQUk3RyxJQUFJdkIsR0FDaEJnWSxJQUNESixFQUFhNVgsRUFBSW9TLEVBQVM5TCxNQUMxQjBSLEVBQVM1UCxFQUFJN0csSUFBSXZCLElBRXJCZ1ksRUFBT0csVUFBVXJSLElBQUlzTCxFQUN6QixDQWs3Slk2ekIsQ0FBWTd6QixHQUdaSCxFQUFtQjh6QixHQUNuQnpFLEdBQWFsdkIsRUFBVSxTQUd2Qm9hLEdBQVl1WixLQUNaM3pCLEVBQVN3TCxJQUFJOFEsU0FBV3FWLElBS3BCekMsR0FBYWx2QixFQUFVLFFBRTNCOHpCLEdBQWU5ekIsR0FFWHF2QixHQUFXcnZCLEVBQVUsUUFLekJBLEVBQVNnVCxVQUlULEdBSEF4RCxHQUFrQkEsRUFBZW9ELFlBQVk1UyxFQUFVNlMsSUFHbEQ4Z0IsRUFBYTlrQixHQUFJLENBQ2xCLE1BQU13RSxFQUFlclQsRUFBUzhPLFFBQVUvQixHQUFZQyxJQUNwRHFrQixFQUFtQixLQUFNaGUsRUFBYWhFLEVBQVdDLEVBQ3JELE9BR0p1RCxFQUFrQjdTLEVBQVUyekIsRUFBY3RrQixFQUFXQyxFQUFRRSxFQUFnQkMsRUFBT0UsR0FFaEY1UCxJQUNBc3ZCLEdBQVdydkIsRUFBVSxRQUN6QixFQUVFMHpCLEVBQWtCLENBQUN2a0IsRUFBSUMsRUFBSU8sS0FDN0IsTUFBTTNQLEVBQVlvUCxFQUFHblAsVUFBWWtQLEVBQUdsUCxVQUNwQyxHQXgxSVIsU0FBK0JpZ0IsRUFBVzZULEVBQVdwa0IsR0FDakQsTUFBUXRPLE1BQU9vTixFQUFXVixTQUFVaW1CLEVBQVksVUFBRS96QixHQUFjaWdCLEdBQ3hEN2UsTUFBT3FOLEVBQVdYLFNBQVVrbUIsRUFBWSxVQUFFOW1CLEdBQWM0bUIsRUFDMUQ1cEIsRUFBUWxLLEVBQVV3SSxhQUl4QixJQUFnRHVyQixHQUFnQkMsSUFBaUI3dUIsRUFDN0UsT0FBTyxFQUdYLEdBQUkydUIsRUFBVXBtQixNQUFRb21CLEVBQVVsbUIsV0FDNUIsT0FBTyxFQUVYLEtBQUk4QixHQUFheEMsR0FBYSxHQTJCMUIsU0FBSTZtQixJQUFnQkMsR0FDWEEsR0FBaUJBLEVBQWFDLFVBSW5DemxCLElBQWNDLElBR2JELEdBR0FDLEdBR0VGLEdBQWdCQyxFQUFXQyxFQUFXdkUsS0FMaEN1RSxHQW5DYixHQUFnQixLQUFadkIsRUFHQSxPQUFPLEVBRVgsR0FBZ0IsR0FBWkEsRUFDQSxPQUFLc0IsRUFJRUQsR0FBZ0JDLEVBQVdDLEVBQVd2RSxLQUhoQ3VFLEVBS1osR0FBZ0IsRUFBWnZCLEVBQXNDLENBQzNDLE1BQU04bEIsRUFBZWMsRUFBVWQsYUFDL0IsSUFBSyxJQUFJanBDLEVBQUksRUFBR0EsRUFBSWlwQyxFQUFhMW9DLE9BQVFQLElBQUssQ0FDMUMsTUFBTW1LLEVBQU04K0IsRUFBYWpwQyxHQUN6QixHQUFJMGtCLEVBQVV2YSxLQUFTc2EsRUFBVXRhLEtBQzVCd1csR0FBZVIsRUFBT2hXLEdBQ3ZCLE9BQU8sQ0FFZixDQUNKLENBcUJKLE9BQU8sQ0FDWCxDQTh4SVlnZ0MsQ0FBc0JobEIsRUFBSUMsRUFBSU8sR0FBWSxDQUMxQyxHQUFJM1AsRUFBU2dULFdBQ1JoVCxFQUFTbVQsY0FVVixPQU5JdFQsRUFBbUJ1UCxHQUV2QmdsQixFQUF5QnAwQixFQUFVb1AsRUFBSU8sUUFFbkM1UCxJQU1KQyxFQUFTNUYsS0FBT2dWLEVBbHBLaEMsU0FBdUIxTCxHQUNuQixNQUFNMVosRUFBSWtWLEVBQU14VCxRQUFRZ1ksR0FDcEIxWixFQUFJaVosR0FDSi9ELEVBQU15RSxPQUFPM1osRUFBRyxFQUV4QixDQWdwS2dCcXFDLENBQWNyMEIsRUFBU2tHLFFBRXZCbEcsRUFBU2tHLFFBRWpCLE1BR0lrSixFQUFHUCxHQUFLTSxFQUFHTixHQUNYN08sRUFBU0YsTUFBUXNQLENBQ3JCLEVBRUV5RCxFQUFvQixDQUFDN1MsRUFBVTJ6QixFQUFjdGtCLEVBQVdDLEVBQVFFLEVBQWdCQyxFQUFPRSxLQUN6RixNQW1LTWxlLEVBQVV1TyxFQUFTdk8sT0FBUyxJQUFJLEVBQUFrQixnQkFuS1osS0FDdEIsR0FBS3FOLEVBQVN1VyxVQXlGVCxDQUlELElBRUkwRyxHQUZBLEtBQUU3aUIsRUFBSSxHQUFFazZCLEVBQUUsRUFBRUMsRUFBQyxPQUFFMWpDLEVBQU0sTUFBRWlQLEdBQVVFLEVBQ2pDdzBCLEVBQWFwNkIsRUFHYnlGLEVBQW1CekYsR0FBUTRGLEVBQVNGLE9BR3hDd3lCLEdBQWN0eUIsR0FBVSxHQUNwQjVGLEdBQ0FBLEVBQUt5VSxHQUFLL08sRUFBTStPLEdBQ2hCdWxCLEVBQXlCcDBCLEVBQVU1RixFQUFNdVYsSUFHekN2VixFQUFPMEYsRUFHUHcwQixJQUNBLElBQUF0WCxnQkFBZXNYLElBR2RyWCxFQUFZN2lCLEVBQUtpSCxPQUFTakgsRUFBS2lILE1BQU1reEIsc0JBQ3RDcFYsR0FBZ0JGLEVBQVdwc0IsRUFBUXVKLEVBQU0wRixHQUU3Q3d5QixHQUFjdHlCLEdBQVUsR0FHcEJrdkIsR0FBYWx2QixFQUFVLFVBRTNCLE1BQU15MEIsRUFBV3ZvQixHQUFvQmxNLEdBRWpDcXZCLEdBQVdydkIsRUFBVSxVQUV6QixNQUFNMDBCLEVBQVcxMEIsRUFBUzhPLFFBQzFCOU8sRUFBUzhPLFFBQVUybEIsRUFFZnZGLEdBQWFsdkIsRUFBVSxTQUUzQjZQLEVBQU02a0IsRUFBVUQsRUFFaEI1RCxFQUFlNkQsRUFBUzdsQixJQUV4QnNpQixHQUFnQnVELEdBQVcxMEIsRUFBVXdQLEVBQWdCQyxHQUVqRDRmLEdBQVdydkIsRUFBVSxTQUV6QjVGLEVBQUt5VSxHQUFLNGxCLEVBQVM1bEIsR0FDQSxPQUFmMmxCLEdBSUE1bEIsR0FBZ0I1TyxFQUFVeTBCLEVBQVM1bEIsSUFHbkMwbEIsR0FDQTdlLEdBQXNCNmUsRUFBRy9rQixJQUd4QnlOLEVBQVk3aUIsRUFBS2lILE9BQVNqSCxFQUFLaUgsTUFBTTZ4QixpQkFDdEN4ZCxJQUFzQixJQUFNeUgsR0FBZ0JGLEVBQVdwc0IsRUFBUXVKLEVBQU0wRixJQUFRMFAsR0FHN0UzSCxFQUF5QjdILEdBR3pCRCxHQUVSLEtBL0p5QixDQUNyQixJQUFJa2QsRUFDSixNQUFNLEdBQUVwTyxFQUFFLE1BQUV4TixHQUFVc3lCLEdBQ2hCLEdBQUVnQixFQUFFLEVBQUUxaUIsRUFBQyxPQUFFcGhCLEdBQVdtUCxFQUNwQjQwQixFQUFzQmxhLEdBQWVpWixHQVkzQyxHQVhBckIsR0FBY3R5QixHQUFVLEdBRXBCMjBCLElBQ0EsSUFBQTNYLGdCQUFlMlgsSUFHZEMsSUFDQTNYLEVBQVk1YixHQUFTQSxFQUFNb3RCLHFCQUM1QnRSLEdBQWdCRixFQUFXcHNCLEVBQVE4aUMsR0FFdkNyQixHQUFjdHlCLEdBQVUsR0FDcEI2TyxHQUFNMEMsR0FBYSxDQUVuQixNQUFNc2pCLEVBQWlCLEtBRWYzRixHQUFhbHZCLEVBQVUsVUFFM0JBLEVBQVM4TyxRQUFVNUMsR0FBb0JsTSxHQUVuQ3F2QixHQUFXcnZCLEVBQVUsVUFHckJrdkIsR0FBYWx2QixFQUFVLFdBRTNCdVIsR0FBWTFDLEVBQUk3TyxFQUFTOE8sUUFBUzlPLEVBQVV3UCxFQUFnQixNQUV4RDZmLEdBQVdydkIsRUFBVSxVQUN6QixFQUVBNDBCLEVBQ0FqQixFQUFhei9CLEtBQUt3UyxnQkFBZ0IvRyxNQUtsQyxLQUFPSyxFQUFTdUksYUFBZXNzQixNQUcvQkEsR0FFUixLQUNLLENBRUczRixHQUFhbHZCLEVBQVUsVUFFM0IsTUFBTThPLEVBQVc5TyxFQUFTOE8sUUFBVTVDLEdBQW9CbE0sR0FFcERxdkIsR0FBV3J2QixFQUFVLFVBR3JCa3ZCLEdBQWFsdkIsRUFBVSxTQUUzQjZQLEVBQU0sS0FBTWYsRUFBU08sRUFBV0MsRUFBUXRQLEVBQVV3UCxFQUFnQkMsR0FFOUQ0ZixHQUFXcnZCLEVBQVUsU0FFekIyekIsRUFBYTlrQixHQUFLQyxFQUFRRCxFQUM5QixDQU1BLEdBSklvRCxHQUNBeUQsR0FBc0J6RCxFQUFHekMsSUFHeEJvbEIsSUFDQTNYLEVBQVk1YixHQUFTQSxFQUFNNmIsZ0JBQWlCLENBQzdDLE1BQU00WCxFQUFxQm5CLEVBQzNCamUsSUFBc0IsSUFBTXlILEdBQWdCRixFQUFXcHNCLEVBQVFpa0MsSUFBcUJ0bEIsRUFDeEYsRUFJNkIsSUFBekJta0IsRUFBYWpuQixXQUNaN2IsR0FDRzZwQixHQUFlN3BCLEVBQU9pUCxRQUNHLElBQXpCalAsRUFBT2lQLE1BQU00TSxZQUNqQjFNLEVBQVNyVyxHQUFLK3JCLEdBQXNCMVYsRUFBU3JXLEVBQUc2bEIsR0FFcER4UCxFQUFTdVcsV0FBWSxFQUVqQjVPLEVBQXVCM0gsR0FHM0IyekIsRUFBZXRrQixFQUFZQyxFQUFTLElBQ3hDLENBdUVBLElBR29FLElBQU03TCxFQUFTeUMsSUFBU2xHLEVBQVN0TyxPQUVuR3dVLEVBQVVsRyxFQUFTa0csT0FBUyxJQUFNelUsRUFBT1YsTUFDL0NtVixFQUFPdFksR0FBS29TLEVBQVNnSSxJQUdyQnNxQixHQUFjdHlCLEdBQVUsR0FFcEJ2TyxFQUFPa0QsUUFBVXFMLEVBQVMrMEIsSUFDcEJ0bUMsSUFBSyxJQUFBdXVCLGdCQUFlaGQsRUFBUyswQixJQUFLdG1DLFFBQ2xDLEVBQ05nRCxFQUFPaUUsVUFBWXNLLEVBQVNnMUIsSUFDdEJ2bUMsSUFBSyxJQUFBdXVCLGdCQUFlaGQsRUFBU2cxQixJQUFLdm1DLFFBQ2xDLEVBQ055WCxFQUFPakIsY0FBZ0JqRixFQUUzQmtHLEdBQVEsRUFFTmt1QixFQUEyQixDQUFDcDBCLEVBQVUrekIsRUFBV3BrQixLQUNuRG9rQixFQUFVOXpCLFVBQVlELEVBQ3RCLE1BQU15TyxFQUFZek8sRUFBU0YsTUFBTXVCLE1BQ2pDckIsRUFBU0YsTUFBUWkwQixFQUNqQi96QixFQUFTNUYsS0FBTyxLQWw3RHhCLFNBQXFCNEYsRUFBVW9ZLEVBQVU2YyxFQUFjdGxCLEdBQ25ELE1BQU0sTUFBRXRPLEVBQUssTUFBRWlMLEVBQU94TSxPQUFPLFVBQUVxTixJQUFnQm5OLEVBQ3pDNm1CLEdBQWtCLElBQUFud0IsT0FBTTJLLElBQ3ZCOU4sR0FBV3lNLEVBQVMwSSxhQUMzQixJQUFJZ2UsR0FBa0IsRUFDdEIsR0FaSixTQUF3QjFtQixHQUNwQixLQUFPQSxHQUFVLENBQ2IsR0FBSUEsRUFBUzlMLEtBQUt3K0IsUUFDZCxPQUFPLEVBQ1gxeUIsRUFBV0EsRUFBU25QLE1BQ3hCLENBQ0osQ0FVaURxa0MsQ0FBZWwxQixNQUN2RDJQLEdBQWF4QyxFQUFZLElBQ1osR0FBWkEsRUFvQ0QsQ0FPRCxJQUFJZ29CLEVBTEE1TyxHQUFhdm1CLEVBQVVvWSxFQUFVL1csRUFBT2lMLEtBQ3hDb2EsR0FBa0IsR0FLdEIsSUFBSyxNQUFNdnlCLEtBQU8weUIsRUFDVHpPLEtBRUMsSUFBQWhoQixRQUFPZ2hCLEVBQVVqa0IsS0FHYmdoQyxHQUFXLElBQUE1ckIsV0FBVXBWLE1BQVVBLElBQVEsSUFBQWlELFFBQU9naEIsRUFBVStjLE1BQzFENWhDLEdBQ0kwaEMsUUFFdUJqbEMsSUFBdEJpbEMsRUFBYTlnQyxTQUVpQm5FLElBQTNCaWxDLEVBQWFFLEtBQ2pCOXpCLEVBQU1sTixHQUFPNHlCLEdBQWlCeHpCLEVBQVNzekIsRUFBaUIxeUIsT0FBS25FLEVBQVdnUSxHQUFVLFdBSS9FcUIsRUFBTWxOLElBTXpCLEdBQUltWSxJQUFVdWEsRUFDVixJQUFLLE1BQU0xeUIsS0FBT21ZLEVBQ1Q4TCxJQUNDLElBQUFoaEIsUUFBT2doQixFQUFVamtCLFlBRVptWSxFQUFNblksR0FDYnV5QixHQUFrQixFQUlsQyxNQTVFSSxHQUFnQixFQUFadlosRUFBc0MsQ0FHdEMsTUFBTTZsQixFQUFnQmh6QixFQUFTRixNQUFNbXpCLGFBQ3JDLElBQUssSUFBSWpwQyxFQUFJLEVBQUdBLEVBQUlncEMsRUFBY3pvQyxPQUFRUCxJQUFLLENBQzNDLElBQUltSyxFQUFNNitCLEVBQWNocEMsR0FFeEIsR0FBSTJnQixHQUFlM0ssRUFBU3lJLGFBQWN0VSxHQUN0QyxTQUdKLE1BQU05SixFQUFRK3RCLEVBQVNqa0IsR0FDdkIsR0FBSVosRUFHQSxJQUFJLElBQUE2RCxRQUFPa1YsRUFBT25ZLEdBQ1Y5SixJQUFVaWlCLEVBQU1uWSxLQUNoQm1ZLEVBQU1uWSxHQUFPOUosRUFDYnE4QixHQUFrQixPQUdyQixDQUNELE1BQU0wTyxHQUFlLElBQUExckIsVUFBU3ZWLEdBQzlCa04sRUFBTSt6QixHQUFnQnJPLEdBQWlCeHpCLEVBQVNzekIsRUFBaUJ1TyxFQUFjL3FDLEVBQU8yVixHQUFVLEVBQ3BHLE1BR0kzVixJQUFVaWlCLEVBQU1uWSxLQUNoQm1ZLEVBQU1uWSxHQUFPOUosRUFDYnE4QixHQUFrQixFQUc5QixDQUNKLENBNkNBQSxJQUNBLElBQUE5eEIsU0FBUW9MLEVBQVUsTUFBZ0MsVUFHbERvb0IsR0FBY2hRLEdBQVksQ0FBQyxFQUFHL1csRUFBT3JCLEVBRTdDLENBbTFEUXExQixDQUFZcjFCLEVBQVUrekIsRUFBVTF5QixNQUFPb04sRUFBV2tCLEdBcjlDdEMsRUFBQzNQLEVBQVUrTixFQUFVNEIsS0FDckMsTUFBTSxNQUFFN1AsRUFBSyxNQUFFdU0sR0FBVXJNLEVBQ3pCLElBQUlzMUIsR0FBb0IsRUFDcEJDLEVBQTJCLEVBQUEvc0IsVUFDL0IsR0FBc0IsR0FBbEIxSSxFQUFNNE0sVUFBZ0QsQ0FDdEQsTUFBTXhZLEVBQU82WixFQUFTK1QsRUFDbEI1dEIsRUFFK0NrUixHQUczQyxJQUFBM1IsUUFBTzRZLEVBQU8wQixHQUVUNEIsR0FBc0IsSUFBVHpiLEVBR2xCb2hDLEdBQW9CLElBS3BCLElBQUE3aEMsUUFBTzRZLEVBQU8wQixHQUtUNEIsR0FBc0IsSUFBVHpiLFVBQ1BtWSxFQUFNeVYsSUFLckJ3VCxHQUFxQnZuQixFQUFTbW1CLFFBQzlCdkssR0FBcUI1YixFQUFVMUIsSUFFbkNrcEIsRUFBMkJ4bkIsQ0FDL0IsTUFDU0EsSUFFTCtiLEdBQW9COXBCLEVBQVUrTixHQUM5QnduQixFQUEyQixDQUFFempCLFFBQVMsSUFHMUMsR0FBSXdqQixFQUNBLElBQUssTUFBTW5oQyxLQUFPa1ksRUFDVGtkLEdBQWNwMUIsSUFBVUEsS0FBT29oQyxVQUN6QmxwQixFQUFNbFksRUFHekIsRUFxNkNJcWhDLENBQVl4MUIsRUFBVSt6QixFQUFVaG1CLFNBQVU0QixJQUMxQyxJQUFBN2IsaUJBR0F1USxLQUNBLElBQUFyUSxnQkFBZSxFQUViNCtCLEVBQWdCLENBQUN6akIsRUFBSUMsRUFBSUMsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUFZLEtBQ2hILE1BQU04bEIsRUFBS3RtQixHQUFNQSxFQUFHcEIsU0FDZDJuQixFQUFnQnZtQixFQUFLQSxFQUFHekMsVUFBWSxFQUNwQ2lwQixFQUFLdm1CLEVBQUdyQixVQUNSLFVBQUVaLEVBQVMsVUFBRVQsR0FBYzBDLEVBRWpDLEdBQUlqQyxFQUFZLEVBQUcsQ0FDZixHQUFnQixJQUFaQSxFQUlBLFlBREF5b0IsR0FBbUJILEVBQUlFLEVBQUl0bUIsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUduRyxHQUFnQixJQUFaeEMsRUFHTCxZQURBMG9CLEVBQXFCSixFQUFJRSxFQUFJdG1CLEVBQVdDLEVBQVFDLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsRUFHOUcsQ0FFZ0IsRUFBWmpELEdBRW9CLEdBQWhCZ3BCLEdBQ0F6RCxHQUFnQndELEVBQUlsbUIsRUFBaUJDLEdBRXJDbW1CLElBQU9GLEdBQ1A3RSxFQUFtQnZoQixFQUFXc21CLElBSWQsR0FBaEJELEVBRWdCLEdBQVpocEIsRUFFQWtwQixHQUFtQkgsRUFBSUUsRUFBSXRtQixFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEdBSXBHc2lCLEdBQWdCd0QsRUFBSWxtQixFQUFpQkMsR0FBZ0IsSUFNckMsRUFBaEJrbUIsR0FDQTlFLEVBQW1CdmhCLEVBQVcsSUFHbEIsR0FBWjNDLEdBQ0FzbEIsRUFBYzJELEVBQUl0bUIsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUd2RyxFQUVFa21CLEVBQXVCLENBQUNKLEVBQUlFLEVBQUl0bUIsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxLQUMzRzhsQixFQUFLQSxHQUFNLEVBQUFsTyxVQUNYb08sRUFBS0EsR0FBTSxFQUFBcE8sVUFDWCxNQUFNdU8sRUFBWUwsRUFBR2xyQyxPQUNmd3JDLEVBQVlKLEVBQUdwckMsT0FDZnlyQyxFQUFlQyxLQUFLQyxJQUFJSixFQUFXQyxHQUN6QyxJQUFJL3JDLEVBQ0osSUFBS0EsRUFBSSxFQUFHQSxFQUFJZ3NDLEVBQWNoc0MsSUFBSyxDQUMvQixNQUFNbXNDLEVBQWFSLEVBQUczckMsR0FBSzJsQixFQUNyQndpQixHQUFld0QsRUFBRzNyQyxJQUNsQjRpQixHQUFlK29CLEVBQUczckMsSUFDeEI2bEIsRUFBTTRsQixFQUFHenJDLEdBQUltc0MsRUFBVzltQixFQUFXLEtBQU1FLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsRUFDbkcsQ0FDSW1tQixFQUFZQyxFQUVaOUQsR0FBZ0J3RCxFQUFJbG1CLEVBQWlCQyxHQUFnQixHQUFNLEVBQU93bUIsR0FJbEVoRSxFQUFjMkQsRUFBSXRtQixFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEVBQVdxbUIsRUFDMUcsRUFHRUosR0FBcUIsQ0FBQ0gsRUFBSUUsRUFBSXRtQixFQUFXK21CLEVBQWM3bUIsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxLQUMvRyxJQUFJM2xCLEVBQUksRUFDUixNQUFNcXNDLEVBQUtWLEVBQUdwckMsT0FDZCxJQUFJK3JDLEVBQUtiLEVBQUdsckMsT0FBUyxFQUNqQmdzQyxFQUFLRixFQUFLLEVBSWQsS0FBT3JzQyxHQUFLc3NDLEdBQU10c0MsR0FBS3VzQyxHQUFJLENBQ3ZCLE1BQU1wbkIsRUFBS3NtQixFQUFHenJDLEdBQ1JvbEIsRUFBTXVtQixFQUFHM3JDLEdBQUsybEIsRUFDZHdpQixHQUFld0QsRUFBRzNyQyxJQUNsQjRpQixHQUFlK29CLEVBQUczckMsSUFDeEIsSUFBSWduQixHQUFnQjdCLEVBQUlDLEdBSXBCLE1BSEFTLEVBQU1WLEVBQUlDLEVBQUlDLEVBQVcsS0FBTUUsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUt6RjNsQixHQUNKLENBSUEsS0FBT0EsR0FBS3NzQyxHQUFNdHNDLEdBQUt1c0MsR0FBSSxDQUN2QixNQUFNcG5CLEVBQUtzbUIsRUFBR2EsR0FDUmxuQixFQUFNdW1CLEVBQUdZLEdBQU01bUIsRUFDZndpQixHQUFld0QsRUFBR1ksSUFDbEIzcEIsR0FBZStvQixFQUFHWSxJQUN4QixJQUFJdmxCLEdBQWdCN0IsRUFBSUMsR0FJcEIsTUFIQVMsRUFBTVYsRUFBSUMsRUFBSUMsRUFBVyxLQUFNRSxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEdBS3pGMm1CLElBQ0FDLEdBQ0osQ0FRQSxHQUFJdnNDLEVBQUlzc0MsR0FDSixHQUFJdHNDLEdBQUt1c0MsRUFBSSxDQUNULE1BQU1DLEVBQVVELEVBQUssRUFDZmpuQixFQUFTa25CLEVBQVVILEVBQUtWLEVBQUdhLEdBQVMzbkIsR0FBS3VuQixFQUMvQyxLQUFPcHNDLEdBQUt1c0MsR0FDUjFtQixFQUFNLEtBQU84bEIsRUFBRzNyQyxHQUFLMmxCLEVBQ2Z3aUIsR0FBZXdELEVBQUczckMsSUFDbEI0aUIsR0FBZStvQixFQUFHM3JDLElBQU1xbEIsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUN2RzNsQixHQUVSLE9BU0MsR0FBSUEsRUFBSXVzQyxFQUNULEtBQU92c0MsR0FBS3NzQyxHQUNSNWxCLEdBQVEra0IsRUFBR3pyQyxHQUFJdWxCLEVBQWlCQyxHQUFnQixHQUNoRHhsQixRQU9ILENBQ0QsTUFBTXlzQyxFQUFLenNDLEVBQ0wwc0MsRUFBSzFzQyxFQUVMMnNDLEVBQW1CLElBQUlyaUMsSUFDN0IsSUFBS3RLLEVBQUkwc0MsRUFBSTFzQyxHQUFLdXNDLEVBQUl2c0MsSUFBSyxDQUN2QixNQUFNbXNDLEVBQWFSLEVBQUczckMsR0FBSzJsQixFQUNyQndpQixHQUFld0QsRUFBRzNyQyxJQUNsQjRpQixHQUFlK29CLEVBQUczckMsSUFDSCxNQUFqQm1zQyxFQUFVaGlDLE1BQ3FDd2lDLEVBQWlCbGlDLElBQUkwaEMsRUFBVWhpQyxNQUMxRS9ELEVBQUssc0NBQXVDN0IsS0FBS08sVUFBVXFuQyxFQUFVaGlDLEtBQU0sOEJBRS9Fd2lDLEVBQWlCdGlDLElBQUk4aEMsRUFBVWhpQyxJQUFLbkssR0FFNUMsQ0FHQSxJQUFJQyxFQUNBMnNDLEVBQVUsRUFDZCxNQUFNQyxFQUFjTixFQUFLRyxFQUFLLEVBQzlCLElBQUlJLEdBQVEsRUFFUkMsRUFBbUIsRUFNdkIsTUFBTUMsRUFBd0IsSUFBSXhzQyxNQUFNcXNDLEdBQ3hDLElBQUs3c0MsRUFBSSxFQUFHQSxFQUFJNnNDLEVBQWE3c0MsSUFDekJndEMsRUFBc0JodEMsR0FBSyxFQUMvQixJQUFLQSxFQUFJeXNDLEVBQUl6c0MsR0FBS3NzQyxFQUFJdHNDLElBQUssQ0FDdkIsTUFBTWl0QyxFQUFZeEIsRUFBR3pyQyxHQUNyQixHQUFJNHNDLEdBQVdDLEVBQWEsQ0FFeEJubUIsR0FBUXVtQixFQUFXMW5CLEVBQWlCQyxHQUFnQixHQUNwRCxRQUNKLENBQ0EsSUFBSTBuQixFQUNKLEdBQXFCLE1BQWpCRCxFQUFVOWlDLElBQ1YraUMsRUFBV1AsRUFBaUJ4bkMsSUFBSThuQyxFQUFVOWlDLFVBSTFDLElBQUtsSyxFQUFJeXNDLEVBQUl6c0MsR0FBS3NzQyxFQUFJdHNDLElBQ2xCLEdBQXNDLElBQWxDK3NDLEVBQXNCL3NDLEVBQUl5c0MsSUFDMUIxbEIsR0FBZ0JpbUIsRUFBV3RCLEVBQUcxckMsSUFBSyxDQUNuQ2l0QyxFQUFXanRDLEVBQ1gsS0FDSixNQUdTK0YsSUFBYmtuQyxFQUNBeG1CLEdBQVF1bUIsRUFBVzFuQixFQUFpQkMsR0FBZ0IsSUFHcER3bkIsRUFBc0JFLEVBQVdSLEdBQU0xc0MsRUFBSSxFQUN2Q2t0QyxHQUFZSCxFQUNaQSxFQUFtQkcsRUFHbkJKLEdBQVEsRUFFWmpuQixFQUFNb25CLEVBQVd0QixFQUFHdUIsR0FBVzduQixFQUFXLEtBQU1FLEVBQWlCQyxFQUFnQkMsRUFBT0MsRUFBY0MsR0FDdEdpbkIsSUFFUixDQUdBLE1BQU1PLEVBQTZCTCxFQThVL0MsU0FBcUJyZ0MsR0FDakIsTUFBTStNLEVBQUkvTSxFQUFJZ0wsUUFDUjFKLEVBQVMsQ0FBQyxHQUNoQixJQUFJL04sRUFBR0MsRUFBR3NxQyxFQUFHNzdCLEVBQUc3TyxFQUNoQixNQUFNdXRDLEVBQU0zZ0MsRUFBSWxNLE9BQ2hCLElBQUtQLEVBQUksRUFBR0EsRUFBSW90QyxFQUFLcHRDLElBQUssQ0FDdEIsTUFBTXF0QyxFQUFPNWdDLEVBQUl6TSxHQUNqQixHQUFhLElBQVRxdEMsRUFBWSxDQUVaLEdBREFwdEMsRUFBSThOLEVBQU9BLEVBQU94TixPQUFTLEdBQ3ZCa00sRUFBSXhNLEdBQUtvdEMsRUFBTSxDQUNmN3pCLEVBQUV4WixHQUFLQyxFQUNQOE4sRUFBT2xOLEtBQUtiLEdBQ1osUUFDSixDQUdBLElBRkF1cUMsRUFBSSxFQUNKNzdCLEVBQUlYLEVBQU94TixPQUFTLEVBQ2JncUMsRUFBSTc3QixHQUNQN08sRUFBSzBxQyxFQUFJNzdCLEdBQU0sRUFDWGpDLEVBQUlzQixFQUFPbE8sSUFBTXd0QyxFQUNqQjlDLEVBQUkxcUMsRUFBSSxFQUdSNk8sRUFBSTdPLEVBR1J3dEMsRUFBTzVnQyxFQUFJc0IsRUFBT3c4QixNQUNkQSxFQUFJLElBQ0ovd0IsRUFBRXhaLEdBQUsrTixFQUFPdzhCLEVBQUksSUFFdEJ4OEIsRUFBT3c4QixHQUFLdnFDLEVBRXBCLENBQ0osQ0FHQSxJQUZBdXFDLEVBQUl4OEIsRUFBT3hOLE9BQ1htTyxFQUFJWCxFQUFPdzhCLEVBQUksR0FDUkEsS0FBTSxHQUNUeDhCLEVBQU93OEIsR0FBSzc3QixFQUNaQSxFQUFJOEssRUFBRTlLLEdBRVYsT0FBT1gsQ0FDWCxDQXJYa0J1L0IsQ0FBWU4sR0FDWixFQUFBelAsVUFHTixJQUZBdDlCLEVBQUlrdEMsRUFBMkI1c0MsT0FBUyxFQUVuQ1AsRUFBSTZzQyxFQUFjLEVBQUc3c0MsR0FBSyxFQUFHQSxJQUFLLENBQ25DLE1BQU11dEMsRUFBWWIsRUFBSzFzQyxFQUNqQm1zQyxFQUFZUixFQUFHNEIsR0FDZmpvQixFQUFTaW9CLEVBQVksRUFBSWxCLEVBQUtWLEVBQUc0QixFQUFZLEdBQUcxb0IsR0FBS3VuQixFQUMxQixJQUE3QlksRUFBc0JodEMsR0FFdEI2bEIsRUFBTSxLQUFNc21CLEVBQVc5bUIsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxHQUUzRm1uQixJQUlEN3NDLEVBQUksR0FBS0QsSUFBTW10QyxFQUEyQmx0QyxHQUMxQ2lvQixHQUFLaWtCLEVBQVc5bUIsRUFBV0MsRUFBUSxHQUduQ3JsQixJQUdaLENBQ0osR0FFRWlvQixHQUFPLENBQUNwUyxFQUFPdVAsRUFBV0MsRUFBUWtvQixFQUFVaG9CLEVBQWlCLFFBQy9ELE1BQU0sR0FBRVgsRUFBRSxLQUFFM2EsRUFBSSxXQUFFMlosRUFBVSxTQUFFRSxFQUFRLFVBQUVyQixHQUFjNU0sRUFDdEQsR0FBZ0IsRUFBWjRNLEVBQ0F3RixHQUFLcFMsRUFBTUcsVUFBVTZPLFFBQVNPLEVBQVdDLEVBQVFrb0IsUUFHckQsR0FBZ0IsSUFBWjlxQixFQUNBNU0sRUFBTW1RLFNBQVNpQyxLQUFLN0MsRUFBV0MsRUFBUWtvQixRQUczQyxHQUFnQixHQUFaOXFCLEVBQ0F4WSxFQUFLZ2UsS0FBS3BTLEVBQU91UCxFQUFXQyxFQUFRcWlCLFNBR3hDLEdBQUl6OUIsSUFBU3NtQixHQVFiLEdBQUl0bUIsSUFBU3UzQixHQVFiLEdBSG9DLElBQWIrTCxHQUNQLEVBQVo5cUIsR0FDQW1CLEVBRUEsR0FBaUIsSUFBYjJwQixFQUNBM3BCLEVBQVc2TCxZQUFZN0ssR0FDdkJzaEIsRUFBV3RoQixFQUFJUSxFQUFXQyxHQUMxQm9HLElBQXNCLElBQU03SCxFQUFXK0wsTUFBTS9LLElBQUtXLE9BRWpELENBQ0QsTUFBTSxNQUFFMEssRUFBSyxXQUFFbEIsRUFBVSxXQUFFeEcsR0FBZTNFLEVBQ3BDc0UsRUFBUyxJQUFNZ2UsRUFBV3RoQixFQUFJUSxFQUFXQyxHQUN6Q21vQixFQUFlLEtBQ2pCdmQsRUFBTXJMLEdBQUksS0FDTnNELElBQ0FLLEdBQWNBLEdBQVksR0FDNUIsRUFFRndHLEVBQ0FBLEVBQVduSyxFQUFJc0QsRUFBUXNsQixHQUd2QkEsR0FFUixNQUdBdEgsRUFBV3RoQixFQUFJUSxFQUFXQyxPQXY1QlgsR0FBR1QsS0FBSVMsVUFBVUQsRUFBVzhkLEtBQy9DLElBQUkveUIsRUFDSixLQUFPeVUsR0FBTUEsSUFBT1MsR0FDaEJsVixFQUFPMDJCLEVBQWdCamlCLEdBQ3ZCc2hCLEVBQVd0aEIsRUFBSVEsRUFBVzhkLEdBQzFCdGUsRUFBS3pVLEVBRVQrMUIsRUFBVzdnQixFQUFRRCxFQUFXOGQsRUFBWSxFQWkzQnRDdUssQ0FBZTUzQixFQUFPdVAsRUFBV0MsT0FUckMsQ0FDSTZnQixFQUFXdGhCLEVBQUlRLEVBQVdDLEdBQzFCLElBQUssSUFBSXRsQixFQUFJLEVBQUdBLEVBQUkrakIsRUFBU3hqQixPQUFRUCxJQUNqQ2tvQixHQUFLbkUsRUFBUy9qQixHQUFJcWxCLEVBQVdDLEVBQVFrb0IsR0FFekNySCxFQUFXcndCLEVBQU13UCxPQUFRRCxFQUFXQyxFQUV4QyxDQWtDQSxFQUVFb0IsR0FBVSxDQUFDNVEsRUFBT3lQLEVBQWlCQyxFQUFnQjhELEdBQVcsRUFBTzNELEdBQVksS0FDbkYsTUFBTSxLQUFFemIsRUFBSSxNQUFFbU4sRUFBSyxJQUFFbEYsRUFBRyxTQUFFNFIsRUFBUSxnQkFBRUMsRUFBZSxVQUFFdEIsRUFBUyxVQUFFUyxFQUFTLEtBQUVRLEdBQVM3TixFQUtwRixHQUhXLE1BQVAzRCxHQUNBeXZCLEdBQU96dkIsRUFBSyxLQUFNcVQsRUFBZ0IxUCxHQUFPLEdBRTdCLElBQVo0TSxFQUVBLFlBREE2QyxFQUFnQi9ELElBQUk0UixXQUFXdGQsR0FHbkMsTUFBTTYzQixFQUErQixFQUFaanJCLEdBQTBDaUIsRUFDN0RpcUIsR0FBeUJsZCxHQUFlNWEsR0FDOUMsSUFBSW1kLEVBS0osR0FKSTJhLElBQ0MzYSxFQUFZNWIsR0FBU0EsRUFBTXcyQix1QkFDNUIxYSxHQUFnQkYsRUFBVzFOLEVBQWlCelAsR0FFaEMsRUFBWjRNLEVBQ0FvckIsR0FBaUJoNEIsRUFBTUcsVUFBV3VQLEVBQWdCOEQsT0FFakQsQ0FDRCxHQUFnQixJQUFaNUcsRUFFQSxZQURBNU0sRUFBTW1RLFNBQVNTLFFBQVFsQixFQUFnQjhELEdBR3ZDcWtCLEdBQ0ExWCxHQUFvQm5nQixFQUFPLEtBQU15UCxFQUFpQixpQkFFdEMsR0FBWjdDLEVBQ0E1TSxFQUFNNUwsS0FBS2llLE9BQU9yUyxFQUFPeVAsRUFBaUJDLEVBQWdCRyxFQUFXZ2lCLEdBQVdyZSxHQUUzRXRGLElBRUo5WixJQUFTc21CLElBQ0xyTixFQUFZLEdBQWlCLEdBQVpBLEdBRXRCOGtCLEdBQWdCamtCLEVBQWlCdUIsRUFBaUJDLEdBQWdCLEdBQU8sSUFFbkV0YixJQUFTc21CLElBRVgsSUFESnJOLElBRUV3QyxHQUF5QixHQUFaakQsSUFDZnVsQixHQUFnQmxrQixFQUFVd0IsRUFBaUJDLEdBRTNDOEQsR0FDQW5CLEdBQU9yUyxFQUVmLEVBQ0s4M0IsSUFDQTNhLEVBQVk1YixHQUFTQSxFQUFNaWMsbUJBQzVCcWEsSUFDQWppQixJQUFzQixLQUNsQnVILEdBQWFFLEdBQWdCRixFQUFXMU4sRUFBaUJ6UCxHQUN6RDYzQixHQUNJMVgsR0FBb0JuZ0IsRUFBTyxLQUFNeVAsRUFBaUIsWUFBWSxHQUNuRUMsRUFDUCxFQUVFMkMsR0FBU3JTLElBQ1gsTUFBTSxLQUFFNUwsRUFBSSxHQUFFMmEsRUFBRSxPQUFFUyxFQUFNLFdBQUV6QixHQUFlL04sRUFDekMsR0FBSTVMLElBQVNzbUIsR0FrQlQsWUFoQkkxYSxFQUFNcU4sVUFBWSxHQUNBLEtBQWxCck4sRUFBTXFOLFdBQ05VLElBQ0NBLEVBQVdxSixVQUNacFgsRUFBTWlPLFNBQVM3WSxTQUFRb1osSUFDZkEsRUFBTXBhLE9BQVM4WSxHQUNmb2pCLEVBQVc5aEIsRUFBTU8sSUFHakJzRCxHQUFPN0QsRUFDWCxJQUlKeXBCLEdBQWVscEIsRUFBSVMsSUFJM0IsR0FBSXBiLElBQVN1M0IsR0FFVCxZQURBbUcsRUFBaUI5eEIsR0FHckIsTUFBTWs0QixFQUFnQixLQUNsQjVILEVBQVd2aEIsR0FDUGhCLElBQWVBLEVBQVdxSixXQUFhckosRUFBVzJFLFlBQ2xEM0UsRUFBVzJFLFlBQ2YsRUFFSixHQUFzQixFQUFsQjFTLEVBQU00TSxXQUNObUIsSUFDQ0EsRUFBV3FKLFVBQVcsQ0FDdkIsTUFBTSxNQUFFZ0QsRUFBSyxXQUFFbEIsR0FBZW5MLEVBQ3hCNHBCLEVBQWUsSUFBTXZkLEVBQU1yTCxFQUFJbXBCLEdBQ2pDaGYsRUFDQUEsRUFBV2xaLEVBQU0rTyxHQUFJbXBCLEVBQWVQLEdBR3BDQSxHQUVSLE1BRUlPLEdBQ0osRUFFRUQsR0FBaUIsQ0FBQzExQixFQUFLd0IsS0FHekIsSUFBSXpKLEVBQ0osS0FBT2lJLElBQVF3QixHQUNYekosRUFBTzAyQixFQUFnQnp1QixHQUN2Qit0QixFQUFXL3RCLEdBQ1hBLEVBQU1qSSxFQUVWZzJCLEVBQVd2c0IsRUFBSSxFQUViaTBCLEdBQW1CLENBQUM5M0IsRUFBVXdQLEVBQWdCOEQsS0FDRHRULEVBQVM5TCxLQUFLdytCLFNBam1MckUsU0FBdUIxeUIsR0FDbkJoSyxFQUFJN0csSUFBSTZRLEVBQVM5TCxLQUFLdytCLFNBQVMzc0IsVUFBVTVTLE9BQU82TSxFQUNwRCxDQWdtTFlpNEIsQ0FBY2o0QixHQUVsQixNQUFNLElBQUVrNEIsRUFBRyxNQUFFeG1DLEVBQUssT0FBRXdVLEVBQU0sUUFBRTRJLEVBQU8sR0FBRTJCLEdBQU96USxFQWg3S25CLElBQUNDLEVBazdLdEJpNEIsSUFDQSxJQUFBbGIsZ0JBQWVrYixHQUduQnhtQyxFQUFNUCxPQUdGK1UsSUFFQUEsRUFBT3hWLFFBQVMsRUFDaEJnZ0IsR0FBUTVCLEVBQVM5TyxFQUFVd1AsRUFBZ0I4RCxJQUczQzdDLEdBQ0FpRixHQUFzQmpGLEVBQUlqQixHQUU5QmtHLElBQXNCLEtBQ2xCMVYsRUFBU3VJLGFBQWMsQ0FBSSxHQUM1QmlILEdBSUNBLEdBQ0FBLEVBQWVXLGdCQUNkWCxFQUFlakgsYUFDaEJ2SSxFQUFTZ1QsV0FDUmhULEVBQVNtVCxlQUNWblQsRUFBU2tULGFBQWUxRCxFQUFleUIsWUFDdkN6QixFQUFlM2MsT0FDYSxJQUF4QjJjLEVBQWUzYyxNQUNmMmMsRUFBZS9mLFdBaDlLR3dRLEVBbzlLR0QsRUFuOUs3QitHLEdBQ2tDLG1CQUEzQkEsRUFBU294QixnQkFFZnB4QixFQUFTb3hCLGNBQWNsNEIsSUFDeEI2SCxFQUEwQjdILEVBZzlLMUIsRUFFRWd5QixHQUFrQixDQUFDbGtCLEVBQVV3QixFQUFpQkMsRUFBZ0I4RCxHQUFXLEVBQU8zRCxHQUFZLEVBQU8vTCxFQUFRLEtBQzdHLElBQUssSUFBSTVaLEVBQUk0WixFQUFPNVosRUFBSStqQixFQUFTeGpCLE9BQVFQLElBQ3JDMG1CLEdBQVEzQyxFQUFTL2pCLEdBQUl1bEIsRUFBaUJDLEVBQWdCOEQsRUFBVTNELEVBQ3BFLEVBRUV3aEIsR0FBa0JyeEIsR0FDRSxFQUFsQkEsRUFBTTRNLFVBQ0N5a0IsR0FBZ0JyeEIsRUFBTUcsVUFBVTZPLFNBRXJCLElBQWxCaFAsRUFBTTRNLFVBQ0M1TSxFQUFNbVEsU0FBUzdWLE9BRW5CMDJCLEVBQWlCaHhCLEVBQU13UCxRQUFVeFAsRUFBTStPLElBRTVDL0ksR0FBUyxDQUFDaEcsRUFBT3VQLEVBQVdJLEtBQ2pCLE1BQVQzUCxFQUNJdVAsRUFBVTRmLFFBQ1Z2ZSxHQUFRckIsRUFBVTRmLE9BQVEsS0FBTSxNQUFNLEdBSTFDcGYsRUFBTVIsRUFBVTRmLFFBQVUsS0FBTW52QixFQUFPdVAsRUFBVyxLQUFNLEtBQU0sS0FBTUksR0FFeEVwTCxJQUNBSSxJQUNBNEssRUFBVTRmLE9BQVNudkIsQ0FBSyxFQUV0QjZ4QixHQUFZLENBQ2RudUIsRUFBR3FNLEVBQ0hZLEdBQUlDLEdBQ0p1QixFQUFHQyxHQUNINVYsRUFBRzZWLEdBQ0g0YSxHQUFJQyxFQUNKb0wsR0FBSXBHLEVBQ0pxRyxHQUFJekYsRUFDSjBGLElBQUs3RixFQUNMMW5DLEVBQUdvbUMsR0FDSHJoQixFQUFHdmMsR0FFUCxJQUFJOGQsR0FDQUUsR0FJSixPQUhJc2UsS0FDQ3hlLEdBQVNFLElBQWVzZSxFQUFtQjhCLEtBRXpDLENBQ0g3ckIsVUFDQXVMLFdBQ0FrbkIsVUFBV3BPLEdBQWFya0IsR0FBUXVMLElBRXhDLENBQ0EsU0FBU2loQixJQUFjLE9BQUU3Z0MsRUFBTSxPQUFFeVUsR0FBVXN5QixHQUN2Qy9tQyxFQUFPZ0UsYUFBZXlRLEVBQU96USxhQUFlK2lDLENBQ2hELENBWUEsU0FBUzdGLEdBQXVCeGpCLEVBQUlDLEVBQUl2WSxHQUFVLEdBQzlDLE1BQU00aEMsRUFBTXRwQixFQUFHcEIsU0FDVDJxQixFQUFNdHBCLEVBQUdyQixTQUNmLElBQUksSUFBQTlZLFNBQVF3akMsS0FBUSxJQUFBeGpDLFNBQVF5akMsR0FDeEIsSUFBSyxJQUFJMXVDLEVBQUksRUFBR0EsRUFBSXl1QyxFQUFJbHVDLE9BQVFQLElBQUssQ0FHakMsTUFBTXlyQyxFQUFLZ0QsRUFBSXp1QyxHQUNmLElBQUkyckMsRUFBSytDLEVBQUkxdUMsR0FDTSxFQUFmMnJDLEVBQUdqcEIsWUFBMkNpcEIsRUFBRzNuQixtQkFDN0MybkIsRUFBR3hvQixXQUFhLEdBQXNCLEtBQWpCd29CLEVBQUd4b0IsYUFDeEJ3b0IsRUFBSytDLEVBQUkxdUMsR0FBS21vQyxHQUFldUcsRUFBSTF1QyxJQUNqQzJyQyxFQUFHOW1CLEdBQUs0bUIsRUFBRzVtQixJQUVWaFksR0FDRDg3QixHQUF1QjhDLEVBQUlFLElBSVlBLEVBQUd6aEMsT0FBUzhZLElBQVkyb0IsRUFBRzltQixLQUN0RThtQixFQUFHOW1CLEdBQUs0bUIsRUFBRzVtQixHQUVuQixDQUVSLENBNENBLE1BQ004cEIsR0FBc0J0M0IsR0FBVUEsSUFBVUEsRUFBTXUzQixVQUErQixLQUFuQnYzQixFQUFNdTNCLFVBQ2xFQyxHQUFlbHNDLEdBQWlDLG9CQUFmbXNDLFlBQThCbnNDLGFBQWtCbXNDLFdBQ2pGQyxHQUFnQixDQUFDMTNCLEVBQU8yM0IsS0FDMUIsTUFBTUMsRUFBaUI1M0IsR0FBU0EsRUFBTTJqQixHQUN0QyxJQUFJLElBQUFyakIsVUFBU3MzQixHQUFpQixDQUMxQixHQUFLRCxFQU1BLENBQ0QsTUFBTXJzQyxFQUFTcXNDLEVBQU9DLEdBUXRCLE9BUEt0c0MsR0FFR3lELEVBQUssbURBQW1ENm9DLHdNQUt6RHRzQyxDQUNYLENBWkksT0FGSXlELEVBQUssMEdBRUYsSUFhZixDQUtJLE9BSGdENm9DLEdBQW1CTixHQUFtQnQzQixJQUNsRmpSLEVBQUssNEJBQTRCNm9DLEtBRTlCQSxDQUNYLEVBa0hKLFNBQVNDLEdBQWFwNUIsRUFBT3VQLEVBQVcrbUIsR0FBZ0J0bUIsR0FBRyxPQUFFc2QsR0FBVW5iLEVBQUdDLEdBQVFzbEIsRUFBVyxHQUV4RSxJQUFiQSxHQUNBcEssRUFBT3R0QixFQUFNcTVCLGFBQWM5cEIsRUFBVyttQixHQUUxQyxNQUFNLEdBQUV2bkIsRUFBRSxPQUFFUyxFQUFNLFVBQUU1QyxFQUFTLFNBQUVxQixFQUFRLE1BQUUxTSxHQUFVdkIsRUFDN0NzNUIsRUFBeUIsSUFBYjVCLEVBUWxCLEdBTkk0QixHQUNBaE0sRUFBT3ZlLEVBQUlRLEVBQVcrbUIsS0FLckJnRCxHQUFhVCxHQUFtQnQzQixLQUVqQixHQUFacUwsRUFDQSxJQUFLLElBQUkxaUIsRUFBSSxFQUFHQSxFQUFJK2pCLEVBQVN4akIsT0FBUVAsSUFDakNrb0IsRUFBS25FLEVBQVMvakIsR0FBSXFsQixFQUFXK21CLEVBQWMsR0FLbkRnRCxHQUNBaE0sRUFBTzlkLEVBQVFELEVBQVcrbUIsRUFFbEMsQ0FvQ0EsTUFBTWlELEdBOUtlLENBQ2pCQyxjQUFjLEVBQ2RwcUIsUUFBUUMsRUFBSUMsRUFBSUMsRUFBV0MsRUFBUUMsRUFBaUJDLEVBQWdCQyxFQUFPQyxFQUFjQyxFQUFXZ2lCLEdBQ2hHLE1BQVF5RyxHQUFJcEcsRUFBZXFHLEdBQUl6RixFQUFlMEYsSUFBSzdGLEVBQW9CM2lCLEdBQUcsT0FBRXNkLEVBQU0sY0FBRW1NLEVBQWEsV0FBRXJNLEVBQVUsY0FBRUcsSUFBb0JzRSxFQUM3SGlILEVBQVdELEdBQW1CdnBCLEVBQUcvTixPQUN2QyxJQUFJLFVBQUVxTCxFQUFTLFNBQUVxQixFQUFRLGdCQUFFQyxHQUFvQm9CLEVBTy9DLEdBSitDaEssSUFDM0N1SyxHQUFZLEVBQ1ozQixFQUFrQixNQUVaLE1BQU5tQixFQUFZLENBRVosTUFBTWtFLEVBQWVqRSxFQUFHUCxHQUNsQndlLEVBQWMsa0JBRWRtTSxFQUFjcHFCLEVBQUdFLE9BQ2pCK2QsRUFBYyxnQkFFcEJELEVBQU8vWixFQUFhaEUsRUFBV0MsR0FDL0I4ZCxFQUFPb00sRUFBWW5xQixFQUFXQyxHQUM5QixNQUFNM2lCLEVBQVV5aUIsRUFBR3ppQixPQUFTb3NDLEdBQWMzcEIsRUFBRy9OLE1BQU9rNEIsR0FDOUNKLEVBQWdCL3BCLEVBQUcrcEIsYUFBZWpNLEVBQVcsSUFDL0N2Z0MsR0FDQXlnQyxFQUFPK0wsRUFBY3hzQyxHQUVyQjhpQixFQUFRQSxHQUFTb3BCLEdBQVlsc0MsSUFFb0Jpc0MsR0FDakR4b0MsRUFBSyxvQ0FBcUN6RCxFQUFRLFdBQVdBLE1BRWpFLE1BQU15K0IsRUFBUSxDQUFDL2IsRUFBV0MsS0FHTixHQUFaNUMsR0FDQXNsQixFQUFjamtCLEVBQVVzQixFQUFXQyxFQUFRQyxFQUFpQkMsRUFBZ0JDLEVBQU9DLEVBQWNDLEVBQ3JHLEVBRUFpcEIsRUFDQXhOLEVBQU0vYixFQUFXbXFCLEdBRVo3c0MsR0FDTHkrQixFQUFNeitCLEVBQVF3c0MsRUFFdEIsS0FDSyxDQUVEL3BCLEVBQUdQLEdBQUtNLEVBQUdOLEdBQ1gsTUFBTTJxQixFQUFjcHFCLEVBQUdFLE9BQVNILEVBQUdHLE9BQzdCM2lCLEVBQVV5aUIsRUFBR3ppQixPQUFTd2lCLEVBQUd4aUIsT0FDekJ3c0MsRUFBZ0IvcEIsRUFBRytwQixhQUFlaHFCLEVBQUdncUIsYUFDckNNLEVBQWNkLEdBQW1CeHBCLEVBQUc5TixPQUNwQ3E0QixFQUFtQkQsRUFBY3BxQixFQUFZMWlCLEVBQzdDZ3RDLEVBQWdCRixFQUFjRCxFQUFhTCxFQWFqRCxHQVpBMXBCLEVBQVFBLEdBQVNvcEIsR0FBWWxzQyxHQUN6QnFoQixHQUVBeWtCLEVBQW1CdGpCLEVBQUduQixnQkFBaUJBLEVBQWlCMHJCLEVBQWtCbnFCLEVBQWlCQyxFQUFnQkMsRUFBT0MsR0FJbEhpakIsR0FBdUJ4akIsRUFBSUMsR0FBSSxJQUV6Qk8sR0FDTmlqQixFQUFjempCLEVBQUlDLEVBQUlzcUIsRUFBa0JDLEVBQWVwcUIsRUFBaUJDLEVBQWdCQyxFQUFPQyxHQUFjLEdBRTdHa3BCLEVBQ0thLEdBR0RQLEdBQWE5cEIsRUFBSUMsRUFBV21xQixFQUFZN0gsRUFBVyxRQUt2RCxJQUFLdmlCLEVBQUcvTixPQUFTK04sRUFBRy9OLE1BQU0yakIsT0FBUzdWLEVBQUc5TixPQUFTOE4sRUFBRzlOLE1BQU0yakIsSUFBSyxDQUN6RCxNQUFNNFUsRUFBY3hxQixFQUFHemlCLE9BQVNvc0MsR0FBYzNwQixFQUFHL04sTUFBT2s0QixHQUNwREssRUFDQVYsR0FBYTlwQixFQUFJd3FCLEVBQVksS0FBTWpJLEVBQVcsR0FHOUN2aEMsRUFBSyxxQ0FBc0N6RCxFQUFRLFdBQVdBLEtBRXRFLE1BQ1M4c0MsR0FHTFAsR0FBYTlwQixFQUFJemlCLEVBQVF3c0MsRUFBY3hILEVBQVcsRUFHOUQsQ0FDSixFQUNBeGYsT0FBT3JTLEVBQU95UCxFQUFpQkMsRUFBZ0JHLEdBQWFjLEdBQUlDLEVBQVNaLEdBQUtxQyxPQUFRaWUsSUFBZ0I5YyxHQUNsRyxNQUFNLFVBQUU1RyxFQUFTLFNBQUVxQixFQUFRLE9BQUV1QixFQUFNLGFBQUU2cEIsRUFBWSxPQUFFeHNDLEVBQU0sTUFBRTBVLEdBQVV2QixFQUtyRSxHQUpJblQsR0FDQXlqQyxFQUFXK0ksSUFHWDdsQixJQUFhcWxCLEdBQW1CdDNCLE1BQ2hDK3VCLEVBQVc5Z0IsR0FDSyxHQUFaNUMsR0FDQSxJQUFLLElBQUkxaUIsRUFBSSxFQUFHQSxFQUFJK2pCLEVBQVN4akIsT0FBUVAsSUFBSyxDQUN0QyxNQUFNc2tCLEVBQVFQLEVBQVMvakIsR0FDdkIwbUIsRUFBUXBDLEVBQU9pQixFQUFpQkMsR0FBZ0IsSUFBUWxCLEVBQU1OLGdCQUNsRSxDQUdaLEVBQ0FrRSxLQUFNZ25CLEdBQ043bkIsUUE2QkosU0FBeUJDLEVBQU14UixFQUFPeVAsRUFBaUJDLEVBQWdCRSxFQUFjQyxHQUFhRyxHQUFHLFlBQUVxZCxFQUFXLFdBQUUzYixFQUFVLGNBQUUrbkIsSUFBbUJuTCxHQUMvSSxNQUFNemhDLEVBQVVtVCxFQUFNblQsT0FBU29zQyxHQUFjajVCLEVBQU11QixNQUFPazRCLEdBQzFELEdBQUk1c0MsRUFBUSxDQUdSLE1BQU1rdEMsRUFBYWx0QyxFQUFPbXRDLE1BQVFudEMsRUFBT2lpQyxXQUN6QyxHQUFzQixHQUFsQjl1QixFQUFNNE0sVUFDTixHQUFJaXNCLEdBQW1CNzRCLEVBQU11QixPQUN6QnZCLEVBQU13UCxPQUFTOGUsRUFBZ0JqQixFQUFZN2IsR0FBT3hSLEVBQU8wUixFQUFXRixHQUFPL0IsRUFBaUJDLEVBQWdCRSxFQUFjQyxHQUMxSDdQLEVBQU1xNUIsYUFBZVUsTUFFcEIsQ0FDRC81QixFQUFNd1AsT0FBUzZkLEVBQVk3YixHQUkzQixJQUFJNm5CLEVBQWVVLEVBQ25CLEtBQU9WLEdBRUgsR0FEQUEsRUFBZWhNLEVBQVlnTSxHQUN2QkEsR0FDMEIsSUFBMUJBLEVBQWF0TSxVQUNTLG9CQUF0QnNNLEVBQWE3cUMsS0FBNEIsQ0FDekN3UixFQUFNcTVCLGFBQWVBLEVBQ3JCeHNDLEVBQU9tdEMsS0FDSGg2QixFQUFNcTVCLGNBQWdCaE0sRUFBWXJ0QixFQUFNcTVCLGNBQzVDLEtBQ0osQ0FFSi9LLEVBQWdCeUwsRUFBWS81QixFQUFPblQsRUFBUTRpQixFQUFpQkMsRUFBZ0JFLEVBQWNDLEVBQzlGLENBRVIsQ0FDQSxPQUFPN1AsRUFBTXdQLFFBQVU2ZCxFQUFZcnRCLEVBQU13UCxPQUM3QyxHQUlNa0wsR0FBVy9uQixPQUFpRCxZQUM1RCs0QixHQUFPLzRCLE9BQWlELFFBQ3hEdWEsR0FBVXZhLE9BQWlELFdBQzNEZzVCLEdBQVNoNUIsT0FBaUQsVUFNMURxYSxHQUFhLEdBQ25CLElBQUk4RyxHQUFlLEtBaUJuQixTQUFTRCxHQUFVb21CLEdBQWtCLEdBQ2pDanRCLEdBQVdqaUIsS0FBTStvQixHQUFlbW1CLEVBQWtCLEtBQU8sR0FDN0QsQ0FDQSxTQUFTbG1CLEtBQ0wvRyxHQUFXcmlCLE1BQ1htcEIsR0FBZTlHLEdBQVdBLEdBQVd2aUIsT0FBUyxJQUFNLElBQ3hELENBS0EsSUE2REl5dkMsR0E3REF0bUIsR0FBcUIsRUFpQnpCLFNBQVM3SCxHQUFpQnhoQixHQUN0QnFwQixJQUFzQnJwQixDQUMxQixDQUNBLFNBQVM0dkMsR0FBV242QixHQVdoQixPQVRBQSxFQUFNa08sZ0JBQ0YwRixHQUFxQixFQUFJRSxJQUFnQixFQUFBMlQsVUFBWSxLQUV6RDFULEtBR0lILEdBQXFCLEdBQUtFLElBQzFCQSxHQUFhL29CLEtBQUtpVixHQUVmQSxDQUNYLENBSUEsU0FBU282QixHQUFtQmhtQyxFQUFNbU4sRUFBTzBNLEVBQVVaLEVBQVc4bEIsRUFBY3ZtQixHQUN4RSxPQUFPdXRCLEdBQVdFLEdBQWdCam1DLEVBQU1tTixFQUFPME0sRUFBVVosRUFBVzhsQixFQUFjdm1CLEdBQVcsR0FDakcsQ0FRQSxTQUFTbVYsR0FBWTN0QixFQUFNbU4sRUFBTzBNLEVBQVVaLEVBQVc4bEIsR0FDbkQsT0FBT2dILEdBQVdsdEIsR0FBWTdZLEVBQU1tTixFQUFPME0sRUFBVVosRUFBVzhsQixHQUFjLEdBQ2xGLENBQ0EsU0FBUzFrQixHQUFRbGtCLEdBQ2IsUUFBT0EsSUFBOEIsSUFBdEJBLEVBQU0rdkMsV0FDekIsQ0FDQSxTQUFTcHBCLEdBQWdCN0IsRUFBSUMsR0FDekIsUUFDbUIsRUFBZkEsRUFBRzFDLFdBQ0hySCxFQUFtQjVRLElBQUkyYSxFQUFHbGIsUUFJdkJpYixFQUFHamIsT0FBU2tiLEVBQUdsYixNQUFRaWIsRUFBR2hiLE1BQVFpYixFQUFHamIsR0FDaEQsQ0FRQSxTQUFTa21DLEdBQW1CQyxHQUN4Qk4sR0FBdUJNLENBQzNCLENBQ0EsTUFLTUMsR0FBb0IsY0FDcEJDLEdBQWUsRUFBR3JtQyxTQUFpQixNQUFQQSxFQUFjQSxFQUFNLEtBQ2hEc21DLEdBQWUsRUFBR3QrQixNQUFLdStCLFVBQVNDLGFBQ25CLE1BQVB4K0IsR0FDRixJQUFBd0YsVUFBU3hGLEtBQVEsSUFBQTdFLE9BQU02RSxLQUFRLElBQUE0QyxZQUFXNUMsR0FDdEMsQ0FBRW5TLEVBQUc4Z0IsR0FBMEJ4TyxFQUFHSCxFQUFLb3dCLEVBQUdtTyxFQUFTclgsSUFBS3NYLEdBQ3hEeCtCLEVBQ0osS0FFVixTQUFTZytCLEdBQWdCam1DLEVBQU1tTixFQUFRLEtBQU0wTSxFQUFXLEtBQU1aLEVBQVksRUFBRzhsQixFQUFlLEtBQU12bUIsR0FBWXhZLElBQVNzbUIsR0FBVyxFQUFJLEdBQTRCb2dCLEdBQWMsRUFBT0MsR0FBZ0MsR0FDbk4sTUFBTS82QixFQUFRLENBQ1ZzNkIsYUFBYSxFQUNiVSxVQUFVLEVBQ1Y1bUMsT0FDQW1OLFFBQ0FsTixJQUFLa04sR0FBU201QixHQUFhbjVCLEdBQzNCbEYsSUFBS2tGLEdBQVNvNUIsR0FBYXA1QixHQUMzQjBnQixRQUFTaFgsR0FDVDJFLGFBQWMsS0FDZDNCLFdBQ0E5TixVQUFXLEtBQ1hnUSxTQUFVLEtBQ1ZHLFVBQVcsS0FDWEUsV0FBWSxLQUNaM0MsS0FBTSxLQUNORSxXQUFZLEtBQ1pnQixHQUFJLEtBQ0pTLE9BQVEsS0FDUjNpQixPQUFRLEtBQ1J3c0MsYUFBYyxLQUNkdkwsWUFBYSxFQUNibGhCLFlBQ0FTLFlBQ0E4bEIsZUFDQWpsQixnQkFBaUIsS0FDakI3TixXQUFZLE1Bb0NoQixPQWxDSTA2QixHQUNBRSxHQUFrQmo3QixFQUFPaU8sR0FFVCxJQUFackIsR0FDQXhZLEVBQUt5ZCxVQUFVN1IsSUFHZGlPLElBR0xqTyxFQUFNNE0sWUFBYSxJQUFBL0ssVUFBU29NLEdBQ3RCLEVBQ0EsSUFHcUNqTyxFQUFNM0wsS0FBUTJMLEVBQU0zTCxLQUMvRC9ELEVBQUssb0RBQXFEMFAsRUFBTTVMLE1BR2hFd2YsR0FBcUIsSUFFcEJrbkIsR0FFRGhuQixLQUtDOVQsRUFBTXFOLFVBQVksR0FBaUIsRUFBWlQsSUFHSixLQUFwQjVNLEVBQU1xTixXQUNOeUcsR0FBYS9vQixLQUFLaVYsR0FFZkEsQ0FDWCxDQUNBLE1BQU1pTixHQTlFK0IsSUFBSTdpQixJQStFekMsU0FBc0JnSyxFQUFNbU4sRUFBUSxLQUFNME0sRUFBVyxLQUFNWixFQUFZLEVBQUc4bEIsRUFBZSxLQUFNMkgsR0FBYyxHQU96RyxHQU5LMW1DLEdBQVFBLElBQVN1c0IsS0FDOEJ2c0IsR0FDNUM5RCxFQUFLLDJDQUEyQzhELE1BRXBEQSxFQUFPOFksSUFFUHVCLEdBQVFyYSxHQUFPLENBSWYsTUFBTThtQyxFQUFTenRCLEdBQVdyWixFQUFNbU4sR0FBTyxHQWF2QyxPQVpJME0sR0FDQWd0QixHQUFrQkMsRUFBUWp0QixHQUUxQjJGLEdBQXFCLElBQU1rbkIsR0FBZWhuQixLQUNuQixFQUFuQm9uQixFQUFPdHVCLFVBQ1BrSCxHQUFhQSxHQUFhbG9CLFFBQVF3SSxJQUFTOG1DLEVBRzNDcG5CLEdBQWEvb0IsS0FBS213QyxJQUcxQkEsRUFBTzd0QixZQUFjLEVBQ2Q2dEIsQ0FDWCxDQU1BLEdBSklwMEIsR0FBaUIxUyxLQUNqQkEsRUFBT0EsRUFBSzJTLFdBR1p4RixFQUFPLENBRVBBLEVBQVE0NUIsR0FBbUI1NUIsR0FDM0IsSUFBTXl4QixNQUFPb0ksRUFBSyxNQUFFbkksR0FBVTF4QixFQUMxQjY1QixLQUFVLElBQUF2NUIsVUFBU3U1QixLQUNuQjc1QixFQUFNeXhCLE9BQVEsSUFBQXFJLGdCQUFlRCxLQUU3QixJQUFBM2pDLFVBQVN3N0IsTUFHTCxJQUFBaDNCLFNBQVFnM0IsTUFBVyxJQUFBOTlCLFNBQVE4OUIsS0FDM0JBLEdBQVEsSUFBQXQvQixRQUFPLENBQUMsRUFBR3MvQixJQUV2QjF4QixFQUFNMHhCLE9BQVEsSUFBQXFJLGdCQUFlckksR0FFckMsQ0FFQSxNQUFNcm1CLEdBQVksSUFBQS9LLFVBQVN6TixHQUNyQixFQUNBNmEsR0FBVzdhLEdBQ1AsSUE5YkssQ0FBQ0EsR0FBU0EsRUFBS29sQyxhQSticEIrQixDQUFXbm5DLEdBQ1AsSUFDQSxJQUFBcUQsVUFBU3JELEdBQ0wsR0FDQSxJQUFBNkssWUFBVzdLLEdBQ1AsRUFDQSxFQVF0QixPQVAyRCxFQUFad1ksSUFBcUQsSUFBQTNRLFNBQVE3SCxJQUV4RzlELEVBQUssc05BR3NCLHVDQUozQjhELEdBQU8sSUFBQXdDLE9BQU14QyxJQU1WaW1DLEdBQWdCam1DLEVBQU1tTixFQUFPME0sRUFBVVosRUFBVzhsQixFQUFjdm1CLEVBQVdrdUIsR0FBYSxFQUNuRyxDQWpKV1UsSUFBaUJ0QixHQUNsQkEsR0FBcUI5dkMsRUFBTTRnQixJQUMzQjVnQixHQWdKVixTQUFTK3dDLEdBQW1CNTVCLEdBQ3hCLE9BQUtBLEdBRUUsSUFBQXRGLFNBQVFzRixJQUFVazVCLE1BQXFCbDVCLEdBQ3hDLElBQUE1TixRQUFPLENBQUMsRUFBRzROLEdBQ1hBLEVBSEssSUFJZixDQUNBLFNBQVNrTSxHQUFXek4sRUFBT3k3QixFQUFZQyxHQUFXLEdBRzlDLE1BQU0sTUFBRW42QixFQUFLLElBQUVsRixFQUFHLFVBQUVnUixFQUFTLFNBQUVZLEdBQWFqTyxFQUN0QzI3QixFQUFjRixFQUFhRyxHQUFXcjZCLEdBQVMsQ0FBQyxFQUFHazZCLEdBQWNsNkIsRUFtRHZFLE1BbERlLENBQ1grNEIsYUFBYSxFQUNiVSxVQUFVLEVBQ1Y1bUMsS0FBTTRMLEVBQU01TCxLQUNabU4sTUFBT282QixFQUNQdG5DLElBQUtzbkMsR0FBZWpCLEdBQWFpQixHQUNqQ3QvQixJQUFLby9CLEdBQWNBLEVBQVdwL0IsSUFJdEJxL0IsR0FBWXIvQixHQUNOLElBQUFsSCxTQUFRa0gsR0FDSkEsRUFBSXhRLE9BQU84dUMsR0FBYWMsSUFDeEIsQ0FBQ3AvQixFQUFLcytCLEdBQWFjLElBQ3ZCZCxHQUFhYyxHQUNyQnAvQixFQUNONGxCLFFBQVNqaUIsRUFBTWlpQixRQUNmclMsYUFBYzVQLEVBQU00UCxhQUNwQjNCLFVBQW9FLElBQWZaLElBQTZDLElBQUFsWSxTQUFROFksR0FDcEdBLEVBQVMvWCxJQUFJMmxDLElBQ2I1dEIsRUFDTnBoQixPQUFRbVQsRUFBTW5ULE9BQ2R3c0MsYUFBY3I1QixFQUFNcTVCLGFBQ3BCdkwsWUFBYTl0QixFQUFNOHRCLFlBQ25CbGhCLFVBQVc1TSxFQUFNNE0sVUFLakJTLFVBQVdvdUIsR0FBY3o3QixFQUFNNUwsT0FBU3NtQixJQUNuQixJQUFmck4sRUFDSSxHQUNZLEdBQVpBLEVBQ0pBLEVBQ044bEIsYUFBY256QixFQUFNbXpCLGFBQ3BCamxCLGdCQUFpQmxPLEVBQU1rTyxnQkFDdkI3TixXQUFZTCxFQUFNSyxXQUNsQndOLEtBQU03TixFQUFNNk4sS0FDWkUsV0FBWS9OLEVBQU0rTixXQUtsQjVOLFVBQVdILEVBQU1HLFVBQ2pCZ1EsU0FBVW5RLEVBQU1tUSxTQUNoQkcsVUFBV3RRLEVBQU1zUSxXQUFhN0MsR0FBV3pOLEVBQU1zUSxXQUMvQ0UsV0FBWXhRLEVBQU13USxZQUFjL0MsR0FBV3pOLEVBQU13USxZQUNqRHpCLEdBQUkvTyxFQUFNK08sR0FDVlMsT0FBUXhQLEVBQU13UCxPQUd0QixDQUtBLFNBQVNxc0IsR0FBZTc3QixHQUNwQixNQUFNazdCLEVBQVN6dEIsR0FBV3pOLEdBSTFCLE9BSEksSUFBQTdLLFNBQVE2SyxFQUFNaU8sWUFDZGl0QixFQUFPanRCLFNBQVdqTyxFQUFNaU8sU0FBUy9YLElBQUkybEMsS0FFbENYLENBQ1gsQ0FJQSxTQUFTN00sR0FBZ0J5TixFQUFPLElBQUtDLEVBQU8sR0FDeEMsT0FBTzl1QixHQUFZeWUsR0FBTSxLQUFNb1EsRUFBTUMsRUFDekMsQ0FJQSxTQUFTQyxHQUFrQkMsRUFBU0MsR0FHaEMsTUFBTWw4QixFQUFRaU4sR0FBWTBlLEdBQVEsS0FBTXNRLEdBRXhDLE9BREFqOEIsRUFBTTh0QixZQUFjb08sRUFDYmw4QixDQUNYLENBSUEsU0FBU204QixHQUFtQkwsRUFBTyxHQUduQ00sR0FBVSxHQUNOLE9BQU9BLEdBQ0F2b0IsS0FBYWtPLEdBQVk3VSxHQUFTLEtBQU00dUIsSUFDekM3dUIsR0FBWUMsR0FBUyxLQUFNNHVCLEVBQ3JDLENBQ0EsU0FBU2h2QixHQUFlMEIsR0FDcEIsT0FBYSxNQUFUQSxHQUFrQyxrQkFBVkEsRUFFakJ2QixHQUFZQyxLQUVkLElBQUEvWCxTQUFRcVosR0FFTnZCLEdBQVl5TixHQUFVLEtBRTdCbE0sRUFBTTdNLFNBRWdCLGlCQUFWNk0sRUFHTDZqQixHQUFlN2pCLEdBSWZ2QixHQUFZeWUsR0FBTSxLQUFNbnpCLE9BQU9pVyxHQUU5QyxDQUVBLFNBQVM2akIsR0FBZTdqQixHQUNwQixPQUFxQixPQUFiQSxFQUFNTyxLQUFvQyxJQUFyQlAsRUFBTW5CLFdBQy9CbUIsRUFBTTZ0QixLQUNKN3RCLEVBQ0FmLEdBQVdlLEVBQ3JCLENBQ0EsU0FBU3lzQixHQUFrQmo3QixFQUFPaU8sR0FDOUIsSUFBSTdaLEVBQU8sRUFDWCxNQUFNLFVBQUV3WSxHQUFjNU0sRUFDdEIsR0FBZ0IsTUFBWmlPLEVBQ0FBLEVBQVcsVUFFVixJQUFJLElBQUE5WSxTQUFROFksR0FDYjdaLEVBQU8sUUFFTixHQUF3QixpQkFBYjZaLEVBQXVCLENBQ25DLEdBQWdCLEdBQVpyQixFQUF5RSxDQUV6RSxNQUFNNFUsRUFBT3ZULEVBQVMrRCxRQU90QixZQU5Jd1AsSUFFQUEsRUFBS3ZWLEtBQU91VixFQUFLMVYsSUFBSyxHQUN0Qm12QixHQUFrQmo3QixFQUFPd2hCLEtBQ3pCQSxFQUFLdlYsS0FBT3VWLEVBQUsxVixJQUFLLElBRzlCLENBQ0ssQ0FDRDFYLEVBQU8sR0FDUCxNQUFNa29DLEVBQVdydUIsRUFBUytULEVBQ3JCc2EsR0FBYzdCLE1BQXFCeHNCLEVBR2xCLElBQWJxdUIsR0FBNEN0eEIsS0FHUixJQUFyQ0EsR0FBeUJ1QixNQUFNeVYsRUFDL0IvVCxFQUFTK1QsRUFBSSxHQUdiL1QsRUFBUytULEVBQUksRUFDYmhpQixFQUFNcU4sV0FBYSxPQVZ2QlksRUFBUzhiLEtBQU8vZSxFQWF4QixDQUNKLE1BQ1MsSUFBQS9MLFlBQVdnUCxJQUNoQkEsRUFBVyxDQUFFK0QsUUFBUy9ELEVBQVU4YixLQUFNL2UsSUFDdEM1VyxFQUFPLEtBR1A2WixFQUFXMVYsT0FBTzBWLEdBRUYsR0FBWnJCLEdBQ0F4WSxFQUFPLEdBQ1A2WixFQUFXLENBQUNvZ0IsR0FBZ0JwZ0IsS0FHNUI3WixFQUFPLEdBR2Y0TCxFQUFNaU8sU0FBV0EsRUFDakJqTyxFQUFNNE0sV0FBYXhZLENBQ3ZCLENBQ0EsU0FBU3duQyxNQUFjeHhDLEdBQ25CLE1BQU0wVCxFQUFNLENBQUMsRUFDYixJQUFLLElBQUk1VCxFQUFJLEVBQUdBLEVBQUlFLEVBQUtLLE9BQVFQLElBQUssQ0FDbEMsTUFBTXF5QyxFQUFVbnlDLEVBQUtGLEdBQ3JCLElBQUssTUFBTW1LLEtBQU9rb0MsRUFDZCxHQUFZLFVBQVJsb0MsRUFDSXlKLEVBQUlrMUIsUUFBVXVKLEVBQVF2SixRQUN0QmwxQixFQUFJazFCLE9BQVEsSUFBQXFJLGdCQUFlLENBQUN2OUIsRUFBSWsxQixNQUFPdUosRUFBUXZKLGNBR2xELEdBQVksVUFBUjMrQixFQUNMeUosRUFBSW0xQixPQUFRLElBQUFxSSxnQkFBZSxDQUFDeDlCLEVBQUltMUIsTUFBT3NKLEVBQVF0SixhQUU5QyxJQUFJLElBQUFub0IsTUFBS3pXLEdBQU0sQ0FDaEIsTUFBTW00QixFQUFXMXVCLEVBQUl6SixHQUNmbW9DLEVBQVdELEVBQVFsb0MsSUFDckJtb0MsR0FDQWhRLElBQWFnUSxJQUNYLElBQUFybkMsU0FBUXEzQixJQUFhQSxFQUFTOThCLFNBQVM4c0MsS0FDekMxK0IsRUFBSXpKLEdBQU9tNEIsRUFDTCxHQUFHM2dDLE9BQU8yZ0MsRUFBVWdRLEdBQ3BCQSxFQUVkLEtBQ2lCLEtBQVJub0MsSUFDTHlKLEVBQUl6SixHQUFPa29DLEVBQVFsb0MsR0FHL0IsQ0FDQSxPQUFPeUosQ0FDWCxDQUNBLFNBQVN1ZixHQUFnQnZ3QixFQUFNb1QsRUFBVUYsRUFBT29nQixFQUFZLE1BQ3hEbGUsRUFBMkJwVixFQUFNb1QsRUFBVSxFQUErQixDQUN0RUYsRUFDQW9nQixHQUVSLENBRUEsTUFBTXFjLEdBQWtCeFMsS0FDeEIsSUFBSXlTLEdBQVEsRUFDWixTQUFTNUksR0FBd0I5ekIsRUFBT2pQLEVBQVFvZixHQUM1QyxNQUFNL2IsRUFBTzRMLEVBQU01TCxLQUViaU0sR0FBY3RQLEVBQVNBLEVBQU9zUCxXQUFhTCxFQUFNSyxhQUFlbzhCLEdBQ2hFdjhCLEVBQVcsQ0FDYmdJLElBQUt3MEIsS0FDTDE4QixRQUNBNUwsT0FDQXJELFNBQ0FzUCxhQUNBK00sS0FBTSxLQUNOOVMsS0FBTSxLQUNOMFUsUUFBUyxLQUNUcmQsT0FBUSxLQUNSeVUsT0FBUSxLQUNSeFUsTUFBTyxJQUFJLEVBQUFsQixhQUFZLEdBQ3ZCc1YsT0FBUSxLQUNSOVksTUFBTyxLQUNQeXZDLFFBQVMsS0FDVEMsWUFBYSxLQUNidHdCLFVBQVcsS0FDWCtILFNBQVV0akIsRUFBU0EsRUFBT3NqQixTQUFXbG1CLE9BQU95akIsT0FBT3ZSLEVBQVdnVSxVQUM5RHVQLFlBQWEsS0FDYnpkLFlBQWEsR0FFYm1nQixXQUFZLEtBQ1ozRyxXQUFZLEtBRVovVyxhQUFjMGUsR0FBc0JsekIsRUFBTWlNLEdBQzFDc0ksYUFBY29CLEdBQXNCM1YsRUFBTWlNLEdBRTFDL1MsS0FBTSxLQUNOd2MsUUFBUyxLQUVUdWQsY0FBZSxFQUFBM2UsVUFFZmdFLGFBQWN0WSxFQUFLc1ksYUFFbkJoQixJQUFLLEVBQUFoRCxVQUNMbGEsS0FBTSxFQUFBa2EsVUFDTm5ILE1BQU8sRUFBQW1ILFVBQ1A4RCxNQUFPLEVBQUE5RCxVQUNQNkQsTUFBTyxFQUFBN0QsVUFDUHNhLEtBQU0sRUFBQXRhLFVBQ04rRCxXQUFZLEVBQUEvRCxVQUNabTBCLGFBQWMsS0FFZDFzQixXQUNBaUQsV0FBWWpELEVBQVdBLEVBQVNnQixVQUFZLEVBQzVDK0IsU0FBVSxLQUNWRyxlQUFlLEVBR2ZvRCxXQUFXLEVBQ1hoTyxhQUFhLEVBQ2J3VSxlQUFlLEVBQ2Y2ZixHQUFJLEtBQ0oveUMsRUFBRyxLQUNIOHFDLEdBQUksS0FDSjFpQixFQUFHLEtBQ0hxaUIsR0FBSSxLQUNKQyxFQUFHLEtBQ0g5akIsR0FBSSxLQUNKeW5CLElBQUssS0FDTDdhLEdBQUksS0FDSjF6QixFQUFHLEtBQ0hxckMsSUFBSyxLQUNMRCxJQUFLLEtBQ0x0eUIsR0FBSSxLQUNKbzZCLEdBQUksTUFjUixPQVhJNzhCLEVBQVN3TCxJQWp4SGpCLFNBQWdDeEwsR0FDNUIsTUFBTXJULEVBQVMsQ0FBQyxFQWtCaEIsT0FoQkFzQixPQUFPaTJCLGVBQWV2M0IsRUFBUSxJQUFLLENBQy9CeTNCLGNBQWMsRUFDZEQsWUFBWSxFQUNaaDFCLElBQUssSUFBTTZRLElBR2YvUixPQUFPc0IsS0FBSyt5QixJQUFxQnB0QixTQUFRZixJQUNyQ2xHLE9BQU9pMkIsZUFBZXYzQixFQUFRd0gsRUFBSyxDQUMvQml3QixjQUFjLEVBQ2RELFlBQVksRUFDWmgxQixJQUFLLElBQU1tekIsR0FBb0JudUIsR0FBSzZMLEdBR3BDM0wsSUFBSyxFQUFBa2hCLE1BQ1AsSUFFQzVvQixDQUNYLENBNnZIdUJtd0MsQ0FBdUI5OEIsR0FLMUNBLEVBQVNrTixLQUFPcmMsRUFBU0EsRUFBT3FjLEtBQU9sTixFQUN2Q0EsRUFBUzVTLEtBQU9pYixFQUFPelUsS0FBSyxLQUFNb00sR0FFOUJGLEVBQU1pOUIsSUFDTmo5QixFQUFNaTlCLEdBQUcvOEIsR0FFTkEsQ0FDWCxDQUNBLElBQUlrVSxHQUFrQixLQUN0QixNQUFNOEQsR0FBcUIsSUFBTTlELElBQW1CcEosR0FDOUNnTCxHQUFzQjlWLElBQ3hCa1UsR0FBa0JsVSxFQUNsQkEsRUFBU3RPLE1BQU0xQyxJQUFJLEVBRWpCK21CLEdBQXVCLEtBQ3pCN0IsSUFBbUJBLEdBQWdCeGlCLE1BQU1SLE1BQ3pDZ2pCLEdBQWtCLElBQUksRUFFcEI4b0IsSUFBNkIsSUFBQXBuQyxTQUFRLGtCQUMzQyxTQUFTczFCLEdBQXNCdHBCLEVBQU14QixHQUNqQyxNQUFNNjhCLEVBQWlCNzhCLEVBQU80cEIsYUFBZSxFQUFBQyxJQUN6QytTLEdBQWFwN0IsSUFBU3E3QixFQUFlcjdCLEtBQ3JDeFIsRUFBSyxrRUFBb0V3UixFQUVqRixDQUNBLFNBQVN5Z0IsR0FBb0JyaUIsR0FDekIsT0FBa0MsRUFBM0JBLEVBQVNGLE1BQU00TSxTQUMxQixDQUNBLElBeUhJcGpCLEdBQ0E0ekMsR0ExSEF6bkIsSUFBd0IsRUFDNUIsU0FBU3FlLEdBQWU5ekIsRUFBVXpCLEdBQVEsR0FDdENrWCxHQUF3QmxYLEVBQ3hCLE1BQU0sTUFBRThDLEVBQUssU0FBRTBNLEdBQWEvTixFQUFTRixNQUMvQnE5QixFQUFhOWEsR0FBb0JyaUIsSUF4MUczQyxTQUFtQkEsRUFBVW9ZLEVBQVUra0IsRUFDdkM1K0IsR0FBUSxHQUNKLE1BQU04QyxFQUFRLENBQUMsRUFDVGlMLEVBQVEsQ0FBQyxHQUNmLElBQUFyUSxLQUFJcVEsRUFBT2l1QixHQUFtQixHQUM5QnY2QixFQUFTbW5CLGNBQWdCbDVCLE9BQU95akIsT0FBTyxNQUN2QzZVLEdBQWF2bUIsRUFBVW9ZLEVBQVUvVyxFQUFPaUwsR0FFeEMsSUFBSyxNQUFNblksS0FBTzZMLEVBQVMwSSxhQUFhLEdBQzlCdlUsS0FBT2tOLElBQ1RBLEVBQU1sTixRQUFPbkUsR0FLakJvNEIsR0FBY2hRLEdBQVksQ0FBQyxFQUFHL1csRUFBT3JCLEdBRXJDbTlCLEVBRUFuOUIsRUFBU3FCLE1BQVE5QyxFQUFROEMsR0FBUSxJQUFBakcsaUJBQWdCaUcsR0FHNUNyQixFQUFTOUwsS0FBS21OLE1BTWZyQixFQUFTcUIsTUFBUUEsRUFKakJyQixFQUFTcUIsTUFBUWlMLEVBT3pCdE0sRUFBU3NNLE1BQVFBLENBQ3JCLENBeXpHSTh3QixDQUFVcDlCLEVBQVVxQixFQUFPODdCLEVBQVk1K0IsR0F6MkZ6QixFQUFDeUIsRUFBVStOLEtBQ3pCLEdBQStCLEdBQTNCL04sRUFBU0YsTUFBTTRNLFVBQWdELENBQy9ELE1BQU14WSxFQUFPNlosRUFBUytULEVBQ2xCNXRCLEdBR0E4TCxFQUFTcU0sT0FBUSxJQUFBM1YsT0FBTXFYLElBRXZCLElBQUE5UixLQUFJOFIsRUFBVSxJQUFLN1osSUFHbkJ5MUIsR0FBcUI1YixFQUFXL04sRUFBU3FNLE1BQVEsQ0FBQyxFQUUxRCxNQUVJck0sRUFBU3FNLE1BQVEsQ0FBQyxFQUNkMEIsR0FDQStiLEdBQW9COXBCLEVBQVUrTixJQUd0QyxJQUFBOVIsS0FBSStELEVBQVNxTSxNQUFPa3VCLEdBQW1CLEVBQUUsRUFzMUZ6QzhDLENBQVVyOUIsRUFBVStOLEdBQ3BCLE1BQU11dkIsRUFBY0gsRUFNeEIsU0FBZ0NuOUIsRUFBVXpCLEdBQ3RDLElBQUl4TyxFQUNKLE1BQU1vYyxFQUFZbk0sRUFBUzlMLEtBS3ZCLEdBSElpWSxFQUFVdkssTUFDVnNwQixHQUFzQi9lLEVBQVV2SyxLQUFNNUIsRUFBU0csV0FBV0MsUUFFMUQrTCxFQUFVaWEsV0FBWSxDQUN0QixNQUFNbVgsRUFBUXR2QyxPQUFPc0IsS0FBSzRjLEVBQVVpYSxZQUNwQyxJQUFLLElBQUlwOEIsRUFBSSxFQUFHQSxFQUFJdXpDLEVBQU1oekMsT0FBUVAsSUFDOUJraEMsR0FBc0JxUyxFQUFNdnpDLEdBQUlnVyxFQUFTRyxXQUFXQyxPQUU1RCxDQUNBLEdBQUkrTCxFQUFVc1QsV0FBWSxDQUN0QixNQUFNOGQsRUFBUXR2QyxPQUFPc0IsS0FBSzRjLEVBQVVzVCxZQUNwQyxJQUFLLElBQUl6MUIsRUFBSSxFQUFHQSxFQUFJdXpDLEVBQU1oekMsT0FBUVAsSUFDOUJzMUIsR0FBc0JpZSxFQUFNdnpDLEdBRXBDLENBQ0ltaUIsRUFBVStkLGlCQUFtQnNULE1BQzdCcHRDLEVBQUssZ05BTWI0UCxFQUFTMGpCLFlBQWN6MUIsT0FBT3lqQixPQUFPLE1BR3JDMVIsRUFBU2hULE9BQVEsSUFBQWdQLFNBQVEsSUFBSTFQLE1BQU0wVCxFQUFTd0wsSUFBS2lZLEtBdDBIckQsU0FBb0N6akIsR0FDaEMsTUFBTSxJQUFFd0wsRUFBSzlDLGNBQWVBLElBQWtCMUksRUFDMUMwSSxHQUNBemEsT0FBT3NCLEtBQUttWixHQUFjeFQsU0FBUWYsSUFDOUJsRyxPQUFPaTJCLGVBQWUxWSxFQUFLclgsRUFBSyxDQUM1Qmd3QixZQUFZLEVBQ1pDLGNBQWMsRUFDZGoxQixJQUFLLElBQU02USxFQUFTcUIsTUFBTWxOLEdBQzFCRSxJQUFLLEVBQUFraEIsTUFDUCxHQUdkLENBNHpIUWtvQixDQUEyQno5QixHQUcvQixNQUFNLE1BQUUrWCxHQUFVNUwsRUFDbEIsR0FBSTRMLEVBQU8sQ0FDUCxNQUFNNGtCLEVBQWdCMzhCLEVBQVMyOEIsYUFDM0I1a0IsRUFBTXh0QixPQUFTLEVBQUltekMsR0FBbUIxOUIsR0FBWSxLQUN0RDhWLEdBQW1COVYsSUFDbkIsSUFBQWxNLGlCQUNBLE1BQU13cEMsRUFBYzE4QixFQUFzQm1YLEVBQU8vWCxFQUFVLEVBQW1DLEVBQTJDLElBQUEzRSxpQkFBZ0IyRSxFQUFTcUIsT0FBeUJzN0IsSUFHM0wsSUFGQSxJQUFBM29DLGlCQUNBK2hCLE1BQ0ksSUFBQTlULFdBQVVxN0IsR0FBYyxDQUV4QixHQURBQSxFQUFZMzlCLEtBQUtvVyxHQUFzQkEsSUFDbkN4WCxFQUVBLE9BQU8rK0IsRUFDRjM5QixNQUFNZytCLElBQ1B2cUIsR0FBa0JwVCxFQUFVMjlCLEVBQWdCcC9CLEVBQU0sSUFFakQyRCxPQUFNelQsSUFDUHNULEVBQVl0VCxFQUFHdVIsRUFBVSxFQUFrQyxJQU0vREEsRUFBU2dULFNBQVdzcUIsRUFDNEJ0OUIsRUFBU2lRLFVBRXJEN2YsRUFBSyxjQURrQyxRQUF6QkwsRUFBS29jLEVBQVV2SyxZQUF5QixJQUFQN1IsRUFBZ0JBLEVBQUssNk1BT2hGLE1BRUlxakIsR0FBa0JwVCxFQUFVczlCLEVBQWEvK0IsRUFFakQsTUFFSXEvQixHQUFxQjU5QixFQUFVekIsRUFFdkMsQ0FoRlVzL0IsQ0FBdUI3OUIsRUFBVXpCLFFBQ2pDdk8sRUFFTixPQURBeWxCLElBQXdCLEVBQ2pCNm5CLENBQ1gsQ0E2RUEsU0FBU2xxQixHQUFrQnBULEVBQVVzOUIsRUFBYS8rQixJQUMxQyxJQUFBUSxZQUFXdStCLEdBRVB0OUIsRUFBUzlMLEtBQUs0cEMsa0JBR2Q5OUIsRUFBUys5QixVQUFZVCxFQUdyQnQ5QixFQUFTOEYsT0FBU3czQixHQUdqQixJQUFBL2xDLFVBQVMrbEMsSUFDaUMvdUIsR0FBUSt1QixJQUNuRGx0QyxFQUFLLGlGQU1MNFAsRUFBU2crQixzQkFBd0JWLEVBRXJDdDlCLEVBQVN1TSxZQUFhLElBQUFwUCxXQUFVbWdDLEdBNzNIeEMsU0FBeUN0OUIsR0FDckMsTUFBTSxJQUFFd0wsRUFBRyxXQUFFZSxHQUFldk0sRUFDNUIvUixPQUFPc0IsTUFBSyxJQUFBbUgsT0FBTTZWLElBQWFyWCxTQUFRZixJQUNuQyxJQUFLb1ksRUFBV29YLGdCQUFpQixDQUM3QixHQUFJSCxHQUFpQnJ2QixFQUFJLElBR3JCLFlBRkEvRCxFQUFLLDJCQUEyQjdCLEtBQUtPLFVBQVVxRixzRkFJbkRsRyxPQUFPaTJCLGVBQWUxWSxFQUFLclgsRUFBSyxDQUM1Qmd3QixZQUFZLEVBQ1pDLGNBQWMsRUFDZGoxQixJQUFLLElBQU1vZCxFQUFXcFksR0FDdEJFLElBQUssRUFBQWtoQixNQUViLElBRVIsQ0E4MkhZMG9CLENBQWdDaitCLFNBRzRCaFEsSUFBaEJzdEMsR0FDaERsdEMsRUFBSywrQ0FBOEQsT0FBaEJrdEMsRUFBdUIsY0FBZ0JBLElBRTlGTSxHQUFxQjU5QixFQUFVekIsRUFDbkMsQ0FPQSxTQUFTMi9CLEdBQXdCQyxHQUM3QjcwQyxHQUFVNjBDLEVBQ1ZqQixHQUFtQmx6QyxJQUNYQSxFQUFFOGIsT0FBT3M0QixNQUNUcDBDLEVBQUVvaUIsVUFBWSxJQUFJOWYsTUFBTXRDLEVBQUV3aEIsSUFBSzZZLElBQ25DLENBRVIsQ0FFQSxNQUFNbVosR0FBZ0IsS0FBT2wwQyxHQUM3QixTQUFTczBDLEdBQXFCNTlCLEVBQVV6QixFQUFPOC9CLEdBQzNDLE1BQU1seUIsRUFBWW5NLEVBQVM5TCxLQUczQixJQUFLOEwsRUFBUzhGLE9BQVEsQ0FHbEIsSUFBS3ZILEdBQVNqVixLQUFZNmlCLEVBQVVyRyxPQUFRLENBQ3hDLE1BQU13NEIsRUFBV255QixFQUFVbXlCLFVBQ3ZCbmIsR0FBcUJuakIsR0FBVXMrQixTQUNuQyxHQUFJQSxFQUFVLENBRU5wUCxHQUFhbHZCLEVBQVUsV0FFM0IsTUFBTSxnQkFBRXUrQixFQUFlLGdCQUFFclUsR0FBb0JscUIsRUFBU0csV0FBV0MsUUFDM0QsV0FBRW8rQixFQUFZdFUsZ0JBQWlCdVUsR0FBNkJ0eUIsRUFDNUR1eUIsR0FBdUIsSUFBQWpyQyxTQUFPLElBQUFBLFFBQU8sQ0FDdkM4cUMsa0JBQ0FDLGNBQ0R0VSxHQUFrQnVVLEdBQ3JCdHlCLEVBQVVyRyxPQUFTeGMsR0FBUWcxQyxFQUFVSSxHQUVqQ3JQLEdBQVdydkIsRUFBVSxVQUU3QixDQUNKLENBQ0FBLEVBQVM4RixPQUFVcUcsRUFBVXJHLFFBQVUsRUFBQXlQLEtBSW5DMm5CLElBQ0FBLEdBQWlCbDlCLEVBRXpCLENBRUlzSyxzQkFDQXdMLEdBQW1COVYsSUFDbkIsSUFBQWxNLGlCQTc1SFIsU0FBc0JrTSxHQUNsQixNQUFNek0sRUFBVTR2QixHQUFxQm5qQixHQUMvQjRWLEVBQWE1VixFQUFTaFQsTUFDdEJ3ZSxFQUFNeEwsRUFBU3dMLElBRXJCcVksSUFBb0IsRUFHaEJ0d0IsRUFBUWd5QixjQUNSak0sR0FBUy9sQixFQUFRZ3lCLGFBQWN2bEIsRUFBVSxNQUU3QyxNQUVBMVIsS0FBTXF3QyxFQUFhcHBDLFNBQVVxcEMsRUFBZSxRQUFFdFosRUFBU3pRLE1BQU9ncUIsRUFBYzVxQixRQUFTNnFCLEVBQWdCenFCLE9BQVEwcUIsRUFBYSxRQUUxSHRaLEVBQU8sWUFBRUMsRUFBVyxRQUFFM0YsRUFBTyxhQUFFNEYsRUFBWSxRQUFFM0YsRUFBTyxVQUFFZ0csRUFBUyxZQUFFQyxFQUFXLGNBQUVMLEVBQWEsY0FBRUMsRUFBYSxVQUFFQyxFQUFTLFVBQUVDLEVBQVMsT0FBRWpnQixFQUFNLGNBQUVrNUIsRUFBYSxnQkFBRUMsRUFBZSxjQUFFL1ksRUFBYSxlQUFFQyxFQUFjLE9BRXZNK1ksRUFBTSxhQUFFMXlCLEVBQVksV0FFcEI0WixFQUFVLFdBQUUzRyxFQUFVLFFBQUUwZixHQUFZNXJDLEVBQzlCNnJDLEVBaENWLFdBQ0ksTUFBTXAxQixFQUFRL2IsT0FBT3lqQixPQUFPLE1BQzVCLE1BQU8sQ0FBQ3hkLEVBQU1DLEtBQ042VixFQUFNN1YsR0FDTi9ELEVBQUssR0FBRzhELGVBQWtCQyw0QkFBOEI2VixFQUFNN1YsT0FHOUQ2VixFQUFNN1YsR0FBT0QsQ0FDakIsQ0FFUixDQXNCK0VtckMsR0FDOUIsQ0FDekMsTUFBTzMyQixHQUFnQjFJLEVBQVMwSSxhQUNoQyxHQUFJQSxFQUNBLElBQUssTUFBTXZVLEtBQU91VSxFQUNkMDJCLEVBQXlCLFFBQWlDanJDLEVBR3RFLENBV0EsR0FISTRxQyxHQWtLUixTQUEyQkEsRUFBZXZ6QixFQUFLNHpCLEVBQTJCLEVBQUE3cEIsS0FBTStwQixHQUFZLElBQ3BGLElBQUFycUMsU0FBUThwQyxLQUNSQSxFQUFnQnpZLEdBQWdCeVksSUFFcEMsSUFBSyxNQUFNNXFDLEtBQU80cUMsRUFBZSxDQUM3QixNQUFNOVgsRUFBTThYLEVBQWM1cUMsR0FDMUIsSUFBSXNxQixFQUdJQSxHQUZKLElBQUFsbkIsVUFBUzB2QixHQUNMLFlBQWFBLEVBQ0Y1UyxHQUFPNFMsRUFBSTlGLE1BQVFodEIsRUFBSzh5QixFQUFJblYsU0FBUyxHQUdyQ3VDLEdBQU80UyxFQUFJOUYsTUFBUWh0QixHQUl2QmtnQixHQUFPNFMsSUFFbEIsSUFBQTN2QixPQUFNbW5CLEdBRUY2Z0IsRUFDQXJ4QyxPQUFPaTJCLGVBQWUxWSxFQUFLclgsRUFBSyxDQUM1Qmd3QixZQUFZLEVBQ1pDLGNBQWMsRUFDZGoxQixJQUFLLElBQU1zdkIsRUFBU3AwQixNQUNwQmdLLElBQUtxRSxHQUFNK2xCLEVBQVNwMEIsTUFBUXFPLEtBSzVCdEksRUFBSyxzQkFBc0IrRCxvUEFNL0JxWCxFQUFJclgsR0FBT3NxQixHQUlmalQsRUFBSXJYLEdBQU9zcUIsRUFHWDJnQixFQUF5QixTQUFtQ2pyQyxFQUVwRSxDQUNKLENBL01Rb3JDLENBQWtCUixFQUFldnpCLEVBQUs0ekIsRUFBMEJwL0IsRUFBU0csV0FBV0MsT0FBT28vQixtQkFFM0ZsYSxFQUNBLElBQUssTUFBTW54QixLQUFPbXhCLEVBQVMsQ0FDdkIsTUFBTW1hLEVBQWdCbmEsRUFBUW54QixJQUMxQixJQUFBNEssWUFBVzBnQyxJQUtQeHhDLE9BQU9pMkIsZUFBZTFZLEVBQUtyWCxFQUFLLENBQzVCOUosTUFBT28xQyxFQUFjN3JDLEtBQUtnaUIsR0FDMUJ3TyxjQUFjLEVBQ2RELFlBQVksRUFDWnViLFVBQVUsSUFPZE4sRUFBeUIsVUFBcUNqckMsSUFJbEUvRCxFQUFLLFdBQVcrRCx1QkFBeUJzckMsNEVBR2pELENBRUosR0FBSWQsRUFBYSxFQUNtQyxJQUFBNS9CLFlBQVc0L0IsSUFDdkR2dUMsRUFBSyxrRkFHVCxNQUFNOUIsRUFBT3F3QyxFQUFZemxDLEtBQUswYyxFQUFZQSxHQU0xQyxJQUwrQyxJQUFBM1QsV0FBVTNULElBQ3JEOEIsRUFBSyw4SkFJSixJQUFBbUgsVUFBU2pKLEdBR1QsQ0FDRDBSLEVBQVMxUixNQUFPLElBQUFtSixVQUFTbkosR0FFckIsSUFBSyxNQUFNNkYsS0FBTzdGLEVBQ2Q4d0MsRUFBeUIsT0FBK0JqckMsR0FFbkRxdkIsR0FBaUJydkIsRUFBSSxLQUN0QmxHLE9BQU9pMkIsZUFBZTFZLEVBQUtyWCxFQUFLLENBQzVCaXdCLGNBQWMsRUFDZEQsWUFBWSxFQUNaaDFCLElBQUssSUFBTWIsRUFBSzZGLEdBQ2hCRSxJQUFLLEVBQUFraEIsTUFLekIsTUFsQitDbmxCLEVBQUssa0NBbUJ4RCxDQUdBLEdBREF5ekIsSUFBb0IsRUFDaEIrYSxFQUNBLElBQUssTUFBTXpxQyxLQUFPeXFDLEVBQWlCLENBQy9CLE1BQU0zWCxFQUFNMlgsRUFBZ0J6cUMsR0FDdEJoRixHQUFNLElBQUE0UCxZQUFXa29CLEdBQ2pCQSxFQUFJcnpCLEtBQUtnaUIsRUFBWUEsSUFDckIsSUFBQTdXLFlBQVdrb0IsRUFBSTkzQixLQUNYODNCLEVBQUk5M0IsSUFBSXlFLEtBQUtnaUIsRUFBWUEsR0FDekIsRUFBQUwsS0FDcUNwbUIsSUFBUSxFQUFBb21CLE1BQ25EbmxCLEVBQUssc0JBQXNCK0QscUJBRS9CLE1BQU1FLElBQU8sSUFBQTBLLFlBQVdrb0IsS0FBUSxJQUFBbG9CLFlBQVdrb0IsRUFBSTV5QixLQUN6QzR5QixFQUFJNXlCLElBQUlULEtBQUtnaUIsR0FFVCxLQUNFeGxCLEVBQUssOENBQThDK0Qsa0JBQW9CLEVBRzdFdEssRUFBSTBMLEdBQVMsQ0FDZnBHLE1BQ0FrRixRQUVKcEcsT0FBT2kyQixlQUFlMVksRUFBS3JYLEVBQUssQ0FDNUJnd0IsWUFBWSxFQUNaQyxjQUFjLEVBQ2RqMUIsSUFBSyxJQUFNdEYsRUFBRVEsTUFDYmdLLElBQUtxRSxHQUFNN08sRUFBRVEsTUFBUXFPLElBR3JCMG1DLEVBQXlCLFdBQXVDanJDLEVBRXhFLENBRUosR0FBSTBxQyxFQUNBLElBQUssTUFBTTFxQyxLQUFPMHFDLEVBQ2RwYSxHQUFjb2EsRUFBYTFxQyxHQUFNcVgsRUFBS29LLEVBQVl6aEIsR0FHMUQsR0FBSTJxQyxFQUFnQixDQUNoQixNQUFNM3FCLEdBQVcsSUFBQXBWLFlBQVcrL0IsR0FDdEJBLEVBQWU1bEMsS0FBSzBjLEdBQ3BCa3BCLEVBQ056bkMsUUFBUWMsUUFBUWdjLEdBQVVqZixTQUFRZixJQUM5QjhmLEdBQVE5ZixFQUFLZ2dCLEVBQVNoZ0IsR0FBSyxHQUVuQyxDQUlBLFNBQVN3ckMsRUFBc0JDLEVBQVVoekMsSUFDakMsSUFBQXFJLFNBQVFySSxHQUNSQSxFQUFLc0ksU0FBUTJxQyxHQUFTRCxFQUFTQyxFQUFNanNDLEtBQUtnaUIsTUFFckNocEIsR0FDTGd6QyxFQUFTaHpDLEVBQUtnSCxLQUFLZ2lCLEdBRTNCLENBYUEsR0F2Qkk2UCxHQUNBbk0sR0FBU21NLEVBQVN6bEIsRUFBVSxLQVVoQzIvQixFQUFzQjNnQixHQUFlMEcsR0FDckNpYSxFQUFzQmhwQixHQUFXb0osR0FDakM0ZixFQUFzQjFnQixHQUFnQjBHLEdBQ3RDZ2EsRUFBc0JoaUIsR0FBV3FDLEdBQ2pDMmYsRUFBc0IxaEIsR0FBYStILEdBQ25DMlosRUFBc0J4aEIsR0FBZThILEdBQ3JDMFosRUFBc0J0Z0IsR0FBaUI2RyxHQUN2Q3laLEVBQXNCdmdCLEdBQWlCNGYsR0FDdkNXLEVBQXNCeGdCLEdBQW1COGYsR0FDekNVLEVBQXNCL29CLEdBQWlCaVAsR0FDdkM4WixFQUFzQmpoQixHQUFhcUgsR0FDbkM0WixFQUFzQnpnQixHQUFrQmlILElBQ3BDLElBQUFseEIsU0FBUWlxQyxHQUNSLEdBQUlBLEVBQU8zMEMsT0FBUSxDQUNmLE1BQU1reUMsRUFBVXo4QixFQUFTeThCLFVBQVl6OEIsRUFBU3k4QixRQUFVLENBQUMsR0FDekR5QyxFQUFPaHFDLFNBQVFmLElBQ1hsRyxPQUFPaTJCLGVBQWV1WSxFQUFTdG9DLEVBQUssQ0FDaENoRixJQUFLLElBQU15bUIsRUFBV3poQixHQUN0QkUsSUFBSzZKLEdBQVEwWCxFQUFXemhCLEdBQU8rSixHQUNqQyxHQUVWLE1BQ1U4QixFQUFTeThCLFVBQ2Z6OEIsRUFBU3k4QixRQUFVLENBQUMsR0FLeEIzMkIsR0FBVTlGLEVBQVM4RixTQUFXLEVBQUF5UCxPQUM5QnZWLEVBQVM4RixPQUFTQSxHQUVGLE1BQWhCMEcsSUFDQXhNLEVBQVN3TSxhQUFlQSxHQUd4QjRaLElBQ0FwbUIsRUFBU29tQixXQUFhQSxHQUN0QjNHLElBQ0F6ZixFQUFTeWYsV0FBYUEsRUFDOUIsQ0F5dEhRcWdCLENBQWE5L0IsSUFDYixJQUFBaE0saUJBQ0EraEIsTUFJNEM1SixFQUFVckcsUUFBVTlGLEVBQVM4RixTQUFXLEVBQUF5UCxNQUFTaFgsS0FFeEZqVixJQUFXNmlCLEVBQVVteUIsU0FDdEJsdUMsRUFBSyw2S0FNTEEsRUFBSyxxREFHakIsQ0F5QkEsU0FBU3N0QyxHQUFtQjE5QixHQU94QixJQUFJc00sRUFJQSxPQUFPcmUsT0FBTzh4QyxPQUFPLENBQ2J6ekIsWUFDQSxPQUFPQSxJQUFVQSxFQXJDakMsU0FBMEJ0TSxHQUN0QixPQUFPLElBQUkxVCxNQUFNMFQsRUFBU3NNLE1BQ3BCLENBQ0VuZCxJQUFHLENBQUN4QyxFQUFRd0gsS0FDUjhYLE1BQ0EsSUFBQWhZLE9BQU0rTCxFQUFVLE1BQThCLFVBQ3ZDclQsRUFBT3dILElBRWxCRSxJQUFHLEtBQ0NqRSxFQUFLLG9DQUNFLEdBRVg4SCxlQUFjLEtBQ1Y5SCxFQUFLLG9DQUNFLElBU3ZCLENBY3lDNHZDLENBQWlCaGdDLEdBQzlDLEVBQ0lxTSxZQUNBLE9BQU8sSUFBQWhSLGlCQUFnQjJFLEVBQVNxTSxNQUNwQyxFQUNJamYsV0FDQSxNQUFPLENBQUM4WixLQUFVaGQsSUFBUzhWLEVBQVM1UyxLQUFLOFosS0FBVWhkLEVBQ3ZELEVBQ0FnMUMsT0FwQk96QyxJQUNvQ3o4QixFQUFTeThCLFNBQ3BEcnNDLEVBQUssb0RBRVQ0UCxFQUFTeThCLFFBQVVBLEdBQVcsQ0FBQyxDQUFDLEdBNkJ4QyxDQUNBLFNBQVM5YyxHQUFlM2YsR0FDcEIsR0FBSUEsRUFBU3k4QixRQUNULE9BQVF6OEIsRUFBUzA4QixjQUNaMThCLEVBQVMwOEIsWUFBYyxJQUFJcHdDLE9BQU0sSUFBQTZRLFlBQVUsSUFBQW5CLFNBQVFnRSxFQUFTeThCLFVBQVcsQ0FDcEV0dEMsSUFBRyxDQUFDeEMsRUFBUXdILElBQ0pBLEtBQU94SCxFQUNBQSxFQUFPd0gsR0FFVEEsS0FBT211QixHQUNMQSxHQUFvQm51QixHQUFLNkwsUUFEL0IsSUFNekIsQ0FDQSxNQUFNaWdDLEdBQWEsa0JBRW5CLFNBQVM5NkIsR0FBaUJnSCxFQUFXK3pCLEdBQWtCLEdBQ25ELE9BQU8sSUFBQW5oQyxZQUFXb04sR0FDWkEsRUFBVWcwQixhQUFlaDBCLEVBQVV2SyxLQUNuQ3VLLEVBQVV2SyxNQUFTcytCLEdBQW1CL3pCLEVBQVVpMEIsTUFDMUQsQ0FFQSxTQUFTdC9CLEdBQW9CZCxFQUFVbU0sRUFBV2pMLEdBQVMsR0FDdkQsSUFBSVUsRUFBT3VELEdBQWlCZ0gsR0FDNUIsSUFBS3ZLLEdBQVF1SyxFQUFVazBCLE9BQVEsQ0FDM0IsTUFBTWoxQyxFQUFRK2dCLEVBQVVrMEIsT0FBT2oxQyxNQUFNLG1CQUNqQ0EsSUFDQXdXLEVBQU94VyxFQUFNLEdBRXJCLENBQ0EsSUFBS3dXLEdBQVE1QixHQUFZQSxFQUFTblAsT0FBUSxDQUV0QyxNQUFNeXZDLEVBQXFCdmYsSUFDdkIsSUFBSyxNQUFNNXNCLEtBQU80c0IsRUFDZCxHQUFJQSxFQUFTNXNCLEtBQVNnWSxFQUNsQixPQUFPaFksQ0FFZixFQUVKeU4sRUFDSTArQixFQUFrQnRnQyxFQUFTb21CLFlBQ3ZCcG1CLEVBQVNuUCxPQUFPcUQsS0FBS2t5QixhQUFla2EsRUFBa0J0Z0MsRUFBU0csV0FBV2ltQixXQUN0RixDQUNBLE9BQU94a0IsRUFBZ0JBLEVBNUJHaUosUUFBUW8xQixJQUFZcDJDLEdBQUtBLEVBQUUwMkMsZ0JBQWUxMUIsUUFBUSxRQUFTLElBNEJ0RDNKLEVBQVMsTUFBUSxXQUNwRCxDQUNBLFNBQVMwRixHQUFpQnZjLEdBQ3RCLE9BQU8sSUFBQTBVLFlBQVcxVSxJQUFVLGNBQWVBLENBQy9DLENBRUEsTUFBTWtMLEdBQVcsQ0FBRW9KLEVBQWlCQyxLQUV6QixJQUFBckosVUFBV29KLEVBQWlCQyxFQUFjNlcsSUFJL0MrcUIsR0FBb0JseEMsR0FBV2MsRUFBSyxHQUFHZCxzTEFJN0MsU0FBU214QyxLQUlMLE9BRklELEdBQWlCLGVBRWQsSUFDWCxDQUVBLFNBQVNFLEtBSUwsT0FGSUYsR0FBaUIsZUFFZCxJQUNYLENBYUEsU0FBU0csR0FBYWxFLEdBRWQrRCxHQUFpQixlQUV6QixDQW1CQSxTQUFTSSxHQUFhdi9CLEVBQU93L0IsR0FJekIsT0FGSUwsR0FBaUIsZ0JBRWQsSUFDWCxDQUNBLFNBQVNNLEtBQ0wsT0FBT0MsS0FBYTEwQixLQUN4QixDQUNBLFNBQVMyMEIsS0FDTCxPQUFPRCxLQUFhejBCLEtBQ3hCLENBQ0EsU0FBU3kwQixLQUNMLE1BQU0vMkMsRUFBSWd1QixLQUlWLE9BSGdEaHVCLEdBQzVDb0csRUFBSyxnREFFRnBHLEVBQUUyeUMsZUFBaUIzeUMsRUFBRTJ5QyxhQUFlZSxHQUFtQjF6QyxHQUNsRSxDQU1BLFNBQVNpM0MsR0FBYzl5QyxFQUFLMHlDLEdBQ3hCLE1BQU14L0IsR0FBUSxJQUFBcE0sU0FBUTlHLEdBQ2hCQSxFQUFJK3lDLFFBQU8sQ0FBQzkyQixFQUFZNUcsS0FBUTRHLEVBQVc1RyxHQUFLLENBQUMsRUFBSTRHLElBQWEsQ0FBQyxHQUNuRWpjLEVBQ04sSUFBSyxNQUFNZ0csS0FBTzBzQyxFQUFVLENBQ3hCLE1BQU01WixFQUFNNWxCLEVBQU1sTixHQUNkOHlCLEdBQ0ksSUFBQWh5QixTQUFRZ3lCLEtBQVEsSUFBQWxvQixZQUFXa29CLEdBQzNCNWxCLEVBQU1sTixHQUFPLENBQUVELEtBQU0reUIsRUFBS25WLFFBQVMrdUIsRUFBUzFzQyxJQUc1Qzh5QixFQUFJblYsUUFBVSt1QixFQUFTMXNDLEdBR2QsT0FBUjh5QixFQUNMNWxCLEVBQU1sTixHQUFPLENBQUUyZCxRQUFTK3VCLEVBQVMxc0MsSUFHakMvRCxFQUFLLHNCQUFzQitELHVDQUVuQyxDQUNBLE9BQU9rTixDQUNYLENBTUEsU0FBUzgvQixHQUFxQjkvQixFQUFPKy9CLEdBQ2pDLE1BQU14akMsRUFBTSxDQUFDLEVBQ2IsSUFBSyxNQUFNekosS0FBT2tOLEVBQ1QrL0IsRUFBYTV4QyxTQUFTMkUsSUFDdkJsRyxPQUFPaTJCLGVBQWV0bUIsRUFBS3pKLEVBQUssQ0FDNUJnd0IsWUFBWSxFQUNaaDFCLElBQUssSUFBTWtTLEVBQU1sTixLQUk3QixPQUFPeUosQ0FDWCxDQW1CQSxTQUFTeWpDLEdBQWlCQyxHQUN0QixNQUFNOTFCLEVBQU13TSxLQUNvQ3hNLEdBQzVDcGIsRUFBSyxrRkFHVCxJQUFJbXhDLEVBQVlELElBUWhCLE9BUEF2ckIsTUFDSSxJQUFBOVQsV0FBVXMvQixLQUNWQSxFQUFZQSxFQUFVci9CLE9BQU16VCxJQUV4QixNQURBcW5CLEdBQW1CdEssR0FDYi9jLENBQUMsS0FHUixDQUFDOHlDLEVBQVcsSUFBTXpyQixHQUFtQnRLLEdBQ2hELENBR0EsU0FBU2daLEdBQUV0d0IsRUFBTXN0QyxFQUFpQnp6QixHQUM5QixNQUFNMWMsRUFBSWtqQixVQUFVaHFCLE9BQ3BCLE9BQVUsSUFBTjhHLEdBQ0ksSUFBQWtHLFVBQVNpcUMsTUFBcUIsSUFBQXZzQyxTQUFRdXNDLEdBRWxDanpCLEdBQVFpekIsR0FDRHowQixHQUFZN1ksRUFBTSxLQUFNLENBQUNzdEMsSUFHN0J6MEIsR0FBWTdZLEVBQU1zdEMsR0FJbEJ6MEIsR0FBWTdZLEVBQU0sS0FBTXN0QyxJQUkvQm53QyxFQUFJLEVBQ0owYyxFQUFXdmpCLE1BQU1pM0MsVUFBVWhnQyxNQUFNdkksS0FBS3FiLFVBQVcsR0FFdEMsSUFBTmxqQixHQUFXa2QsR0FBUVIsS0FDeEJBLEVBQVcsQ0FBQ0EsSUFFVGhCLEdBQVk3WSxFQUFNc3RDLEVBQWlCenpCLEdBRWxELENBRUEsTUFBTTJ6QixHQUFnQmp2QyxPQUFpRCxjQUNqRWt2QyxHQUFnQixLQUNsQixDQUNJLE1BQU1uMkIsRUFBTTZJLEdBQU9xdEIsSUFLbkIsT0FKS2wyQixHQUNEcGIsRUFBSyxvSEFHRm9iLENBQ1gsR0FHSixTQUFTNVQsR0FBVXZOLEdBQ2YsU0FBVUEsSUFBU0EsRUFBb0QsY0FDM0UsQ0FFQSxTQUFTdTNDLEtBRUwsR0FBa0Usb0JBQVh6MUMsT0FDbkQsT0FFSixNQUFNMDFDLEVBQVcsQ0FBRTlPLE1BQU8saUJBQ3BCK08sRUFBYyxDQUFFL08sTUFBTyxpQkFDdkJnUCxFQUFjLENBQUVoUCxNQUFPLGlCQUN2QmlQLEVBQWUsQ0FBRWpQLE1BQU8saUJBR3hCa1AsRUFBWSxDQUNkQyxPQUFPaGdCLElBRUgsT0FBSyxJQUFBM3FCLFVBQVMycUIsR0FHVkEsRUFBSWlnQixRQUNHLENBQUMsTUFBT04sRUFBVSxnQkFFcEIsSUFBQXZxQyxPQUFNNHFCLEdBQ0osQ0FDSCxNQUNBLENBQUMsRUFDRCxDQUFDLE9BQVEyZixHQW9KTG5wQyxFQXBKMEJ3cEIsRUFxSnRDdHFCLEdBQVVjLEdBQ0gsYUFFUEEsRUFBRWpILE9BQ0ssY0FFSixRQTFKSyxJQUNBMndDLEVBQVlsZ0IsRUFBSTczQixPQUNoQixNQUdDLElBQUF5UixZQUFXb21CLEdBQ1QsQ0FDSCxNQUNBLENBQUMsRUFDRCxDQUFDLE9BQVEyZixFQUFVanFDLEdBQVVzcUIsR0FBTyxrQkFBb0IsWUFDeEQsSUFDQWtnQixFQUFZbGdCLEdBQ1osTUFBSSxJQUFBdHJCLFlBQVdzckIsR0FBTyxjQUFnQixNQUdyQyxJQUFBdHJCLFlBQVdzckIsR0FDVCxDQUNILE1BQ0EsQ0FBQyxFQUNELENBQUMsT0FBUTJmLEVBQVVqcUMsR0FBVXNxQixHQUFPLGtCQUFvQixZQUN4RCxJQUNBa2dCLEVBQVlsZ0IsR0FDWixLQUdELEtBbkNJLEtBNkpuQixJQUFvQnhwQixDQXpIaEIsRUFDQTJwQyxRQUFRbmdCLEdBQ0dBLEdBQU9BLEVBQUlpZ0IsUUFFdEJHLEtBQUtwZ0IsR0FDRCxHQUFJQSxHQUFPQSxFQUFJaWdCLFFBQ1gsTUFBTyxDQUNILE1BQ0EsQ0FBQyxLQUNFSSxFQUFlcmdCLEVBQUlLLEdBR2xDLEdBRUosU0FBU2dnQixFQUFldmlDLEdBQ3BCLE1BQU13aUMsRUFBUyxHQUNYeGlDLEVBQVM5TCxLQUFLbU4sT0FBU3JCLEVBQVNxQixPQUNoQ21oQyxFQUFPMzNDLEtBQUs0M0MsRUFBb0IsU0FBUyxJQUFBL3JDLE9BQU1zSixFQUFTcUIsU0FFeERyQixFQUFTdU0sYUFBZSxFQUFBL0QsV0FDeEJnNkIsRUFBTzMzQyxLQUFLNDNDLEVBQW9CLFFBQVN6aUMsRUFBU3VNLGFBRWxEdk0sRUFBUzFSLE9BQVMsRUFBQWthLFdBQ2xCZzZCLEVBQU8zM0MsS0FBSzQzQyxFQUFvQixRQUFRLElBQUEvckMsT0FBTXNKLEVBQVMxUixRQUUzRCxNQUFNaUgsRUFBV210QyxFQUFZMWlDLEVBQVUsWUFDbkN6SyxHQUNBaXRDLEVBQU8zM0MsS0FBSzQzQyxFQUFvQixXQUFZbHRDLElBRWhELE1BQU1rcEIsRUFBV2lrQixFQUFZMWlDLEVBQVUsVUFnQnZDLE9BZkl5ZSxHQUNBK2pCLEVBQU8zM0MsS0FBSzQzQyxFQUFvQixXQUFZaGtCLElBRWhEK2pCLEVBQU8zM0MsS0FBSyxDQUNSLE1BQ0EsQ0FBQyxFQUNELENBQ0ksT0FDQSxDQUNJa29DLE1BQU9pUCxFQUFhalAsTUFBUSxpQkFFaEMsa0JBRUosQ0FBQyxTQUFVLENBQUVwMUIsT0FBUXFDLE1BRWxCd2lDLENBQ1gsQ0FDQSxTQUFTQyxFQUFvQnZ1QyxFQUFNdkgsR0FFL0IsT0FEQUEsR0FBUyxJQUFBOEcsUUFBTyxDQUFDLEVBQUc5RyxHQUNmc0IsT0FBT3NCLEtBQUs1QyxHQUFRcEMsT0FHbEIsQ0FDSCxNQUNBLENBQUV3b0MsTUFBTywwQ0FDVCxDQUNJLE1BQ0EsQ0FDSUEsTUFBTyxpQkFFWDcrQixHQUVKLENBQ0ksTUFDQSxDQUNJNitCLE1BQU8sMEJBRVI5a0MsT0FBT3NCLEtBQUs1QyxHQUFRcUosS0FBSTdCLEdBQ2hCLENBQ0gsTUFDQSxDQUFDLEVBQ0QsQ0FBQyxPQUFRNnRDLEVBQWM3dEMsRUFBTSxNQUM3Qml1QyxFQUFZejFDLEVBQU93SCxJQUFNLFFBdEI5QixDQUFDLE9BQVEsQ0FBQyxFQTJCekIsQ0FDQSxTQUFTaXVDLEVBQVkxcEMsRUFBR2lxQyxHQUFRLEdBQzVCLE1BQWlCLGlCQUFOanFDLEVBQ0EsQ0FBQyxPQUFRb3BDLEVBQWFwcEMsR0FFWCxpQkFBTkEsRUFDTCxDQUFDLE9BQVFxcEMsRUFBYXh6QyxLQUFLTyxVQUFVNEosSUFFMUIsa0JBQU5BLEVBQ0wsQ0FBQyxPQUFRc3BDLEVBQWN0cEMsSUFFekIsSUFBQW5CLFVBQVNtQixHQUNQLENBQUMsU0FBVSxDQUFFaUYsT0FBUWdsQyxHQUFRLElBQUFqc0MsT0FBTWdDLEdBQUtBLElBR3hDLENBQUMsT0FBUXFwQyxFQUFhMXBDLE9BQU9LLEdBRTVDLENBQ0EsU0FBU2dxQyxFQUFZMWlDLEVBQVU5TCxHQUMzQixNQUFNMHVDLEVBQU81aUMsRUFBUzlMLEtBQ3RCLElBQUksSUFBQTZLLFlBQVc2akMsR0FDWCxPQUVKLE1BQU1DLEVBQVksQ0FBQyxFQUNuQixJQUFLLE1BQU0xdUMsS0FBTzZMLEVBQVN3TCxJQUNuQnMzQixFQUFZRixFQUFNenVDLEVBQUtELEtBQ3ZCMnVDLEVBQVUxdUMsR0FBTzZMLEVBQVN3TCxJQUFJclgsSUFHdEMsT0FBTzB1QyxDQUNYLENBQ0EsU0FBU0MsRUFBWUYsRUFBTXp1QyxFQUFLRCxHQUM1QixNQUFNNnVDLEVBQU9ILEVBQUsxdUMsR0FDbEIsVUFBSyxJQUFBZSxTQUFROHRDLElBQVNBLEVBQUt2ekMsU0FBUzJFLEtBQy9CLElBQUFvRCxVQUFTd3JDLElBQVM1dUMsS0FBTzR1QyxPQUcxQkgsRUFBS2w0QixVQUFXbzRCLEVBQVlGLEVBQUtsNEIsUUFBU3ZXLEVBQUtELFFBRy9DMHVDLEVBQUtuNEIsU0FBVW00QixFQUFLbjRCLE9BQU80QyxNQUFLNEUsR0FBSzZ3QixFQUFZN3dCLEVBQUc5ZCxFQUFLRCxZQUE3RCxDQUdKLENBVUkvSCxPQUFPNjJDLG1CQUNQNzJDLE9BQU82MkMsbUJBQW1CbjRDLEtBQUtvM0MsR0FHL0I5MUMsT0FBTzYyQyxtQkFBcUIsQ0FBQ2YsRUFFckMsQ0FFQSxTQUFTZ0IsR0FBUzlHLEVBQU1yMkIsRUFBUWtFLEVBQU94ZSxHQUNuQyxNQUFNMGUsRUFBU0YsRUFBTXhlLEdBQ3JCLEdBQUkwZSxHQUFVZzVCLEdBQVdoNUIsRUFBUWl5QixHQUM3QixPQUFPanlCLEVBRVgsTUFBTXRNLEVBQU1rSSxJQUdaLE9BREFsSSxFQUFJdStCLEtBQU9BLEVBQUsxNkIsUUFDUnVJLEVBQU14ZSxHQUFTb1MsQ0FDM0IsQ0FDQSxTQUFTc2xDLEdBQVdoNUIsRUFBUWl5QixHQUN4QixNQUFNbHhCLEVBQU9mLEVBQU9peUIsS0FDcEIsR0FBSWx4QixFQUFLMWdCLFFBQVU0eEMsRUFBSzV4QyxPQUNwQixPQUFPLEVBRVgsSUFBSyxJQUFJUCxFQUFJLEVBQUdBLEVBQUlpaEIsRUFBSzFnQixPQUFRUCxJQUM3QixJQUFJLElBQUFnTyxZQUFXaVQsRUFBS2poQixHQUFJbXlDLEVBQUtueUMsSUFDekIsT0FBTyxFQU9mLE9BSEkwcEIsR0FBcUIsR0FBS0UsSUFDMUJBLEdBQWEvb0IsS0FBS3FmLElBRWYsQ0FDWCxDQUdBLE1BQU00Z0IsR0FBVSxTQWFWcVksR0FaWSxDQUNkdlAsMkJBQ0FFLGtCQUNBNW5CLHVCQUNBbEIsK0JBQ0F1RCxXQUNBM0IsbUJBVUV3MkIsR0FBZ0IsS0FJaEJDLEdBQWMsMmpKQ2h0UHBCLE1BQ01DLEVBQTJCLG9CQUFiN3hCLFNBQTJCQSxTQUFXLEtBQ3BEOHhCLEVBQW9CRCxHQUFxQkEsRUFBSXZ6QixjQUFjLFlBQzNEeXpCLEVBQVUsQ0FDWnBXLE9BQVEsQ0FBQzllLEVBQU96ZCxFQUFReWUsS0FDcEJ6ZSxFQUFPNHlDLGFBQWFuMUIsRUFBT2dCLEdBQVUsS0FBSyxFQUU5QzZDLE9BQVE3RCxJQUNKLE1BQU16ZCxFQUFTeWQsRUFBTWtELFdBQ2pCM2dCLEdBQ0FBLEVBQU82eUMsWUFBWXAxQixFQUN2QixFQUVKeUIsY0FBZSxDQUFDNHpCLEVBQUtsMEIsRUFBT3NpQixFQUFJMXdCLEtBQzVCLE1BQU13TixFQUFLWSxFQUNMNnpCLEVBQUlNLGdCQWZKLDZCQWUyQkQsR0FDM0JMLEVBQUl2ekIsY0FBYzR6QixFQUFLNVIsRUFBSyxDQUFFQSxXQUFPL2hDLEdBSTNDLE1BSFksV0FBUjJ6QyxHQUFvQnRpQyxHQUEyQixNQUFsQkEsRUFBTXdpQyxVQUNuQ2gxQixFQUFHaTFCLGFBQWEsV0FBWXppQyxFQUFNd2lDLFVBRS9CaDFCLENBQUUsRUFFYnFlLFdBQVkwTyxHQUFRMEgsRUFBSVMsZUFBZW5JLEdBQ3ZDdk8sY0FBZXVPLEdBQVEwSCxFQUFJalcsY0FBY3VPLEdBQ3pDbkwsUUFBUyxDQUFDbmYsRUFBTXNxQixLQUNadHFCLEVBQUsweUIsVUFBWXBJLENBQUksRUFFekJqTCxlQUFnQixDQUFDOWhCLEVBQUkrc0IsS0FDakIvc0IsRUFBRzhmLFlBQWNpTixDQUFJLEVBRXpCcHFCLFdBQVlGLEdBQVFBLEVBQUtFLFdBQ3pCMmIsWUFBYTdiLEdBQVFBLEVBQUs2YixZQUMxQm9NLGNBQWUwSyxHQUFZWCxFQUFJL0osY0FBYzBLLEdBQzdDbFQsV0FBV2xpQixFQUFJamhCLEdBQ1hpaEIsRUFBR2kxQixhQUFhbDJDLEVBQUksR0FDeEIsRUFLQXFqQyxvQkFBb0I4SyxFQUFTbHJDLEVBQVF5ZSxFQUFRRyxFQUFPN0wsRUFBT0MsR0FFdkQsTUFBTXFnQyxFQUFTNTBCLEVBQVNBLEVBQU8yZSxnQkFBa0JwOUIsRUFBT3E5QixVQUl4RCxHQUFJdHFCLElBQVVBLElBQVVDLEdBQU9ELEVBQU11cEIsYUFFakMsS0FDSXQ4QixFQUFPNHlDLGFBQWE3L0IsRUFBTXVnQyxXQUFVLEdBQU83MEIsR0FDdkMxTCxJQUFVQyxJQUFTRCxFQUFRQSxFQUFNdXBCLG1CQUl4QyxDQUVEb1csRUFBa0I3VSxVQUFZamYsRUFBUSxRQUFRc3NCLFVBQWtCQSxFQUNoRSxNQUFNdUMsRUFBV2lGLEVBQWtCeEgsUUFDbkMsR0FBSXRzQixFQUFPLENBRVAsTUFBTTIwQixFQUFVOUYsRUFBUzFQLFdBQ3pCLEtBQU93VixFQUFReFYsWUFDWDBQLEVBQVMrRixZQUFZRCxFQUFReFYsWUFFakMwUCxFQUFTb0YsWUFBWVUsRUFDekIsQ0FDQXZ6QyxFQUFPNHlDLGFBQWFuRixFQUFVaHZCLEVBQ2xDLENBQ0EsTUFBTyxDQUVINDBCLEVBQVNBLEVBQU8vVyxZQUFjdDhCLEVBQU8rOUIsV0FFckN0ZixFQUFTQSxFQUFPMmUsZ0JBQWtCcDlCLEVBQU9xOUIsVUFFakQsR0F5REVvVyxFQUFjLGlCQUNwQixTQUFTQyxFQUFTeFIsRUFBT254QixFQUFNMUQsR0FDM0IsSUFBSSxJQUFBakosU0FBUWlKLEdBQ1JBLEVBQUloSixTQUFRd0QsR0FBSzZyQyxFQUFTeFIsRUFBT254QixFQUFNbEosVUFLdkMsR0FGVyxNQUFQd0YsSUFDQUEsRUFBTSxJQUNOMEQsRUFBS2tILFdBQVcsTUFFaEJpcUIsRUFBTXlSLFlBQVk1aUMsRUFBTTFELE9BRXZCLENBQ0QsTUFBTXVtQyxFQWFsQixTQUFvQjFSLEVBQU8yUixHQUN2QixNQUFNeDZCLEVBQVN5NkIsRUFBWUQsR0FDM0IsR0FBSXg2QixFQUNBLE9BQU9BLEVBRVgsSUFBSXRJLEdBQU8sSUFBQThILFVBQVNnN0IsR0FDcEIsR0FBYSxXQUFUOWlDLEdBQXFCQSxLQUFRbXhCLEVBQzdCLE9BQVE0UixFQUFZRCxHQUFXOWlDLEVBRW5DQSxHQUFPLElBQUFySCxZQUFXcUgsR0FDbEIsSUFBSyxJQUFJNVgsRUFBSSxFQUFHQSxFQUFJNDZDLEVBQVNyNkMsT0FBUVAsSUFBSyxDQUN0QyxNQUFNeTZDLEVBQVdHLEVBQVM1NkMsR0FBSzRYLEVBQy9CLEdBQUk2aUMsS0FBWTFSLEVBQ1osT0FBUTRSLEVBQVlELEdBQVdELENBRXZDLENBQ0EsT0FBT0MsQ0FDWCxDQTlCNkJHLENBQVc5UixFQUFPbnhCLEdBQy9CMGlDLEVBQVl0bUIsS0FBSzlmLEdBRWpCNjBCLEVBQU15UixhQUFZLElBQUFqN0IsV0FBVWs3QixHQUFXdm1DLEVBQUkyTSxRQUFReTVCLEVBQWEsSUFBSyxhQUdyRXZSLEVBQU0wUixHQUFZdm1DLENBRTFCLENBRVIsQ0FDQSxNQUFNMG1DLEVBQVcsQ0FBQyxTQUFVLE1BQU8sTUFDN0JELEVBQWMsQ0FBQyxFQW9CZkcsRUFBVSwrQkEyRmhCLFNBQVNDLEVBQWlCbDJCLEVBQUkzSCxFQUFPdUMsRUFBU2xXLEdBQzFDc2IsRUFBR2syQixpQkFBaUI3OUIsRUFBT3VDLEVBQVNsVyxFQUN4QyxDQTBCQSxNQUFNeXhDLEVBQW9CLDRCQWdCMUIsSUFBSUMsRUFBWSxFQUNoQixNQUFNemhDLEVBQWtCOVQsUUFBUUQsVUEwQzFCeTFDLEVBQWEsV0E2RW5CLFNBQVNDLEVBQW9CNXhDLEVBQVM4ZCxHQUNsQyxNQUFNdXhCLEdBQU8sSUFBQW5vQixpQkFBZ0JsbkIsR0FDN0IsTUFBTTZ4QyxVQUF5QkMsRUFDM0JoNEMsWUFBWWk0QyxHQUNSQyxNQUFNM0MsRUFBTTBDLEVBQWNqMEIsRUFDOUIsRUFHSixPQURBK3pCLEVBQWlCbnBDLElBQU0ybUMsRUFDaEJ3QyxDQUNYLENBQ0EsTUFBTUksRUFBMkJqeUMsR0FFdEI0eEMsRUFBb0I1eEMsRUFBUzhkLElBRWxDbzBCLEVBQW9DLG9CQUFoQm4rQixZQUE4QkEsWUFBYyxRQUV0RSxNQUFNKzlCLFVBQW1CSSxFQUNyQnA0QyxZQUFZcTRDLEVBQU1oYixFQUFTLENBQUMsRUFBR3JaLEdBQzNCazBCLFFBQ0FoNEMsS0FBS200QyxLQUFPQSxFQUNabjRDLEtBQUttOUIsT0FBU0EsRUFJZG45QixLQUFLczlCLFVBQVksS0FDakJ0OUIsS0FBS280QyxZQUFhLEVBQ2xCcDRDLEtBQUtxNEMsV0FBWSxFQUNqQnI0QyxLQUFLczRDLGFBQWUsS0FDaEJ0NEMsS0FBS3U0QyxZQUFjejBCLEVBQ25CQSxFQUFROWpCLEtBQUsrdEMsZUFBZ0IvdEMsS0FBS3U0QyxhQUdhdjRDLEtBQUt1NEMsYUFDaEQsSUFBQTExQyxNQUFLLDJIQUdUN0MsS0FBS3c0QyxhQUFhLENBQUV4ekIsS0FBTSxTQUVsQyxDQUNBeXpCLG9CQUNJejRDLEtBQUtvNEMsWUFBYSxFQUNicDRDLEtBQUtzOUIsV0FDTnQ5QixLQUFLMDRDLGFBRWIsQ0FDQUMsdUJBQ0kzNEMsS0FBS280QyxZQUFhLEdBQ2xCLElBQUFwaUMsV0FBUyxLQUNBaFcsS0FBS280QyxhQUNONy9CLEdBQU8sS0FBTXZZLEtBQUt1NEMsWUFDbEJ2NEMsS0FBS3M5QixVQUFZLEtBQ3JCLEdBRVIsQ0FJQW9iLGNBQ0ksR0FBSTE0QyxLQUFLcTRDLFVBQ0wsT0FFSnI0QyxLQUFLcTRDLFdBQVksRUFFakIsSUFBSyxJQUFJNTdDLEVBQUksRUFBR0EsRUFBSXVELEtBQUs0NEMsV0FBVzU3QyxPQUFRUCxJQUN4Q3VELEtBQUs2NEMsU0FBUzc0QyxLQUFLNDRDLFdBQVduOEMsR0FBRzRYLE1BR3JDLElBQUl5a0Msa0JBQWlCQyxJQUNqQixJQUFLLE1BQU1yMEIsS0FBS3EwQixFQUNaLzRDLEtBQUs2NEMsU0FBU24wQixFQUFFczBCLGNBQ3BCLElBQ0RDLFFBQVFqNUMsS0FBTSxDQUFFNDRDLFlBQVksSUFDL0IsTUFBTTEyQyxFQUFXd00sSUFDYixNQUFNLE1BQUVvRixFQUFLLE9BQUVvRixHQUFXeEssRUFDcEJ3cUMsSUFBYyxJQUFBeHhDLFNBQVFvTSxHQUN0QnFsQyxFQUFVcmxDLEVBQVNvbEMsRUFBYXg0QyxPQUFPc0IsS0FBSzhSLEdBQVNBLEVBQVMsR0FFcEUsSUFBSXNsQyxFQUNKLEdBQUlGLEVBQ0EsSUFBSyxNQUFNdHlDLEtBQU81RyxLQUFLbTlCLE9BQVEsQ0FDM0IsTUFBTXpELEVBQU01bEIsRUFBTWxOLElBQ2Q4eUIsSUFBUW52QixRQUFXbXZCLEdBQU9BLEVBQUkveUIsT0FBUzRELFVBQ3ZDdkssS0FBS205QixPQUFPdjJCLElBQU8sSUFBQStVLFVBQVMzYixLQUFLbTlCLE9BQU92MkIsS0FDdkN3eUMsSUFBZ0JBLEVBQWMxNEMsT0FBT3lqQixPQUFPLFFBQVF2ZCxJQUFPLEVBRXBFLENBRUo1RyxLQUFLczRDLGFBQWVjLEVBRXBCLElBQUssTUFBTXh5QyxLQUFPbEcsT0FBT3NCLEtBQUtoQyxNQUNYLE1BQVg0RyxFQUFJLElBQ0o1RyxLQUFLcTVDLFNBQVN6eUMsRUFBSzVHLEtBQUs0RyxJQUFNLEdBQU0sR0FJNUMsSUFBSyxNQUFNQSxLQUFPdXlDLEVBQVExd0MsSUFBSSxFQUFBMFQsVUFDMUJ6YixPQUFPaTJCLGVBQWUzMkIsS0FBTTRHLEVBQUssQ0FDN0JoRixNQUNJLE9BQU81QixLQUFLczVDLFNBQVMxeUMsRUFDekIsRUFDQUUsSUFBSTZKLEdBQ0EzUSxLQUFLcTVDLFNBQVN6eUMsRUFBSytKLEVBQ3ZCLElBSVIzUSxLQUFLdTVDLGFBQWFyZ0MsR0FFbEJsWixLQUFLdzVDLFNBQVMsRUFFWkMsRUFBV3o1QyxLQUFLbTRDLEtBQUtoL0IsY0FDdkJzZ0MsRUFDQUEsSUFBV3JuQyxLQUFLbFEsR0FHaEJBLEVBQVFsQyxLQUFLbTRDLEtBRXJCLENBQ0FVLFNBQVNqeUMsR0FDTCxJQUFJOUosRUFBUWtELEtBQUswNUMsYUFBYTl5QyxHQUMxQjVHLEtBQUtzNEMsY0FBZ0J0NEMsS0FBS3M0QyxhQUFhMXhDLEtBQ3ZDOUosR0FBUSxJQUFBNmUsVUFBUzdlLElBRXJCa0QsS0FBS3E1QyxVQUFTLElBQUFsOUIsVUFBV3ZWLEdBQU05SixHQUFPLEVBQzFDLENBSUF3OEMsU0FBUzF5QyxHQUNMLE9BQU81RyxLQUFLbTlCLE9BQU92MkIsRUFDdkIsQ0FJQXl5QyxTQUFTenlDLEVBQUsrSixFQUFLZ3BDLEdBQWdCLEVBQU1DLEdBQWUsR0FDaERqcEMsSUFBUTNRLEtBQUttOUIsT0FBT3YyQixLQUNwQjVHLEtBQUttOUIsT0FBT3YyQixHQUFPK0osRUFDZmlwQyxHQUFnQjU1QyxLQUFLczlCLFdBQ3JCdDlCLEtBQUt3NUMsVUFHTEcsS0FDWSxJQUFSaHBDLEVBQ0EzUSxLQUFLdTJDLGNBQWEsSUFBQXY2QixXQUFVcFYsR0FBTSxJQUVkLGlCQUFSK0osR0FBbUMsaUJBQVJBLEVBQ3ZDM1EsS0FBS3UyQyxjQUFhLElBQUF2NkIsV0FBVXBWLEdBQU0rSixFQUFNLElBRWxDQSxHQUNOM1EsS0FBSzY1QyxpQkFBZ0IsSUFBQTc5QixXQUFVcFYsS0FJL0MsQ0FDQTR5QyxVQUNJamhDLEdBQU92WSxLQUFLK3RDLGVBQWdCL3RDLEtBQUt1NEMsV0FDckMsQ0FDQXhLLGVBQ0ksTUFBTXg3QixHQUFRLElBQUFpTixhQUFZeGYsS0FBS200QyxNQUFNLElBQUFqeUMsUUFBTyxDQUFDLEVBQUdsRyxLQUFLbTlCLFNBd0NyRCxPQXZDS245QixLQUFLczlCLFlBQ04vcUIsRUFBTWk5QixHQUFLLzhCLElBQ1B6UyxLQUFLczlCLFVBQVk3cUIsRUFDakJBLEVBQVN5aEIsTUFBTyxFQUdaemhCLEVBQVN3RyxTQUFXNmdDLElBRVo5NUMsS0FBSys1QyxVQUNMLzVDLEtBQUsrNUMsUUFBUXB5QyxTQUFRcWUsR0FBS2htQixLQUFLdTRDLFdBQVdwQyxZQUFZbndCLEtBQ3REaG1CLEtBQUsrNUMsUUFBUS84QyxPQUFTLEdBRTFCZ0QsS0FBS3U1QyxhQUFhTyxHQUdiOTVDLEtBQUttNEMsS0FBS2gvQixnQkFFWG5aLEtBQUtzOUIsVUFBWSxLQUNqQnQ5QixLQUFLdzVDLFVBQ1QsRUFJUi9tQyxFQUFTNVMsS0FBTyxDQUFDOFosS0FBVWhkLEtBQ3ZCcUQsS0FBS2c2QyxjQUFjLElBQUlDLFlBQVl0Z0MsRUFBTyxDQUN0Q3VnQyxPQUFRdjlDLElBQ1QsRUFHUCxJQUFJMkcsRUFBU3RELEtBQ2IsS0FBUXNELEVBQ0pBLElBQVdBLEVBQU8yZ0IsWUFBYzNnQixFQUFPNjJDLE9BQ3ZDLEdBQUk3MkMsYUFBa0J3MEMsRUFBWSxDQUM5QnJsQyxFQUFTblAsT0FBU0EsRUFBT2c2QixVQUN6QixLQUNKLENBQ0osR0FHRC9xQixDQUNYLENBQ0FnbkMsYUFBYXJnQyxHQUNMQSxHQUNBQSxFQUFPdlIsU0FBUXl5QyxJQUNYLE1BQU1wMEIsRUFBSTlCLFNBQVMxQixjQUFjLFNBQ2pDd0QsRUFBRW9iLFlBQWNnWixFQUNoQnA2QyxLQUFLdTRDLFdBQVd6QixZQUFZOXdCLElBR3ZCaG1CLEtBQUsrNUMsVUFBWS81QyxLQUFLKzVDLFFBQVUsS0FBS3o4QyxLQUFLMG9CLEVBQy9DLEdBR1osRUFHSixTQUFTcTBCLEVBQWFobUMsRUFBTyxVQUV6QixDQUNJLE1BQU01QixHQUFXLElBQUFnWSxzQkFDakIsSUFBS2hZLEVBRUQsT0FEMkMsSUFBQTVQLE1BQUssOENBQ3pDLEVBQUFvWSxVQUVYLE1BQU1xL0IsRUFBVTduQyxFQUFTOUwsS0FBSyt2QixhQUM5QixJQUFLNGpCLEVBRUQsT0FEMkMsSUFBQXozQyxNQUFLLHdEQUN6QyxFQUFBb1ksVUFHWCxPQURZcS9CLEVBQVFqbUMsTUFHWixJQUFBeFIsTUFBSyxvREFBb0R3UixPQUN0RCxFQUFBNEcsVUFHZixDQUNKLENBTUEsU0FBU3MvQixFQUFXenBDLEdBQ2hCLE1BQU0yQixHQUFXLElBQUFnWSxzQkFFakIsSUFBS2hZLEVBR0QsWUFESSxJQUFBNVAsTUFBSyxtRUFHYixNQUFNMjNDLEVBQVUsSUFBTUMsRUFBZWhvQyxFQUFTOE8sUUFBU3pRLEVBQU8yQixFQUFTaFQsU0FDdkUsSUFBQTBuQixpQkFBZ0JxekIsSUFDaEIsSUFBQXB4QixZQUFVLEtBQ04sTUFBTXN4QixFQUFLLElBQUk1QixpQkFBaUIwQixHQUNoQ0UsRUFBR3pCLFFBQVF4bUMsRUFBUzhPLFFBQVFELEdBQUcyQyxXQUFZLENBQUUwMkIsV0FBVyxLQUN4RCxJQUFBeHBCLGNBQVksSUFBTXVwQixFQUFHRSxjQUFhLEdBRTFDLENBQ0EsU0FBU0gsRUFBZWxvQyxFQUFPc29DLEdBQzNCLEdBQXNCLElBQWxCdG9DLEVBQU00TSxVQUEyQyxDQUNqRCxNQUFNdUQsRUFBV25RLEVBQU1tUSxTQUN2Qm5RLEVBQVFtUSxFQUFTWSxhQUNiWixFQUFTRSxnQkFBa0JGLEVBQVNjLGFBQ3BDZCxFQUFTdGYsUUFBUTlGLE1BQUssS0FDbEJtOUMsRUFBZS8zQixFQUFTWSxhQUFjdTNCLEVBQUssR0FHdkQsQ0FFQSxLQUFPdG9DLEVBQU1HLFdBQ1RILEVBQVFBLEVBQU1HLFVBQVU2TyxRQUU1QixHQUFzQixFQUFsQmhQLEVBQU00TSxXQUEwQzVNLEVBQU0rTyxHQUN0RHc1QixFQUFjdm9DLEVBQU0rTyxHQUFJdTVCLFFBRXZCLEdBQUl0b0MsRUFBTTVMLE9BQVMsRUFBQXNtQixTQUNwQjFhLEVBQU1pTyxTQUFTN1ksU0FBUXJMLEdBQUttK0MsRUFBZW4rQyxFQUFHdStDLFVBRTdDLEdBQUl0b0MsRUFBTTVMLE9BQVMsRUFBQXUzQixPQUFRLENBQzVCLElBQUksR0FBRTVjLEVBQUUsT0FBRVMsR0FBV3hQLEVBQ3JCLEtBQU8rTyxJQUNIdzVCLEVBQWN4NUIsRUFBSXU1QixHQUNkdjVCLElBQU9TLElBRVhULEVBQUtBLEVBQUdzZSxXQUVoQixDQUNKLENBQ0EsU0FBU2tiLEVBQWN4NUIsRUFBSXU1QixHQUN2QixHQUFvQixJQUFoQnY1QixFQUFHZ2UsU0FBZ0IsQ0FDbkIsTUFBTWtHLEVBQVFsa0IsRUFBR2trQixNQUNqQixJQUFLLE1BQU01K0IsS0FBT2kwQyxFQUNkclYsRUFBTXlSLFlBQVksS0FBS3J3QyxJQUFPaTBDLEVBQUtqMEMsR0FFM0MsQ0FDSixDQUVBLE1BQU1tMEMsRUFBYSxhQUNiQyxFQUFZLFlBR1pDLEVBQWEsQ0FBQ25uQyxHQUFTZ0wsWUFBWSxJQUFBbVksR0FBRSxFQUFBek4sZUFBZ0IweEIsRUFBdUJwbkMsR0FBUWdMLEdBQzFGbThCLEVBQVdySSxZQUFjLGFBQ3pCLE1BQU11SSxFQUErQixDQUNqQzltQyxLQUFNdkosT0FDTm5FLEtBQU1tRSxPQUNOc3ZDLElBQUssQ0FDRHp6QyxLQUFNK2lCLFFBQ05uRixTQUFTLEdBRWI2MkIsU0FBVSxDQUFDdHdDLE9BQVFQLE9BQVE3SixRQUMzQjI2QyxlQUFnQnZ3QyxPQUNoQnd3QyxpQkFBa0J4d0MsT0FDbEJ5d0MsYUFBY3p3QyxPQUNkMHdDLGdCQUFpQjF3QyxPQUNqQjJ3QyxrQkFBbUIzd0MsT0FDbkI0d0MsY0FBZTV3QyxPQUNmNndDLGVBQWdCN3dDLE9BQ2hCOHdDLGlCQUFrQjl3QyxPQUNsQit3QyxhQUFjL3dDLFFBRVpneEMsRUFBNkJiLEVBQVdubkMsT0FDNUIsSUFBQTVOLFFBQU8sQ0FBQyxFQUFHLEVBQUFzakIsZUFBQSxNQUFzQjJ4QixHQUs3Q3B2QixFQUFXLENBQUMxc0IsRUFBTTFDLEVBQU8sT0FDdkIsSUFBQStLLFNBQVFySSxHQUNSQSxFQUFLc0ksU0FBUXN2QixHQUFLQSxLQUFLdDZCLEtBRWxCMEMsR0FDTEEsS0FBUTFDLEVBQ1osRUFNRW8vQyxFQUF1QjE4QyxLQUNsQkEsS0FDRCxJQUFBcUksU0FBUXJJLEdBQ0pBLEVBQUt5Z0IsTUFBS21YLEdBQUtBLEVBQUVqNkIsT0FBUyxJQUMxQnFDLEVBQUtyQyxPQUFTLEdBRzVCLFNBQVNrK0MsRUFBdUJyd0IsR0FDNUIsTUFBTW14QixFQUFZLENBQUMsRUFDbkIsSUFBSyxNQUFNcDFDLEtBQU9pa0IsRUFDUmprQixLQUFPdTBDLElBQ1RhLEVBQVVwMUMsR0FBT2lrQixFQUFTamtCLElBR2xDLElBQXFCLElBQWpCaWtCLEVBQVN1dkIsSUFDVCxPQUFPNEIsRUFFWCxNQUFNLEtBQUUzbkMsRUFBTyxJQUFHLEtBQUUxTixFQUFJLFNBQUV5MEMsRUFBUSxlQUFFQyxFQUFpQixHQUFHaG5DLGVBQWlCLGlCQUFFaW5DLEVBQW1CLEdBQUdqbkMsaUJBQW1CLGFBQUVrbkMsRUFBZSxHQUFHbG5DLGFBQWUsZ0JBQUVtbkMsRUFBa0JILEVBQWMsa0JBQUVJLEVBQW9CSCxFQUFnQixjQUFFSSxFQUFnQkgsRUFBWSxlQUFFSSxFQUFpQixHQUFHdG5DLGVBQWlCLGlCQUFFdW5DLEVBQW1CLEdBQUd2bkMsaUJBQW1CLGFBQUV3bkMsRUFBZSxHQUFHeG5DLGNBQW9Cd1csRUFDalhveEIsRUE2RVYsU0FBMkJiLEdBQ3ZCLEdBQWdCLE1BQVpBLEVBQ0EsT0FBTyxLQUVOLElBQUksSUFBQXB4QyxVQUFTb3hDLEdBQ2QsTUFBTyxDQUFDYyxFQUFTZCxFQUFTL3VCLE9BQVE2dkIsRUFBU2QsRUFBU3p1QixRQUVuRCxDQUNELE1BQU1udkIsRUFBSTArQyxFQUFTZCxHQUNuQixNQUFPLENBQUM1OUMsRUFBR0EsRUFDZixDQUNKLENBeEZzQjIrQyxDQUFrQmYsR0FDOUJnQixFQUFnQkgsR0FBYUEsRUFBVSxHQUN2Q0ksRUFBZ0JKLEdBQWFBLEVBQVUsSUFDdkMsY0FBRXJ5QixFQUFhLFFBQUVDLEVBQU8saUJBQUVFLEVBQWdCLFFBQUVFLEVBQU8saUJBQUVFLEVBQWdCLGVBQUVDLEVBQWlCUixFQUFhLFNBQUVTLEVBQVdSLEVBQU8sa0JBQUVVLEVBQW9CUixHQUFxQml5QixFQUNwS00sRUFBYyxDQUFDaDdCLEVBQUlpN0IsRUFBVXp2QyxLQUMvQjB2QyxFQUFzQmw3QixFQUFJaTdCLEVBQVdiLEVBQWdCSCxHQUNyRGlCLEVBQXNCbDdCLEVBQUlpN0IsRUFBV2QsRUFBb0JILEdBQ3pEeHVDLEdBQVFBLEdBQU0sRUFFWjJ2QyxFQUFjLENBQUNuN0IsRUFBSXhVLEtBQ3JCd1UsRUFBR283QixZQUFhLEVBQ2hCRixFQUFzQmw3QixFQUFJcTZCLEdBQzFCYSxFQUFzQmw3QixFQUFJdTZCLEdBQzFCVyxFQUFzQmw3QixFQUFJczZCLEdBQzFCOXVDLEdBQVFBLEdBQU0sRUFFWjZ2QyxFQUFpQkosR0FDWixDQUFDajdCLEVBQUl4VSxLQUNSLE1BQU16TixFQUFPazlDLEVBQVdseUIsRUFBV1IsRUFDN0IzbkIsRUFBVSxJQUFNbzZDLEVBQVloN0IsRUFBSWk3QixFQUFVenZDLEdBQ2hEaWYsRUFBUzFzQixFQUFNLENBQUNpaUIsRUFBSXBmLElBQ3BCMDZDLEdBQVUsS0FDTkosRUFBc0JsN0IsRUFBSWk3QixFQUFXZixFQUFrQkgsR0FDdkR3QixFQUFtQnY3QixFQUFJaTdCLEVBQVdiLEVBQWdCSCxHQUM3Q1EsRUFBb0IxOEMsSUFDckJ5OUMsRUFBbUJ4N0IsRUFBSTNhLEVBQU15MUMsRUFBZWw2QyxFQUNoRCxHQUNGLEVBR1YsT0FBTyxJQUFBZ0UsUUFBTzgxQyxFQUFXLENBQ3JCcHlCLGNBQWN0SSxHQUNWeUssRUFBU25DLEVBQWUsQ0FBQ3RJLElBQ3pCdTdCLEVBQW1CdjdCLEVBQUkrNUIsR0FDdkJ3QixFQUFtQnY3QixFQUFJZzZCLEVBQzNCLEVBQ0FseEIsZUFBZTlJLEdBQ1h5SyxFQUFTM0IsRUFBZ0IsQ0FBQzlJLElBQzFCdTdCLEVBQW1CdjdCLEVBQUlrNkIsR0FDdkJxQixFQUFtQnY3QixFQUFJbTZCLEVBQzNCLEVBQ0E1eEIsUUFBUzh5QixHQUFjLEdBQ3ZCdHlCLFNBQVVzeUIsR0FBYyxHQUN4QjF5QixRQUFRM0ksRUFBSXhVLEdBQ1J3VSxFQUFHbzdCLFlBQWEsRUFDaEIsTUFBTXg2QyxFQUFVLElBQU11NkMsRUFBWW43QixFQUFJeFUsR0FDdEMrdkMsRUFBbUJ2N0IsRUFBSXE2QixHQUV2Qm9CLElBQ0FGLEVBQW1CdjdCLEVBQUlzNkIsR0FDdkJnQixHQUFVLEtBQ0R0N0IsRUFBR283QixhQUlSRixFQUFzQmw3QixFQUFJcTZCLEdBQzFCa0IsRUFBbUJ2N0IsRUFBSXU2QixHQUNsQkUsRUFBb0I5eEIsSUFDckI2eUIsRUFBbUJ4N0IsRUFBSTNhLEVBQU0wMUMsRUFBZW42QyxHQUNoRCxJQUVKNnBCLEVBQVM5QixFQUFTLENBQUMzSSxFQUFJcGYsR0FDM0IsRUFDQTZuQixpQkFBaUJ6SSxHQUNiZzdCLEVBQVloN0IsR0FBSSxHQUNoQnlLLEVBQVNoQyxFQUFrQixDQUFDekksR0FDaEMsRUFDQWlKLGtCQUFrQmpKLEdBQ2RnN0IsRUFBWWg3QixHQUFJLEdBQ2hCeUssRUFBU3hCLEVBQW1CLENBQUNqSixHQUNqQyxFQUNBNkksaUJBQWlCN0ksR0FDYm03QixFQUFZbjdCLEdBQ1p5SyxFQUFTNUIsRUFBa0IsQ0FBQzdJLEdBQ2hDLEdBRVIsQ0FhQSxTQUFTNDZCLEVBQVN2ckMsR0FDZCxNQUFNdkgsR0FBTSxJQUFBdVMsVUFBU2hMLEdBR3JCLE9BRUosU0FBMEJBLEdBQ0gsaUJBQVJBLEdBQ1AsSUFBQTlOLE1BQ0ksOERBQU83QixLQUFLTyxVQUFVb1AsT0FFckJxc0MsTUFBTXJzQyxLQUNYLElBQUE5TixNQUFLLHNGQUdiLENBWlFvNkMsQ0FBaUI3ekMsR0FDZEEsQ0FDWCxDQVdBLFNBQVN5ekMsRUFBbUJ2N0IsRUFBSTQ3QixHQUM1QkEsRUFBSXYwQixNQUFNLE9BQU9oaEIsU0FBUXJMLEdBQUtBLEdBQUtnbEIsRUFBRzY3QixVQUFVaDJDLElBQUk3SyxNQUNuRGdsQixFQUFHODdCLE9BQ0M5N0IsRUFBRzg3QixLQUFPLElBQUk1NEMsTUFBUTJDLElBQUkrMUMsRUFDbkMsQ0FDQSxTQUFTVixFQUFzQmw3QixFQUFJNDdCLEdBQy9CQSxFQUFJdjBCLE1BQU0sT0FBT2hoQixTQUFRckwsR0FBS0EsR0FBS2dsQixFQUFHNjdCLFVBQVV2NEIsT0FBT3RvQixLQUN2RCxNQUFNLEtBQUU4Z0QsR0FBUzk3QixFQUNiODdCLElBQ0FBLEVBQUt4M0MsT0FBT3MzQyxHQUNQRSxFQUFLdnhDLE9BQ055VixFQUFHODdCLFVBQU8zNkMsR0FHdEIsQ0FDQSxTQUFTbTZDLEVBQVUvbEMsR0FDZndtQyx1QkFBc0IsS0FDbEJBLHNCQUFzQnhtQyxFQUFHLEdBRWpDLENBQ0EsSUFBSXltQyxFQUFRLEVBQ1osU0FBU1IsRUFBbUJ4N0IsRUFBSThaLEVBQWNtaUIsRUFBaUJyN0MsR0FDM0QsTUFBTTdCLEVBQU1paEIsRUFBR2s4QixTQUFXRixFQUNwQkcsRUFBb0IsS0FDbEJwOUMsSUFBT2loQixFQUFHazhCLFFBQ1Z0N0MsR0FDSixFQUVKLEdBQUlxN0MsRUFDQSxPQUFPcGpDLFdBQVdzakMsRUFBbUJGLEdBRXpDLE1BQU0sS0FBRTUyQyxFQUFJLFFBQUVnZCxFQUFPLFVBQUUrNUIsR0FBY0MsRUFBa0JyOEIsRUFBSThaLEdBQzNELElBQUt6MEIsRUFDRCxPQUFPekUsSUFFWCxNQUFNMDdDLEVBQVdqM0MsRUFBTyxNQUN4QixJQUFJazNDLEVBQVEsRUFDWixNQUFNdm5DLEVBQU0sS0FDUmdMLEVBQUd3OEIsb0JBQW9CRixFQUFVRyxHQUNqQ04sR0FBbUIsRUFFakJNLEVBQVM3OEMsSUFDUEEsRUFBRTlCLFNBQVdraUIsS0FBUXU4QixHQUFTSCxHQUM5QnBuQyxHQUNKLEVBRUo2RCxZQUFXLEtBQ0gwakMsRUFBUUgsR0FDUnBuQyxHQUNKLEdBQ0RxTixFQUFVLEdBQ2JyQyxFQUFHazJCLGlCQUFpQm9HLEVBQVVHLEVBQ2xDLENBQ0EsU0FBU0osRUFBa0JyOEIsRUFBSThaLEdBQzNCLE1BQU1saUIsRUFBU3RhLE9BQU9vL0MsaUJBQWlCMThCLEdBRWpDMjhCLEVBQXNCcjNDLElBQVNzUyxFQUFPdFMsSUFBUSxJQUFJK2hCLE1BQU0sTUFDeER1MUIsRUFBbUJELEVBQW1CbEQsbUJBQ3RDb0QsRUFBc0JGLEVBQW1CbEQsc0JBQ3pDcUQsRUFBb0JDLEVBQVdILEVBQWtCQyxHQUNqREcsRUFBa0JMLEVBQW1CakQsa0JBQ3JDdUQsRUFBcUJOLEVBQW1CakQscUJBQ3hDd0QsRUFBbUJILEVBQVdDLEVBQWlCQyxHQUNyRCxJQUFJNTNDLEVBQU8sS0FDUGdkLEVBQVUsRUFDVis1QixFQUFZLEVBZ0NoQixPQTlCSXRpQixJQUFpQjJmLEVBQ2JxRCxFQUFvQixJQUNwQnozQyxFQUFPbzBDLEVBQ1BwM0IsRUFBVXk2QixFQUNWVixFQUFZUyxFQUFvQm5oRCxRQUcvQm8rQixJQUFpQjRmLEVBQ2xCd0QsRUFBbUIsSUFDbkI3M0MsRUFBT3EwQyxFQUNQcjNCLEVBQVU2NkIsRUFDVmQsRUFBWWEsRUFBbUJ2aEQsU0FJbkMybUIsRUFBVStrQixLQUFLN1osSUFBSXV2QixFQUFtQkksR0FDdEM3M0MsRUFDSWdkLEVBQVUsRUFDSnk2QixFQUFvQkksRUFDaEJ6RCxFQUNBQyxFQUNKLEtBQ1YwQyxFQUFZLzJDLEVBQ05BLElBQVNvMEMsRUFDTG9ELEVBQW9CbmhELE9BQ3BCdWhELEVBQW1CdmhELE9BQ3ZCLEdBSUgsQ0FDSDJKLE9BQ0FnZCxVQUNBKzVCLFlBQ0FlLGFBTmlCOTNDLElBQVNvMEMsR0FDMUIseUJBQXlCdHFCLEtBQUt2WCxFQUE4QixvQkFPcEUsQ0FDQSxTQUFTbWxDLEVBQVdLLEVBQVF6QyxHQUN4QixLQUFPeUMsRUFBTzFoRCxPQUFTaS9DLEVBQVVqL0MsUUFDN0IwaEQsRUFBU0EsRUFBT3RnRCxPQUFPc2dELEdBRTNCLE9BQU9oVyxLQUFLN1osT0FBT290QixFQUFVeHpDLEtBQUksQ0FBQ2syQyxFQUFHbGlELElBQU1taUQsRUFBS0QsR0FBS0MsRUFBS0YsRUFBT2ppRCxNQUNyRSxDQUtBLFNBQVNtaUQsRUFBSzU0QixHQUNWLE9BQWtELElBQTNDemIsT0FBT3liLEVBQUU5UixNQUFNLEdBQUksR0FBR29KLFFBQVEsSUFBSyxLQUM5QyxDQUVBLFNBQVN5L0IsSUFDTCxPQUFPNzRCLFNBQVM2d0IsS0FBSzhKLFlBQ3pCLENBRUEsTUFBTUMsRUFBYyxJQUFJaDZDLFFBQ2xCaTZDLEVBQWlCLElBQUlqNkMsUUF3RXJCazZDLEVBdkVzQixDQUN4QjNxQyxLQUFNLGtCQUNOUCxPQUFxQixJQUFBNU4sUUFBTyxDQUFDLEVBQUc0MUMsRUFBMkIsQ0FDdkQxRixJQUFLdHJDLE9BQ0xtMEMsVUFBV24wQyxTQUVmMGYsTUFBTTFXLEdBQU8sTUFBRWdMLElBQ1gsTUFBTXJNLEdBQVcsSUFBQWdZLHNCQUNYMUIsR0FBUSxJQUFBRCxzQkFDZCxJQUFJMmQsRUFDQWptQixFQW1DSixPQWxDQSxJQUFBNFAsWUFBVSxLQUVOLElBQUtxVyxFQUFhenBDLE9BQ2QsT0FFSixNQUFNaWlELEVBQVluckMsRUFBTW1yQyxXQUFhLEdBQUduckMsRUFBTU8sTUFBUSxXQUN0RCxJQStFWixTQUF5QmlOLEVBQUkzQixFQUFNcy9CLEdBTS9CLE1BQU1yeUIsRUFBUXRMLEVBQUdzMUIsWUFDYnQxQixFQUFHODdCLE1BQ0g5N0IsRUFBRzg3QixLQUFLejFDLFNBQVF1MUMsSUFDWkEsRUFBSXYwQixNQUFNLE9BQU9oaEIsU0FBUXJMLEdBQUtBLEdBQUtzd0IsRUFBTXV3QixVQUFVdjRCLE9BQU90b0IsSUFBRyxJQUdyRTJpRCxFQUFVdDJCLE1BQU0sT0FBT2hoQixTQUFRckwsR0FBS0EsR0FBS3N3QixFQUFNdXdCLFVBQVVoMkMsSUFBSTdLLEtBQzdEc3dCLEVBQU00WSxNQUFNMFosUUFBVSxPQUN0QixNQUFNcDlCLEVBQStCLElBQWxCbkMsRUFBSzJmLFNBQWlCM2YsRUFBT0EsRUFBS3NFLFdBQ3JEbkMsRUFBVWcxQixZQUFZbHFCLEdBQ3RCLE1BQU0sYUFBRTZ4QixHQUFpQmQsRUFBa0Ivd0IsR0FFM0MsT0FEQTlLLEVBQVVxMEIsWUFBWXZwQixHQUNmNnhCLENBQ1gsQ0FsR2lCVSxDQUFnQjFZLEVBQWEsR0FBR25sQixHQUFJN08sRUFBU0YsTUFBTStPLEdBQUkyOUIsR0FDeEQsT0FJSnhZLEVBQWE5K0IsUUFBUXkzQyxHQUNyQjNZLEVBQWE5K0IsUUFBUTAzQyxHQUNyQixNQUFNQyxFQUFnQjdZLEVBQWFqK0IsT0FBTysyQyxHQUUxQ3hDLElBQ0F1QyxFQUFjMzNDLFNBQVFyTCxJQUNsQixNQUFNZ2xCLEVBQUtobEIsRUFBRWdsQixHQUNQa2tCLEVBQVFsa0IsRUFBR2trQixNQUNqQnFYLEVBQW1CdjdCLEVBQUkyOUIsR0FDdkJ6WixFQUFNZ2EsVUFBWWhhLEVBQU1pYSxnQkFBa0JqYSxFQUFNa2EsbUJBQXFCLEdBQ3JFLE1BQU03b0MsRUFBTXlLLEVBQUdxK0IsUUFBV3orQyxJQUNsQkEsR0FBS0EsRUFBRTlCLFNBQVdraUIsR0FHakJwZ0IsSUFBSyxhQUFhdXZCLEtBQUt2dkIsRUFBRTArQyxnQkFDMUJ0K0IsRUFBR3c4QixvQkFBb0IsZ0JBQWlCam5DLEdBQ3hDeUssRUFBR3ErQixRQUFVLEtBQ2JuRCxFQUFzQmw3QixFQUFJMjlCLEdBQzlCLEVBRUozOUIsRUFBR2syQixpQkFBaUIsZ0JBQWlCM2dDLEVBQUcsR0FDMUMsSUFFQyxLQUNILE1BQU1nVSxHQUFXLElBQUExaEIsT0FBTTJLLEdBQ2pCK3JDLEVBQXFCM0UsRUFBdUJyd0IsR0FDbEQsSUFBSXVyQixFQUFNdnJCLEVBQVN1ckIsS0FBTyxFQUFBbnBCLFNBQzFCd1osRUFBZWptQixFQUNmQSxFQUFXMUIsRUFBTXlGLFNBQVUsSUFBQW9HLDBCQUF5QjdMLEVBQU15RixXQUFhLEdBQ3ZFLElBQUssSUFBSTluQixFQUFJLEVBQUdBLEVBQUkrakIsRUFBU3hqQixPQUFRUCxJQUFLLENBQ3RDLE1BQU1za0IsRUFBUVAsRUFBUy9qQixHQUNOLE1BQWJza0IsRUFBTW5hLEtBQ04sSUFBQXVrQixvQkFBbUJwSyxHQUFPLElBQUFtSyx3QkFBdUJuSyxFQUFPOCtCLEVBQW9COTJCLEVBQU90VyxLQUduRixJQUFBNVAsTUFBSyw0Q0FFYixDQUNBLEdBQUk0akMsRUFDQSxJQUFLLElBQUlocUMsRUFBSSxFQUFHQSxFQUFJZ3FDLEVBQWF6cEMsT0FBUVAsSUFBSyxDQUMxQyxNQUFNc2tCLEVBQVEwbEIsRUFBYWhxQyxJQUMzQixJQUFBMHVCLG9CQUFtQnBLLEdBQU8sSUFBQW1LLHdCQUF1Qm5LLEVBQU84K0IsRUFBb0I5MkIsRUFBT3RXLElBQ25GcXNDLEVBQVloNEMsSUFBSWlhLEVBQU9BLEVBQU1PLEdBQUd3K0Isd0JBQ3BDLENBRUosT0FBTyxJQUFBdGdDLGFBQVk0MkIsRUFBSyxLQUFNNTFCLEVBQVMsQ0FFL0MsR0FHSixTQUFTNCtCLEVBQWU5aUQsR0FDcEIsTUFBTWdsQixFQUFLaGxCLEVBQUVnbEIsR0FDVEEsRUFBR3ErQixTQUNIcitCLEVBQUdxK0IsVUFFSHIrQixFQUFHbUwsVUFDSG5MLEVBQUdtTCxVQUVYLENBQ0EsU0FBUzR5QixFQUFlL2lELEdBQ3BCeWlELEVBQWVqNEMsSUFBSXhLLEVBQUdBLEVBQUVnbEIsR0FBR3crQix3QkFDL0IsQ0FDQSxTQUFTUCxFQUFpQmpqRCxHQUN0QixNQUFNeWpELEVBQVNqQixFQUFZbDlDLElBQUl0RixHQUN6QjBqRCxFQUFTakIsRUFBZW45QyxJQUFJdEYsR0FDNUIyakQsRUFBS0YsRUFBT0csS0FBT0YsRUFBT0UsS0FDMUJDLEVBQUtKLEVBQU9LLElBQU1KLEVBQU9JLElBQy9CLEdBQUlILEdBQU1FLEVBQUksQ0FDVixNQUFNbjZCLEVBQUkxcEIsRUFBRWdsQixHQUFHa2tCLE1BR2YsT0FGQXhmLEVBQUV3NUIsVUFBWXg1QixFQUFFeTVCLGdCQUFrQixhQUFhUSxPQUFRRSxPQUN2RG42QixFQUFFMDVCLG1CQUFxQixLQUNoQnBqRCxDQUNYLENBQ0osQ0FzQkEsTUFBTStqRCxFQUFvQjl0QyxJQUN0QixNQUFNOU8sRUFBSzhPLEVBQU11QixNQUFNLHlCQUNuQixFQUNKLE9BQU8sSUFBQXBNLFNBQVFqRSxHQUFNM0csSUFBUyxJQUFBMnlCLGdCQUFlaHNCLEVBQUkzRyxHQUFTMkcsQ0FBRSxFQUVoRSxTQUFTNjhDLEVBQW1CcC9DLEdBQ3hCQSxFQUFFOUIsT0FBT21oRCxXQUFZLENBQ3pCLENBQ0EsU0FBU0MsRUFBaUJ0L0MsR0FDdEIsTUFBTTlCLEVBQVM4QixFQUFFOUIsT0FDYkEsRUFBT21oRCxZQUNQbmhELEVBQU9taEQsV0FBWSxFQUNuQm5oRCxFQUFPNDZDLGNBQWMsSUFBSXlHLE1BQU0sVUFFdkMsQ0FHQSxNQUFNQyxHQUFhLENBQ2Z4b0IsUUFBUTVXLEdBQU1pUixXQUFXLEtBQUVwc0IsRUFBSSxLQUFFakksRUFBSSxPQUFFd2QsSUFBWW5KLEdBQy9DK08sRUFBR3EvQixRQUFVTixFQUFpQjl0QyxHQUM5QixNQUFNcXVDLEVBQWVsbEMsR0FBV25KLEVBQU11QixPQUE4QixXQUFyQnZCLEVBQU11QixNQUFNbk4sS0FDM0Q2d0MsRUFBaUJsMkIsRUFBSW5iLEVBQU8sU0FBVyxTQUFTakYsSUFDNUMsR0FBSUEsRUFBRTlCLE9BQU9taEQsVUFDVCxPQUNKLElBQUlNLEVBQVd2L0IsRUFBR3hrQixNQUNkb0IsSUFDQTJpRCxFQUFXQSxFQUFTM2lELFFBRXBCMGlELElBQ0FDLEdBQVcsSUFBQWxsQyxVQUFTa2xDLElBRXhCdi9CLEVBQUdxL0IsUUFBUUUsRUFBUyxJQUVwQjNpRCxHQUNBczVDLEVBQWlCbDJCLEVBQUksVUFBVSxLQUMzQkEsRUFBR3hrQixNQUFRd2tCLEVBQUd4a0IsTUFBTW9CLE1BQU0sSUFHN0JpSSxJQUNEcXhDLEVBQWlCbDJCLEVBQUksbUJBQW9CZy9CLEdBQ3pDOUksRUFBaUJsMkIsRUFBSSxpQkFBa0JrL0IsR0FLdkNoSixFQUFpQmwyQixFQUFJLFNBQVVrL0IsR0FFdkMsRUFFQWh1QixRQUFRbFIsR0FBSSxNQUFFeGtCLElBQ1Z3a0IsRUFBR3hrQixNQUFpQixNQUFUQSxFQUFnQixHQUFLQSxDQUNwQyxFQUNBczdCLGFBQWE5VyxHQUFJLE1BQUV4a0IsRUFBT3kxQixXQUFXLEtBQUVwc0IsRUFBSSxLQUFFakksRUFBSSxPQUFFd2QsSUFBWW5KLEdBRzNELEdBRkErTyxFQUFHcS9CLFFBQVVOLEVBQWlCOXRDLEdBRTFCK08sRUFBR2kvQixVQUNILE9BQ0osR0FBSXI4QixTQUFTNDhCLGdCQUFrQngvQixHQUFrQixVQUFaQSxFQUFHM2EsS0FBa0IsQ0FDdEQsR0FBSVIsRUFDQSxPQUVKLEdBQUlqSSxHQUFRb2pCLEVBQUd4a0IsTUFBTW9CLFNBQVdwQixFQUM1QixPQUVKLElBQUs0ZSxHQUFzQixXQUFaNEYsRUFBRzNhLFFBQXNCLElBQUFnVixVQUFTMkYsRUFBR3hrQixTQUFXQSxFQUMzRCxNQUVSLENBQ0EsTUFBTXdLLEVBQW9CLE1BQVR4SyxFQUFnQixHQUFLQSxFQUNsQ3drQixFQUFHeGtCLFFBQVV3SyxJQUNiZ2EsRUFBR3hrQixNQUFRd0ssRUFFbkIsR0FFRXk1QyxHQUFpQixDQUVuQnQ1QixNQUFNLEVBQ055USxRQUFRNVcsRUFBSWlULEVBQUdoaUIsR0FDWCtPLEVBQUdxL0IsUUFBVU4sRUFBaUI5dEMsR0FDOUJpbEMsRUFBaUJsMkIsRUFBSSxVQUFVLEtBQzNCLE1BQU0wL0IsRUFBYTEvQixFQUFHMi9CLFlBQ2hCQyxFQUFlQyxHQUFTNy9CLEdBQ3hCOC9CLEVBQVU5L0IsRUFBRzgvQixRQUNiemdELEVBQVMyZ0IsRUFBR3EvQixRQUNsQixJQUFJLElBQUFqNUMsU0FBUXM1QyxHQUFhLENBQ3JCLE1BQU0vaUQsR0FBUSxJQUFBb2pELGNBQWFMLEVBQVlFLEdBQ2pDSSxHQUFtQixJQUFYcmpELEVBQ2QsR0FBSW1qRCxJQUFZRSxFQUNaM2dELEVBQU9xZ0QsRUFBVzVpRCxPQUFPOGlELFNBRXhCLElBQUtFLEdBQVdFLEVBQU8sQ0FDeEIsTUFBTUMsRUFBVyxJQUFJUCxHQUNyQk8sRUFBU25yQyxPQUFPblksRUFBTyxHQUN2QjBDLEVBQU80Z0QsRUFDWCxDQUNKLE1BQ0ssSUFBSSxJQUFBMzRCLE9BQU1vNEIsR0FBYSxDQUN4QixNQUFNdlQsRUFBUyxJQUFJanBDLElBQUl3OEMsR0FDbkJJLEVBQ0EzVCxFQUFPdG1DLElBQUkrNUMsR0FHWHpULEVBQU83bkMsT0FBT3M3QyxHQUVsQnZnRCxFQUFPOHNDLEVBQ1gsTUFFSTlzQyxFQUFPNmdELEdBQWlCbGdDLEVBQUk4L0IsR0FDaEMsR0FFUixFQUVBNXVCLFFBQVNpdkIsR0FDVHJwQixhQUFhOVcsRUFBSXVSLEVBQVN0Z0IsR0FDdEIrTyxFQUFHcS9CLFFBQVVOLEVBQWlCOXRDLEdBQzlCa3ZDLEdBQVduZ0MsRUFBSXVSLEVBQVN0Z0IsRUFDNUIsR0FFSixTQUFTa3ZDLEdBQVduZ0MsR0FBSSxNQUFFeGtCLEVBQUssU0FBRXlLLEdBQVlnTCxHQUN6QytPLEVBQUcyL0IsWUFBY25rRCxHQUNiLElBQUE0SyxTQUFRNUssR0FDUndrQixFQUFHOC9CLFNBQVUsSUFBQUMsY0FBYXZrRCxFQUFPeVYsRUFBTXVCLE1BQU1oWCxRQUFVLEdBRWxELElBQUE4ckIsT0FBTTlyQixHQUNYd2tCLEVBQUc4L0IsUUFBVXRrRCxFQUFNb0ssSUFBSXFMLEVBQU11QixNQUFNaFgsT0FFOUJBLElBQVV5SyxJQUNmK1osRUFBRzgvQixTQUFVLElBQUFNLFlBQVc1a0QsRUFBTzBrRCxHQUFpQmxnQyxHQUFJLElBRTVELENBQ0EsTUFBTXFnQyxHQUFjLENBQ2hCenBCLFFBQVE1VyxHQUFJLE1BQUV4a0IsR0FBU3lWLEdBQ25CK08sRUFBRzgvQixTQUFVLElBQUFNLFlBQVc1a0QsRUFBT3lWLEVBQU11QixNQUFNaFgsT0FDM0N3a0IsRUFBR3EvQixRQUFVTixFQUFpQjl0QyxHQUM5QmlsQyxFQUFpQmwyQixFQUFJLFVBQVUsS0FDM0JBLEVBQUdxL0IsUUFBUVEsR0FBUzcvQixHQUFJLEdBRWhDLEVBQ0E4VyxhQUFhOVcsR0FBSSxNQUFFeGtCLEVBQUssU0FBRXlLLEdBQVlnTCxHQUNsQytPLEVBQUdxL0IsUUFBVU4sRUFBaUI5dEMsR0FDMUJ6VixJQUFVeUssSUFDVitaLEVBQUc4L0IsU0FBVSxJQUFBTSxZQUFXNWtELEVBQU95VixFQUFNdUIsTUFBTWhYLE9BRW5ELEdBRUU4a0QsR0FBZSxDQUVqQm42QixNQUFNLEVBQ055USxRQUFRNVcsR0FBSSxNQUFFeGtCLEVBQU95MUIsV0FBVyxPQUFFN1csSUFBWW5KLEdBQzFDLE1BQU1zdkMsR0FBYSxJQUFBajVCLE9BQU05ckIsR0FDekIwNkMsRUFBaUJsMkIsRUFBSSxVQUFVLEtBQzNCLE1BQU13Z0MsRUFBYzdrRCxNQUFNaTNDLFVBQVUxckMsT0FDL0JtRCxLQUFLMlYsRUFBR3RiLFNBQVV1YyxHQUFNQSxFQUFFdy9CLFdBQzFCdDVDLEtBQUs4WixHQUFNN0csR0FBUyxJQUFBQyxVQUFTd2xDLEdBQVM1K0IsSUFBTTQrQixHQUFTNStCLEtBQzFEakIsRUFBR3EvQixRQUFRci9CLEVBQUdnMUIsU0FDUnVMLEVBQ0ksSUFBSXI5QyxJQUFJczlDLEdBQ1JBLEVBQ0pBLEVBQVksR0FBRyxJQUV6QnhnQyxFQUFHcS9CLFFBQVVOLEVBQWlCOXRDLEVBQ2xDLEVBR0FpZ0IsUUFBUWxSLEdBQUksTUFBRXhrQixJQUNWa2xELEdBQVkxZ0MsRUFBSXhrQixFQUNwQixFQUNBczdCLGFBQWE5VyxFQUFJMmdDLEVBQVUxdkMsR0FDdkIrTyxFQUFHcS9CLFFBQVVOLEVBQWlCOXRDLEVBQ2xDLEVBQ0FrZ0IsUUFBUW5SLEdBQUksTUFBRXhrQixJQUNWa2xELEdBQVkxZ0MsRUFBSXhrQixFQUNwQixHQUVKLFNBQVNrbEQsR0FBWTFnQyxFQUFJeGtCLEdBQ3JCLE1BQU1vbEQsRUFBYTVnQyxFQUFHZzFCLFNBQ3RCLElBQUk0TCxJQUFlLElBQUF4NkMsU0FBUTVLLEtBQVcsSUFBQThyQixPQUFNOXJCLEdBQTVDLENBTUEsSUFBSyxJQUFJTCxFQUFJLEVBQUdxSCxFQUFJd2QsRUFBR3RiLFFBQVFoSixPQUFRUCxFQUFJcUgsRUFBR3JILElBQUssQ0FDL0MsTUFBTTBsRCxFQUFTN2dDLEVBQUd0YixRQUFRdkosR0FDcEIybEQsRUFBY2pCLEdBQVNnQixHQUM3QixHQUFJRCxHQUNJLElBQUF4NkMsU0FBUTVLLEdBQ1JxbEQsRUFBT0osVUFBVyxJQUFBVixjQUFhdmtELEVBQU9zbEQsSUFBZ0IsRUFHdERELEVBQU9KLFNBQVdqbEQsRUFBTW9LLElBQUlrN0MsUUFJaEMsSUFBSSxJQUFBVixZQUFXUCxHQUFTZ0IsR0FBU3JsRCxHQUc3QixZQUZJd2tCLEVBQUcrZ0MsZ0JBQWtCNWxELElBQ3JCNmtCLEVBQUcrZ0MsY0FBZ0I1bEQsR0FJbkMsQ0FDS3lsRCxJQUFvQyxJQUF0QjVnQyxFQUFHK2dDLGdCQUNsQi9nQyxFQUFHK2dDLGVBQWlCLEVBckJ4QixNQUhRLElBQUF4L0MsTUFDSSxvRkFBV25DLE9BQU93ekMsVUFBVTFaLFNBQVM3dUIsS0FBSzdPLEdBQU9vWCxNQUFNLEdBQUksTUF5QjNFLENBRUEsU0FBU2l0QyxHQUFTNy9CLEdBQ2QsTUFBTyxXQUFZQSxFQUFLQSxFQUFHL1IsT0FBUytSLEVBQUd4a0IsS0FDM0MsQ0FFQSxTQUFTMGtELEdBQWlCbGdDLEVBQUk4L0IsR0FDMUIsTUFBTXg2QyxFQUFNdzZDLEVBQVUsYUFBZSxjQUNyQyxPQUFPeDZDLEtBQU8wYSxFQUFLQSxFQUFHMWEsR0FBT3c2QyxDQUNqQyxDQUNBLE1BQU1rQixHQUFnQixDQUNsQnBxQixRQUFRNVcsRUFBSXVSLEVBQVN0Z0IsR0FDakJnd0MsR0FBY2poQyxFQUFJdVIsRUFBU3RnQixFQUFPLEtBQU0sVUFDNUMsRUFDQWlnQixRQUFRbFIsRUFBSXVSLEVBQVN0Z0IsR0FDakJnd0MsR0FBY2poQyxFQUFJdVIsRUFBU3RnQixFQUFPLEtBQU0sVUFDNUMsRUFDQTZsQixhQUFhOVcsRUFBSXVSLEVBQVN0Z0IsRUFBT29nQixHQUM3QjR2QixHQUFjamhDLEVBQUl1UixFQUFTdGdCLEVBQU9vZ0IsRUFBVyxlQUNqRCxFQUNBRixRQUFRblIsRUFBSXVSLEVBQVN0Z0IsRUFBT29nQixHQUN4QjR2QixHQUFjamhDLEVBQUl1UixFQUFTdGdCLEVBQU9vZ0IsRUFBVyxVQUNqRCxHQUVKLFNBQVM2dkIsR0FBb0JwakIsRUFBU3o0QixHQUNsQyxPQUFReTRCLEdBQ0osSUFBSyxTQUNELE9BQU93aUIsR0FDWCxJQUFLLFdBQ0QsT0FBT2xCLEdBQ1gsUUFDSSxPQUFRLzVDLEdBQ0osSUFBSyxXQUNELE9BQU9vNkMsR0FDWCxJQUFLLFFBQ0QsT0FBT1ksR0FDWCxRQUNJLE9BQU9qQixJQUczQixDQUNBLFNBQVM2QixHQUFjamhDLEVBQUl1UixFQUFTdGdCLEVBQU9vZ0IsRUFBV3R6QixHQUNsRCxNQUNNb0UsRUFEYSsrQyxHQUFvQmxoQyxFQUFHOGQsUUFBUzdzQixFQUFNdUIsT0FBU3ZCLEVBQU11QixNQUFNbk4sTUFDeER0SCxHQUN0Qm9FLEdBQU1BLEVBQUc2ZCxFQUFJdVIsRUFBU3RnQixFQUFPb2dCLEVBQ2pDLENBc0NBLE1BQU04dkIsR0FBa0IsQ0FBQyxPQUFRLFFBQVMsTUFBTyxRQUMzQ0MsR0FBaUIsQ0FDbkI5K0MsS0FBTTFDLEdBQUtBLEVBQUV5aEQsa0JBQ2JDLFFBQVMxaEQsR0FBS0EsRUFBRTJoRCxpQkFDaEIxeEMsS0FBTWpRLEdBQUtBLEVBQUU5QixTQUFXOEIsRUFBRTRoRCxjQUMxQkMsS0FBTTdoRCxJQUFNQSxFQUFFOGhELFFBQ2RDLE1BQU8vaEQsSUFBTUEsRUFBRWdpRCxTQUNmQyxJQUFLamlELElBQU1BLEVBQUVraUQsT0FDYkMsS0FBTW5pRCxJQUFNQSxFQUFFb2lELFFBQ2RwRCxLQUFNaC9DLEdBQUssV0FBWUEsR0FBa0IsSUFBYkEsRUFBRXFpRCxPQUM5Qmh0QyxPQUFRclYsR0FBSyxXQUFZQSxHQUFrQixJQUFiQSxFQUFFcWlELE9BQ2hDQyxNQUFPdGlELEdBQUssV0FBWUEsR0FBa0IsSUFBYkEsRUFBRXFpRCxPQUMvQkUsTUFBTyxDQUFDdmlELEVBQUdxeEIsSUFBY2t3QixHQUFnQjNpQyxNQUFLNEUsR0FBS3hqQixFQUFFLEdBQUd3akIsVUFBWTZOLEVBQVV0d0IsU0FBU3lpQixNQUtyRmcvQixHQUFnQixDQUFDamdELEVBQUk4dUIsSUFDaEIsQ0FBQzVZLEtBQVVoZCxLQUNkLElBQUssSUFBSUYsRUFBSSxFQUFHQSxFQUFJODFCLEVBQVV2MUIsT0FBUVAsSUFBSyxDQUN2QyxNQUFNa25ELEVBQVFqQixHQUFlbndCLEVBQVU5MUIsSUFDdkMsR0FBSWtuRCxHQUFTQSxFQUFNaHFDLEVBQU80WSxHQUN0QixNQUNSLENBQ0EsT0FBTzl1QixFQUFHa1csS0FBVWhkLEVBQUssRUFLM0JpbkQsR0FBVyxDQUNiQyxJQUFLLFNBQ0xDLE1BQU8sSUFDUEMsR0FBSSxXQUNKN0QsS0FBTSxhQUNOc0QsTUFBTyxjQUNQUSxLQUFNLGFBQ05wK0MsT0FBUSxhQUtOcStDLEdBQVcsQ0FBQ3hnRCxFQUFJOHVCLElBQ1Y1WSxJQUNKLEtBQU0sUUFBU0EsR0FDWCxPQUVKLE1BQU11cUMsR0FBVyxJQUFBbG9DLFdBQVVyQyxFQUFNL1MsS0FDakMsT0FBSTJyQixFQUFVelMsTUFBS2tmLEdBQUtBLElBQU1rbEIsR0FBWU4sR0FBUzVrQixLQUFPa2xCLElBQy9DemdELEVBQUdrVyxRQURkLENBRUEsRUFJRndxQyxHQUFRLENBQ1Zoc0IsWUFBWTdXLEdBQUksTUFBRXhrQixJQUFTLFdBQUV3akIsSUFDekJnQixFQUFHOGlDLEtBQTRCLFNBQXJCOWlDLEVBQUdra0IsTUFBTTBaLFFBQXFCLEdBQUs1OUIsRUFBR2trQixNQUFNMFosUUFDbEQ1K0IsR0FBY3hqQixFQUNkd2pCLEVBQVc2TCxZQUFZN0ssR0FHdkIraUMsR0FBVy9pQyxFQUFJeGtCLEVBRXZCLEVBQ0EwMUIsUUFBUWxSLEdBQUksTUFBRXhrQixJQUFTLFdBQUV3akIsSUFDakJBLEdBQWN4akIsR0FDZHdqQixFQUFXK0wsTUFBTS9LLEVBRXpCLEVBQ0FtUixRQUFRblIsR0FBSSxNQUFFeGtCLEVBQUssU0FBRXlLLElBQVksV0FBRStZLEtBQzFCeGpCLElBQVd5SyxJQUVaK1ksRUFDSXhqQixHQUNBd2pCLEVBQVc2TCxZQUFZN0ssR0FDdkIraUMsR0FBVy9pQyxHQUFJLEdBQ2ZoQixFQUFXK0wsTUFBTS9LLElBR2pCaEIsRUFBV3FNLE1BQU1yTCxHQUFJLEtBQ2pCK2lDLEdBQVcvaUMsR0FBSSxFQUFNLElBSzdCK2lDLEdBQVcvaUMsRUFBSXhrQixHQUV2QixFQUNBdzdCLGNBQWNoWCxHQUFJLE1BQUV4a0IsSUFDaEJ1bkQsR0FBVy9pQyxFQUFJeGtCLEVBQ25CLEdBRUosU0FBU3VuRCxHQUFXL2lDLEVBQUl4a0IsR0FDcEJ3a0IsRUFBR2trQixNQUFNMFosUUFBVXBpRCxFQUFRd2tCLEVBQUc4aUMsS0FBTyxNQUN6QyxDQVdBLE1BQU1FLElBQWdDLElBQUFwK0MsUUFBTyxDQUFFdzVCLFVBbHBDN0IsQ0FBQ3BlLEVBQUkxYSxFQUFLMjlDLEVBQVdDLEVBQVd0aUMsR0FBUSxFQUFPdWtCLEVBQWN6a0IsRUFBaUJDLEVBQWdCeWlCLEtBQ2hHLFVBQVI5OUIsRUFyUlIsU0FBb0IwYSxFQUFJeGtCLEVBQU9vbEIsR0FJM0IsTUFBTXVpQyxFQUFvQm5qQyxFQUFHODdCLEtBQ3pCcUgsSUFDQTNuRCxHQUFTQSxFQUFRLENBQUNBLEtBQVUybkQsR0FBcUIsSUFBSUEsSUFBb0JueEMsS0FBSyxNQUVyRSxNQUFUeFcsRUFDQXdrQixFQUFHdTRCLGdCQUFnQixTQUVkMzNCLEVBQ0xaLEVBQUdpMUIsYUFBYSxRQUFTejVDLEdBR3pCd2tCLEVBQUdvakMsVUFBWTVuRCxDQUV2QixDQXFRUTZuRCxDQUFXcmpDLEVBQUlrakMsRUFBV3RpQyxHQUViLFVBQVJ0YixFQXJRYixTQUFvQjBhLEVBQUk1RCxFQUFNN1EsR0FDMUIsTUFBTTI0QixFQUFRbGtCLEVBQUdra0IsTUFDWG9mLEdBQWMsSUFBQXh3QyxVQUFTdkgsR0FDN0IsR0FBSUEsSUFBUyszQyxFQUFhLENBQ3RCLElBQUssTUFBTWgrQyxLQUFPaUcsRUFDZG1xQyxFQUFTeFIsRUFBTzUrQixFQUFLaUcsRUFBS2pHLElBRTlCLEdBQUk4VyxLQUFTLElBQUF0SixVQUFTc0osR0FDbEIsSUFBSyxNQUFNOVcsS0FBTzhXLEVBQ0csTUFBYjdRLEVBQUtqRyxJQUNMb3dDLEVBQVN4UixFQUFPNStCLEVBQUssR0FJckMsS0FDSyxDQUNELE1BQU1pK0MsRUFBaUJyZixFQUFNMFosUUFDekIwRixFQUNJbG5DLElBQVM3USxJQUNUMjRCLEVBQU1zZixRQUFVajRDLEdBR2Y2USxHQUNMNEQsRUFBR3U0QixnQkFBZ0IsU0FLbkIsU0FBVXY0QixJQUNWa2tCLEVBQU0wWixRQUFVMkYsRUFFeEIsQ0FDSixDQXNPUUUsQ0FBV3pqQyxFQUFJaWpDLEVBQVdDLElBRXJCLElBQUFubkMsTUFBS3pXLElBRUwsSUFBQTBVLGlCQUFnQjFVLElBM0Y3QixTQUFvQjBhLEVBQUk2MUIsRUFBU29OLEVBQVdDLEVBQVcveEMsRUFBVyxNQUU5RCxNQUFNdXlDLEVBQVcxakMsRUFBRzJqQyxPQUFTM2pDLEVBQUcyakMsS0FBTyxDQUFDLEdBQ2xDQyxFQUFrQkYsRUFBUzdOLEdBQ2pDLEdBQUlxTixHQUFhVSxFQUViQSxFQUFnQnBvRCxNQUFRMG5ELE1BRXZCLENBQ0QsTUFBT253QyxFQUFNck8sR0FjckIsU0FBbUJxTyxHQUNmLElBQUlyTyxFQUNKLEdBQUl5eEMsRUFBa0JobkIsS0FBS3BjLEdBQU8sQ0FFOUIsSUFBSXFRLEVBQ0osSUFGQTFlLEVBQVUsQ0FBQyxFQUVIMGUsRUFBSXJRLEVBQUt4VyxNQUFNNDVDLElBQ25CcGpDLEVBQU9BLEVBQUtILE1BQU0sRUFBR0csRUFBS3JYLE9BQVMwbkIsRUFBRSxHQUFHMW5CLFFBQ3hDZ0osRUFBUTBlLEVBQUUsR0FBRzNJLGdCQUFpQixDQUV0QyxDQUVBLE1BQU8sQ0FEbUIsTUFBWjFILEVBQUssR0FBYUEsRUFBS0gsTUFBTSxJQUFLLElBQUE4SCxXQUFVM0gsRUFBS0gsTUFBTSxJQUN0RGxPLEVBQ25CLENBMUJnQ20vQyxDQUFVaE8sR0FDbEMsR0FBSXFOLEVBQVcsQ0FFWCxNQUFNWSxFQUFXSixFQUFTN04sR0E2QnRDLFNBQXVCa08sRUFBYzV5QyxHQUNqQyxNQUFNMnlDLEVBQVdsa0QsSUFhYixHQUFLQSxFQUFFb2tELE1BR0YsR0FBSXBrRCxFQUFFb2tELE1BQVFGLEVBQVFHLFNBQ3ZCLFlBSEFya0QsRUFBRW9rRCxLQUFPMWlELEtBQUtwQixPQUtsQixJQUFBaVQsNEJBTVIsU0FBdUN2VCxFQUFHcEUsR0FDdEMsSUFBSSxJQUFBNEssU0FBUTVLLEdBQVEsQ0FDaEIsTUFBTTBvRCxFQUFldGtELEVBQUV1a0QseUJBS3ZCLE9BSkF2a0QsRUFBRXVrRCx5QkFBMkIsS0FDekJELEVBQWE3NUMsS0FBS3pLLEdBQ2xCQSxFQUFFd2tELFVBQVcsQ0FBSSxFQUVkNW9ELEVBQU0yTCxLQUFJaEYsR0FBT3ZDLElBQU9BLEVBQUV3a0QsVUFBWWppRCxHQUFNQSxFQUFHdkMsSUFDMUQsQ0FFSSxPQUFPcEUsQ0FFZixDQWxCbUM2b0QsQ0FBOEJ6a0QsRUFBR2trRCxFQUFRdG9ELE9BQVEyVixFQUFVLEVBQXlDLENBQUN2UixHQUFHLEVBSXZJLE9BRkFra0QsRUFBUXRvRCxNQUFRdW9ELEVBQ2hCRCxFQUFRRyxTQXhCUzdOLElBQWN6aEMsRUFBRTdELE1BQUssSUFBT3NsQyxFQUFZLElBQU1BLEVBQVk5MEMsS0FBS3BCLE9BeUJ6RTRqRCxDQUNYLENBdERpRFEsQ0FBY3BCLEVBQVcveEMsR0FDOUQra0MsRUFBaUJsMkIsRUFBSWpOLEVBQU0rd0MsRUFBU3AvQyxFQUN4QyxNQUNTay9DLElBbEJqQixTQUE2QjVqQyxFQUFJM0gsRUFBT3VDLEVBQVNsVyxHQUM3Q3NiLEVBQUd3OEIsb0JBQW9CbmtDLEVBQU91QyxFQUFTbFcsRUFDM0MsQ0FrQlk4M0MsQ0FBb0J4OEIsRUFBSWpOLEVBQU02d0MsRUFBaUJsL0MsR0FDL0NnL0MsRUFBUzdOLFFBQVcxMEMsRUFFNUIsQ0FDSixDQXVFWW9qRCxDQUFXdmtDLEVBQUkxYSxFQUFLMjlDLEVBQVdDLEVBQVd4aUMsSUFHOUIsTUFBWHBiLEVBQUksSUFDTEEsRUFBTUEsRUFBSXNOLE1BQU0sR0FBSyxHQUNaLE1BQVh0TixFQUFJLElBQ0VBLEVBQU1BLEVBQUlzTixNQUFNLEdBQUssR0FrQnJDLFNBQXlCb04sRUFBSTFhLEVBQUs5SixFQUFPb2xCLEdBQ3JDLE9BQUlBLEVBR1ksY0FBUnRiLEdBQStCLGdCQUFSQSxNQUl2QkEsS0FBTzBhLEdBQU1xMkIsRUFBV2xuQixLQUFLN3BCLEtBQVEsSUFBQTRLLFlBQVcxVSxJQVc1QyxlQUFSOEosR0FBZ0MsY0FBUkEsR0FBK0IsY0FBUkEsSUFLdkMsU0FBUkEsS0FJUSxTQUFSQSxHQUFpQyxVQUFmMGEsRUFBRzhkLFlBSWIsU0FBUng0QixHQUFpQyxhQUFmMGEsRUFBRzhkLGFBSXJCdVksRUFBV2xuQixLQUFLN3BCLE1BQVEsSUFBQXdOLFVBQVN0WCxLQUc5QjhKLEtBQU8wYSxLQUNsQixDQXpEY3drQyxDQUFnQnhrQyxFQUFJMWEsRUFBSzQ5QyxFQUFXdGlDLElBM0tsRCxTQUFzQlosRUFBSTFhLEVBQUs5SixFQUkvQjJwQyxFQUFjemtCLEVBQWlCQyxFQUFnQnlpQixHQUMzQyxHQUFZLGNBQVI5OUIsR0FBK0IsZ0JBQVJBLEVBS3ZCLE9BSkk2L0IsR0FDQS9CLEVBQWdCK0IsRUFBY3prQixFQUFpQkMsUUFFbkRYLEVBQUcxYSxHQUFnQixNQUFUOUosRUFBZ0IsR0FBS0EsR0FHbkMsR0FBWSxVQUFSOEosR0FDZSxhQUFmMGEsRUFBRzhkLFVBRUY5ZCxFQUFHOGQsUUFBUW45QixTQUFTLEtBQU0sQ0FHM0JxZixFQUFHL1IsT0FBU3pTLEVBQ1osTUFBTXdLLEVBQW9CLE1BQVR4SyxFQUFnQixHQUFLQSxFQVd0QyxPQVZJd2tCLEVBQUd4a0IsUUFBVXdLLEdBSUUsV0FBZmdhLEVBQUc4ZCxVQUNIOWQsRUFBR3hrQixNQUFRd0ssUUFFRixNQUFUeEssR0FDQXdrQixFQUFHdTRCLGdCQUFnQmp6QyxHQUczQixDQUNBLElBQUltL0MsR0FBYSxFQUNqQixHQUFjLEtBQVZqcEQsR0FBeUIsTUFBVEEsRUFBZSxDQUMvQixNQUFNNkosU0FBYzJhLEVBQUcxYSxHQUNWLFlBQVRELEVBRUE3SixHQUFRLElBQUFrcEQsb0JBQW1CbHBELEdBRWIsTUFBVEEsR0FBMEIsV0FBVDZKLEdBRXRCN0osRUFBUSxHQUNSaXBELEdBQWEsR0FFQyxXQUFUcC9DLElBRUw3SixFQUFRLEVBQ1JpcEQsR0FBYSxFQUVyQixDQUlBLElBQ0l6a0MsRUFBRzFhLEdBQU85SixDQVFkLENBTkEsTUFBT29FLEdBRTZDNmtELElBQzVDLElBQUFsakQsTUFBSyx3QkFBd0IrRCxVQUFZMGEsRUFBRzhkLFFBQVFyakIseUJBQ3ZDamYsZ0JBQXFCb0UsRUFFMUMsQ0FDQTZrRCxHQUFjemtDLEVBQUd1NEIsZ0JBQWdCanpDLEVBQ3JDLENBNEdRcS9DLENBQWEza0MsRUFBSTFhLEVBQUs0OUMsRUFBVy9kLEVBQWN6a0IsRUFBaUJDLEVBQWdCeWlCLElBT3BFLGVBQVI5OUIsRUFDQTBhLEVBQUc0a0MsV0FBYTFCLEVBRUgsZ0JBQVI1OUMsSUFDTDBhLEVBQUc2a0MsWUFBYzNCLEdBL003QixTQUFtQmxqQyxFQUFJMWEsRUFBSzlKLEVBQU9vbEIsRUFBT3pQLEdBQ3RDLEdBQUl5UCxHQUFTdGIsRUFBSTJVLFdBQVcsVUFDWCxNQUFUemUsRUFDQXdrQixFQUFHOGtDLGtCQUFrQjdPLEVBQVMzd0MsRUFBSXNOLE1BQU0sRUFBR3ROLEVBQUk1SixTQUcvQ3NrQixFQUFHK2tDLGVBQWU5TyxFQUFTM3dDLEVBQUs5SixPQUduQyxDQUdELE1BQU0rK0IsR0FBWSxJQUFBeXFCLHNCQUFxQjEvQyxHQUMxQixNQUFUOUosR0FBa0IrK0IsS0FBYyxJQUFBbXFCLG9CQUFtQmxwRCxHQUNuRHdrQixFQUFHdTRCLGdCQUFnQmp6QyxHQUduQjBhLEVBQUdpMUIsYUFBYTN2QyxFQUFLaTFCLEVBQVksR0FBSy8rQixFQUU5QyxDQUNKLENBNkxReXBELENBQVVqbEMsRUFBSTFhLEVBQUs0OUMsRUFBV3RpQyxHQUNsQyxHQWtuQ3dEK3pCLEdBRzVELElBQUlsbkIsR0FDQXkzQixJQUFtQixFQUN2QixTQUFTQyxLQUNMLE9BQVExM0IsS0FDSEEsSUFBVyxJQUFBb1QsZ0JBQWVtaUIsSUFDbkMsQ0FDQSxTQUFTb0MsS0FLTCxPQUpBMzNCLEdBQVd5M0IsR0FDTHozQixJQUNBLElBQUFzVCx5QkFBd0JpaUIsSUFDOUJrQyxJQUFtQixFQUNaejNCLEVBQ1gsQ0FFQSxNQUFNeFcsR0FBUyxJQUFLNWIsS0FDaEI4cEQsS0FBaUJsdUMsVUFBVTViLEVBQzlCLEVBQ0ttbkIsR0FBVSxJQUFLbm5CLEtBQ2pCK3BELEtBQTBCNWlDLFdBQVdubkIsRUFDeEMsRUFDS3F1QyxHQUFZLElBQUtydUMsS0FDbkIsTUFBTTZkLEVBQU1pc0MsS0FBaUJ6YixhQUFhcnVDLEdBRXRDZ3FELEdBQXFCbnNDLEdBQ3JCb3NDLEdBQTJCcHNDLEdBRS9CLE1BQU0sTUFBRXFqQixHQUFVcmpCLEVBc0JsQixPQXJCQUEsRUFBSXFqQixNQUFTZ3BCLElBQ1QsTUFBTS9rQyxFQUFZZ2xDLEdBQW1CRCxHQUNyQyxJQUFLL2tDLEVBQ0QsT0FDSixNQUFNcFAsRUFBWThILEVBQUkwaUIsWUFDakIsSUFBQTFyQixZQUFXa0IsSUFBZUEsRUFBVTZGLFFBQVc3RixFQUFVcStCLFdBSzFEcitCLEVBQVVxK0IsU0FBV2p2QixFQUFVcWYsV0FHbkNyZixFQUFVcWYsVUFBWSxHQUN0QixNQUFNMWhDLEVBQVFvK0IsRUFBTS9iLEdBQVcsRUFBT0EsYUFBcUJ5cEIsWUFLM0QsT0FKSXpwQixhQUFxQmlsQyxVQUNyQmpsQyxFQUFVKzNCLGdCQUFnQixXQUMxQi8zQixFQUFVeTBCLGFBQWEsYUFBYyxLQUVsQzkyQyxDQUFLLEVBRVQrYSxDQUNWLEVBQ0t3c0MsR0FBZSxJQUFLcnFELEtBQ3RCLE1BQU02ZCxFQUFNa3NDLEtBQTBCMWIsYUFBYXJ1QyxHQUUvQ2dxRCxHQUFxQm5zQyxHQUNyQm9zQyxHQUEyQnBzQyxHQUUvQixNQUFNLE1BQUVxakIsR0FBVXJqQixFQU9sQixPQU5BQSxFQUFJcWpCLE1BQVNncEIsSUFDVCxNQUFNL2tDLEVBQVlnbEMsR0FBbUJELEdBQ3JDLEdBQUkva0MsRUFDQSxPQUFPK2IsRUFBTS9iLEdBQVcsRUFBTUEsYUFBcUJ5cEIsV0FDdkQsRUFFRy93QixDQUNWLEVBQ0QsU0FBU21zQyxHQUFxQm5zQyxHQUcxQjlaLE9BQU9pMkIsZUFBZW5jLEVBQUkzSCxPQUFRLGNBQWUsQ0FDN0MvVixNQUFRczVDLElBQVEsSUFBQTZRLFdBQVU3USxLQUFRLElBQUE4USxVQUFTOVEsR0FDM0NqRSxVQUFVLEdBRWxCLENBRUEsU0FBU3lVLEdBQTJCcHNDLEdBQ2hDLElBQUksSUFBQXkxQixpQkFBaUIsQ0FDakIsTUFBTWUsRUFBa0J4MkIsRUFBSTNILE9BQU9tK0IsZ0JBQ25DdHdDLE9BQU9pMkIsZUFBZW5jLEVBQUkzSCxPQUFRLGtCQUFtQixDQUNqRGpSLElBQUcsSUFDUW92QyxFQUVYbHFDLE9BQ0ksSUFBQWpFLE1BQUssb0dBRVQsSUFFSixNQUFNODVCLEVBQWtCbmlCLEVBQUkzSCxPQUFPOHBCLGdCQUM3Qjc1QixFQUFNLDBsQkFPWnBDLE9BQU9pMkIsZUFBZW5jLEVBQUkzSCxPQUFRLGtCQUFtQixDQUNqRGpSLElBQUcsTUFDQyxJQUFBaUIsTUFBS0MsR0FDRTY1QixHQUVYNzFCLE9BQ0ksSUFBQWpFLE1BQUtDLEVBQ1QsR0FFUixDQUNKLENBQ0EsU0FBU2drRCxHQUFtQmhsQyxHQUN4QixJQUFJLElBQUExTixVQUFTME4sR0FBWSxDQUNyQixNQUFNMVksRUFBTThhLFNBQVM4bkIsY0FBY2xxQixHQUluQyxPQUhnRDFZLElBQzVDLElBQUF2RyxNQUFLLCtDQUErQ2lmLHFCQUVqRDFZLENBQ1gsQ0FPQSxPQUxJeEssT0FBT3VvRCxZQUNQcmxDLGFBQXFCbGpCLE9BQU91b0QsWUFDVCxXQUFuQnJsQyxFQUFVa0QsT0FDVixJQUFBbmlCLE1BQUssbUZBRUZpZixDQUNYLENBQ0EsSUFBSXNsQyxJQUEwQixFQUk5QixNQUFNQyxHQUF1QixLQUNoQkQsS0FDREEsSUFBMEIsRUE1UWxDMUcsR0FBVzRHLFlBQWMsRUFBR3hxRCxZQUFZLENBQUdBLFVBQzNDNmtELEdBQVkyRixZQUFjLEVBQUd4cUQsU0FBU3lWLEtBQ2xDLEdBQUlBLEVBQU11QixRQUFTLElBQUE0dEMsWUFBV252QyxFQUFNdUIsTUFBTWhYLE1BQU9BLEdBQzdDLE1BQU8sQ0FBRXNrRCxTQUFTLEVBQ3RCLEVBRUpMLEdBQWV1RyxZQUFjLEVBQUd4cUQsU0FBU3lWLEtBQ3JDLElBQUksSUFBQTdLLFNBQVE1SyxJQUNSLEdBQUl5VixFQUFNdUIsUUFBUyxJQUFBdXRDLGNBQWF2a0QsRUFBT3lWLEVBQU11QixNQUFNaFgsUUFBVSxFQUN6RCxNQUFPLENBQUVza0QsU0FBUyxRQUdyQixJQUFJLElBQUF4NEIsT0FBTTlyQixJQUNYLEdBQUl5VixFQUFNdUIsT0FBU2hYLEVBQU1vSyxJQUFJcUwsRUFBTXVCLE1BQU1oWCxPQUNyQyxNQUFPLENBQUVza0QsU0FBUyxRQUdyQixHQUFJdGtELEVBQ0wsTUFBTyxDQUFFc2tELFNBQVMsRUFDdEIsRUFFSmtCLEdBQWNnRixZQUFjLENBQUN6MEIsRUFBU3RnQixLQUNsQyxHQUEwQixpQkFBZkEsRUFBTTVMLEtBQ2IsT0FFSixNQUFNNGdELEVBQWEvRSxHQUVuQmp3QyxFQUFNNUwsS0FBS3FzQyxjQUFlemdDLEVBQU11QixPQUFTdkIsRUFBTXVCLE1BQU1uTixNQUNyRCxPQUFJNGdELEVBQVdELFlBQ0pDLEVBQVdELFlBQVl6MEIsRUFBU3RnQixRQUQzQyxDQUVBLEVBcUdKNHhDLEdBQU1tRCxZQUFjLEVBQUd4cUQsWUFDbkIsSUFBS0EsRUFDRCxNQUFPLENBQUUwb0MsTUFBTyxDQUFFMFosUUFBUyxRQUMvQixFQXlJQSxrRkN2bkRSLFNBQVM3MkMsRUFBUW0vQyxFQUFLQyxHQUNsQixNQUFNaC9DLEVBQU0vSCxPQUFPeWpCLE9BQU8sTUFDcEJ1akMsRUFBT0YsRUFBSTcrQixNQUFNLEtBQ3ZCLElBQUssSUFBSWxzQixFQUFJLEVBQUdBLEVBQUlpckQsRUFBSzFxRCxPQUFRUCxJQUM3QmdNLEVBQUlpL0MsRUFBS2pyRCxLQUFNLEVBRW5CLE9BQU9nckQsRUFBbUI5MkMsS0FBU2xJLEVBQUlrSSxFQUFJb0wsZUFBaUJwTCxLQUFTbEksRUFBSWtJLEVBQzdFLG9vQ0FLQSxNQUFNZzNDLEVBQWlCLENBQ25CLEVBQTJCLE9BQzNCLEVBQTRCLFFBQzVCLEVBQTRCLFFBQzVCLEVBQTRCLFFBQzVCLEdBQWtDLGFBQ2xDLEdBQXNDLGlCQUN0QyxHQUF1QyxrQkFDdkMsSUFBdUMsaUJBQ3ZDLElBQXlDLG1CQUN6QyxJQUFtQyxhQUNuQyxLQUF1QyxnQkFDdkMsS0FBMkMsb0JBQzNDLEVBQUUsR0FBNkIsVUFDL0IsRUFBRSxHQUEwQixRQU0xQkMsRUFBZ0IsQ0FDbEIsRUFBNEIsU0FDNUIsRUFBNkIsVUFDN0IsRUFBK0IsYUFNN0I1d0IsRUFBc0MzdUIsRUFIZixvTUFNN0IsU0FBU3cvQyxFQUFrQnRnQyxFQUFRbFIsRUFBUSxFQUFHQyxFQUFNaVIsRUFBT3ZxQixRQUt2RCxJQUFJOHFELEVBQVF2Z0MsRUFBT29CLE1BQU0sV0FFekIsTUFBTW8vQixFQUFtQkQsRUFBTXQvQyxRQUFPLENBQUMrckIsRUFBR3l6QixJQUFRQSxFQUFNLEdBQU0sSUFDOURGLEVBQVFBLEVBQU10L0MsUUFBTyxDQUFDK3JCLEVBQUd5ekIsSUFBUUEsRUFBTSxHQUFNLElBQzdDLElBQUl2d0MsRUFBUSxFQUNaLE1BQU1yTyxFQUFNLEdBQ1osSUFBSyxJQUFJM00sRUFBSSxFQUFHQSxFQUFJcXJELEVBQU05cUQsT0FBUVAsSUFJOUIsR0FIQWdiLEdBQ0lxd0MsRUFBTXJyRCxHQUFHTyxRQUNIK3FELEVBQWlCdHJELElBQU1zckQsRUFBaUJ0ckQsR0FBR08sUUFBVyxHQUM1RHlhLEdBQVNwQixFQUFPLENBQ2hCLElBQUssSUFBSTNaLEVBQUlELEVBakJYLEVBaUJzQkMsR0FBS0QsRUFqQjNCLEdBaUJ3QzZaLEVBQU1tQixFQUFPL2EsSUFBSyxDQUN4RCxHQUFJQSxFQUFJLEdBQUtBLEdBQUtvckQsRUFBTTlxRCxPQUNwQixTQUNKLE1BQU1pckQsRUFBT3ZyRCxFQUFJLEVBQ2pCME0sRUFBSTlMLEtBQUssR0FBRzJxRCxJQUFPLElBQUlDLE9BQU94ZixLQUFLN1osSUFBSSxFQUFJL2pCLE9BQU9tOUMsR0FBTWpyRCxPQUFRLFNBQVM4cUQsRUFBTXByRCxNQUMvRSxNQUFNeXJELEVBQWFMLEVBQU1wckQsR0FBR00sT0FDdEJvckQsRUFBb0JMLEVBQWlCcnJELElBQU1xckQsRUFBaUJyckQsR0FBR00sUUFBVyxFQUNoRixHQUFJTixJQUFNRCxFQUFHLENBRVQsTUFBTTRyRCxFQUFNaHlDLEdBQVNvQixHQUFTMHdDLEVBQWFDLElBQ3JDcHJELEVBQVMwckMsS0FBSzdaLElBQUksRUFBR3ZZLEVBQU1tQixFQUFRMHdDLEVBQWFFLEVBQU0veEMsRUFBTUQsR0FDbEVqTixFQUFJOUwsS0FBSyxTQUFXLElBQUk0cUQsT0FBT0csR0FBTyxJQUFJSCxPQUFPbHJELEdBQ3JELE1BQ0ssR0FBSU4sRUFBSUQsRUFBRyxDQUNaLEdBQUk2WixFQUFNbUIsRUFBTyxDQUNiLE1BQU16YSxFQUFTMHJDLEtBQUs3WixJQUFJNlosS0FBS0MsSUFBSXJ5QixFQUFNbUIsRUFBTzB3QyxHQUFhLEdBQzNELytDLEVBQUk5TCxLQUFLLFNBQVcsSUFBSTRxRCxPQUFPbHJELEdBQ25DLENBQ0F5YSxHQUFTMHdDLEVBQWFDLENBQzFCLENBQ0osQ0FDQSxLQUNKLENBRUosT0FBT2gvQyxFQUFJa0ssS0FBSyxLQUNwQixDQWFBLE1BQU1nMUMsRUFBc0IsOEVBQ3RCaEMsRUFBcUNqK0MsRUFBUWlnRCxHQUk3Q0MsRUFBOEJsZ0QsRUFBUWlnRCxrSkFRNUMsU0FBU3RDLEVBQW1CbHBELEdBQ3hCLFFBQVNBLEdBQW1CLEtBQVZBLENBQ3RCLENBQ0EsTUFBTTByRCxFQUFtQixrQ0FDbkJDLEVBQXNCLENBQUMsRUFDN0IsU0FBU0MsRUFBa0JyMEMsR0FDdkIsR0FBSW8wQyxFQUFvQnByRCxlQUFlZ1gsR0FDbkMsT0FBT28wQyxFQUFvQnAwQyxHQUUvQixNQUFNczBDLEVBQVdILEVBQWlCLzNCLEtBQUtwYyxHQUl2QyxPQUhJczBDLEdBQ0E1bEQsUUFBUXVTLE1BQU0sMEJBQTBCakIsS0FFcENvMEMsRUFBb0JwMEMsSUFBU3MwQyxDQUN6QyxDQUNBLE1BQU1DLEVBQWlCLENBQ25CQyxjQUFlLGlCQUNmbkUsVUFBVyxRQUNYb0UsUUFBUyxNQUNUQyxVQUFXLGNBS1RDLEVBQXlDM2dELEVBQVEseWhCQWVqRDRnRCxFQUFnQzVnRCxFQUFRLG8rQkFrQnhDNmdELEVBQStCN2dELEVBQVEsd25GQXdDN0MsU0FBU3dsQyxFQUFlL3dDLEdBQ3BCLEdBQUk0SyxFQUFRNUssR0FBUSxDQUNoQixNQUFNc00sRUFBTSxDQUFDLEVBQ2IsSUFBSyxJQUFJM00sRUFBSSxFQUFHQSxFQUFJSyxFQUFNRSxPQUFRUCxJQUFLLENBQ25DLE1BQU02RCxFQUFPeEQsRUFBTUwsR0FDYm9nQixFQUFhekksRUFBUzlULEdBQ3RCNm9ELEVBQWlCN29ELEdBQ2pCdXRDLEVBQWV2dEMsR0FDckIsR0FBSXVjLEVBQ0EsSUFBSyxNQUFNalcsS0FBT2lXLEVBQ2R6VCxFQUFJeEMsR0FBT2lXLEVBQVdqVyxFQUdsQyxDQUNBLE9BQU93QyxDQUNYLENBQ0ssT0FBSWdMLEVBQVN0WCxJQUdUa04sR0FBU2xOLEdBRlBBLE9BRU4sQ0FHVCxDQUNBLE1BQU1zc0QsRUFBa0IsZ0JBQ2xCQyxFQUFzQixRQUM1QixTQUFTRixFQUFpQnJFLEdBQ3RCLE1BQU16MEMsRUFBTSxDQUFDLEVBT2IsT0FOQXkwQyxFQUFRbjhCLE1BQU15Z0MsR0FBaUJ6aEQsU0FBUXJILElBQ25DLEdBQUlBLEVBQU0sQ0FDTixNQUFNZ3BELEVBQU1ocEQsRUFBS3FvQixNQUFNMGdDLEdBQ3ZCQyxFQUFJdHNELE9BQVMsSUFBTXFULEVBQUlpNUMsRUFBSSxHQUFHcHJELFFBQVVvckQsRUFBSSxHQUFHcHJELE9BQ25ELEtBRUdtUyxDQUNYLENBQ0EsU0FBU2s1QyxFQUFlcndDLEdBQ3BCLElBQUk3SSxFQUFNLEdBQ1YsSUFBSzZJLEdBQVU5RSxFQUFTOEUsR0FDcEIsT0FBTzdJLEVBRVgsSUFBSyxNQUFNekosS0FBT3NTLEVBQVEsQ0FDdEIsTUFBTXBjLEVBQVFvYyxFQUFPdFMsR0FDZnF6QixFQUFnQnJ6QixFQUFJMlUsV0FBVyxNQUFRM1UsRUFBTW9WLEdBQVVwVixJQUN6RHdOLEVBQVN0WCxJQUNTLGlCQUFWQSxHQUFzQmtzRCxFQUF5Qi91QixNQUV2RDVwQixHQUFPLEdBQUc0cEIsS0FBaUJuOUIsS0FFbkMsQ0FDQSxPQUFPdVQsQ0FDWCxDQUNBLFNBQVN1OUIsRUFBZTl3QyxHQUNwQixJQUFJc00sRUFBTSxHQUNWLEdBQUlnTCxFQUFTdFgsR0FDVHNNLEVBQU10TSxPQUVMLEdBQUk0SyxFQUFRNUssR0FDYixJQUFLLElBQUlMLEVBQUksRUFBR0EsRUFBSUssRUFBTUUsT0FBUVAsSUFBSyxDQUNuQyxNQUFNb2dCLEVBQWErd0IsRUFBZTl3QyxFQUFNTCxJQUNwQ29nQixJQUNBelQsR0FBT3lULEVBQWEsSUFFNUIsTUFFQyxHQUFJN1MsR0FBU2xOLEdBQ2QsSUFBSyxNQUFNdVgsS0FBUXZYLEVBQ1hBLEVBQU11WCxLQUNOakwsR0FBT2lMLEVBQU8sS0FJMUIsT0FBT2pMLEVBQUlsTCxNQUNmLENBQ0EsU0FBU3NyRCxFQUFlMTFDLEdBQ3BCLElBQUtBLEVBQ0QsT0FBTyxLQUNYLElBQU15eEIsTUFBT29JLEVBQUssTUFBRW5JLEdBQVUxeEIsRUFPOUIsT0FOSTY1QixJQUFVdjVCLEVBQVN1NUIsS0FDbkI3NUIsRUFBTXl4QixNQUFRcUksRUFBZUQsSUFFN0JuSSxJQUNBMXhCLEVBQU0weEIsTUFBUXFJLEVBQWVySSxJQUUxQjF4QixDQUNYLENBSUEsTUF5Qk1tekMsRUFBMEI1K0MsRUF6QmQsMmtCQThCWjYrQyxFQUF5QjcrQyxFQXBCZCxzcEJBeUJYb2hELEVBQTBCcGhELEVBZmQsd0VBaUJacWhELEVBQVcsVUFDakIsU0FBU0MsRUFBV0MsR0FDaEIsTUFBTXBDLEVBQU0sR0FBS29DLEVBQ1gvckQsRUFBUTZyRCxFQUFTRyxLQUFLckMsR0FDNUIsSUFBSzNwRCxFQUNELE9BQU8ycEQsRUFFWCxJQUNJc0MsRUFDQTdyRCxFQUZBOHJELEVBQU8sR0FHUEMsRUFBWSxFQUNoQixJQUFLL3JELEVBQVFKLEVBQU1JLE1BQU9BLEVBQVF1cEQsRUFBSXhxRCxPQUFRaUIsSUFBUyxDQUNuRCxPQUFRdXBELEVBQUl5QyxXQUFXaHNELElBQ25CLEtBQUssR0FDRDZyRCxFQUFVLFNBQ1YsTUFDSixLQUFLLEdBQ0RBLEVBQVUsUUFDVixNQUNKLEtBQUssR0FDREEsRUFBVSxRQUNWLE1BQ0osS0FBSyxHQUNEQSxFQUFVLE9BQ1YsTUFDSixLQUFLLEdBQ0RBLEVBQVUsT0FDVixNQUNKLFFBQ0ksU0FFSkUsSUFBYy9yRCxJQUNkOHJELEdBQVF2QyxFQUFJdHpDLE1BQU04MUMsRUFBVy9yRCxJQUVqQytyRCxFQUFZL3JELEVBQVEsRUFDcEI4ckQsR0FBUUQsQ0FDWixDQUNBLE9BQU9FLElBQWMvckQsRUFBUThyRCxFQUFPdkMsRUFBSXR6QyxNQUFNODFDLEVBQVcvckQsR0FBUzhyRCxDQUN0RSxDQUVBLE1BQU1HLEVBQWlCLDJCQUN2QixTQUFTQyxFQUFrQkMsR0FDdkIsT0FBT0EsRUFBSTlzQyxRQUFRNHNDLEVBQWdCLEdBQ3ZDLENBV0EsU0FBU3hJLEVBQVd0bEQsRUFBR0MsR0FDbkIsR0FBSUQsSUFBTUMsRUFDTixPQUFPLEVBQ1gsSUFBSWd1RCxFQUFhQyxFQUFPbHVELEdBQ3BCbXVELEVBQWFELEVBQU9qdUQsR0FDeEIsR0FBSWd1RCxHQUFjRSxFQUNkLFNBQU9GLElBQWNFLElBQWFudUQsRUFBRW91RCxZQUFjbnVELEVBQUVtdUQsVUFJeEQsR0FGQUgsRUFBYTNoRCxHQUFTdE0sR0FDdEJtdUQsRUFBYTdoRCxHQUFTck0sR0FDbEJndUQsR0FBY0UsRUFDZCxPQUFPbnVELElBQU1DLEVBSWpCLEdBRkFndUQsRUFBYTNpRCxFQUFRdEwsR0FDckJtdUQsRUFBYTdpRCxFQUFRckwsR0FDakJndUQsR0FBY0UsRUFDZCxTQUFPRixJQUFjRSxJQXpCN0IsU0FBNEJudUQsRUFBR0MsR0FDM0IsR0FBSUQsRUFBRVksU0FBV1gsRUFBRVcsT0FDZixPQUFPLEVBQ1gsSUFBSXl0RCxHQUFRLEVBQ1osSUFBSyxJQUFJaHVELEVBQUksRUFBR2d1RCxHQUFTaHVELEVBQUlMLEVBQUVZLE9BQVFQLElBQ25DZ3VELEVBQVEvSSxFQUFXdGxELEVBQUVLLEdBQUlKLEVBQUVJLElBRS9CLE9BQU9ndUQsQ0FDWCxDQWlCMENDLENBQW1CdHVELEVBQUdDLEdBSTVELEdBRkFndUQsRUFBYXJnRCxHQUFTNU4sR0FDdEJtdUQsRUFBYXZnRCxHQUFTM04sR0FDbEJndUQsR0FBY0UsRUFBWSxDQUUxQixJQUFLRixJQUFlRSxFQUNoQixPQUFPLEVBSVgsR0FGbUI3cEQsT0FBT3NCLEtBQUs1RixHQUFHWSxTQUNmMEQsT0FBT3NCLEtBQUszRixHQUFHVyxPQUU5QixPQUFPLEVBRVgsSUFBSyxNQUFNNEosS0FBT3hLLEVBQUcsQ0FDakIsTUFBTXV1RCxFQUFVdnVELEVBQUVpQixlQUFldUosR0FDM0Jna0QsRUFBVXZ1RCxFQUFFZ0IsZUFBZXVKLEdBQ2pDLEdBQUsrakQsSUFBWUMsSUFDWEQsR0FBV0MsSUFDWmxKLEVBQVd0bEQsRUFBRXdLLEdBQU12SyxFQUFFdUssSUFDdEIsT0FBTyxDQUVmLENBQ0osQ0FDQSxPQUFPa0UsT0FBTzFPLEtBQU8wTyxPQUFPek8sRUFDaEMsQ0FDQSxTQUFTZ2xELEVBQWFuNEMsRUFBS3lILEdBQ3ZCLE9BQU96SCxFQUFJeXhCLFdBQVVyNkIsR0FBUW9oRCxFQUFXcGhELEVBQU1xUSxJQUNsRCxDQU1BLE1BQU1rNkMsRUFBbUJsNkMsR0FDZHlELEVBQVN6RCxHQUNWQSxFQUNPLE1BQVBBLEVBQ0ksR0FDQWpKLEVBQVFpSixJQUNMM0csR0FBUzJHLEtBQ0xBLEVBQUk2cEIsV0FBYXN3QixLQUFtQnQ1QyxFQUFXYixFQUFJNnBCLFdBQ3REeDVCLEtBQUtPLFVBQVVvUCxFQUFLbzZDLEVBQVUsR0FDOUJqZ0QsT0FBTzZGLEdBRW5CbzZDLEVBQVcsQ0FBQ3Q2QyxFQUFNRSxJQUVoQkEsR0FBT0EsRUFBSTNCLFVBQ0orN0MsRUFBU3Q2QyxFQUFNRSxFQUFJN1QsT0FFckIrSyxFQUFNOEksR0FDSixDQUNILENBQUMsT0FBT0EsRUFBSTlFLFNBQVUsSUFBSThFLEVBQUlxNkMsV0FBV3JYLFFBQU8sQ0FBQ3FYLEdBQVVwa0QsRUFBSytKLE1BQzVEcTZDLEVBQVEsR0FBR3BrRCxRQUFZK0osRUFDaEJxNkMsSUFDUixDQUFDLElBR0hwaUMsRUFBTWpZLEdBQ0osQ0FDSCxDQUFDLE9BQU9BLEVBQUk5RSxTQUFVLElBQUk4RSxFQUFJbEosWUFHN0J1QyxHQUFTMkcsSUFBU2pKLEVBQVFpSixJQUFTa1ksR0FBY2xZLEdBR25EQSxFQUZJN0YsT0FBTzZGLEdBS2hCc0ssRUFDQXZhLE9BQU84eEMsT0FBTyxDQUFDLEdBRWZ4WSxFQUFzRHQ1QixPQUFPOHhDLE9BQU8sSUFDcEV4cUIsRUFBTyxPQUlQMFUsRUFBSyxLQUFNLEVBQ1h1dUIsRUFBTyxZQUNQNXRDLEVBQVF6VyxHQUFRcWtELEVBQUt4NkIsS0FBSzdwQixHQUMxQjBVLEVBQW1CMVUsR0FBUUEsRUFBSTJVLFdBQVcsYUFDMUNyVixFQUFTeEYsT0FBT0MsT0FDaEJpa0IsRUFBUyxDQUFDMWIsRUFBS29ZLEtBQ2pCLE1BQU03a0IsRUFBSXlNLEVBQUkvSyxRQUFRbWpCLEdBQ2xCN2tCLEdBQUssR0FDTHlNLEVBQUlrTixPQUFPM1osRUFBRyxFQUNsQixFQUVFWSxFQUFpQnFELE9BQU93ekMsVUFBVTcyQyxlQUNsQ3dNLEVBQVMsQ0FBQzhHLEVBQUsvSixJQUFRdkosRUFBZXNPLEtBQUtnRixFQUFLL0osR0FDaERjLEVBQVV6SyxNQUFNeUssUUFDaEJHLEVBQVM4SSxHQUE4QixpQkFBdEJ1NkMsR0FBYXY2QyxHQUM5QmlZLEVBQVNqWSxHQUE4QixpQkFBdEJ1NkMsR0FBYXY2QyxHQUM5QjI1QyxFQUFVMzVDLEdBQThCLGtCQUF0QnU2QyxHQUFhdjZDLEdBQy9CYSxFQUFjYixHQUF1QixtQkFBUkEsRUFDN0J5RCxFQUFZekQsR0FBdUIsaUJBQVJBLEVBQzNCakksR0FBWWlJLEdBQXVCLGlCQUFSQSxFQUMzQjNHLEdBQVkyRyxHQUFnQixPQUFSQSxHQUErQixpQkFBUkEsRUFDM0MrRCxHQUFhL0QsR0FDUjNHLEdBQVMyRyxJQUFRYSxFQUFXYixFQUFJeUIsT0FBU1osRUFBV2IsRUFBSWdFLE9BRTdEbTJDLEdBQWlCcHFELE9BQU93ekMsVUFBVTFaLFNBQ2xDMHdCLEdBQWdCcHVELEdBQVVndUQsR0FBZW4vQyxLQUFLN08sR0FDOUM2USxHQUFhN1EsR0FFUm91RCxHQUFhcHVELEdBQU9vWCxNQUFNLEdBQUksR0FFbkMyVSxHQUFpQmxZLEdBQThCLG9CQUF0QnU2QyxHQUFhdjZDLEdBQ3RDL0ksR0FBZ0JoQixHQUFRd04sRUFBU3hOLElBQzNCLFFBQVJBLEdBQ1csTUFBWEEsRUFBSSxJQUNKLEdBQUsycEIsU0FBUzNwQixFQUFLLE1BQVFBLEVBQ3pCd3lCLEdBQStCL3dCLEVBRXJDLHVJQUlNMnBCLEdBQW1DM3BCLEVBQVEsNkVBQzNDOGlELEdBQXVCMW5ELElBQ3pCLE1BQU1nWixFQUFRL2IsT0FBT3lqQixPQUFPLE1BQzVCLE9BQVNxakMsR0FDTy9xQyxFQUFNK3FDLEtBQ0gvcUMsRUFBTStxQyxHQUFPL2pELEVBQUcrakQsR0FDakMsRUFFQTRELEdBQWEsU0FJYmp2QyxHQUFXZ3ZDLElBQXFCM0QsR0FDM0JBLEVBQUlscUMsUUFBUTh0QyxJQUFZLENBQUM3MkIsRUFBR2o0QixJQUFPQSxFQUFJQSxFQUFFMDJDLGNBQWdCLE9BRTlEcVksR0FBYyxhQUlkcnZDLEdBQVltdkMsSUFBcUIzRCxHQUFRQSxFQUFJbHFDLFFBQVErdEMsR0FBYSxPQUFPdHZDLGdCQUl6RS9PLEdBQWFtK0MsSUFBcUIzRCxHQUFRQSxFQUFJOEQsT0FBTyxHQUFHdFksY0FBZ0J3VSxFQUFJdHpDLE1BQU0sS0FJbEZtSCxHQUFlOHZDLElBQXFCM0QsR0FBUUEsRUFBTSxLQUFLeDZDLEdBQVd3NkMsS0FBUyxLQUUzRS84QyxHQUFhLENBQUMzTixFQUFPeUssS0FBYzdHLE9BQU84akMsR0FBRzFuQyxFQUFPeUssR0FDcERrb0IsR0FBaUIsQ0FBQzg3QixFQUFLaHlDLEtBQ3pCLElBQUssSUFBSTljLEVBQUksRUFBR0EsRUFBSTh1RCxFQUFJdnVELE9BQVFQLElBQzVCOHVELEVBQUk5dUQsR0FBRzhjLEVBQ1gsRUFFRTdLLEdBQU0sQ0FBQ2ltQixFQUFLL3RCLEVBQUs5SixLQUNuQjRELE9BQU9pMkIsZUFBZWhDLEVBQUsvdEIsRUFBSyxDQUM1Qml3QixjQUFjLEVBQ2RELFlBQVksRUFDWjk1QixTQUNGLEVBRUE2ZSxHQUFZaEwsSUFDZCxNQUFNblQsRUFBSWd1RCxXQUFXNzZDLEdBQ3JCLE9BQU9xc0MsTUFBTXgvQyxHQUFLbVQsRUFBTW5ULENBQUMsRUFFN0IsSUFBSWl1RCxHQUNKLE1BQU0xekMsR0FBZ0IsSUFDVjB6QyxLQUNIQSxHQUN5QixvQkFBZkMsV0FDREEsV0FDZ0Isb0JBQVR2NkMsS0FDSEEsS0FDa0Isb0JBQVh2UyxPQUNIQSxZQUNrQixJQUFYLEVBQUFDLEVBQ0gsRUFBQUEsRUFDQSxDQUFDLEdBRXpCOHNELEdBQVUsbURBQ2hCLFNBQVNDLEdBQWtCdjNDLEdBQ3ZCLE9BQU9zM0MsR0FBUWw3QixLQUFLcGMsR0FDZCxXQUFXQSxJQUNYLFdBQVdyVCxLQUFLTyxVQUFVOFMsS0FDcEMsNlFDNWVBLFFBNUVBLFNBQXVCNlgsRUFBTzIvQixHQUM1QixPQUFPLFNBQWlCQyxFQUFVQyxFQUFXMy9DLEdBQzNDLElBQUk0L0MsRUFBV2hsQyxVQUFVaHFCLE9BQVMsUUFBc0J5RixJQUFqQnVrQixVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FDbkYsTUFBTWlsQyxFQUFhLy9CLEVBQU0yL0IsR0FFekIsS0FBSyxhQUFpQkMsR0FDcEIsT0FHRixLQUFLLGFBQWtCQyxHQUNyQixPQUdGLEdBQUksbUJBQXNCMy9DLEVBR3hCLFlBREFySixRQUFRdVMsTUFBTSx5Q0FLaEIsR0FBSSxpQkFBb0IwMkMsRUFHdEIsWUFEQWpwRCxRQUFRdVMsTUFBTSxxREFJaEIsTUFBTTRHLEVBQVUsQ0FDZDlQLFdBQ0E0L0MsV0FDQUQsYUFHRixHQUFJRSxFQUFXSCxHQUFXLENBRXhCLE1BQU1JLEVBQVdELEVBQVdILEdBQVVJLFNBR3RDLElBQUl6dkQsRUFFSixJQUFLQSxFQUFJeXZELEVBQVNsdkQsT0FBUVAsRUFBSSxLQUN4QnV2RCxHQUFZRSxFQUFTenZELEVBQUksR0FBR3V2RCxVQUREdnZELEtBTTdCQSxJQUFNeXZELEVBQVNsdkQsT0FFakJrdkQsRUFBU3p2RCxHQUFLeWYsRUFHZGd3QyxFQUFTOTFDLE9BQU8zWixFQUFHLEVBQUd5ZixHQU94Qit2QyxFQUFXRSxVQUFVeGtELFNBQVF5a0QsSUFDdkJBLEVBQVMvM0MsT0FBU3kzQyxHQUFZTSxFQUFTQyxjQUFnQjV2RCxHQUN6RDJ2RCxFQUFTQyxjQUNYLEdBRUosTUFFRUosRUFBV0gsR0FBWSxDQUNyQkksU0FBVSxDQUFDaHdDLEdBQ1hvd0MsS0FBTSxHQUlPLGNBQWJSLEdBQ0Y1L0IsRUFBTXFnQyxTQUFTLFlBQWFULEVBQVVDLEVBQVczL0MsRUFBVTQvQyxFQUUvRCxDQUNGLDRIQ2hGQSxRQVRBLFNBQTJCOS9CLEVBQU8yL0IsR0FDaEMsT0FBTyxXQUNMLElBQUlXLEVBQXVCQyxFQUUzQixNQUFNUixFQUFhLy9CLEVBQU0yL0IsR0FDekIsT0FBMk0sUUFBbk1XLEVBQTZHLFFBQXBGQyxFQUF5QlIsRUFBV0UsVUFBVUYsRUFBV0UsVUFBVW52RCxPQUFTLFVBQTJDLElBQTNCeXZELE9BQW9DLEVBQVNBLEVBQXVCcDRDLFlBQTRDLElBQTFCbTRDLEVBQW1DQSxFQUF3QixJQUNoUixDQUNGLG9NQ21CQSxRQVpBLFNBQXVCdGdDLEVBQU8yL0IsR0FDNUIsT0FBTyxTQUFpQkMsR0FDdEIsTUFBTUcsRUFBYS8vQixFQUFNMi9CLEdBRXpCLElBQUssYUFBaUJDLEdBSXRCLE9BQU9HLEVBQVdILElBQWFHLEVBQVdILEdBQVVRLEtBQU9MLEVBQVdILEdBQVVRLEtBQU8sQ0FDekYsQ0FDRiwwSENEQSxRQWJBLFNBQXlCcGdDLEVBQU8yL0IsR0FDOUIsT0FBTyxTQUFtQkMsR0FDeEIsTUFBTUcsRUFBYS8vQixFQUFNMi9CLEdBRXpCLFlBQUksSUFBdUJDLE9BQ2xCLElBQXVCRyxFQUFXRSxVQUFVLEtBSTlDRixFQUFXRSxVQUFVLElBQUtMLElBQWFHLEVBQVdFLFVBQVUsR0FBRzkzQyxJQUN4RSxDQUNGLHdIQ0dBLFFBWkEsU0FBdUI2WCxFQUFPMi9CLEdBQzVCLE9BQU8sU0FBaUJDLEVBQVVDLEdBQ2hDLE1BQU1FLEVBQWEvL0IsRUFBTTIvQixHQUV6QixZQUFJLElBQXVCRSxFQUNsQkQsS0FBWUcsR0FBY0EsRUFBV0gsR0FBVUksU0FBU3BzQyxNQUFLemdCLEdBQVFBLEVBQUswc0QsWUFBY0EsSUFHMUZELEtBQVlHLENBQ3JCLENBQ0YsbW5CQ2RPLE1BQU1TLEVBQ1g1c0QsY0FFRUUsS0FBSzJzRCxRQUFVanNELE9BQU95akIsT0FBTyxNQUM3Qm5rQixLQUFLMnNELFFBQVFSLFVBQVksR0FHekJuc0QsS0FBSzR4QyxRQUFVbHhDLE9BQU95akIsT0FBTyxNQUM3Qm5rQixLQUFLNHhDLFFBQVF1YSxVQUFZLEdBQ3pCbnNELEtBQUs0c0QsV0FBWSxhQUFjNXNELEtBQU0sV0FDckNBLEtBQUs2c0QsV0FBWSxhQUFjN3NELEtBQU0sV0FDckNBLEtBQUs4c0QsY0FBZSxhQUFpQjlzRCxLQUFNLFdBQzNDQSxLQUFLK3NELGNBQWUsYUFBaUIvc0QsS0FBTSxXQUMzQ0EsS0FBS2d0RCxXQUFZLGFBQWNodEQsS0FBTSxXQUNyQ0EsS0FBS2l0RCxXQUFZLGFBQWNqdEQsS0FBTSxXQUNyQ0EsS0FBS2t0RCxrQkFBbUIsYUFBaUJsdEQsS0FBTSxXQUFXLEdBQzFEQSxLQUFLbXRELGtCQUFtQixhQUFpQm50RCxLQUFNLFdBQVcsR0FDMURBLEtBQUt1c0QsVUFBVyxhQUFjdnNELEtBQU0sV0FDcENBLEtBQUtvdEQsY0FBZSxhQUFjcHRELEtBQU0sV0FBVyxHQUNuREEsS0FBS3F0RCxlQUFnQixhQUFrQnJ0RCxLQUFNLFdBQzdDQSxLQUFLc3RELGVBQWdCLGFBQWtCdHRELEtBQU0sV0FDN0NBLEtBQUt1dEQsYUFBYyxhQUFnQnZ0RCxLQUFNLFdBQ3pDQSxLQUFLd3RELGFBQWMsYUFBZ0J4dEQsS0FBTSxXQUN6Q0EsS0FBS3l0RCxXQUFZLGFBQWN6dEQsS0FBTSxXQUNyQ0EsS0FBSzB0RCxXQUFZLGFBQWMxdEQsS0FBTSxVQUN2QyxFQWVGLFFBSkEsV0FDRSxPQUFPLElBQUkwc0QsQ0FDYixnUkM4QkEsUUF4REEsU0FBMEJ4Z0MsRUFBTzIvQixHQUMvQixJQUFJOEIsRUFBWTNtQyxVQUFVaHFCLE9BQVMsUUFBc0J5RixJQUFqQnVrQixVQUFVLElBQW1CQSxVQUFVLEdBQy9FLE9BQU8sU0FBb0I4a0MsRUFBVUMsR0FDbkMsTUFBTUUsRUFBYS8vQixFQUFNMi9CLEdBRXpCLEtBQUssYUFBaUJDLEdBQ3BCLE9BR0YsSUFBSzZCLEtBQWMsYUFBa0I1QixHQUNuQyxPQUlGLElBQUtFLEVBQVdILEdBQ2QsT0FBTyxFQUdULElBQUk4QixFQUFrQixFQUV0QixHQUFJRCxFQUNGQyxFQUFrQjNCLEVBQVdILEdBQVVJLFNBQVNsdkQsT0FDaERpdkQsRUFBV0gsR0FBWSxDQUNyQlEsS0FBTUwsRUFBV0gsR0FBVVEsS0FDM0JKLFNBQVUsUUFFUCxDQUVMLE1BQU1BLEVBQVdELEVBQVdILEdBQVVJLFNBRXRDLElBQUssSUFBSXp2RCxFQUFJeXZELEVBQVNsdkQsT0FBUyxFQUFHUCxHQUFLLEVBQUdBLElBQ3BDeXZELEVBQVN6dkQsR0FBR3N2RCxZQUFjQSxJQUM1QkcsRUFBUzkxQyxPQUFPM1osRUFBRyxHQUNuQm14RCxJQU1BM0IsRUFBV0UsVUFBVXhrRCxTQUFReWtELElBQ3ZCQSxFQUFTLzNDLE9BQVN5M0MsR0FBWU0sRUFBU0MsY0FBZ0I1dkQsR0FDekQydkQsRUFBU0MsY0FDWCxJQUlSLENBTUEsTUFKaUIsZ0JBQWJQLEdBQ0Y1L0IsRUFBTXFnQyxTQUFTLGNBQWVULEVBQVVDLEdBR25DNkIsQ0FDVCxDQUNGLHdIQ2hCQSxRQXhEQSxTQUF1QjFoQyxFQUFPMi9CLEdBQzVCLElBQUlnQyxFQUFpQjdtQyxVQUFVaHFCLE9BQVMsUUFBc0J5RixJQUFqQnVrQixVQUFVLElBQW1CQSxVQUFVLEdBQ3BGLE9BQU8sU0FBa0I4a0MsR0FDdkIsTUFBTUcsRUFBYS8vQixFQUFNMi9CLEdBRXBCSSxFQUFXSCxLQUNkRyxFQUFXSCxHQUFZLENBQ3JCSSxTQUFVLEdBQ1ZJLEtBQU0sSUFJVkwsRUFBV0gsR0FBVVEsT0FDckIsTUFBTUosRUFBV0QsRUFBV0gsR0FBVUksU0FJaEMsY0FBZ0JKLEdBQVlHLEVBQVc2QixLQUN6QzVCLEVBQVM1dUQsUUFBUTJ1RCxFQUFXNkIsSUFBSTVCLFVBSXBDLElBQUssSUFBSTZCLEVBQU8vbUMsVUFBVWhxQixPQUFRTCxFQUFPLElBQUlNLE1BQU04d0QsRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSXQ5QyxFQUFPLEVBQUdBLEVBQU9zOUMsRUFBTXQ5QyxJQUNsRzlULEVBQUs4VCxFQUFPLEdBQUt1VyxVQUFVdlcsR0FHN0IsSUFBS3k3QyxJQUFhQSxFQUFTbHZELE9BQ3pCLE9BQU82d0QsRUFBaUJseEQsRUFBSyxRQUFLOEYsRUFHcEMsTUFBTTJwRCxFQUFXLENBQ2YvM0MsS0FBTXkzQyxFQUNOTyxhQUFjLEdBS2hCLElBRkFKLEVBQVdFLFVBQVU3dUQsS0FBSzh1RCxHQUVuQkEsRUFBU0MsYUFBZUgsRUFBU2x2RCxRQUFRLENBQzlDLE1BQ013TixFQURVMGhELEVBQVNFLEVBQVNDLGNBQ1hqZ0QsU0FBU2pQLE1BQU0sS0FBTVIsR0FFeENreEQsSUFDRmx4RCxFQUFLLEdBQUs2TixHQUdaNGhELEVBQVNDLGNBQ1gsQ0FJQSxPQUZBSixFQUFXRSxVQUFVanZELE1BRWpCMndELEVBQ0tseEQsRUFBSyxRQURkLENBR0YsQ0FDRixvaEJDN0JPLE1BQU1xeEQsR0FBZSxnQkFDdEIsVUFDSnBCLEVBQVMsVUFDVEMsRUFBUyxhQUNUQyxFQUFZLGFBQ1pDLEVBQVksVUFDWkMsRUFBUyxVQUNUQyxFQUFTLGlCQUNUQyxFQUFnQixpQkFDaEJDLEVBQWdCLFNBQ2hCWixFQUFRLGFBQ1JhLEVBQVksY0FDWkMsRUFBYSxjQUNiQyxFQUFhLFlBQ2JDLEVBQVcsWUFDWEMsRUFBVyxVQUNYQyxFQUFTLFVBQ1RDLEVBQVMsUUFDVGYsRUFBTyxRQUNQL2EsR0FDRW9jLDJIQzFCSixRQXRCQSxTQUEwQmxDLEdBQ3hCLE1BQUksaUJBQW9CQSxHQUFZLEtBQU9BLEdBRXpDL29ELFFBQVF1UyxNQUFNLDhDQUNQLEdBR0wsTUFBTW1iLEtBQUtxN0IsSUFFYi9vRCxRQUFRdVMsTUFBTSwwQ0FDUCxLQUdKLDRCQUE0Qm1iLEtBQUtxN0IsS0FFcEMvb0QsUUFBUXVTLE1BQU0sc0ZBQ1AsRUFJWCw0SENMQSxRQWhCQSxTQUEyQnkyQyxHQUN6QixNQUFJLGlCQUFvQkEsR0FBYSxLQUFPQSxHQUUxQ2hwRCxRQUFRdVMsTUFBTSw4Q0FDUCxLQUdKLCtCQUErQm1iLEtBQUtzN0IsS0FFdkNocEQsUUFBUXVTLE1BQU0sK0ZBQ1AsRUFJWCxrS0NQQSxNQUFNMjRDLEVBQ0EsQ0FFRkMsYUFBYTF3RCxHQUNFLElBQU5BLEVBQVUsRUFBSSxHQVVyQjJ3RCxFQUFtQiwwQ0E2SVpDLEVBQWEsQ0FBQ0MsRUFBYUMsRUFBZXBpQyxLQU1yRCxNQUFNcWlDLEVBQVMsSUFBSSxVQUFPLENBQUMsR0FDckJDLEVBQVksSUFBSWhxRCxJQUVoQmlxRCxFQUFrQixLQUN0QkQsRUFBVTdtRCxTQUFRK21ELEdBQVlBLEtBQVcsRUEyQnJDQyxFQUFrQixTQUFVNXRELEdBQ2hDLElBQUk2dEQsRUFFSixJQUFJQyxFQUFTN25DLFVBQVVocUIsT0FBUyxRQUFzQnlGLElBQWpCdWtCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxVQUNqRnVuQyxFQUFPeHRELEtBQUs4dEQsR0FBVSxJQUFLTixFQUFPeHRELEtBQUs4dEQsTUFDbEM5dEQsR0FJTHd0RCxFQUFPeHRELEtBQUs4dEQsR0FBUSxJQUFNLElBQUtaLEtBQ3VCLFFBQS9DVyxFQUFzQkwsRUFBT3h0RCxLQUFLOHRELFVBQTZDLElBQXhCRCxPQUFpQyxFQUFTQSxFQUFvQixZQUdySEwsRUFBT2h4RCxZQUFZc3hELEVBQzVCLEVBSU1DLEVBQWdCLENBQUMvdEQsRUFBTTh0RCxLQUMzQkYsRUFBZ0I1dEQsRUFBTTh0RCxHQUN0QkosR0FBaUIsRUFpRGJNLEVBQWMsV0FDbEIsSUFBSUYsRUFBUzduQyxVQUFVaHFCLE9BQVMsUUFBc0J5RixJQUFqQnVrQixVQUFVLEdBQW1CQSxVQUFVLEdBQUssVUFDN0UrVixFQUFVL1YsVUFBVWhxQixPQUFTLEVBQUlncUIsVUFBVSxRQUFLdmtCLEVBQ2hEdXNELEVBQVNob0MsVUFBVWhxQixPQUFTLEVBQUlncUIsVUFBVSxRQUFLdmtCLEVBQy9Dd3NELEVBQVNqb0MsVUFBVWhxQixPQUFTLEVBQUlncUIsVUFBVSxRQUFLdmtCLEVBQy9DaVosRUFBU3NMLFVBQVVocUIsT0FBUyxFQUFJZ3FCLFVBQVUsUUFBS3ZrQixFQU9uRCxPQUxLOHJELEVBQU94dEQsS0FBSzh0RCxJQUVmRixPQUFnQmxzRCxFQUFXb3NELEdBR3RCTixFQUFPUSxZQUFZRixFQUFROXhCLEVBQVNpeUIsRUFBUUMsRUFBUXZ6QyxFQUM3RCxFQUlNd3pDLEVBQWtCLFdBQ3RCLElBQUlMLEVBQVM3bkMsVUFBVWhxQixPQUFTLFFBQXNCeUYsSUFBakJ1a0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLFVBQ2pGLE9BQU82bkMsQ0FDVCxFQWtDTU0sRUFBSyxDQUFDOWdCLEVBQU10UixFQUFTOHhCLEtBQ3pCLElBQUlPLEVBQWNMLEVBQVlGLEVBQVE5eEIsRUFBU3NSLEdBRS9DLE9BQUtuaUIsR0FhTGtqQyxFQUlBbGpDLEVBQU1raEMsYUFBYSw0QkFBNkJnQyxFQUFhL2dCLEVBQU10UixFQUFTOHhCLEdBSzFFM2lDLEVBQU1raEMsYUFBYSw2QkFBK0I4QixFQUFnQkwsR0FBU08sRUFBYS9nQixFQUFNdFIsRUFBUzh4QixJQXJCaEdPLENBc0JSLEVBOEdILEdBSklmLEdBQ0ZTLEVBQWNULEVBQWFDLEdBR3pCcGlDLEVBQU8sQ0FJVCxNQUFNbWpDLEVBQXVCdkQsSUFDdkJxQyxFQUFpQjE5QixLQUFLcTdCLElBQ3hCMkMsR0FDRixFQUdGdmlDLEVBQU0wZ0MsVUFBVSxZQUFhLFlBQWF5QyxHQUMxQ25qQyxFQUFNMGdDLFVBQVUsY0FBZSxZQUFheUMsRUFDOUMsQ0FFQSxNQUFPLENBQ0xDLGNBNVJvQixXQUNwQixJQUFJVCxFQUFTN25DLFVBQVVocUIsT0FBUyxRQUFzQnlGLElBQWpCdWtCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxVQUNqRixPQUFPdW5DLEVBQU94dEQsS0FBSzh0RCxFQUNyQixFQTBSRUMsZ0JBQ0FTLGNBM1BvQixTQUFVeHVELEdBQzlCLElBQUl5dUQsRUFFSixJQUFJWCxFQUFTN25DLFVBQVVocUIsT0FBUyxRQUFzQnlGLElBQWpCdWtCLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxVQUNqRnVuQyxFQUFPeHRELEtBQUs4dEQsR0FBVSxJQUFLTixFQUFPeHRELEtBQUs4dEQsTUFDbEM5dEQsRUFHSCxHQUFJLElBQUtrdEQsS0FDOEMsUUFBaER1QixFQUF1QmpCLEVBQU94dEQsS0FBSzh0RCxVQUE4QyxJQUF6QlcsT0FBa0MsRUFBU0EsRUFBcUIsT0FDekh6dUQsYUFBbUMsRUFBU0EsRUFBSyxhQUlsRHd0RCxFQUFPaHhELFlBQVlzeEQsR0FDMUJKLEdBQ0YsRUE0T0VnQixnQkF4T3NCLENBQUMxdUQsRUFBTTh0RCxLQUU3Qk4sRUFBT3h0RCxLQUFPLENBQUMsRUFFZnd0RCxFQUFPaHhELFlBQWMsQ0FBQyxFQUN0QnV4RCxFQUFjL3RELEVBQU04dEQsRUFBTyxFQW9PM0JhLFVBdlNnQnRqRCxJQUNoQm9pRCxFQUFVcm5ELElBQUlpRixHQUNQLElBQU1vaUQsRUFBVTVvRCxPQUFPd0csSUFzUzlCdWpELEdBMUxTLENBQUN0aEIsRUFBTXdnQixLQUNoQixJQUFJTyxFQUFjTCxFQUFZRixPQUFRcHNELEVBQVc0ckMsR0FFakQsT0FBS25pQixHQVlMa2pDLEVBSUFsakMsRUFBTWtoQyxhQUFhLGVBQWdCZ0MsRUFBYS9nQixFQUFNd2dCLEdBS3BEM2lDLEVBQU1raEMsYUFBYSxnQkFBa0I4QixFQUFnQkwsR0FBU08sRUFBYS9nQixFQUFNd2dCLElBcEIxRU8sQ0FxQlIsRUFrS0RELEtBQ0FoeEMsR0EvSFMsQ0FBQzZ3QyxFQUFRQyxFQUFRdnpDLEVBQVFtekMsS0FDbEMsSUFBSU8sRUFBY0wsRUFBWUYsT0FBUXBzRCxFQUFXdXNELEVBQVFDLEVBQVF2ekMsR0FFakUsT0FBS3dRLEdBY0xrakMsRUFJQWxqQyxFQUFNa2hDLGFBQWEsZ0JBQWlCZ0MsRUFBYUosRUFBUUMsRUFBUXZ6QyxFQUFRbXpDLEdBS3ZFM2lDLEVBQU1raEMsYUFBYSxpQkFBbUI4QixFQUFnQkwsR0FBU08sRUFBYUosRUFBUUMsRUFBUXZ6QyxFQUFRbXpDLElBdEI3Rk8sQ0F1QlIsRUFxR0RRLElBaEdVLENBQUNaLEVBQVFDLEVBQVF2ekMsRUFBUXFoQixFQUFTOHhCLEtBQzVDLElBQUlPLEVBQWNMLEVBQVlGLEVBQVE5eEIsRUFBU2l5QixFQUFRQyxFQUFRdnpDLEdBRS9ELE9BQUt3USxHQWVMa2pDLEVBSUFsakMsRUFBTWtoQyxhQUFhLDZCQUE4QmdDLEVBQWFKLEVBQVFDLEVBQVF2ekMsRUFBUXFoQixFQUFTOHhCLEdBSzdGM2lDLEVBQU1raEMsYUFBYSw4QkFBZ0M4QixFQUFnQkwsR0FBU08sRUFBYUosRUFBUUMsRUFBUXZ6QyxFQUFRcWhCLEVBQVM4eEIsSUF2Qm5ITyxDQXdCUixFQXFFRFMsTUFoRVksSUFDTCxRQUFVVixFQUFHLE1BQU8sa0JBZ0UzQlcsZUEzRHFCLENBQUNkLEVBQVFqeUIsRUFBUzh4QixLQUN2QyxJQUFJa0IsRUFBY0MsRUFFbEIsTUFBTXBwRCxFQUFNbTJCLEVBQVVBLEVBQVUsSUFBV2l5QixFQUFTQSxFQUNwRCxJQUFJeGtELElBQTZDLFFBQWhDdWxELEVBQWV4QixFQUFPeHRELFlBQW1DLElBQWpCZ3ZELEdBQXlILFFBQTdGQyxFQUFnQkQsRUFBYWxCLFFBQXVDQSxFQUFTLGtCQUEwQyxJQUFsQm1CLElBQTRCQSxFQUFjcHBELElBdUJwTyxPQXJCSXNsQixJQVNGMWhCLEVBSUEwaEIsRUFBTWtoQyxhQUFhLHVCQUF3QjVpRCxFQUFRd2tELEVBQVFqeUIsRUFBUzh4QixHQUNwRXJrRCxFQUlBMGhCLEVBQU1raEMsYUFBYSx3QkFBMEI4QixFQUFnQkwsR0FBU3JrRCxFQUFRd2tELEVBQVFqeUIsRUFBUzh4QixJQUcxRnJrRCxDQUFNLEVBaUNkLDZZQ25lSCxNQUFNeWxELEdBQU8sSUFBQTdCLGlCQUFXM3JELE9BQVdBLEVBQVcsRUFBQXVyRCxjQUs5QyxJQXFCYXNCLEVBQWdCVyxFQUFLWCxjQUFjanBELEtBQUs0cEQsR0FXeENuQixFQUFnQm1CLEVBQUtuQixjQUFjem9ELEtBQUs0cEQsR0FXeENSLEVBQWtCUSxFQUFLUixnQkFBZ0JwcEQsS0FBSzRwRCxHQVE1Q1AsRUFBWU8sRUFBS1AsVUFBVXJwRCxLQUFLNHBELEdBWWhDTixFQUFLTSxFQUFLTixHQUFHdHBELEtBQUs0cEQsR0FhbEJkLEVBQUtjLEVBQUtkLEdBQUc5b0QsS0FBSzRwRCxHQWdCbEI5eEMsRUFBSzh4QyxFQUFLOXhDLEdBQUc5WCxLQUFLNHBELEdBaUJsQkwsRUFBTUssRUFBS0wsSUFBSXZwRCxLQUFLNHBELEdBWXBCSixFQUFRSSxFQUFLSixNQUFNeHBELEtBQUs0cEQsR0FVeEJILEVBQWlCRyxFQUFLSCxlQUFlenBELEtBQUs0cEQsNHpCQ3BJdkQsTUFBTUMsRUFBZSxJQUFRbnRELFFBQVF1UyxPQWM5QixTQUFTNjZDLEVBQVFDLEdBQ3RCLElBQ0UsSUFBSyxJQUFJckMsRUFBTy9tQyxVQUFVaHFCLE9BQVFMLEVBQU8sSUFBSU0sTUFBTTh3RCxFQUFPLEVBQUlBLEVBQU8sRUFBSSxHQUFJdDlDLEVBQU8sRUFBR0EsRUFBT3M5QyxFQUFNdDlDLElBQ2xHOVQsRUFBSzhULEVBQU8sR0FBS3VXLFVBQVV2VyxHQUc3QixPQUFPLElBQUEwL0MsUUFBa0JDLEtBQVd6ekQsRUFPdEMsQ0FORSxNQUFPMlksR0FLUCxPQUpJQSxhQUFpQndQLE9BQ25Cb3JDLEVBQWEsc0JBQXdCNTZDLEVBQU1rbEIsWUFHdEM0MUIsQ0FDVCxDQUNGLDRTQzFCQSxTQUNJLzdDLEtBQU0sTUFDTndrQixXQUFZLENBQ1J3M0IsS0FBQUEsRUFBQUEsU0FFSi9vQyxNQUFPLENBQ0hncEMsT0FBTSxZQUNGQyxFQUFBQSxFQUFBQSxVQUNKLDBQQ2hCSixTQUNJbDhDLEtBQU0sa1NDU2QsU0FDRUEsS0FBTSxPQUNOd2tCLFdBQVksQ0FBQyxFQUNiOTNCLEtBQUksV0FDRixNQUFPLENBQUMsQ0FDViw0T0NkRixTQUNFc1QsS0FBTSxpUENEUixTQUNFQSxLQUFNLHdoQ0NlUixNQUFlLENBQ2JBLEtBQU0sV0FFTndrQixXQUFZLENBQ1YyM0IsT0FBQUEsRUFBQUEsU0FHRnp2RCxLQUFJLFdBQ0YsTUFBTyxDQUNMMHZELFFBQVMsRUFFYixFQUVBem9ELFNBQVUsRUFBRixJQUFPMG9ELEVBQUFBLEVBQUFBLFlBQVcsQ0FBQyxXQUFZLGNBRXZDMzRCLFFBQVMsRUFBRixNQUNGNDRCLEVBQUFBLEVBQUFBLFlBQVcsQ0FBQyxtQkFBaUIsSUFDaENDLFNBQVEsU0FBQzF2RCxHQUNQQSxFQUFFMmhELGlCQUVGLElBQU1nTyxFQUFVLENBQ2RKLFFBQVNsZ0MsU0FBU3Z3QixLQUFLeXdELFVBR3pCendELEtBQUs4d0QsY0FBY0QsRUFDckIsSUFHRnZwQyxNQUFPLENBQ0xsbkIsU0FBVSxXQUNSMkMsUUFBUWd1RCxJQUFJLHdCQUF5Qi93RCxLQUFLSSxTQUM1Qyxza0JMdERLQyxHQUFHLGlCQUNDa2xDLE1BQU0sbUJBQ1B5ckIsRUFBQUEsRUFBQUEsb0JBQXFHLE1BQWpHQyxLQUFLLG9CQUFvQixZQUFVLGlNQUYvQ0MsRUFBQUEsRUFBQUEsb0JBT00sTUFQTkMsRUFPTSxFQU5GSCxFQUFBQSxFQUFBQSxvQkFLTSxNQUxOSSxFQUtNLENBSkZDLEdBQ0FMLEVBQUFBLEVBQUFBLG9CQUE2QyxnQ0FBdEMxMEIsRUFBQUEsR0FBRyxhQUFjLGVBQWYsSUFDVHlSLEVBQUFBLEVBQUFBLGFBQVF1akIsSUFDUnZqQixFQUFBQSxFQUFBQSxhQUFld2pCLG9jQ0x2QkwsRUFBQUEsRUFBQUEsb0JBRVMsZ0JBRExNLEVBQUFBLEVBQUFBLFlBQWFsMUIsRUFBQUEsT0FBQUEsVUFBQUEsQ0FBQUEsT0FBQUEsR0FBQUEsSUFBQ20xQixFQUFBQSxFQUFBQSxvQkFBQUEsMFpDRGZweEQsR0FBRyxzQkFDRGtsQyxNQUFNLGVBR05BLE1BQU0sZUFHTkEsTUFBTSx5R0FQYjJyQixFQUFBQSxFQUFBQSxvQkFVTSxNQVZOQyxFQVVNLEVBVEpILEVBQUFBLEVBQUFBLG9CQUVNLE1BRk5JLEVBRU0sRUFESnJqQixFQUFBQSxFQUFBQSxhQUEwQzJqQixFQUFBQSxDQUE3Qmo2QixHQUFHLEtBQUcsd0JBQUMsaUJBQVEsdUJBQVIseUJBRXRCdTVCLEVBQUFBLEVBQUFBLG9CQUVNLE1BRk5LLEVBRU0sRUFESnRqQixFQUFBQSxFQUFBQSxhQUEwQzJqQixFQUFBQSxDQUE3Qmo2QixHQUFHLFNBQU8sd0JBQUMsaUJBQUksdUJBQUoscUJBRTFCdTVCLEVBQUFBLEVBQUFBLG9CQUVNLE1BRk5XLEVBRU0sRUFESjVqQixFQUFBQSxFQUFBQSxhQUE0QzJqQixFQUFBQSxDQUEvQmo2QixHQUFHLFVBQVEsd0JBQUMsaUJBQUssdUJBQUwsNllDUnhCOE4sTUFBTSxrQkFDVHlyQixFQUFBQSxFQUFBQSxvQkFBbUIsVUFBZixjQUFVLElBQ2RBLEVBQUFBLEVBQUFBLG9CQUEwQixTQUF2Qix1QkFBbUIscURBRnhCRSxFQUFBQSxFQUFBQSxvQkFHTSxNQUhOQyxFQUdNLHdYQ0hENXJCLE1BQU0saUJBQ1R5ckIsRUFBQUEsRUFBQUEsb0JBQWtCLFVBQWQsYUFBUyxJQUNiQSxFQUFBQSxFQUFBQSxvQkFBeUIsU0FBdEIsc0JBQWtCLHFEQUZ2QkUsRUFBQUEsRUFBQUEsb0JBR00sTUFITkMsRUFHTSw0WENDRDVyQixNQUFNLG9CQUNUeXJCLEVBQUFBLEVBQUFBLG9CQUFpQixVQUFiLFlBQVEsTUFDWkEsRUFBQUEsRUFBQUEsb0JBRUksU0FGRCx5RUFFSCxNQUVFQSxFQUFBQSxFQUFBQSxvQkFBNkMsU0FBdENZLElBQUksV0FBVSxvQkFBZ0IsTUFDckNaLEVBQUFBLEVBQUFBLG9CQUFNLHNCQUVOQSxFQUFBQSxFQUFBQSxvQkFBTSxzQkFDTkEsRUFBQUEsRUFBQUEsb0JBQU0sb0VBVlZFLEVBQUFBLEVBQUFBLG9CQWNNLE1BZE5DLEVBY00sQ0FiSkMsRUFDQUMsR0FHQUwsRUFBQUEsRUFBQUEsb0JBUU8sUUFSQUosU0FBTSw4QkFBRWo3QixFQUFBQSxVQUFBQSxFQUFBQSxTQUFBQSxNQUFBQSxFQUFBQSxVQUFRLEdBQUU1ekIsT0FBTyxTQUM5QjR2RCxFQUNBRSxHQUFNLHFCQUNOYixFQUFBQSxFQUFBQSxvQkFBeUMsOERBQXpCOTdCLEVBQUFBLFFBQU8sSUFBRXZ1QixLQUFLLG1DQUFkdXVCLEVBQUFBLFdBQ2hCNDhCLEVBQ0FDLEdBRUFoa0IsRUFBQUEsRUFBQUEsYUFBbUNpa0IsRUFBQUEsT0FBQUEsQ0FBM0JyckQsS0FBSyxVQUFRLHdCQUFDLGlCQUFJLHVCQUFKLHlJQ1o1Qi9ILE9BQU8rd0QsR0FBS0EsRUFBQUEsR0FDWi93RCxPQUFPdXhELFFBQVVBLEVBQUFBLHFGQ05qQixTQUVFcDRCLFFBQVMsQ0FDUDQzQixHQUFFLDBIQUFDdGhCLEVBQU13Z0IsR0FDUCxPQUFPYyxHQUFHdGhCLEVBQU13Z0IsRUFDbEIsSUFFQXNCLFFBQU8sd0hBQUM4QixHQUFjLDJCQUFOdDFELEVBQUksaUNBQUpBLEVBQUksa0JBQ2xCLE9BQU93ekQsUUFBTyxjQUFDOEIsR0FBRyxPQUFLdDFELEdBQ3pCLHNPQ0dFdTFELEVBQVMsQ0FDYixDQUNFenBDLEtBQU0sSUFDTnBVLEtBQU0sV0FDTjNCLFVBQVd5L0MsRUFBQUEsUUFDWEMsTUFBTyxhQUVULENBQ0UzcEMsS0FBTSxRQUNOcFUsS0FBTSxPQUNOM0IsVUFBVzIvQyxFQUFBQSxTQUViLENBQ0U1cEMsS0FBTSxTQUNOcFUsS0FBTSxRQUNOM0IsVUFBVzQvQyxFQUFBQSxVQVNmLFNBTGVDLEVBQUFBLEVBQUFBLGNBQWEsQ0FDeEJDLFNBQVNDLEVBQUFBLEVBQUFBLGtCQUFpQkMsVUFBVUMsS0FBS0MsVUFDekNWLE9BQUFBLGdMQ2pCSixTQVJjVyxFQUFBQSxFQUFBQSxhQUFZLENBQ3hCdlksUUFBUyxDQUNQbDZDLFNBQUFBLEVBQUFBLFNBRUYweUQsUUFOWW54QyxFQU9ab3hDLFFBQWlCLEVBQUNDLEVBQUFBLEVBQUFBLGdVQ1pwQixpOE1BK0NBLFNBQ0VqcUMsTUEzQ1ksV0FBSCxNQUFVLENBQ25CM29CLFNBQVUsS0FDVjZ5RCxVQUFVLEVBQ1gsRUF5Q0NDLFFBdENjLENBQ1o5eUQsU0FBVSxTQUFBMm9CLEdBQUssT0FBSUEsRUFBTTNvQixRQUFRLEVBQ2pDNnlELFNBQVUsU0FBQWxxQyxHQUFLLE9BQUlBLEVBQU1rcUMsUUFBUSxHQXFDbkN0RyxRQWpDYyxDQUNSbUUsY0FBYSxXQUFhMXdELEdBQVUsT0FsQjVDLEVBa0I0QywrRkFBcEIreUQsRUFBTSxFQUFOQSxRQUNiLHFCQUFxQixHQVk1QkEsRUFBTyxnQkFBaUIveUQsR0FDeEIreUQsRUFBTyxxQkFBcUIsR0FBTywwQ0FoQ3ZDLHNMQWlDRSxHQWtCQXBhLFVBZGdCLENBQ2hCK1gsY0FBZSxTQUFDL25DLEVBQU8zb0IsR0FDckIyb0IsRUFBTTNvQixTQUFXQSxDQUNuQixFQUVBZ3pELGtCQUFtQixTQUFDcnFDLEVBQU9rcUMsR0FDekJscUMsRUFBTWtxQyxTQUFXQSxDQUNuQixxR0M3Q0ssSUFBTUksRUFBYSxhQVFuQixTQUFTOUMsSUFDWixJQUFNdjdCLEVBQUlzK0IsT0FFSkMsRUFBV3YrQixFQUFFLGtCQUFvQnErQixHQUNqQ0csRUFBYTUwRCxPQUFPd2EsU0FBU3E2QyxLQUM3QkMsRUFBY0YsRUFBV3gxRCxPQUFPdzFELEVBQVdyMUQsUUFBUSxjQUV6RDYyQixFQUFFLG1CQUFvQnUrQixHQUFVSSxZQUFZLFdBRTVDSixFQUFTOXhELEdBQUcsUUFBUyxLQUFLLFdBQ3RCLElBQU0wUCxFQUFPNmpCLEVBQUVoMUIsTUFFZmcxQixFQUFFLG1CQUFvQnUrQixHQUFVSSxZQUFZLFdBRXhDeGlELEVBQUt5aUQsU0FBUyxrQkFDZDUrQixFQUFFLG1CQUFvQnUrQixHQUFVTSxTQUFTLFdBRXpDMWlELEVBQUsyaUQsUUFBUSxNQUFNRCxTQUFTLFVBRXBDLElBRUE3K0IsRUFBRSxrQkFBbUJ1K0IsR0FBVVEsTUFBSyxTQUFVOTFELEVBQU9xakIsR0FDakMwVCxFQUFFMVQsR0FBSTB5QyxLQUFLLFFBQVFDLFVBQVVqL0IsRUFBRTFULEdBQUkweUMsS0FBSyxRQUFRNzFELFFBQVEsY0FBZ0IsS0FFdEV1MUQsR0FDZDErQixFQUFFMVQsR0FBSWhlLFNBQVN1d0QsU0FBUyxVQUVoQyxHQUNKLENBRUF0RCwwQ0NnSUEyRCxFQUFPQyxRQS9IUCxTQUFpQjF3RCxFQUFJdUMsR0FDcEIsSUFHSW91RCxFQUdBQyxFQU5BeG9ELEVBQU8sRUFVWCxTQUFTeW9ELElBQ1IsSUFFQzMzRCxFQUFNRixFQUZIc25CLEVBQU9xd0MsRUFDVnZxQixFQUFNN2lCLFVBQVVocUIsT0FHakJ1M0QsRUFBYSxLQUFReHdDLEdBQU8sQ0FRM0IsR0FBS0EsRUFBS3BuQixLQUFLSyxTQUFXZ3FCLFVBQVVocUIsT0FBcEMsQ0FNQSxJQUFNUCxFQUFJLEVBQUdBLEVBQUlvdEMsRUFBS3B0QyxJQUNyQixHQUFLc25CLEVBQUtwbkIsS0FBTUYsS0FBUXVxQixVQUFXdnFCLEdBQU0sQ0FDeENzbkIsRUFBT0EsRUFBS2xYLEtBQ1osU0FBUzBuRCxDQUNWLENBMkJELE9BckJLeHdDLElBQVNxd0MsSUFHUnJ3QyxJQUFTc3dDLElBQ2JBLEVBQU90d0MsRUFBS3JHLE1BS29CcUcsRUFBVSxLQUFFbFgsS0FBT2tYLEVBQUtsWCxLQUNwRGtYLEVBQUtsWCxPQUNUa1gsRUFBS2xYLEtBQUs2USxLQUFPcUcsRUFBS3JHLE1BR3ZCcUcsRUFBS2xYLEtBQU91bkQsRUFDWnJ3QyxFQUFLckcsS0FBTyxLQUNtQixFQUFTQSxLQUFPcUcsRUFDL0Nxd0MsRUFBT3J3QyxHQUlEQSxFQUFLcFQsR0FsQ1osQ0FGQ29ULEVBQU9BLEVBQUtsWCxJQXFDZCxDQU1BLElBREFsUSxFQUFPLElBQUlNLE1BQU80c0MsR0FDWnB0QyxFQUFJLEVBQUdBLEVBQUlvdEMsRUFBS3B0QyxJQUNyQkUsRUFBTUYsR0FBTXVxQixVQUFXdnFCLEdBZ0N4QixPQTdCQXNuQixFQUFPLENBQ05wbkIsS0FBTUEsRUFHTmdVLElBQUtsTixFQUFHdEcsTUFBTyxLQUFNUixJQU9qQnkzRCxHQUNKQSxFQUFLMTJDLEtBQU9xRyxFQUNaQSxFQUFLbFgsS0FBT3VuRCxHQUdaQyxFQUFPdHdDLEVBSUhsWSxJQUFzQyxFQUFZMm9ELFNBQ3RESCxFQUFzQyxFQUFTMzJDLE1BQ1A3USxLQUFPLEtBRS9DaEIsSUFHRHVvRCxFQUFPcndDLEVBRUFBLEVBQUtwVCxHQUNiLENBc0JBLE9BbkhBM0ssRUFBVUEsR0FBVyxDQUFDLEVBK0Z0QnN1RCxFQUFTcm9ELE1BQVEsV0FDaEJtb0QsRUFBTyxLQUNQQyxFQUFPLEtBQ1B4b0QsRUFBTyxDQUNSLEVBZ0JPeW9ELENBQ1IseWlCQ3BLQSxPQUVDLFdBQ0csYUFFQSxJQUFJRyxFQUFLLENBQ0xDLFdBQVksT0FDWkMsU0FBVSxPQUNWQyxTQUFVLE9BQ1ZDLGNBQWUsT0FDZm41QyxPQUFRLFVBQ1JvNUMsWUFBYSxlQUNiQyxLQUFNLE1BQ05DLFNBQVUsT0FDVjNtQixLQUFNLFlBQ040bUIsT0FBUSxXQUNSbnZDLFlBQWEsMkZBQ2JsZixJQUFLLHNCQUNMc3VELFdBQVksd0JBQ1pDLGFBQWMsYUFDZEMsS0FBTSxTQUdWLFNBQVNqRixFQUFRdnBELEdBRWIsT0FBT3l1RCxFQUFlQyxFQUFjMXVELEdBQU1vZ0IsVUFDOUMsQ0FFQSxTQUFTdXVDLEVBQVN0RCxFQUFLdUQsR0FDbkIsT0FBT3JGLEVBQVFoekQsTUFBTSxLQUFNLENBQUM4MEQsR0FBSzd6RCxPQUFPbzNELEdBQVEsSUFDcEQsQ0FFQSxTQUFTSCxFQUFlSSxFQUFZRCxHQUNoQyxJQUFpRGo4QyxFQUFrQjljLEVBQUd1aUMsRUFBRzAyQixFQUFJck4sRUFBS3NOLEVBQWVDLEVBQVlDLEVBQWFULEVBQXRIVSxFQUFTLEVBQUdDLEVBQWNOLEVBQVd6NEQsT0FBYWc1RCxFQUFTLEdBQy9ELElBQUt2NUQsRUFBSSxFQUFHQSxFQUFJczVELEVBQWF0NUQsSUFDekIsR0FBNkIsaUJBQWxCZzVELEVBQVdoNUQsR0FDbEJ1NUQsR0FBVVAsRUFBV2g1RCxRQUVwQixHQUE2QixpQkFBbEJnNUQsRUFBV2g1RCxHQUFpQixDQUV4QyxJQURBaTVELEVBQUtELEVBQVdoNUQsSUFDVHVGLEtBRUgsSUFEQXVYLEVBQU1pOEMsRUFBS00sR0FDTjkyQixFQUFJLEVBQUdBLEVBQUkwMkIsRUFBRzF6RCxLQUFLaEYsT0FBUWdpQyxJQUFLLENBQ2pDLEdBQVd2OEIsTUFBUDhXLEVBQ0EsTUFBTSxJQUFJdUwsTUFBTXFyQyxFQUFRLGdFQUFpRXVGLEVBQUcxekQsS0FBS2c5QixHQUFJMDJCLEVBQUcxekQsS0FBS2c5QixFQUFFLEtBRW5IemxCLEVBQU1BLEVBQUltOEMsRUFBRzF6RCxLQUFLZzlCLEdBQ3RCLE1BR0F6bEIsRUFES204QyxFQUFHTyxTQUNGVCxFQUFLRSxFQUFHTyxVQUdSVCxFQUFLTSxLQU9mLEdBSklyQixFQUFHRyxTQUFTbmtDLEtBQUtpbEMsRUFBRy91RCxPQUFTOHRELEVBQUdJLGNBQWNwa0MsS0FBS2lsQyxFQUFHL3VELE9BQVM0UyxhQUFlZ1EsV0FDOUVoUSxFQUFNQSxLQUdOazdDLEVBQUdLLFlBQVlya0MsS0FBS2lsQyxFQUFHL3VELE9BQXlCLGlCQUFSNFMsR0FBb0J5akMsTUFBTXpqQyxHQUNsRSxNQUFNLElBQUkyOEMsVUFBVS9GLEVBQVEsMENBQTJDNTJDLElBTzNFLE9BSklrN0MsRUFBRy80QyxPQUFPK1UsS0FBS2lsQyxFQUFHL3VELFFBQ2xCa3ZELEVBQWN0OEMsR0FBTyxHQUdqQm04QyxFQUFHL3VELE1BQ1AsSUFBSyxJQUNENFMsRUFBTWdYLFNBQVNoWCxFQUFLLElBQUlpaEIsU0FBUyxHQUNqQyxNQUNKLElBQUssSUFDRGpoQixFQUFNek8sT0FBT3FyRCxhQUFhNWxDLFNBQVNoWCxFQUFLLEtBQ3hDLE1BQ0osSUFBSyxJQUNMLElBQUssSUFDREEsRUFBTWdYLFNBQVNoWCxFQUFLLElBQ3BCLE1BQ0osSUFBSyxJQUNEQSxFQUFNdlksS0FBS08sVUFBVWdZLEVBQUssS0FBTW04QyxFQUFHVSxNQUFRN2xDLFNBQVNtbEMsRUFBR1UsT0FBUyxHQUNoRSxNQUNKLElBQUssSUFDRDc4QyxFQUFNbThDLEVBQUdXLFVBQVk3SyxXQUFXanlDLEdBQUsrOEMsY0FBY1osRUFBR1csV0FBYTdLLFdBQVdqeUMsR0FBSys4QyxnQkFDbkYsTUFDSixJQUFLLElBQ0QvOEMsRUFBTW04QyxFQUFHVyxVQUFZN0ssV0FBV2p5QyxHQUFLZzlDLFFBQVFiLEVBQUdXLFdBQWE3SyxXQUFXanlDLEdBQ3hFLE1BQ0osSUFBSyxJQUNEQSxFQUFNbThDLEVBQUdXLFVBQVl2ckQsT0FBT1AsT0FBT2dQLEVBQUlpOUMsWUFBWWQsRUFBR1csYUFBZTdLLFdBQVdqeUMsR0FDaEYsTUFDSixJQUFLLElBQ0RBLEdBQU9nWCxTQUFTaFgsRUFBSyxNQUFRLEdBQUdpaEIsU0FBUyxHQUN6QyxNQUNKLElBQUssSUFDRGpoQixFQUFNek8sT0FBT3lPLEdBQ2JBLEVBQU9tOEMsRUFBR1csVUFBWTk4QyxFQUFJMDZDLFVBQVUsRUFBR3lCLEVBQUdXLFdBQWE5OEMsRUFDdkQsTUFDSixJQUFLLElBQ0RBLEVBQU16TyxTQUFTeU8sR0FDZkEsRUFBT204QyxFQUFHVyxVQUFZOThDLEVBQUkwNkMsVUFBVSxFQUFHeUIsRUFBR1csV0FBYTk4QyxFQUN2RCxNQUNKLElBQUssSUFDREEsRUFBTTdZLE9BQU93ekMsVUFBVTFaLFNBQVM3dUIsS0FBSzROLEdBQUtyRixNQUFNLEdBQUksR0FBRzZILGNBQ3ZEeEMsRUFBT204QyxFQUFHVyxVQUFZOThDLEVBQUkwNkMsVUFBVSxFQUFHeUIsRUFBR1csV0FBYTk4QyxFQUN2RCxNQUNKLElBQUssSUFDREEsRUFBTWdYLFNBQVNoWCxFQUFLLE1BQVEsRUFDNUIsTUFDSixJQUFLLElBQ0RBLEVBQU1BLEVBQUlrOUMsVUFDVmw5QyxFQUFPbThDLEVBQUdXLFVBQVk5OEMsRUFBSTA2QyxVQUFVLEVBQUd5QixFQUFHVyxXQUFhOThDLEVBQ3ZELE1BQ0osSUFBSyxJQUNEQSxHQUFPZ1gsU0FBU2hYLEVBQUssTUFBUSxHQUFHaWhCLFNBQVMsSUFDekMsTUFDSixJQUFLLElBQ0RqaEIsR0FBT2dYLFNBQVNoWCxFQUFLLE1BQVEsR0FBR2loQixTQUFTLElBQUl3WSxjQUdqRHloQixFQUFHTSxLQUFLdGtDLEtBQUtpbEMsRUFBRy91RCxNQUNoQnF2RCxHQUFVejhDLElBR05rN0MsRUFBRy80QyxPQUFPK1UsS0FBS2lsQyxFQUFHL3VELE9BQVdrdkQsSUFBZUgsRUFBR04sS0FLL0NBLEVBQU8sSUFKUEEsRUFBT1MsRUFBYyxJQUFNLElBQzNCdDhDLEVBQU1BLEVBQUlpaEIsV0FBV2xkLFFBQVFtM0MsRUFBR1csS0FBTSxLQUsxQ08sRUFBZ0JELEVBQUdnQixTQUEyQixNQUFoQmhCLEVBQUdnQixTQUFtQixJQUFNaEIsRUFBR2dCLFNBQVNwTCxPQUFPLEdBQUssSUFDbEZzSyxFQUFhRixFQUFHVSxPQUFTaEIsRUFBTzc3QyxHQUFLdmMsT0FDckNxckQsRUFBTXFOLEVBQUdVLE9BQVNSLEVBQWEsRUFBSUQsRUFBY3pOLE9BQU8wTixHQUFvQixHQUM1RUksR0FBVU4sRUFBR2lCLE1BQVF2QixFQUFPNzdDLEVBQU04dUMsRUFBeUIsTUFBbEJzTixFQUF3QlAsRUFBTy9NLEVBQU05dUMsRUFBTTh1QyxFQUFNK00sRUFBTzc3QyxFQUV6RyxDQUVKLE9BQU95OEMsQ0FDWCxDQUVBLElBQUlZLEVBQWdCbDJELE9BQU95akIsT0FBTyxNQUVsQyxTQUFTbXhDLEVBQWNyRCxHQUNuQixHQUFJMkUsRUFBYzNFLEdBQ2QsT0FBTzJFLEVBQWMzRSxHQUl6QixJQURBLElBQWdCcDBELEVBQVpnNUQsRUFBTzVFLEVBQVl3RCxFQUFhLEdBQUlxQixFQUFZLEVBQzdDRCxHQUFNLENBQ1QsR0FBcUMsUUFBaENoNUQsRUFBUTQyRCxFQUFHcG1CLEtBQUt3YixLQUFLZ04sSUFDdEJwQixFQUFXbjRELEtBQUtPLEVBQU0sU0FFckIsR0FBdUMsUUFBbENBLEVBQVE0MkQsRUFBR1EsT0FBT3BMLEtBQUtnTixJQUM3QnBCLEVBQVduNEQsS0FBSyxTQUVmLElBQTRDLFFBQXZDTyxFQUFRNDJELEVBQUczdUMsWUFBWStqQyxLQUFLZ04sSUE2Q2xDLE1BQU0sSUFBSUUsWUFBWSxvQ0E1Q3RCLEdBQUlsNUQsRUFBTSxHQUFJLENBQ1ZpNUQsR0FBYSxFQUNiLElBQUlFLEVBQWEsR0FBSUMsRUFBb0JwNUQsRUFBTSxHQUFJcTVELEVBQWMsR0FDakUsR0FBdUQsUUFBbERBLEVBQWN6QyxFQUFHN3RELElBQUlpakQsS0FBS29OLElBZTNCLE1BQU0sSUFBSUYsWUFBWSxnREFidEIsSUFEQUMsRUFBVzE1RCxLQUFLNDVELEVBQVksSUFDd0QsTUFBNUVELEVBQW9CQSxFQUFrQmhELFVBQVVpRCxFQUFZLEdBQUdsNkQsVUFDbkUsR0FBOEQsUUFBekRrNkQsRUFBY3pDLEVBQUdTLFdBQVdyTCxLQUFLb04sSUFDbENELEVBQVcxNUQsS0FBSzQ1RCxFQUFZLFFBRTNCLElBQWdFLFFBQTNEQSxFQUFjekMsRUFBR1UsYUFBYXRMLEtBQUtvTixJQUl6QyxNQUFNLElBQUlGLFlBQVksZ0RBSHRCQyxFQUFXMTVELEtBQUs0NUQsRUFBWSxHQUloQyxDQU1ScjVELEVBQU0sR0FBS201RCxDQUNmLE1BRUlGLEdBQWEsRUFFakIsR0FBa0IsSUFBZEEsRUFDQSxNQUFNLElBQUloeUMsTUFBTSw2RUFHcEIyd0MsRUFBV240RCxLQUNQLENBQ0l3b0IsWUFBYWpvQixFQUFNLEdBQ25CbzRELFNBQWFwNEQsRUFBTSxHQUNuQm1FLEtBQWFuRSxFQUFNLEdBQ25CdTNELEtBQWF2M0QsRUFBTSxHQUNuQjY0RCxTQUFhNzRELEVBQU0sR0FDbkI4NEQsTUFBYTk0RCxFQUFNLEdBQ25CdTRELE1BQWF2NEQsRUFBTSxHQUNuQnc0RCxVQUFheDRELEVBQU0sR0FDbkI4SSxLQUFhOUksRUFBTSxJQU0vQixDQUNBZzVELEVBQU9BLEVBQUs1QyxVQUFVcDJELEVBQU0sR0FBR2IsT0FDbkMsQ0FDQSxPQUFPNDVELEVBQWMzRSxHQUFPd0QsQ0FDaEMsQ0FPSXRCLEVBQUEsUUFBcUJoRSxFQUNyQmdFLEVBQUEsU0FBc0JvQixFQUVKLG9CQUFYMzJELFNBQ1BBLE9BQWdCLFFBQUl1eEQsRUFDcEJ2eEQsT0FBaUIsU0FBSTIyRCxPQVFoQixLQUxELGFBQ0ksTUFBTyxDQUNILFFBQVdwRixFQUNYLFNBQVlvRixFQUVuQixnQ0FJYixDQXBPQyxrSkNnREc0QixFQUFrQixDQUNyQkMsaUJBQWtCLElBQ2xCQyxhQUFjLE1Bc0NBLFNBQVNDLEVBQVF2MkQsRUFBTWlGLEdBQ3JDLElBQUlZLEVBMEJKLElBQU1BLEtBbEJONUcsS0FBS2UsS0FBT0EsRUFRWmYsS0FBS3pDLFlBQWMsQ0FBQyxFQVFwQnlDLEtBQUtnRyxRQUFVLENBQUMsRUFFSG14RCxFQUNabjNELEtBQUtnRyxRQUFTWSxRQUFvQm5FLElBQVp1RCxHQUF5QlksS0FBT1osRUFDbkRBLEVBQVNZLEdBQ1R1d0QsRUFBaUJ2d0QsRUFFdEIsQ0FVQTB3RCxFQUFPcGpCLFVBQVVxakIsY0FBZ0IsU0FBVTFJLEVBQVFyeEQsR0FDbEQsSUFDQ3FWLEVBQVFvOEMsRUFBUXVJLEVBRGJELEVBQWdCdjNELEtBQUt6QyxZQUFhc3hELEdBK0J0QyxPQTVCTzBJLElBWWEsbUJBVG5CQyxHQUZBM2tELEVBQVM3UyxLQUFLZSxLQUFNOHRELEdBQVUsS0FHckIsaUJBQ1JoOEMsRUFBUSxpQkFJUkEsRUFBT3E3QyxnQkFJUGUsRUFoRkgsU0FBOEJ1SSxHQUM3QixJQUFJQyxFQUFPaDdELEVBQUdpN0QsRUFJZCxJQUZBRCxFQUFRRCxFQUFHN3VDLE1BQU8sS0FFWmxzQixFQUFJLEVBQUdBLEVBQUlnN0QsRUFBTXo2RCxPQUFRUCxJQUU5QixHQUFtQyxLQURuQ2k3RCxFQUFPRCxFQUFPaDdELEdBQUl5QixRQUNSQyxRQUFTLFdBQ2xCLE9BQU91NUQsRUFBSzE1RCxPQUFRLEVBR3ZCLENBcUVZMjVELENBQ1I5a0QsRUFBUSxpQkFDUkEsRUFBUSxpQkFJUkEsRUFBT3E3QyxjQUdSc0osR0FBSyxhQUFhdkksSUFHbkJzSSxFQUFnQnYzRCxLQUFLekMsWUFBYXN4RCxHQUFXMkksR0FHdkNELEVBQWUvNUQsRUFDdkIsRUFjQTg1RCxFQUFPcGpCLFVBQVU2YSxZQUFjLFNBQVVGLEVBQVE5eEIsRUFBUzY2QixFQUFVM0ksRUFBUXp4RCxHQUMzRSxJQUFJUyxFQUFPMkksRUFBSzhNLEVBcUJoQixPQWpCQ3pWLE9BRlV3RSxJQUFOakYsRUFFSSxFQUdBd0MsS0FBS3UzRCxjQUFlMUksRUFBUXJ4RCxHQUdyQ29KLEVBQU1neEQsRUFHRDc2QixJQUNKbjJCLEVBQU1tMkIsRUFBVS84QixLQUFLZ0csUUFBUW94RCxpQkFBbUJRLElBR2pEbGtELEVBQVExVCxLQUFLZSxLQUFNOHRELEdBQVVqb0QsS0FJZjhNLEVBQU96VixHQUNieVYsRUFBT3pWLElBR1YrQixLQUFLZ0csUUFBUXF4RCxjQUNqQnIzRCxLQUFLZ0csUUFBUXF4RCxhQUFjTyxFQUFVL0ksR0FLckIsSUFBVjV3RCxFQUFjMjVELEVBQVczSSxFQUNqQyx5RUNuTkF2dUQsT0FBT2kyQixlQUFldzlCLEVBQVMsYUFBYyxDQUFFcjNELE9BQU8sSUFHdERxM0QsRUFBQSxRQUFrQixDQUFDMEQsRUFBSy9qRCxLQUNwQixNQUFNMVUsRUFBU3k0RCxFQUFJditDLFdBQWF1K0MsRUFDaEMsSUFBSyxNQUFPanhELEVBQUsrSixLQUFRbUQsRUFDckIxVSxFQUFPd0gsR0FBTytKLEVBRWxCLE9BQU92UixDQUFNLDRLQ2FqQixTQWpCaUMsK0RBQWdCLFVBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBQW1aLFFBQVEsQ0FBQyxTQUFTLHVXQ21CdEYsU0FqQmlDLCtEQUFnQixVQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUFBLFFBQVEsQ0FBQyxZQUFZLG1CQUFtQixDQUFDLFNBQVMsbVFDZXRILFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsU0FBUyxvT0NpQnRGLFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsU0FBUyx3TkNpQnRGLFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsU0FBUyw4T0NpQnRGLFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsU0FBUyw0eVNDQTlFLElBQUE4N0IsdUJBUVIsTUFBTXQ0QyxFQUFVLE1BRVIsSUFBQThHLE1BQUsscUlBR1QsK1lDVkFncEQsRUFBVyxRQUVmLFNBQVNpTSxFQUFVbHhELEdBR2pCLFlBRmEsSUFBUkEsSUFBaUJBLEVBQU0sT0FFckIsSUFBQWtnQixRQUFlLE9BQVJsZ0IsRUFBZUEsRUFBTWlsRCxFQUNyQyxDQXVCQSxTQUFTa00sRUFBVXBqQyxFQUFLbFksR0FJdEIsUUFIZSxJQUFWQSxJQUFtQkEsRUFBUSxJQUdwQixPQUFSa1ksR0FBK0IsaUJBQVJBLEVBQ3pCLE9BQU9BLEVBSVQsSUF0Qm1CbUIsRUFzQmZraUMsR0F0QmVsaUMsRUFzQkcsU0FBVXg1QixHQUFLLE9BQU9BLEVBQUUyN0QsV0FBYXRqQyxDQUFLLEVBQWpEbFksRUFyQkhqVSxPQUFPc3RCLEdBQUcsSUFzQnRCLEdBQUlraUMsRUFDRixPQUFPQSxFQUFJRSxLQUdiLElBQUlBLEVBQU9qN0QsTUFBTXlLLFFBQVFpdEIsR0FBTyxHQUFLLENBQUMsRUFZdEMsT0FUQWxZLEVBQU1uZixLQUFLLENBQ1QyNkQsU0FBVXRqQyxFQUNWdWpDLEtBQU1BLElBR1J4M0QsT0FBT3NCLEtBQUsyeUIsR0FBS2h0QixTQUFRLFNBQVVmLEdBQ2pDc3hELEVBQUt0eEQsR0FBT214RCxFQUFTcGpDLEVBQUkvdEIsR0FBTTZWLEVBQ2pDLElBRU95N0MsQ0FDVCxDQUtBLFNBQVNDLEVBQWN4akMsRUFBS2x4QixHQUMxQi9DLE9BQU9zQixLQUFLMnlCLEdBQUtodEIsU0FBUSxTQUFVZixHQUFPLE9BQU9uRCxFQUFHa3hCLEVBQUkvdEIsR0FBTUEsRUFBTSxHQUN0RSxDQUVBLFNBQVNvRCxFQUFVMnFCLEdBQ2pCLE9BQWUsT0FBUkEsR0FBK0IsaUJBQVJBLENBQ2hDLENBTUEsU0FBU3lqQyxFQUFRQyxFQUFXdjFELEdBQzFCLElBQUt1MUQsRUFBYSxNQUFNLElBQUl2ekMsTUFBTyxVQUFZaGlCLEVBQ2pELENBUUEsU0FBU3cxRCxFQUFrQjcwRCxFQUFJODBELEVBQU12eUQsR0FNbkMsT0FMSXV5RCxFQUFLcDZELFFBQVFzRixHQUFNLElBQ3JCdUMsR0FBV0EsRUFBUW9yQixRQUNmbW5DLEVBQUtqbkMsUUFBUTd0QixHQUNiODBELEVBQUtqN0QsS0FBS21HLElBRVQsV0FDTCxJQUFJaEgsRUFBSTg3RCxFQUFLcDZELFFBQVFzRixHQUNqQmhILEdBQUssR0FDUDg3RCxFQUFLbmlELE9BQU8zWixFQUFHLEVBRW5CLENBQ0YsQ0FFQSxTQUFTKzdELEVBQVlDLEVBQU9DLEdBQzFCRCxFQUFNRSxTQUFXajRELE9BQU95akIsT0FBTyxNQUMvQnMwQyxFQUFNRyxXQUFhbDRELE9BQU95akIsT0FBTyxNQUNqQ3MwQyxFQUFNSSxnQkFBa0JuNEQsT0FBT3lqQixPQUFPLE1BQ3RDczBDLEVBQU1LLHFCQUF1QnA0RCxPQUFPeWpCLE9BQU8sTUFDM0MsSUFBSTRFLEVBQVEwdkMsRUFBTTF2QyxNQUVsQmd3QyxFQUFjTixFQUFPMXZDLEVBQU8sR0FBSTB2QyxFQUFNTyxTQUFTcjVDLE1BQU0sR0FFckRzNUMsRUFBZ0JSLEVBQU8xdkMsRUFBTzJ2QyxFQUNoQyxDQUVBLFNBQVNPLEVBQWlCUixFQUFPMXZDLEVBQU8ydkMsR0FDdEMsSUFBSVEsRUFBV1QsRUFBTVUsT0FHckJWLEVBQU12RixRQUFVLENBQUMsRUFFakJ1RixFQUFNVyx1QkFBeUIxNEQsT0FBT3lqQixPQUFPLE1BQzdDLElBQUlrMUMsRUFBaUJaLEVBQU1JLGdCQUN2QlMsRUFBYyxDQUFDLEVBQ25CbkIsRUFBYWtCLEdBQWdCLFNBQVU1MUQsRUFBSW1ELEdBSXpDMHlELEVBQVkxeUQsR0E3Q2hCLFNBQWtCbkQsRUFBSThWLEdBQ3BCLE9BQU8sV0FDTCxPQUFPOVYsRUFBRzhWLEVBQ1osQ0FDRixDQXlDdUJnZ0QsQ0FBUTkxRCxFQUFJZzFELEdBQy9CLzNELE9BQU9pMkIsZUFBZThoQyxFQUFNdkYsUUFBU3RzRCxFQUFLLENBR3hDaEYsSUFBSyxXQUFjLE9BQU8wM0QsRUFBWTF5RCxJQUFRLEVBQzlDZ3dCLFlBQVksR0FFaEIsSUFFQTZoQyxFQUFNVSxRQUFTLElBQUFqdkQsVUFBUyxDQUN0Qm5KLEtBQU1nb0IsSUFJSjB2QyxFQUFNM0YsUUF1TVosU0FBMkIyRixJQUN6QixJQUFBbnhDLFFBQU0sV0FBYyxPQUFPbXhDLEVBQU1VLE9BQU9wNEQsSUFBTSxJQUFHLFdBRTdDcTNELEVBQU9LLEVBQU1lLFlBQWEsNERBRTlCLEdBQUcsQ0FBRS94QyxNQUFNLEVBQU01VixNQUFPLFFBQzFCLENBNU1JNG5ELENBQWlCaEIsR0FHZlMsR0FDRVIsR0FHRkQsRUFBTWlCLGFBQVksV0FDaEJSLEVBQVNuNEQsS0FBTyxJQUNsQixHQUdOLENBRUEsU0FBU2c0RCxFQUFlTixFQUFPa0IsRUFBV2x4QyxFQUFNeXJDLEVBQVF3RSxHQUN0RCxJQUFJL2tELEdBQVU4VSxFQUFLenJCLE9BQ2YrdUQsRUFBWTBNLEVBQU1PLFNBQVNZLGFBQWFueEMsR0FXNUMsR0FSSXlyQyxFQUFPMkYsYUFDTHBCLEVBQU1LLHFCQUFxQi9NLElBQzdCaHBELFFBQVF1UyxNQUFPLDhCQUFnQ3kyQyxFQUFZLDhCQUFpQ3RqQyxFQUFLblYsS0FBSyxNQUV4R21sRCxFQUFNSyxxQkFBcUIvTSxHQUFhbUksSUFJckN2Z0QsSUFBVytrRCxFQUFLLENBQ25CLElBQUlvQixFQUFjQyxFQUFlSixFQUFXbHhDLEVBQUt2VSxNQUFNLEdBQUksSUFDdkQ4bEQsRUFBYXZ4QyxFQUFLQSxFQUFLenJCLE9BQVMsR0FDcEN5N0QsRUFBTWlCLGFBQVksV0FFVk0sS0FBY0YsR0FDaEIvMkQsUUFBUUYsS0FDTCx1QkFBMEJtM0QsRUFBYSx1REFBNER2eEMsRUFBS25WLEtBQUssS0FBUSxLQUk1SHdtRCxFQUFZRSxHQUFjOUYsRUFBT25yQyxLQUNuQyxHQUNGLENBRUEsSUFBSWt4QyxFQUFRL0YsRUFBT24zQixRQTJCckIsU0FBMkIwN0IsRUFBTzFNLEVBQVd0akMsR0FDM0MsSUFBSXl4QyxFQUE0QixLQUFkbk8sRUFFZGtPLEVBQVEsQ0FDVkUsU0FBVUQsRUFBY3pCLEVBQU0wQixTQUFXLFNBQVVDLEVBQU9DLEVBQVVDLEdBQ2xFLElBQUkzOUQsRUFBTzQ5RCxFQUFpQkgsRUFBT0MsRUFBVUMsR0FDekNFLEVBQVU3OUQsRUFBSzY5RCxRQUNmeDBELEVBQVVySixFQUFLcUosUUFDZlcsRUFBT2hLLEVBQUtnSyxLQUVoQixHQUFLWCxHQUFZQSxFQUFRMlosT0FDdkJoWixFQUFPb2xELEVBQVlwbEQsRUFDNkI4eEQsRUFBTUUsU0FBU2h5RCxJQU1qRSxPQUFPOHhELEVBQU0wQixTQUFTeHpELEVBQU02ekQsR0FMeEJ6M0QsUUFBUXVTLE1BQU8scUNBQXdDM1ksRUFBUyxLQUFJLGtCQUFvQmdLLEVBTTlGLEVBRUF3c0QsT0FBUStHLEVBQWN6QixFQUFNdEYsT0FBUyxTQUFVaUgsRUFBT0MsRUFBVUMsR0FDOUQsSUFBSTM5RCxFQUFPNDlELEVBQWlCSCxFQUFPQyxFQUFVQyxHQUN6Q0UsRUFBVTc5RCxFQUFLNjlELFFBQ2Z4MEQsRUFBVXJKLEVBQUtxSixRQUNmVyxFQUFPaEssRUFBS2dLLEtBRVhYLEdBQVlBLEVBQVEyWixPQUN2QmhaLEVBQU9vbEQsRUFBWXBsRCxFQUM2Qjh4RCxFQUFNRyxXQUFXanlELElBTW5FOHhELEVBQU10RixPQUFPeHNELEVBQU02ekQsRUFBU3gwRCxHQUx4QmpELFFBQVF1UyxNQUFPLHVDQUEwQzNZLEVBQVMsS0FBSSxrQkFBb0JnSyxFQU1oRyxHQWdCRixPQVhBakcsT0FBTys1RCxpQkFBaUJSLEVBQU8sQ0FDN0IvRyxRQUFTLENBQ1B0eEQsSUFBS3M0RCxFQUNELFdBQWMsT0FBT3pCLEVBQU12RixPQUFTLEVBQ3BDLFdBQWMsT0FBT3dILEVBQWlCakMsRUFBTzFNLEVBQVksR0FFL0RoakMsTUFBTyxDQUNMbm5CLElBQUssV0FBYyxPQUFPbTRELEVBQWV0QixFQUFNMXZDLE1BQU9OLEVBQU8sS0FJMUR3eEMsQ0FDVCxDQWhGK0JVLENBQWlCbEMsRUFBTzFNLEVBQVd0akMsR0FFaEV5ckMsRUFBTzBHLGlCQUFnQixTQUFVQyxFQUFVajBELElBeUc3QyxTQUEyQjZ4RCxFQUFPOXhELEVBQU11VixFQUFTKzlDLElBQ25DeEIsRUFBTUcsV0FBV2p5RCxLQUFVOHhELEVBQU1HLFdBQVdqeUQsR0FBUSxLQUMxRHJKLE1BQUssU0FBaUNrOUQsR0FDMUN0K0MsRUFBUXZRLEtBQUs4c0QsRUFBT3dCLEVBQU1seEMsTUFBT3l4QyxFQUNuQyxHQUNGLENBNUdJTSxDQUFpQnJDLEVBREkxTSxFQUFZbmxELEVBQ09pMEQsRUFBVVosRUFDcEQsSUFFQS9GLEVBQU82RyxlQUFjLFNBQVVDLEVBQVFwMEQsR0FDckMsSUFBSUQsRUFBT3EwRCxFQUFPcjdDLEtBQU8vWSxFQUFNbWxELEVBQVlubEQsRUFDdkNzVixFQUFVOCtDLEVBQU85K0MsU0FBVzgrQyxHQXlHcEMsU0FBeUJ2QyxFQUFPOXhELEVBQU11VixFQUFTKzlDLElBQ2pDeEIsRUFBTUUsU0FBU2h5RCxLQUFVOHhELEVBQU1FLFNBQVNoeUQsR0FBUSxLQUN0RHJKLE1BQUssU0FBK0JrOUQsR0FDeEMsSUFuT2dCN3BELEVBbU9adkgsRUFBTThTLEVBQVF2USxLQUFLOHNELEVBQU8sQ0FDNUIwQixTQUFVRixFQUFNRSxTQUNoQmhILE9BQVE4RyxFQUFNOUcsT0FDZEQsUUFBUytHLEVBQU0vRyxRQUNmbnFDLE1BQU9reEMsRUFBTWx4QyxNQUNia3lDLFlBQWF4QyxFQUFNdkYsUUFDbkJ5RyxVQUFXbEIsRUFBTTF2QyxPQUNoQnl4QyxHQUlILE9BOU9nQjdwRCxFQTJPRHZILElBMU9pQixtQkFBYnVILEVBQUl5QixPQTJPckJoSixFQUFNakgsUUFBUUQsUUFBUWtILElBRXBCcXZELEVBQU15QyxhQUNEOXhELEVBQUl1TCxPQUFNLFNBQVVKLEdBRXpCLE1BREFra0QsRUFBTXlDLGFBQWFyN0QsS0FBSyxhQUFjMFUsR0FDaENBLENBQ1IsSUFFT25MLENBRVgsR0FDRixDQS9ISSt4RCxDQUFlMUMsRUFBTzl4RCxFQUFNdVYsRUFBUys5QyxFQUN2QyxJQUVBL0YsRUFBT2tILGVBQWMsU0FBVXRxRCxFQUFRbEssSUE4SHpDLFNBQXlCNnhELEVBQU85eEQsRUFBTTAwRCxFQUFXcEIsR0FDM0N4QixFQUFNSSxnQkFBZ0JseUQsR0FFdEI1RCxRQUFRdVMsTUFBTyxnQ0FBa0MzTyxHQUlyRDh4RCxFQUFNSSxnQkFBZ0JseUQsR0FBUSxTQUF3Qjh4RCxHQUNwRCxPQUFPNEMsRUFDTHBCLEVBQU1seEMsTUFDTmt4QyxFQUFNL0csUUFDTnVGLEVBQU0xdkMsTUFDTjB2QyxFQUFNdkYsUUFFVixDQUNGLENBM0lJb0ksQ0FBZTdDLEVBRE0xTSxFQUFZbmxELEVBQ0trSyxFQUFRbXBELEVBQ2hELElBRUEvRixFQUFPcUgsY0FBYSxTQUFVeDZDLEVBQU9uYSxHQUNuQ215RCxFQUFjTixFQUFPa0IsRUFBV2x4QyxFQUFLcnFCLE9BQU93SSxHQUFNbWEsRUFBTzIzQyxFQUMzRCxHQUNGLENBNkRBLFNBQVNnQyxFQUFrQmpDLEVBQU8xTSxHQUNoQyxJQUFLME0sRUFBTVcsdUJBQXVCck4sR0FBWSxDQUM1QyxJQUFJeVAsRUFBZSxDQUFDLEVBQ2hCQyxFQUFXMVAsRUFBVS91RCxPQUN6QjBELE9BQU9zQixLQUFLeTJELEVBQU12RixTQUFTdnJELFNBQVEsU0FBVWhCLEdBRTNDLEdBQUlBLEVBQUt1TixNQUFNLEVBQUd1bkQsS0FBYzFQLEVBQWhDLENBR0EsSUFBSTJQLEVBQVkvMEQsRUFBS3VOLE1BQU11bkQsR0FLM0IvNkQsT0FBT2kyQixlQUFlNmtDLEVBQWNFLEVBQVcsQ0FDN0M5NUQsSUFBSyxXQUFjLE9BQU82MkQsRUFBTXZGLFFBQVF2c0QsRUFBTyxFQUMvQ2l3QixZQUFZLEdBVnNDLENBWXRELElBQ0E2aEMsRUFBTVcsdUJBQXVCck4sR0FBYXlQLENBQzVDLENBRUEsT0FBTy9DLEVBQU1XLHVCQUF1QnJOLEVBQ3RDLENBMkRBLFNBQVNnTyxFQUFnQmh4QyxFQUFPTixHQUM5QixPQUFPQSxFQUFLa3JCLFFBQU8sU0FBVTVxQixFQUFPbmlCLEdBQU8sT0FBT21pQixFQUFNbmlCLEVBQU0sR0FBR21pQixFQUNuRSxDQUVBLFNBQVN3eEMsRUFBa0I1ekQsRUFBTTZ6RCxFQUFTeDBELEdBV3hDLE9BVklnRSxFQUFTckQsSUFBU0EsRUFBS0EsT0FDekJYLEVBQVV3MEQsRUFDVkEsRUFBVTd6RCxFQUNWQSxFQUFPQSxFQUFLQSxNQUlaeXhELEVBQXVCLGlCQUFUenhELEVBQW9CLGdEQUFtREEsRUFBUSxLQUd4RixDQUFFQSxLQUFNQSxFQUFNNnpELFFBQVNBLEVBQVN4MEQsUUFBU0EsRUFDbEQsQ0FFQSxJQUNJMjFELEVBQXFCLGlCQUNyQkMsRUFBbUIsZUFDbkJDLEVBQWUsT0FFZkMsRUFBVyxFQUVmLFNBQVNDLEVBQWF2aEQsRUFBS2krQyxJQUN6QixJQUFBejVELHFCQUNFLENBQ0VxQixHQUFJLGlCQUNKbWEsSUFBS0EsRUFDTHdoRCxNQUFPLE9BQ1BDLFNBQVUsK0JBQ1ZDLEtBQU0sbURBQ05DLFlBQWEsT0FDYkMsb0JBQXFCLENBaEJELG1CQWtCdEIsU0FBVUMsR0FDUkEsRUFBSUMsaUJBQWlCLENBQ25CajhELEdBQUlzN0QsRUFDSkssTUFBTyxpQkFDUE8sTUFBT0MsSUFHVEgsRUFBSUMsaUJBQWlCLENBQ25CajhELEdBQUl1N0QsRUFDSkksTUFBTyxlQUNQTyxNQUFPQyxJQUdUSCxFQUFJSSxhQUFhLENBQ2ZwOEQsR0FBSXc3RCxFQUNKRyxNQUFPLE9BQ1BVLEtBQU0sVUFDTkMsc0JBQXVCLHFCQUd6Qk4sRUFBSTU2RCxHQUFHbTdELGtCQUFpQixTQUFVcEMsR0FDaEMsR0FBSUEsRUFBUWhnRCxNQUFRQSxHQUFPZ2dELEVBQVFxQyxjQUFnQmhCLEVBQ2pELEdBQUlyQixFQUFRaHlELE9BQVEsQ0FDbEIsSUFBSXMwRCxFQUFRLEdBQ1pDLEVBQTZCRCxFQUFPckUsRUFBTU8sU0FBU3I1QyxLQUFNNjZDLEVBQVFoeUQsT0FBUSxJQUN6RWd5RCxFQUFRd0MsVUFBWUYsQ0FDdEIsTUFDRXRDLEVBQVF3QyxVQUFZLENBQ2xCQyxFQUE0QnhFLEVBQU1PLFNBQVNyNUMsS0FBTSxJQUl6RCxJQUVBMDhDLEVBQUk1NkQsR0FBR3k3RCxtQkFBa0IsU0FBVTFDLEdBQ2pDLEdBQUlBLEVBQVFoZ0QsTUFBUUEsR0FBT2dnRCxFQUFRcUMsY0FBZ0JoQixFQUFjLENBQy9ELElBQUlzQixFQUFhM0MsRUFBUTRDLE9BQ3pCMUMsRUFBaUJqQyxFQUFPMEUsR0FDeEIzQyxFQUFRenhDLE1BOEpsQixTQUF1Q21yQyxFQUFRaEIsRUFBU3pxQyxHQUN0RHlxQyxFQUFtQixTQUFUenFDLEVBQWtCeXFDLEVBQVVBLEVBQVF6cUMsR0FDOUMsSUFBSTQwQyxFQUFjMzhELE9BQU9zQixLQUFLa3hELEdBQzFCb0ssRUFBYSxDQUNmdjBDLE1BQU9yb0IsT0FBT3NCLEtBQUtreUQsRUFBT25yQyxPQUFPdGdCLEtBQUksU0FBVTdCLEdBQU8sTUFBTyxDQUMzREEsSUFBS0EsRUFDTDIyRCxVQUFVLEVBQ1Z6Z0UsTUFBT28zRCxFQUFPbnJDLE1BQU1uaUIsR0FDbEIsS0FHTixHQUFJeTJELEVBQVlyZ0UsT0FBUSxDQUN0QixJQUFJd2dFLEVBV1IsU0FBcUN0SyxHQUNuQyxJQUFJMW9ELEVBQVMsQ0FBQyxFQXdCZCxPQXZCQTlKLE9BQU9zQixLQUFLa3hELEdBQVN2ckQsU0FBUSxTQUFVZixHQUNyQyxJQUFJNmhCLEVBQU83aEIsRUFBSStoQixNQUFNLEtBQ3JCLEdBQUlGLEVBQUt6ckIsT0FBUyxFQUFHLENBQ25CLElBQUlvQyxFQUFTb0wsRUFDVGl6RCxFQUFVaDFDLEVBQUt2ckIsTUFDbkJ1ckIsRUFBSzlnQixTQUFRLFNBQVVzTyxHQUNoQjdXLEVBQU82VyxLQUNWN1csRUFBTzZXLEdBQUssQ0FDVnluRCxRQUFTLENBQ1A1Z0UsTUFBTyxDQUFDLEVBQ1JvaUQsUUFBU2pwQyxFQUNUMG5ELFFBQVMsU0FDVEMsVUFBVSxLQUloQngrRCxFQUFTQSxFQUFPNlcsR0FBR3luRCxRQUFRNWdFLEtBQzdCLElBQ0FzQyxFQUFPcStELEdBQVdJLEdBQVMsV0FBYyxPQUFPM0ssRUFBUXRzRCxFQUFNLEdBQ2hFLE1BQ0U0RCxFQUFPNUQsR0FBT2kzRCxHQUFTLFdBQWMsT0FBTzNLLEVBQVF0c0QsRUFBTSxHQUU5RCxJQUNPNEQsQ0FDVCxDQXJDZXN6RCxDQUEyQjVLLEdBQ3RDb0ssRUFBV3BLLFFBQVV4eUQsT0FBT3NCLEtBQUt3N0QsR0FBTS8wRCxLQUFJLFNBQVU3QixHQUFPLE1BQU8sQ0FDakVBLElBQUtBLEVBQUltNkIsU0FBUyxLQUFPZzlCLEVBQW9CbjNELEdBQU9BLEVBQ3BEMjJELFVBQVUsRUFDVnpnRSxNQUFPK2dFLEdBQVMsV0FBYyxPQUFPTCxFQUFLNTJELEVBQU0sSUFDOUMsR0FDTixDQUVBLE9BQU8wMkQsQ0FDVCxDQW5MMEJVLEVBaU5EQyxFQWhORXhGLEVBQU1PLFVBaU4zQmhwQixHQUQ4QnZuQixFQWhOTzAwQyxHQWlOeEJ4MEMsTUFBTSxLQUFLbmdCLFFBQU8sU0FBVWhMLEdBQUssT0FBT0EsQ0FBRyxLQUMvQ20yQyxRQUNYLFNBQVV1Z0IsRUFBUThGLEVBQVl2OUQsR0FDNUIsSUFBSXNrQixFQUFRbXpDLEVBQU84RixHQUNuQixJQUFLajVDLEVBQ0gsTUFBTSxJQUFJK0QsTUFBTyxtQkFBc0JrMUMsRUFBYSxlQUFtQnZ4QyxFQUFPLE1BRWhGLE9BQU9oc0IsSUFBTXV6QyxFQUFNaHpDLE9BQVMsRUFBSStqQixFQUFRQSxFQUFNbTlDLFNBQ2hELEdBQ1MsU0FBVHoxQyxFQUFrQncxQyxFQUFZQSxFQUFVdCtDLEtBQUt1K0MsWUF6TnRCLFNBQWZmLEVBQXdCMUUsRUFBTXZGLFFBQVV1RixFQUFNVyx1QkFDOUMrRCxFQUVKLENBNE1SLElBQXlCYyxFQUFXeDFDLEVBQzlCdW5CLENBNU1BLElBRUFxc0IsRUFBSTU2RCxHQUFHMDhELG9CQUFtQixTQUFVM0QsR0FDbEMsR0FBSUEsRUFBUWhnRCxNQUFRQSxHQUFPZ2dELEVBQVFxQyxjQUFnQmhCLEVBQWMsQ0FDL0QsSUFBSXNCLEVBQWEzQyxFQUFRNEMsT0FDckIzMEMsRUFBTyt4QyxFQUFRL3hDLEtBQ0EsU0FBZjAwQyxJQUNGMTBDLEVBQU8wMEMsRUFBV3gwQyxNQUFNLEtBQUtuZ0IsT0FBT2toQixTQUFTdHJCLE9BQVFxcUIsSUFFdkRnd0MsRUFBTWlCLGFBQVksV0FDaEJjLEVBQVExekQsSUFBSTJ4RCxFQUFNVSxPQUFPcDRELEtBQU0wbkIsRUFBTSt4QyxFQUFRenhDLE1BQU1qc0IsTUFDckQsR0FDRixDQUNGLElBRUEyN0QsRUFBTS9JLFdBQVUsU0FBVW1MLEVBQVU5eEMsR0FDbEMsSUFBSWhvQixFQUFPLENBQUMsRUFFUjg1RCxFQUFTTCxVQUNYejVELEVBQUt5NUQsUUFBVUssRUFBU0wsU0FHMUJ6NUQsRUFBS2dvQixNQUFRQSxFQUVic3pDLEVBQUkrQix3QkFDSi9CLEVBQUlnQyxrQkFBa0J4QyxHQUN0QlEsRUFBSWlDLG1CQUFtQnpDLEdBRXZCUSxFQUFJa0MsaUJBQWlCLENBQ25CQyxRQUFTN0MsRUFDVGhpRCxNQUFPLENBQ0xrQixLQUFNalksS0FBS3BCLE1BQ1hpOUQsTUFBTzVELEVBQVNsMEQsS0FDaEI1RixLQUFNQSxJQUdaLElBRUEwM0QsRUFBTWlHLGdCQUFnQixDQUNwQi9uQixPQUFRLFNBQVVxa0IsRUFBUWp5QyxHQUN4QixJQUFJaG9CLEVBQU8sQ0FBQyxFQUNSaTZELEVBQU9SLFVBQ1R6NUQsRUFBS3k1RCxRQUFVUSxFQUFPUixTQUV4QlEsRUFBT2o5QyxJQUFNKzlDLElBQ2JkLEVBQU8yRCxNQUFRLzdELEtBQUtwQixNQUNwQlQsRUFBS2dvQixNQUFRQSxFQUVic3pDLEVBQUlrQyxpQkFBaUIsQ0FDbkJDLFFBQVM1QyxFQUNUamlELE1BQU8sQ0FDTGtCLEtBQU1tZ0QsRUFBTzJELE1BQ2JGLE1BQU96RCxFQUFPcjBELEtBQ2RpNEQsUUFBUzVELEVBQU9qOUMsSUFDaEI4Z0QsU0FBVSxRQUNWOTlELEtBQU1BLElBR1osRUFDQSs5RCxNQUFPLFNBQVU5RCxFQUFRanlDLEdBQ3ZCLElBQUlob0IsRUFBTyxDQUFDLEVBQ1JxNkMsRUFBV3g0QyxLQUFLcEIsTUFBUXc1RCxFQUFPMkQsTUFDbkM1OUQsRUFBS3E2QyxTQUFXLENBQ2RzaUIsUUFBUyxDQUNQLzJELEtBQU0sV0FDTnU0QyxRQUFVOUQsRUFBVyxLQUNyQnVpQixRQUFTLGtCQUNUN2dFLE1BQU9zK0MsSUFHUDRmLEVBQU9SLFVBQ1R6NUQsRUFBS3k1RCxRQUFVUSxFQUFPUixTQUV4Qno1RCxFQUFLZ29CLE1BQVFBLEVBRWJzekMsRUFBSWtDLGlCQUFpQixDQUNuQkMsUUFBUzVDLEVBQ1RqaUQsTUFBTyxDQUNMa0IsS0FBTWpZLEtBQUtwQixNQUNYaTlELE1BQU96RCxFQUFPcjBELEtBQ2RpNEQsUUFBUzVELEVBQU9qOUMsSUFDaEI4Z0QsU0FBVSxNQUNWOTlELEtBQU1BLElBR1osR0FFSixHQUVKLENBR0EsSUFBSXk3RCxFQUFpQixRQUlqQnVDLEVBQWlCLENBQ25CL0MsTUFBTyxhQUNQZ0QsVUFKZ0IsU0FLaEJDLGdCQU5lLFNBWWpCLFNBQVNsQixFQUFxQnQxQyxHQUM1QixPQUFPQSxHQUFpQixTQUFUQSxFQUFrQkEsRUFBS0UsTUFBTSxLQUFLelUsT0FBTyxHQUFJLEdBQUcsR0FBSyxNQUN0RSxDQU1BLFNBQVMrb0QsRUFBNkIvSSxFQUFRenJDLEdBQzVDLE1BQU8sQ0FDTHBvQixHQUFJb29CLEdBQVEsT0FJWnV6QyxNQUFPK0IsRUFBb0J0MUMsR0FDM0J5MkMsS0FBTWhMLEVBQU8yRixXQUFhLENBQUNrRixHQUFrQixHQUM3Q3YrQyxTQUFVOWYsT0FBT3NCLEtBQUtreUQsRUFBT2dLLFdBQVd6MUQsS0FBSSxTQUFVdXhELEdBQWMsT0FBT2lELEVBQ3ZFL0ksRUFBT2dLLFVBQVVsRSxHQUNqQnZ4QyxFQUFPdXhDLEVBQWEsSUFDbkIsSUFHVCxDQVFBLFNBQVMrQyxFQUE4QnZ5RCxFQUFRMHBELEVBQVExckQsRUFBUWlnQixHQUN6REEsRUFBS3htQixTQUFTdUcsSUFDaEJnQyxFQUFPbE4sS0FBSyxDQUNWK0MsR0FBSW9vQixHQUFRLE9BQ1p1ekMsTUFBT3Z6QyxFQUFLc1ksU0FBUyxLQUFPdFksRUFBS3ZVLE1BQU0sRUFBR3VVLEVBQUt6ckIsT0FBUyxHQUFLeXJCLEdBQVEsT0FDckV5MkMsS0FBTWhMLEVBQU8yRixXQUFhLENBQUNrRixHQUFrQixLQUdqRHIrRCxPQUFPc0IsS0FBS2t5RCxFQUFPZ0ssV0FBV3YyRCxTQUFRLFNBQVVxeUQsR0FDOUMrQyxFQUE2QnZ5RCxFQUFRMHBELEVBQU9nSyxVQUFVbEUsR0FBYXh4RCxFQUFRaWdCLEVBQU91eEMsRUFBYSxJQUNqRyxHQUNGLENBdUVBLFNBQVM2RCxFQUFVaG5ELEdBQ2pCLElBQ0UsT0FBT0EsR0FHVCxDQUZFLE1BQU8zVixHQUNQLE9BQU9BLENBQ1QsQ0FDRixDQUdBLElBQUlpK0QsRUFBUyxTQUFpQkMsRUFBV0MsR0FDdkNyL0QsS0FBS3EvRCxRQUFVQSxFQUVmci9ELEtBQUtrK0QsVUFBWXg5RCxPQUFPeWpCLE9BQU8sTUFFL0Jua0IsS0FBS3MvRCxXQUFhRixFQUNsQixJQUFJRyxFQUFXSCxFQUFVcjJDLE1BR3pCL29CLEtBQUsrb0IsT0FBNkIsbUJBQWJ3MkMsRUFBMEJBLElBQWFBLElBQWEsQ0FBQyxDQUM1RSxFQUVJQyxFQUF1QixDQUFFM0YsV0FBWSxDQUFFaGpDLGNBQWMsSUFFekQyb0MsRUFBcUIzRixXQUFXajRELElBQU0sV0FDcEMsUUFBUzVCLEtBQUtzL0QsV0FBV3pGLFVBQzNCLEVBRUFzRixFQUFPanJCLFVBQVV1ckIsU0FBVyxTQUFtQjc0RCxFQUFLc3RELEdBQ2xEbDBELEtBQUtrK0QsVUFBVXQzRCxHQUFPc3RELENBQ3hCLEVBRUFpTCxFQUFPanJCLFVBQVVpQyxZQUFjLFNBQXNCdnZDLFVBQzVDNUcsS0FBS2srRCxVQUFVdDNELEVBQ3hCLEVBRUF1NEQsRUFBT2pyQixVQUFVd3JCLFNBQVcsU0FBbUI5NEQsR0FDN0MsT0FBTzVHLEtBQUtrK0QsVUFBVXQzRCxFQUN4QixFQUVBdTRELEVBQU9qckIsVUFBVXlyQixTQUFXLFNBQW1CLzRELEdBQzdDLE9BQU9BLEtBQU81RyxLQUFLaytELFNBQ3JCLEVBRUFpQixFQUFPanJCLFVBQVV2N0IsT0FBUyxTQUFpQnltRCxHQUN6Q3AvRCxLQUFLcy9ELFdBQVd6RixXQUFhdUYsRUFBVXZGLFdBQ25DdUYsRUFBVXpTLFVBQ1ozc0QsS0FBS3MvRCxXQUFXM1MsUUFBVXlTLEVBQVV6UyxTQUVsQ3lTLEVBQVVybUIsWUFDWi80QyxLQUFLcy9ELFdBQVd2bUIsVUFBWXFtQixFQUFVcm1CLFdBRXBDcW1CLEVBQVVsTSxVQUNabHpELEtBQUtzL0QsV0FBV3BNLFFBQVVrTSxFQUFVbE0sUUFFeEMsRUFFQWlNLEVBQU9qckIsVUFBVXFuQixhQUFlLFNBQXVCOTNELEdBQ3JEMDBELEVBQWFuNEQsS0FBS2srRCxVQUFXejZELEVBQy9CLEVBRUEwN0QsRUFBT2pyQixVQUFVa25CLGNBQWdCLFNBQXdCMzNELEdBQ25EekQsS0FBS3MvRCxXQUFXcE0sU0FDbEJpRixFQUFhbjRELEtBQUtzL0QsV0FBV3BNLFFBQVN6dkQsRUFFMUMsRUFFQTA3RCxFQUFPanJCLFVBQVU2bUIsY0FBZ0IsU0FBd0J0M0QsR0FDbkR6RCxLQUFLcy9ELFdBQVczUyxTQUNsQndMLEVBQWFuNEQsS0FBS3MvRCxXQUFXM1MsUUFBU2xwRCxFQUUxQyxFQUVBMDdELEVBQU9qckIsVUFBVTBtQixnQkFBa0IsU0FBMEJuM0QsR0FDdkR6RCxLQUFLcy9ELFdBQVd2bUIsV0FDbEJvZixFQUFhbjRELEtBQUtzL0QsV0FBV3ZtQixVQUFXdDFDLEVBRTVDLEVBRUEvQyxPQUFPKzVELGlCQUFrQjBFLEVBQU9qckIsVUFBV3NyQixHQUUzQyxJQUFJSSxFQUFtQixTQUEyQkMsR0FFaEQ3L0QsS0FBS3F5QyxTQUFTLEdBQUl3dEIsR0FBZSxFQUNuQyxFQTZFQSxTQUFTbG5ELEVBQVE4UCxFQUFNcTNDLEVBQWNDLEdBU25DLEdBUEVDLEVBQWdCdjNDLEVBQU1zM0MsR0FJeEJELEVBQWFubkQsT0FBT29uRCxHQUdoQkEsRUFBVXpsQixRQUNaLElBQUssSUFBSTF6QyxLQUFPbTVELEVBQVV6bEIsUUFBUyxDQUNqQyxJQUFLd2xCLEVBQWFKLFNBQVM5NEQsR0FPekIsWUFMRTdELFFBQVFGLEtBQ04sc0NBQXdDK0QsRUFBeEMsK0NBTU4rUixFQUNFOFAsRUFBS3JxQixPQUFPd0ksR0FDWms1RCxFQUFhSixTQUFTOTRELEdBQ3RCbTVELEVBQVV6bEIsUUFBUTF6QyxHQUV0QixDQUVKLENBdEdBZzVELEVBQWlCMXJCLFVBQVV0eUMsSUFBTSxTQUFjNm1CLEdBQzdDLE9BQU9BLEVBQUtrckIsUUFBTyxTQUFVdWdCLEVBQVF0dEQsR0FDbkMsT0FBT3N0RCxFQUFPd0wsU0FBUzk0RCxFQUN6QixHQUFHNUcsS0FBSzJmLEtBQ1YsRUFFQWlnRCxFQUFpQjFyQixVQUFVMGxCLGFBQWUsU0FBdUJueEMsR0FDL0QsSUFBSXlyQyxFQUFTbDBELEtBQUsyZixLQUNsQixPQUFPOEksRUFBS2tyQixRQUFPLFNBQVVvWSxFQUFXbmxELEdBRXRDLE9BQU9tbEQsSUFEUG1JLEVBQVNBLEVBQU93TCxTQUFTOTRELElBQ0VpekQsV0FBYWp6RCxFQUFNLElBQU0sR0FDdEQsR0FBRyxHQUNMLEVBRUFnNUQsRUFBaUIxckIsVUFBVXY3QixPQUFTLFNBQW1Ca25ELEdBQ3JEbG5ELEVBQU8sR0FBSTNZLEtBQUsyZixLQUFNa2dELEVBQ3hCLEVBRUFELEVBQWlCMXJCLFVBQVU3QixTQUFXLFNBQW1CNXBCLEVBQU0yMkMsRUFBV0MsR0FDdEUsSUFBSVksRUFBV2pnRSxVQUNFLElBQVpxL0QsSUFBcUJBLEdBQVUsR0FHcENXLEVBQWdCdjNDLEVBQU0yMkMsR0FHeEIsSUFBSVcsRUFBWSxJQUFJWixFQUFPQyxFQUFXQyxHQUNsQixJQUFoQjUyQyxFQUFLenJCLE9BQ1BnRCxLQUFLMmYsS0FBT29nRCxFQUVDLy9ELEtBQUs0QixJQUFJNm1CLEVBQUt2VSxNQUFNLEdBQUksSUFDOUJ1ckQsU0FBU2gzQyxFQUFLQSxFQUFLenJCLE9BQVMsR0FBSStpRSxHQUlyQ1gsRUFBVTlrQixTQUNaNmQsRUFBYWlILEVBQVU5a0IsU0FBUyxTQUFVNGxCLEVBQWdCdDVELEdBQ3hEcTVELEVBQVM1dEIsU0FBUzVwQixFQUFLcnFCLE9BQU93SSxHQUFNczVELEVBQWdCYixFQUN0RCxHQUVKLEVBRUFPLEVBQWlCMXJCLFVBQVVpc0IsV0FBYSxTQUFxQjEzQyxHQUMzRCxJQUFJbmxCLEVBQVN0RCxLQUFLNEIsSUFBSTZtQixFQUFLdlUsTUFBTSxHQUFJLElBQ2pDdE4sRUFBTTZoQixFQUFLQSxFQUFLenJCLE9BQVMsR0FDekIrakIsRUFBUXpkLEVBQU9vOEQsU0FBUzk0RCxHQUV2Qm1hLEVBVUFBLEVBQU1zK0MsU0FJWC83RCxFQUFPNnlDLFlBQVl2dkMsR0FaZjdELFFBQVFGLEtBQ04sdUNBQXlDK0QsRUFBekMsNkJBWVIsRUFFQWc1RCxFQUFpQjFyQixVQUFVa3NCLGFBQWUsU0FBdUIzM0MsR0FDL0QsSUFBSW5sQixFQUFTdEQsS0FBSzRCLElBQUk2bUIsRUFBS3ZVLE1BQU0sR0FBSSxJQUNqQ3ROLEVBQU02aEIsRUFBS0EsRUFBS3pyQixPQUFTLEdBRTdCLFFBQUlzRyxHQUNLQSxFQUFPcThELFNBQVMvNEQsRUFJM0IsRUErQkEsSUFBSXk1RCxFQUFpQixDQUNuQmpJLE9BQVEsU0FBVXQ3RCxHQUFTLE1BQXdCLG1CQUFWQSxDQUFzQixFQUMvRHdqRSxTQUFVLFlBU1JDLEVBQWMsQ0FDaEJyTixRQUFTbU4sRUFDVHRuQixVQUFXc25CLEVBQ1gxVCxRQVRpQixDQUNqQnlMLE9BQVEsU0FBVXQ3RCxHQUFTLE1BQXdCLG1CQUFWQSxHQUNyQixpQkFBVkEsR0FBK0MsbUJBQWxCQSxFQUFNb2YsT0FBeUIsRUFDdEVva0QsU0FBVSwrQ0FTWixTQUFTTixFQUFpQnYzQyxFQUFNMjJDLEdBQzlCMStELE9BQU9zQixLQUFLdStELEdBQWE1NEQsU0FBUSxTQUFVZixHQUN6QyxHQUFLdzRELEVBQVV4NEQsR0FBZixDQUVBLElBQUk0NUQsRUFBZ0JELEVBQVkzNUQsR0FFaEN1eEQsRUFBYWlILEVBQVV4NEQsSUFBTSxTQUFVOUosRUFBTzZKLEdBQzVDeXhELEVBQ0VvSSxFQUFjcEksT0FBT3Q3RCxHQU83QixTQUErQjJyQixFQUFNN2hCLEVBQUtELEVBQU03SixFQUFPd2pFLEdBQ3JELElBQUlHLEVBQU03NUQsRUFBTSxjQUFnQjA1RCxFQUFXLFNBQVkxNUQsRUFBTSxJQUFNRCxFQUFPLElBSzFFLE9BSkk4aEIsRUFBS3pyQixPQUFTLElBQ2hCeWpFLEdBQU8sZUFBbUJoNEMsRUFBS25WLEtBQUssS0FBUSxLQUU5Q210RCxFQUFPLE9BQVV6L0QsS0FBS08sVUFBVXpFLEdBQVUsR0FFNUMsQ0FiUTRqRSxDQUFxQmo0QyxFQUFNN2hCLEVBQUtELEVBQU03SixFQUFPMGpFLEVBQWNGLFVBRS9ELEdBVDhCLENBVWhDLEdBQ0YsQ0FXQSxTQUFTek4sRUFBYTdzRCxHQUNwQixPQUFPLElBQUkyNkQsRUFBTTM2RCxFQUNuQixDQUVBLElBQUkyNkQsRUFBUSxTQUFTQSxFQUFPMzZELEdBQzFCLElBQUlpNkQsRUFBV2pnRSxVQUNFLElBQVpnRyxJQUFxQkEsRUFBVSxDQUFDLEdBR25Db3lELEVBQTBCLG9CQUFaajJELFFBQXlCLHFEQUN2Q2kyRCxFQUFPcDRELGdCQUFnQjJnRSxFQUFPLCtDQUdoQyxJQUFJNU4sRUFBVS9zRCxFQUFRK3NELGFBQTBCLElBQVpBLElBQXFCQSxFQUFVLElBQ25FLElBQUlELEVBQVM5c0QsRUFBUThzRCxZQUF3QixJQUFYQSxJQUFvQkEsR0FBUyxHQUMvRCxJQUFJdDVDLEVBQVd4VCxFQUFRd1QsU0FHdkJ4WixLQUFLdzVELGFBQWMsRUFDbkJ4NUQsS0FBSzI0RCxTQUFXajRELE9BQU95akIsT0FBTyxNQUM5Qm5rQixLQUFLNGdFLG1CQUFxQixHQUMxQjVnRSxLQUFLNDRELFdBQWFsNEQsT0FBT3lqQixPQUFPLE1BQ2hDbmtCLEtBQUs2NEQsZ0JBQWtCbjRELE9BQU95akIsT0FBTyxNQUNyQ25rQixLQUFLZzVELFNBQVcsSUFBSTRHLEVBQWlCNTVELEdBQ3JDaEcsS0FBSzg0RCxxQkFBdUJwNEQsT0FBT3lqQixPQUFPLE1BQzFDbmtCLEtBQUs2Z0UsYUFBZSxHQUNwQjdnRSxLQUFLbzVELHVCQUF5QjE0RCxPQUFPeWpCLE9BQU8sTUFDNUNua0IsS0FBSzhnRSxVQUFZdG5ELEVBR2pCLElBQUlpL0MsRUFBUXo0RCxLQUVSbTZELEVBRE1uNkQsS0FDU202RCxTQUNmaEgsRUFGTW56RCxLQUVPbXpELE9BQ2pCbnpELEtBQUttNkQsU0FBVyxTQUF3Qnh6RCxFQUFNNnpELEdBQzVDLE9BQU9MLEVBQVN4dUQsS0FBSzhzRCxFQUFPOXhELEVBQU02ekQsRUFDcEMsRUFDQXg2RCxLQUFLbXpELE9BQVMsU0FBc0J4c0QsRUFBTTZ6RCxFQUFTeDBELEdBQ2pELE9BQU9tdEQsRUFBT3huRCxLQUFLOHNELEVBQU85eEQsRUFBTTZ6RCxFQUFTeDBELEVBQzNDLEVBR0FoRyxLQUFLOHlELE9BQVNBLEVBRWQsSUFBSS9wQyxFQUFRL29CLEtBQUtnNUQsU0FBU3I1QyxLQUFLb0osTUFLL0Jnd0MsRUFBYy80RCxLQUFNK29CLEVBQU8sR0FBSS9vQixLQUFLZzVELFNBQVNyNUMsTUFJN0NzNUMsRUFBZ0JqNUQsS0FBTStvQixHQUd0QmdxQyxFQUFRcHJELFNBQVEsU0FBVTVILEdBQVUsT0FBT0EsRUFBT2tnRSxFQUFXLEdBQy9ELEVBRUljLEVBQXFCLENBQUVoNEMsTUFBTyxDQUFFOE4sY0FBYyxJQUVsRDhwQyxFQUFNenNCLFVBQVV6VyxRQUFVLFNBQWtCampCLEVBQUt3bUQsR0FDL0N4bUQsRUFBSWtNLFFBQVFzNkMsR0FBYW5WLEVBQVU3ckQsTUFDbkN3YSxFQUFJM0gsT0FBTzRqQixpQkFBaUJ3cUMsT0FBU2poRSxXQUVBeUMsSUFBbkJ6QyxLQUFLOGdFLFdBQ25COWdFLEtBQUs4Z0UsWUFJUC9FLEVBQVl2aEQsRUFBS3hhLEtBRXJCLEVBRUErZ0UsRUFBbUJoNEMsTUFBTW5uQixJQUFNLFdBQzdCLE9BQU81QixLQUFLbTVELE9BQU9wNEQsSUFDckIsRUFFQWdnRSxFQUFtQmg0QyxNQUFNamlCLElBQU0sU0FBVXFFLEdBRXJDaXRELEdBQU8sRUFBTyw0REFFbEIsRUFFQXVJLEVBQU16c0IsVUFBVWlmLE9BQVMsU0FBaUJpSCxFQUFPQyxFQUFVQyxHQUN2RCxJQUFJMkYsRUFBV2pnRSxLQUdiNE8sRUFBTTJyRCxFQUFpQkgsRUFBT0MsRUFBVUMsR0FDdEMzekQsRUFBT2lJLEVBQUlqSSxLQUNYNnpELEVBQVU1ckQsRUFBSTRyRCxRQUNkeDBELEVBQVU0SSxFQUFJNUksUUFFaEI2MEQsRUFBVyxDQUFFbDBELEtBQU1BLEVBQU02ekQsUUFBU0EsR0FDbEM5bUQsRUFBUTFULEtBQUs0NEQsV0FBV2p5RCxHQUN2QitNLEdBTUwxVCxLQUFLMDVELGFBQVksV0FDZmhtRCxFQUFNL0wsU0FBUSxTQUF5QnVVLEdBQ3JDQSxFQUFRcytDLEVBQ1YsR0FDRixJQUVBeDZELEtBQUs2Z0UsYUFDRjNzRCxRQUNBdk0sU0FBUSxTQUFVdTVELEdBQU8sT0FBT0EsRUFBSXJHLEVBQVVvRixFQUFTbDNDLE1BQVEsSUFJaEUvaUIsR0FBV0EsRUFBUW03RCxRQUVuQnArRCxRQUFRRixLQUNOLHlCQUEyQjhELEVBQTNCLHVGQW5CQTVELFFBQVF1UyxNQUFPLGlDQUFtQzNPLEVBdUJ4RCxFQUVBZzZELEVBQU16c0IsVUFBVWltQixTQUFXLFNBQW1CQyxFQUFPQyxHQUNqRCxJQUFJNEYsRUFBV2pnRSxLQUdiNE8sRUFBTTJyRCxFQUFpQkgsRUFBT0MsR0FDNUIxekQsRUFBT2lJLEVBQUlqSSxLQUNYNnpELEVBQVU1ckQsRUFBSTRyRCxRQUVoQlEsRUFBUyxDQUFFcjBELEtBQU1BLEVBQU02ekQsUUFBU0EsR0FDaEM5bUQsRUFBUTFULEtBQUsyNEQsU0FBU2h5RCxHQUMxQixHQUFLK00sRUFBTCxDQU9BLElBQ0UxVCxLQUFLNGdFLG1CQUNGMXNELFFBQ0ExTCxRQUFPLFNBQVUwNEQsR0FBTyxPQUFPQSxFQUFJdnFCLE1BQVEsSUFDM0NodkMsU0FBUSxTQUFVdTVELEdBQU8sT0FBT0EsRUFBSXZxQixPQUFPcWtCLEVBQVFpRixFQUFTbDNDLE1BQVEsR0FNekUsQ0FMRSxNQUFPN25CLEdBRUw2QixRQUFRRixLQUFLLCtDQUNiRSxRQUFRdVMsTUFBTXBVLEVBRWxCLENBRUEsSUFBSXNKLEVBQVNrSixFQUFNMVcsT0FBUyxFQUN4Qm1GLFFBQVEyckQsSUFBSXA2QyxFQUFNakwsS0FBSSxTQUFVeVQsR0FBVyxPQUFPQSxFQUFRcytDLEVBQVUsS0FDcEU5bUQsRUFBTSxHQUFHOG1ELEdBRWIsT0FBTyxJQUFJcjRELFNBQVEsU0FBVUQsRUFBUytyQixHQUNwQ3pqQixFQUFPNEgsTUFBSyxTQUFVaEosR0FDcEIsSUFDRTYyRCxFQUFTVyxtQkFDTnA0RCxRQUFPLFNBQVUwNEQsR0FBTyxPQUFPQSxFQUFJcEMsS0FBTyxJQUMxQ24zRCxTQUFRLFNBQVV1NUQsR0FBTyxPQUFPQSxFQUFJcEMsTUFBTTlELEVBQVFpRixFQUFTbDNDLE1BQVEsR0FNeEUsQ0FMRSxNQUFPN25CLEdBRUw2QixRQUFRRixLQUFLLDhDQUNiRSxRQUFRdVMsTUFBTXBVLEVBRWxCLENBQ0FnQixFQUFRa0gsRUFDVixJQUFHLFNBQVVrTSxHQUNYLElBQ0UycUQsRUFBU1csbUJBQ05wNEQsUUFBTyxTQUFVMDRELEdBQU8sT0FBT0EsRUFBSTVyRCxLQUFPLElBQzFDM04sU0FBUSxTQUFVdTVELEdBQU8sT0FBT0EsRUFBSTVyRCxNQUFNMGxELEVBQVFpRixFQUFTbDNDLE1BQU96VCxFQUFRLEdBTS9FLENBTEUsTUFBT3BVLEdBRUw2QixRQUFRRixLQUFLLDhDQUNiRSxRQUFRdVMsTUFBTXBVLEVBRWxCLENBQ0Erc0IsRUFBTzNZLEVBQ1QsR0FDRixHQTVDQSxDQUhJdlMsUUFBUXVTLE1BQU8sK0JBQWlDM08sRUFnRHRELEVBRUFnNkQsRUFBTXpzQixVQUFVd2IsVUFBWSxTQUFvQmpzRCxFQUFJdUMsR0FDbEQsT0FBT3N5RCxFQUFpQjcwRCxFQUFJekQsS0FBSzZnRSxhQUFjNzZELEVBQ2pELEVBRUEyNkQsRUFBTXpzQixVQUFVd3FCLGdCQUFrQixTQUEwQmo3RCxFQUFJdUMsR0FFOUQsT0FBT3N5RCxFQURrQixtQkFBUDcwRCxFQUFvQixDQUFFa3pDLE9BQVFsekMsR0FBT0EsRUFDekJ6RCxLQUFLNGdFLG1CQUFvQjU2RCxFQUN6RCxFQUVBMjZELEVBQU16c0IsVUFBVTVzQixNQUFRLFNBQWtCeFcsRUFBUStGLEVBQUk3USxHQUNsRCxJQUFJaTZELEVBQVdqZ0UsS0FLakIsT0FGRW80RCxFQUF5QixtQkFBWHRuRCxFQUF1Qix5Q0FFaEMsSUFBQXdXLFFBQU0sV0FBYyxPQUFPeFcsRUFBT212RCxFQUFTbDNDLE1BQU9rM0MsRUFBUy9NLFFBQVUsR0FBR3I4QyxFQUFJblcsT0FBT0MsT0FBTyxDQUFDLEVBQUdxRixHQUN2RyxFQUVBMjZELEVBQU16c0IsVUFBVWt0QixhQUFlLFNBQXVCcjRDLEdBQ2xELElBQUlrM0MsRUFBV2pnRSxLQUVqQkEsS0FBSzA1RCxhQUFZLFdBQ2Z1RyxFQUFTOUcsT0FBT3A0RCxLQUFPZ29CLENBQ3pCLEdBQ0YsRUFFQTQzQyxFQUFNenNCLFVBQVVtdEIsZUFBaUIsU0FBeUI1NEMsRUFBTTIyQyxFQUFXcDVELFFBQ3RELElBQVpBLElBQXFCQSxFQUFVLENBQUMsR0FFbkIsaUJBQVR5aUIsSUFBcUJBLEVBQU8sQ0FBQ0EsSUFHdEMydkMsRUFBT243RCxNQUFNeUssUUFBUStnQixHQUFPLDZDQUM1QjJ2QyxFQUFPM3ZDLEVBQUt6ckIsT0FBUyxFQUFHLDREQUcxQmdELEtBQUtnNUQsU0FBUzNtQixTQUFTNXBCLEVBQU0yMkMsR0FDN0JyRyxFQUFjLzRELEtBQU1BLEtBQUsrb0IsTUFBT04sRUFBTXpvQixLQUFLZzVELFNBQVNwM0QsSUFBSTZtQixHQUFPemlCLEVBQVFzN0QsZUFFdkVySSxFQUFnQmo1RCxLQUFNQSxLQUFLK29CLE1BQzdCLEVBRUE0M0MsRUFBTXpzQixVQUFVcXRCLGlCQUFtQixTQUEyQjk0QyxHQUMxRCxJQUFJdzNDLEVBQVdqZ0UsS0FFRyxpQkFBVHlvQixJQUFxQkEsRUFBTyxDQUFDQSxJQUd0QzJ2QyxFQUFPbjdELE1BQU15SyxRQUFRK2dCLEdBQU8sNkNBRzlCem9CLEtBQUtnNUQsU0FBU21ILFdBQVcxM0MsR0FDekJ6b0IsS0FBSzA1RCxhQUFZLGtCQUNHSyxFQUFla0csRUFBU2wzQyxNQUFPTixFQUFLdlUsTUFBTSxHQUFJLElBQzdDdVUsRUFBS0EsRUFBS3pyQixPQUFTLEdBQ3hDLElBQ0F3N0QsRUFBV3g0RCxLQUNiLEVBRUEyZ0UsRUFBTXpzQixVQUFVc3RCLFVBQVksU0FBb0IvNEMsR0FPOUMsTUFOb0IsaUJBQVRBLElBQXFCQSxFQUFPLENBQUNBLElBR3RDMnZDLEVBQU9uN0QsTUFBTXlLLFFBQVErZ0IsR0FBTyw2Q0FHdkJ6b0IsS0FBS2c1RCxTQUFTb0gsYUFBYTMzQyxFQUNwQyxFQUVBazRDLEVBQU16c0IsVUFBVXV0QixVQUFZLFNBQW9CQyxHQUM5QzFoRSxLQUFLZzVELFNBQVNyZ0QsT0FBTytvRCxHQUNyQmxKLEVBQVd4NEQsTUFBTSxFQUNuQixFQUVBMmdFLEVBQU16c0IsVUFBVXdsQixZQUFjLFNBQXNCajJELEdBQ2xELElBQUlrK0QsRUFBYTNoRSxLQUFLdzVELFlBQ3RCeDVELEtBQUt3NUQsYUFBYyxFQUNuQi8xRCxJQUNBekQsS0FBS3c1RCxZQUFjbUksQ0FDckIsRUFFQWpoRSxPQUFPKzVELGlCQUFrQmtHLEVBQU16c0IsVUFBVzZzQixHQVExQyxJQUFJYSxFQUFXQyxHQUFtQixTQUFVOVYsRUFBVytWLEdBQ3JELElBQUkxNEQsRUFBTSxDQUFDLEVBMEJYLE9BekJnRDI0RCxFQUFXRCxJQUN6RC8rRCxRQUFRdVMsTUFBTSwwRUFFaEIwc0QsRUFBYUYsR0FBUW42RCxTQUFRLFNBQVVpSCxHQUNyQyxJQUFJaEksRUFBTWdJLEVBQUloSSxJQUNWK0osRUFBTS9CLEVBQUkrQixJQUVkdkgsRUFBSXhDLEdBQU8sV0FDVCxJQUFJbWlCLEVBQVEvb0IsS0FBS2loRSxPQUFPbDRDLE1BQ3BCbXFDLEVBQVVsekQsS0FBS2loRSxPQUFPL04sUUFDMUIsR0FBSW5ILEVBQVcsQ0FDYixJQUFJbUksRUFBUytOLEVBQXFCamlFLEtBQUtpaEUsT0FBUSxXQUFZbFYsR0FDM0QsSUFBS21JLEVBQ0gsT0FFRm5yQyxFQUFRbXJDLEVBQU9uM0IsUUFBUWhVLE1BQ3ZCbXFDLEVBQVVnQixFQUFPbjNCLFFBQVFtMkIsT0FDM0IsQ0FDQSxNQUFzQixtQkFBUnZpRCxFQUNWQSxFQUFJaEYsS0FBSzNMLEtBQU0rb0IsRUFBT21xQyxHQUN0Qm5xQyxFQUFNcFksRUFDWixFQUVBdkgsRUFBSXhDLEdBQUtzN0QsTUFBTyxDQUNsQixJQUNPOTRELENBQ1QsSUFRSSs0RCxFQUFlTixHQUFtQixTQUFVOVYsRUFBV2hULEdBQ3pELElBQUkzdkMsRUFBTSxDQUFDLEVBMEJYLE9BekJnRDI0RCxFQUFXaHBCLElBQ3pEaDJDLFFBQVF1UyxNQUFNLDhFQUVoQjBzRCxFQUFhanBCLEdBQVdweEMsU0FBUSxTQUFVaUgsR0FDeEMsSUFBSWhJLEVBQU1nSSxFQUFJaEksSUFDVitKLEVBQU0vQixFQUFJK0IsSUFFZHZILEVBQUl4QyxHQUFPLFdBRVQsSUFEQSxJQUFJakssRUFBTyxHQUFJa3RDLEVBQU03aUIsVUFBVWhxQixPQUN2QjZzQyxLQUFRbHRDLEVBQU1rdEMsR0FBUTdpQixVQUFXNmlCLEdBR3pDLElBQUlzcEIsRUFBU256RCxLQUFLaWhFLE9BQU85TixPQUN6QixHQUFJcEgsRUFBVyxDQUNiLElBQUltSSxFQUFTK04sRUFBcUJqaUUsS0FBS2loRSxPQUFRLGVBQWdCbFYsR0FDL0QsSUFBS21JLEVBQ0gsT0FFRmYsRUFBU2UsRUFBT24zQixRQUFRbzJCLE1BQzFCLENBQ0EsTUFBc0IsbUJBQVJ4aUQsRUFDVkEsRUFBSXhULE1BQU02QyxLQUFNLENBQUNtekQsR0FBUS8wRCxPQUFPekIsSUFDaEN3MkQsRUFBT2gyRCxNQUFNNkMsS0FBS2loRSxPQUFRLENBQUN0d0QsR0FBS3ZTLE9BQU96QixHQUM3QyxDQUNGLElBQ095TSxDQUNULElBUUlzbkQsRUFBYW1SLEdBQW1CLFNBQVU5VixFQUFXbUgsR0FDdkQsSUFBSTlwRCxFQUFNLENBQUMsRUF1QlgsT0F0QmdEMjRELEVBQVc3TyxJQUN6RG53RCxRQUFRdVMsTUFBTSw0RUFFaEIwc0QsRUFBYTlPLEdBQVN2ckQsU0FBUSxTQUFVaUgsR0FDdEMsSUFBSWhJLEVBQU1nSSxFQUFJaEksSUFDVitKLEVBQU0vQixFQUFJK0IsSUFHZEEsRUFBTW83QyxFQUFZcDdDLEVBQ2xCdkgsRUFBSXhDLEdBQU8sV0FDVCxJQUFJbWxELEdBQWNrVyxFQUFxQmppRSxLQUFLaWhFLE9BQVEsYUFBY2xWLEdBQWxFLENBR0EsR0FBaURwN0MsS0FBTzNRLEtBQUtpaEUsT0FBTy9OLFFBSXBFLE9BQU9sekQsS0FBS2loRSxPQUFPL04sUUFBUXZpRCxHQUh6QjVOLFFBQVF1UyxNQUFPLDBCQUE0QjNFLEVBRjdDLENBTUYsRUFFQXZILEVBQUl4QyxHQUFLczdELE1BQU8sQ0FDbEIsSUFDTzk0RCxDQUNULElBUUl1bkQsRUFBYWtSLEdBQW1CLFNBQVU5VixFQUFXWSxHQUN2RCxJQUFJdmpELEVBQU0sQ0FBQyxFQTBCWCxPQXpCZ0QyNEQsRUFBV3BWLElBQ3pENXBELFFBQVF1UyxNQUFNLDRFQUVoQjBzRCxFQUFhclYsR0FBU2hsRCxTQUFRLFNBQVVpSCxHQUN0QyxJQUFJaEksRUFBTWdJLEVBQUloSSxJQUNWK0osRUFBTS9CLEVBQUkrQixJQUVkdkgsRUFBSXhDLEdBQU8sV0FFVCxJQURBLElBQUlqSyxFQUFPLEdBQUlrdEMsRUFBTTdpQixVQUFVaHFCLE9BQ3ZCNnNDLEtBQVFsdEMsRUFBTWt0QyxHQUFRN2lCLFVBQVc2aUIsR0FHekMsSUFBSXN3QixFQUFXbjZELEtBQUtpaEUsT0FBTzlHLFNBQzNCLEdBQUlwTyxFQUFXLENBQ2IsSUFBSW1JLEVBQVMrTixFQUFxQmppRSxLQUFLaWhFLE9BQVEsYUFBY2xWLEdBQzdELElBQUttSSxFQUNILE9BRUZpRyxFQUFXakcsRUFBT24zQixRQUFRbzlCLFFBQzVCLENBQ0EsTUFBc0IsbUJBQVJ4cEQsRUFDVkEsRUFBSXhULE1BQU02QyxLQUFNLENBQUNtNkQsR0FBVS83RCxPQUFPekIsSUFDbEN3OUQsRUFBU2g5RCxNQUFNNkMsS0FBS2loRSxPQUFRLENBQUN0d0QsR0FBS3ZTLE9BQU96QixHQUMvQyxDQUNGLElBQ095TSxDQUNULElBT0lnNUQsRUFBMEIsU0FBVXJXLEdBQWEsTUFBTyxDQUMxRDZWLFNBQVVBLEVBQVN2N0QsS0FBSyxLQUFNMGxELEdBQzlCMkUsV0FBWUEsRUFBV3JxRCxLQUFLLEtBQU0wbEQsR0FDbENvVyxhQUFjQSxFQUFhOTdELEtBQUssS0FBTTBsRCxHQUN0QzRFLFdBQVlBLEVBQVd0cUQsS0FBSyxLQUFNMGxELEdBQ2hDLEVBU0osU0FBU2lXLEVBQWN2NUQsR0FDckIsT0FBS3M1RCxFQUFXdDVELEdBR1R4TCxNQUFNeUssUUFBUWUsR0FDakJBLEVBQUlBLEtBQUksU0FBVTdCLEdBQU8sTUFBTyxDQUFHQSxJQUFLQSxFQUFLK0osSUFBSy9KLEVBQVEsSUFDMURsRyxPQUFPc0IsS0FBS3lHLEdBQUtBLEtBQUksU0FBVTdCLEdBQU8sTUFBTyxDQUFHQSxJQUFLQSxFQUFLK0osSUFBS2xJLEVBQUk3QixHQUFTLElBSnZFLEVBS1gsQ0FPQSxTQUFTbTdELEVBQVl0NUQsR0FDbkIsT0FBT3hMLE1BQU15SyxRQUFRZSxJQUFRdUIsRUFBU3ZCLEVBQ3hDLENBT0EsU0FBU281RCxFQUFvQnArRCxHQUMzQixPQUFPLFNBQVVzb0QsRUFBV3RqRCxHQU8xQixNQU55QixpQkFBZHNqRCxHQUNUdGpELEVBQU1zakQsRUFDTkEsRUFBWSxJQUN3QyxNQUEzQ0EsRUFBVVQsT0FBT1MsRUFBVS91RCxPQUFTLEtBQzdDK3VELEdBQWEsS0FFUnRvRCxFQUFHc29ELEVBQVd0akQsRUFDdkIsQ0FDRixDQVNBLFNBQVN3NUQsRUFBc0J4SixFQUFPNEosRUFBUXRXLEdBQzVDLElBQUltSSxFQUFTdUUsRUFBTUsscUJBQXFCL00sR0FJeEMsT0FIZ0RtSSxHQUM5Q254RCxRQUFRdVMsTUFBTyx3Q0FBMEMrc0QsRUFBUyxPQUFTdFcsR0FFdEVtSSxDQUNULENBSUEsU0FBU2xCLEVBQWNwa0QsUUFDUixJQUFSQSxJQUFpQkEsRUFBTSxDQUFDLEdBQzdCLElBQUkwekQsRUFBWTF6RCxFQUFJMHpELGVBQThCLElBQWRBLElBQXVCQSxHQUFZLEdBQ3ZFLElBQUk5NUQsRUFBU29HLEVBQUlwRyxZQUF3QixJQUFYQSxJQUFvQkEsRUFBUyxTQUFVcXlELEVBQVUwSCxFQUFhQyxHQUFjLE9BQU8sQ0FBTSxHQUN2SCxJQUFJejFCLEVBQWNuK0IsRUFBSW0rQixpQkFBa0MsSUFBaEJBLElBQXlCQSxFQUFjLFNBQVVoa0IsR0FBUyxPQUFPQSxDQUFPLEdBQ2hILElBQUkwNUMsRUFBc0I3ekQsRUFBSTZ6RCx5QkFBa0QsSUFBeEJBLElBQWlDQSxFQUFzQixTQUFVQyxHQUFPLE9BQU9BLENBQUssR0FDNUksSUFBSUMsRUFBZS96RCxFQUFJK3pELGtCQUFvQyxJQUFqQkEsSUFBMEJBLEVBQWUsU0FBVTNILEVBQVFqeUMsR0FBUyxPQUFPLENBQU0sR0FDM0gsSUFBSTY1QyxFQUFvQmgwRCxFQUFJZzBELHVCQUE4QyxJQUF0QkEsSUFBK0JBLEVBQW9CLFNBQVVDLEdBQU8sT0FBT0EsQ0FBSyxHQUNwSSxJQUFJQyxFQUFlbDBELEVBQUlrMEQsa0JBQW9DLElBQWpCQSxJQUEwQkEsR0FBZSxHQUNuRixJQUFJQyxFQUFhbjBELEVBQUltMEQsZ0JBQWdDLElBQWZBLElBQXdCQSxHQUFhLEdBQzNFLElBQUlDLEVBQVNwMEQsRUFBSW8wRCxPQUVqQixZQUZ5QyxJQUFYQSxJQUFvQkEsRUFBU2pnRSxTQUVwRCxTQUFVMDFELEdBQ2YsSUFBSXdLLEVBQVlsTCxFQUFTVSxFQUFNMXZDLFlBRVQsSUFBWGk2QyxJQUlQRixHQUNGckssRUFBTS9JLFdBQVUsU0FBVW1MLEVBQVU5eEMsR0FDbEMsSUFBSW02QyxFQUFZbkwsRUFBU2h2QyxHQUV6QixHQUFJdmdCLEVBQU9xeUQsRUFBVW9JLEVBQVdDLEdBQVksQ0FDMUMsSUFBSUMsRUFBZ0JDLElBQ2hCQyxFQUFvQlosRUFBb0I1SCxHQUN4Q3YvQixFQUFVLFlBQWV1L0IsRUFBYSxLQUFJc0ksRUFFOUNHLEVBQWFOLEVBQVExbkMsRUFBU2duQyxHQUM5QlUsRUFBT2pTLElBQUksZ0JBQWlCLG9DQUFxQ2hrQixFQUFZazJCLElBQzdFRCxFQUFPalMsSUFBSSxjQUFlLG9DQUFxQ3NTLEdBQy9ETCxFQUFPalMsSUFBSSxnQkFBaUIsb0NBQXFDaGtCLEVBQVltMkIsSUFDN0VLLEVBQVdQLEVBQ2IsQ0FFQUMsRUFBWUMsQ0FDZCxJQUdFSCxHQUNGdEssRUFBTWlHLGlCQUFnQixTQUFVMUQsRUFBUWp5QyxHQUN0QyxHQUFJNDVDLEVBQWEzSCxFQUFRanlDLEdBQVEsQ0FDL0IsSUFBSW82QyxFQUFnQkMsSUFDaEJJLEVBQWtCWixFQUFrQjVILEdBQ3BDMS9CLEVBQVUsVUFBYTAvQixFQUFXLEtBQUltSSxFQUUxQ0csRUFBYU4sRUFBUTFuQyxFQUFTZ25DLEdBQzlCVSxFQUFPalMsSUFBSSxZQUFhLG9DQUFxQ3lTLEdBQzdERCxFQUFXUCxFQUNiLENBQ0YsSUFFSixDQUNGLENBRUEsU0FBU00sRUFBY04sRUFBUTFuQyxFQUFTZ25DLEdBQ3RDLElBQUlnQixFQUFlaEIsRUFDZlUsRUFBT1MsZUFDUFQsRUFBT1UsTUFHWCxJQUNFSixFQUFhMzNELEtBQUtxM0QsRUFBUTFuQyxFQUc1QixDQUZFLE1BQU9wNkIsR0FDUDhoRSxFQUFPalMsSUFBSXoxQixFQUNiLENBQ0YsQ0FFQSxTQUFTaW9DLEVBQVlQLEdBQ25CLElBQ0VBLEVBQU9XLFVBR1QsQ0FGRSxNQUFPemlFLEdBQ1A4aEUsRUFBT2pTLElBQUksZ0JBQ2IsQ0FDRixDQUVBLFNBQVNxUyxJQUNQLElBQUl2b0QsRUFBTyxJQUFJalksS0FDZixNQUFRLE1BQVN5bEQsRUFBSXh0QyxFQUFLK29ELFdBQVksR0FBTSxJQUFPdmIsRUFBSXh0QyxFQUFLZ3BELGFBQWMsR0FBTSxJQUFPeGIsRUFBSXh0QyxFQUFLaXBELGFBQWMsR0FBTSxJQUFPemIsRUFBSXh0QyxFQUFLa3BELGtCQUFtQixFQUN6SixDQU1BLFNBQVMxYixFQUFLMmIsRUFBS0MsR0FDakIsTUFBYyxJQUxNQyxFQUtERCxFQUFZRCxFQUFJeHBDLFdBQVd4OUIsT0FKdkMsSUFBS0MsTUFBTWluRSxFQUFRLEdBQUk1d0QsS0FJaEIsS0FBMEMwd0QsRUFMMUQsSUFBc0JFLENBTXRCLENBZ0JBLFFBZFksQ0FDVjNtQyxRQUFTLFFBQ1RvakMsTUFBT0EsRUFDUDlVLFNBQVVBLEVBQ1ZnSCxZQUFhQSxFQUNiaUYsU0FBVUEsRUFDVjhKLFNBQVVBLEVBQ1ZPLGFBQWNBLEVBQ2R6UixXQUFZQSxFQUNaQyxXQUFZQSxFQUNaeVIsd0JBQXlCQSxFQUN6QnBQLGFBQWNBLGt0QkN6NkNoQixNQUFNbVIsRUFBOEIsb0JBQVh2bEUsT0FFekIsU0FBU3dsRSxFQUFXenZDLEdBQ2hCLE9BQU9BLEVBQUl6RyxZQUEwQyxXQUE1QnlHLEVBQUl6dkIsT0FBT2lwQixZQUN4QyxDQUNBLE1BQU14dEIsRUFBU0QsT0FBT0MsT0FDdEIsU0FBUzBqRSxFQUFjNWdFLEVBQUltWSxHQUN2QixNQUFNMG9ELEVBQVksQ0FBQyxFQUNuQixJQUFLLE1BQU0xOUQsS0FBT2dWLEVBQVEsQ0FDdEIsTUFBTTllLEVBQVE4ZSxFQUFPaFYsR0FDckIwOUQsRUFBVTE5RCxHQUFPYyxFQUFRNUssR0FDbkJBLEVBQU0yTCxJQUFJaEYsR0FDVkEsRUFBRzNHLEVBQ2IsQ0FDQSxPQUFPd25FLENBQ1gsQ0FDQSxNQUFNQyxFQUFPLE9BS1A3OEQsRUFBVXpLLE1BQU15SyxRQUV0QixTQUFTN0UsRUFBS0MsR0FFVixNQUFNbkcsRUFBT00sTUFBTTIyQixLQUFLNU0sV0FBVzlTLE1BQU0sR0FDekNuUixRQUFRRixLQUFLMUYsTUFBTTRGLFFBQVMsQ0FBQyxzQkFBd0JELEdBQUsxRSxPQUFPekIsR0FDckUsQ0FFQSxNQUFNNm5FLEVBQW9CLE1BVzFCLFNBQVNDLEVBQVNDLEVBQVl0ckQsRUFBVXVyRCxFQUFrQixLQUN0RCxJQUFJbDhDLEVBQU1tOEMsRUFBUSxDQUFDLEVBQUdDLEVBQWUsR0FBSUMsRUFBTyxHQUdoRCxNQUFNQyxFQUFVM3JELEVBQVNqYixRQUFRLEtBQ2pDLElBQUk2bUUsRUFBWTVyRCxFQUFTamIsUUFBUSxLQWtCakMsT0FoQkk0bUUsRUFBVUMsR0FBYUQsR0FBVyxJQUNsQ0MsR0FBYSxHQUViQSxHQUFhLElBQ2J2OEMsRUFBT3JQLEVBQVNsRixNQUFNLEVBQUc4d0QsR0FDekJILEVBQWV6ckQsRUFBU2xGLE1BQU04d0QsRUFBWSxFQUFHRCxHQUFXLEVBQUlBLEVBQVUzckQsRUFBU3BjLFFBQy9FNG5FLEVBQVFGLEVBQVdHLElBRW5CRSxHQUFXLElBQ1h0OEMsRUFBT0EsR0FBUXJQLEVBQVNsRixNQUFNLEVBQUc2d0QsR0FFakNELEVBQU8xckQsRUFBU2xGLE1BQU02d0QsRUFBUzNyRCxFQUFTcGMsU0FHNUN5ckIsRUFnR0osU0FBNkJnUCxFQUFJN0QsR0FDN0IsR0FBSTZELEVBQUdsYyxXQUFXLEtBQ2QsT0FBT2tjLEVBQ1gsSUFBZ0Q3RCxFQUFLclksV0FBVyxLQUU1RCxPQURBMVksRUFBSyxtRkFBbUY0MEIsWUFBYTdELDZCQUFnQ0EsT0FDOUg2RCxFQUVYLElBQUtBLEVBQ0QsT0FBTzdELEVBQ1gsTUFBTXF4QyxFQUFlcnhDLEVBQUtqTCxNQUFNLEtBQzFCdThDLEVBQWF6dEMsRUFBRzlPLE1BQU0sS0FDNUIsSUFDSXc4QyxFQUNBQyxFQUZBQyxFQUFXSixFQUFham9FLE9BQVMsRUFHckMsSUFBS21vRSxFQUFhLEVBQUdBLEVBQWFELEVBQVdsb0UsT0FBUW1vRSxJQUdqRCxHQUZBQyxFQUFVRixFQUFXQyxHQUVMLE1BQVpDLEVBQUosQ0FHQSxHQUFnQixPQUFaQSxFQVFBLE1BTklDLEVBQVcsR0FDWEEsR0FMSSxDQVloQixPQUFRSixFQUFhL3dELE1BQU0sRUFBR214RCxHQUFVL3hELEtBQUssS0FDekMsSUFDQTR4RCxFQUVLaHhELE1BQU1peEQsR0FBY0EsSUFBZUQsRUFBV2xvRSxPQUFTLEVBQUksSUFDM0RzVyxLQUFLLElBQ2xCLENBcElXZ3lELENBQTRCLE1BQVI3OEMsRUFBZUEsRUFBT3JQLEVBQVV1ckQsR0FFcEQsQ0FDSFksU0FBVTk4QyxHQUFRbzhDLEdBQWdCLEtBQU9BLEVBQWVDLEVBQ3hEcjhDLE9BQ0FtOEMsUUFDQUUsT0FFUixDQWlCQSxTQUFTVSxFQUFVQyxFQUFVdHVDLEdBRXpCLE9BQUtBLEdBQVNzdUMsRUFBUzFwRCxjQUFjUixXQUFXNGIsRUFBS3BiLGVBRTlDMHBELEVBQVN2eEQsTUFBTWlqQixFQUFLbjZCLFNBQVcsSUFEM0J5b0UsQ0FFZixDQVNBLFNBQVNDLEVBQW9CQyxFQUFnQnZwRSxFQUFHQyxHQUM1QyxNQUFNdXBFLEVBQWF4cEUsRUFBRXlwRSxRQUFRN29FLE9BQVMsRUFDaEM4b0UsRUFBYXpwRSxFQUFFd3BFLFFBQVE3b0UsT0FBUyxFQUN0QyxPQUFRNG9FLEdBQWMsR0FDbEJBLElBQWVFLEdBQ2ZDLEVBQWtCM3BFLEVBQUV5cEUsUUFBUUQsR0FBYXZwRSxFQUFFd3BFLFFBQVFDLEtBQ25ERSxFQUEwQjVwRSxFQUFFd2YsT0FBUXZmLEVBQUV1ZixTQUN0QytwRCxFQUFldnBFLEVBQUV3b0UsU0FBV2UsRUFBZXRwRSxFQUFFdW9FLFFBQzdDeG9FLEVBQUUwb0UsT0FBU3pvRSxFQUFFeW9FLElBQ3JCLENBUUEsU0FBU2lCLEVBQWtCM3BFLEVBQUdDLEdBSTFCLE9BQVFELEVBQUU2cEUsU0FBVzdwRSxNQUFRQyxFQUFFNHBFLFNBQVc1cEUsRUFDOUMsQ0FDQSxTQUFTMnBFLEVBQTBCNXBFLEVBQUdDLEdBQ2xDLEdBQUlxRSxPQUFPc0IsS0FBSzVGLEdBQUdZLFNBQVcwRCxPQUFPc0IsS0FBSzNGLEdBQUdXLE9BQ3pDLE9BQU8sRUFDWCxJQUFLLE1BQU00SixLQUFPeEssRUFDZCxJQUFLOHBFLEVBQStCOXBFLEVBQUV3SyxHQUFNdkssRUFBRXVLLElBQzFDLE9BQU8sRUFFZixPQUFPLENBQ1gsQ0FDQSxTQUFTcy9ELEVBQStCOXBFLEVBQUdDLEdBQ3ZDLE9BQU9xTCxFQUFRdEwsR0FDVCtwRSxFQUFrQi9wRSxFQUFHQyxHQUNyQnFMLEVBQVFyTCxHQUNKOHBFLEVBQWtCOXBFLEVBQUdELEdBQ3JCQSxJQUFNQyxDQUNwQixDQVFBLFNBQVM4cEUsRUFBa0IvcEUsRUFBR0MsR0FDMUIsT0FBT3FMLEVBQVFyTCxHQUNURCxFQUFFWSxTQUFXWCxFQUFFVyxRQUFVWixFQUFFNnZCLE9BQU0sQ0FBQ252QixFQUFPTCxJQUFNSyxJQUFVVCxFQUFFSSxLQUM5QyxJQUFiTCxFQUFFWSxRQUFnQlosRUFBRSxLQUFPQyxDQUNyQyxDQTZDQSxJQUFJK3BFLEVBS0FDLEVBaUJKLFNBQVNDLEVBQWNudkMsR0FDbkIsSUFBS0EsRUFDRCxHQUFJZ3RDLEVBQVcsQ0FFWCxNQUFNb0MsRUFBU3JpRCxTQUFTOG5CLGNBQWMsUUFHdEM3VSxHQUZBQSxFQUFRb3ZDLEdBQVVBLEVBQU83c0IsYUFBYSxTQUFZLEtBRXRDcDhCLFFBQVEsa0JBQW1CLEdBQzNDLE1BRUk2WixFQUFPLElBVWYsTUFKZ0IsTUFBWkEsRUFBSyxJQUEwQixNQUFaQSxFQUFLLEtBQ3hCQSxFQUFPLElBQU1BLEdBR1VBLEVBL01ZN1osUUFBUWtuRCxFQUFtQixHQWdOdEUsRUExQ0EsU0FBVzRCLEdBQ1BBLEVBQW9CLElBQUksTUFDeEJBLEVBQXFCLEtBQUksTUFDNUIsQ0FIRCxDQUdHQSxJQUFtQkEsRUFBaUIsQ0FBQyxJQUV4QyxTQUFXQyxHQUNQQSxFQUEwQixLQUFJLE9BQzlCQSxFQUE2QixRQUFJLFVBQ2pDQSxFQUE2QixRQUFJLEVBQ3BDLENBSkQsQ0FJR0EsSUFBd0JBLEVBQXNCLENBQUMsSUFtQ2xELE1BQU1HLEVBQWlCLFVBQ3ZCLFNBQVNDLEVBQVd0dkMsRUFBTS9kLEdBQ3RCLE9BQU8rZCxFQUFLN1osUUFBUWtwRCxFQUFnQixLQUFPcHRELENBQy9DLENBV0EsTUFBTXN0RCxFQUF3QixLQUFNLENBQ2hDeG1CLEtBQU10aEQsT0FBTytuRSxZQUNidm1CLElBQUt4aEQsT0FBT2dvRSxjQWtFaEIsU0FBU0MsRUFBYXArQyxFQUFNcStDLEdBRXhCLE9BRGlCdFUsUUFBUXpwQyxNQUFReXBDLFFBQVF6cEMsTUFBTXM4QyxTQUFXeUIsR0FBUyxHQUNqRHIrQyxDQUN0QixDQUNBLE1BQU1zK0MsRUFBa0IsSUFBSWhnRSxJQTBCNUIsSUFBSWlnRSxFQUFxQixJQUFNNXRELFNBQVM2dEQsU0FBVyxLQUFPN3RELFNBQVMrZ0MsS0FLbkUsU0FBUytzQixFQUFzQi92QyxFQUFNL2QsR0FDakMsTUFBTSxTQUFFcXNELEVBQVEsT0FBRTBCLEVBQU0sS0FBRXJDLEdBQVMxckQsRUFFN0IyckQsRUFBVTV0QyxFQUFLaDVCLFFBQVEsS0FDN0IsR0FBSTRtRSxHQUFXLEVBQUcsQ0FDZCxJQUFJcUMsRUFBV3RDLEVBQUs3aUUsU0FBU2sxQixFQUFLampCLE1BQU02d0QsSUFDbEM1dEMsRUFBS2pqQixNQUFNNndELEdBQVMvbkUsT0FDcEIsRUFDRnFxRSxFQUFldkMsRUFBSzV3RCxNQUFNa3pELEdBSTlCLE1BRndCLE1BQXBCQyxFQUFhLEtBQ2JBLEVBQWUsSUFBTUEsR0FDbEI3QixFQUFVNkIsRUFBYyxHQUNuQyxDQUVBLE9BRGE3QixFQUFVQyxFQUFVdHVDLEdBQ25CZ3dDLEVBQVNyQyxDQUMzQixDQWtGQSxTQUFTd0MsRUFBV0MsRUFBTXY0QyxFQUFTdzRDLEVBQVNDLEdBQVcsRUFBT0MsR0FBZ0IsR0FDMUUsTUFBTyxDQUNISCxPQUNBdjRDLFVBQ0F3NEMsVUFDQUMsV0FDQXBDLFNBQVV6bUUsT0FBTzR6RCxRQUFReDFELE9BQ3pCMnFFLE9BQVFELEVBQWdCaEIsSUFBMEIsS0FFMUQsQ0ErRkEsU0FBU2pVLEVBQWlCdDdCLEdBRXRCLE1BQU15d0MsRUFoR1YsU0FBbUN6d0MsR0FDL0IsTUFBTSxRQUFFcTdCLEVBQU8sU0FBRXA1QyxHQUFheGEsT0FFeEIrbEUsRUFBa0IsQ0FDcEI3bkUsTUFBT29xRSxFQUFzQi92QyxFQUFNL2QsSUFFakN5dUQsRUFBZSxDQUFFL3FFLE1BQU8wMUQsRUFBUXpwQyxPQWV0QyxTQUFTKytDLEVBQWVyd0MsRUFBSTFPLEVBQU96TCxHQVUvQixNQUFNeXFELEVBQVk1d0MsRUFBS2g1QixRQUFRLEtBQ3pCNnBFLEVBQU1ELEdBQWEsR0FDbEIzdUQsRUFBUytnQyxNQUFRajJCLFNBQVM4bkIsY0FBYyxRQUNyQzdVLEVBQ0FBLEVBQUtqakIsTUFBTTZ6RCxJQUFjdHdDLEVBQzdCdXZDLElBQXVCN3ZDLEVBQU9NLEVBQ3BDLElBR0krNkIsRUFBUWwxQyxFQUFVLGVBQWlCLGFBQWF5TCxFQUFPLEdBQUlpL0MsR0FDM0RILEVBQWEvcUUsTUFBUWlzQixDQVd6QixDQVRBLE1BQU94VSxHQUVDMVIsRUFBSyxnQ0FBaUMwUixHQU0xQzZFLEVBQVNrRSxFQUFVLFVBQVksVUFBVTBxRCxFQUM3QyxDQUNKLENBNkJBLE9BMUVLSCxFQUFhL3FFLE9BQ2RnckUsRUFBZW5ELEVBQWdCN25FLE1BQU8sQ0FDbEN5cUUsS0FBTSxLQUNOdjRDLFFBQVMyMUMsRUFBZ0I3bkUsTUFDekIwcUUsUUFBUyxLQUVUbkMsU0FBVTdTLEVBQVF4MUQsT0FBUyxFQUMzQnlxRSxVQUFVLEVBR1ZFLE9BQVEsT0FDVCxHQStEQSxDQUNIdnVELFNBQVV1ckQsRUFDVjU3QyxNQUFPOCtDLEVBQ1B2cUUsS0F4QkosU0FBY202QixFQUFJMTJCLEdBR2QsTUFBTWtuRSxFQUFldG5FLEVBQU8sQ0FBQyxFQUk3QmtuRSxFQUFhL3FFLE1BQU8wMUQsRUFBUXpwQyxNQUFPLENBQy9CeStDLFFBQVMvdkMsRUFDVGt3QyxPQUFRakIsTUFFb0NsVSxFQUFRenBDLE9BQ3BEbG1CLEVBQUsseVZBSVRpbEUsRUFBZUcsRUFBYWo1QyxRQUFTaTVDLEdBQWMsR0FFbkRILEVBQWVyd0MsRUFERDkyQixFQUFPLENBQUMsRUFBRzJtRSxFQUFXM0MsRUFBZ0I3bkUsTUFBTzI2QixFQUFJLE1BQU8sQ0FBRTR0QyxTQUFVNEMsRUFBYTVDLFNBQVcsR0FBS3RrRSxJQUNyRixHQUMxQjRqRSxFQUFnQjduRSxNQUFRMjZCLENBQzVCLEVBS0luYSxRQWhDSixTQUFpQm1hLEVBQUkxMkIsR0FJakIrbUUsRUFBZXJ3QyxFQUhEOTJCLEVBQU8sQ0FBQyxFQUFHNnhELEVBQVF6cEMsTUFBT3UrQyxFQUFXTyxFQUFhL3FFLE1BQU15cUUsS0FFdEU5dkMsRUFBSW93QyxFQUFhL3FFLE1BQU0wcUUsU0FBUyxHQUFPem1FLEVBQU0sQ0FBRXNrRSxTQUFVd0MsRUFBYS9xRSxNQUFNdW9FLFlBQ2xELEdBQzFCVixFQUFnQjduRSxNQUFRMjZCLENBQzVCLEVBNEJKLENBUThCeXdDLENBRDFCL3dDLEVBQU9tdkMsRUFBY252QyxJQUVmZ3hDLEVBNUxWLFNBQTZCaHhDLEVBQU0wd0MsRUFBY2xELEVBQWlCcm5ELEdBQzlELElBQUlreEMsRUFBWSxHQUNaNFosRUFBWSxHQUdaQyxFQUFhLEtBQ2pCLE1BQU1DLEVBQWtCLEVBQUd2L0MsWUFDdkIsTUFBTTBPLEVBQUt5dkMsRUFBc0IvdkMsRUFBTS9kLFVBQ2pDd2EsRUFBTyt3QyxFQUFnQjduRSxNQUN2QnlyRSxFQUFZVixFQUFhL3FFLE1BQy9CLElBQUlncUUsRUFBUSxFQUNaLEdBQUkvOUMsRUFBTyxDQUlQLEdBSEE0N0MsRUFBZ0I3bkUsTUFBUTI2QixFQUN4Qm93QyxFQUFhL3FFLE1BQVFpc0IsRUFFakJzL0MsR0FBY0EsSUFBZXowQyxFQUU3QixZQURBeTBDLEVBQWEsTUFHakJ2QixFQUFReUIsRUFBWXgvQyxFQUFNczhDLFNBQVdrRCxFQUFVbEQsU0FBVyxDQUM5RCxNQUVJL25ELEVBQVFtYSxHQVFaKzJCLEVBQVU3bUQsU0FBUSttRCxJQUNkQSxFQUFTaVcsRUFBZ0I3bkUsTUFBTzgyQixFQUFNLENBQ2xDa3pDLFFBQ0FuZ0UsS0FBTXkvRCxFQUFlbHBFLElBQ3JCc3JFLFVBQVcxQixFQUNMQSxFQUFRLEVBQ0pULEVBQW9CbUIsUUFDcEJuQixFQUFvQmtCLEtBQ3hCbEIsRUFBb0JvQyxTQUM1QixHQUNKLEVBZ0JOLFNBQVNDLElBQ0wsTUFBTSxRQUFFbFcsR0FBWTV6RCxPQUNmNHpELEVBQVF6cEMsT0FFYnlwQyxFQUFRNE8sYUFBYXpnRSxFQUFPLENBQUMsRUFBRzZ4RCxFQUFRenBDLE1BQU8sQ0FBRTQrQyxPQUFRakIsTUFBNEIsR0FDekYsQ0FXQSxPQUZBOW5FLE9BQU80NEMsaUJBQWlCLFdBQVk4d0IsR0FDcEMxcEUsT0FBTzQ0QyxpQkFBaUIsZUFBZ0JreEIsR0FDakMsQ0FDSEMsZUEvQkosV0FDSU4sRUFBYTFELEVBQWdCN25FLEtBQ2pDLEVBOEJJOHJFLE9BN0JKLFNBQWdCeDhELEdBRVpvaUQsRUFBVWx4RCxLQUFLOE8sR0FDZixNQUFNeThELEVBQVcsS0FDYixNQUFNNXFFLEVBQVF1d0QsRUFBVXJ3RCxRQUFRaU8sR0FDNUJuTyxHQUFTLEdBQ1R1d0QsRUFBVXA0QyxPQUFPblksRUFBTyxFQUFFLEVBR2xDLE9BREFtcUUsRUFBVTlxRSxLQUFLdXJFLEdBQ1JBLENBQ1gsRUFvQklDLFFBYkosV0FDSSxJQUFLLE1BQU1ELEtBQVlULEVBQ25CUyxJQUNKVCxFQUFZLEdBQ1p4cEUsT0FBT2svQyxvQkFBb0IsV0FBWXdxQixHQUN2QzFwRSxPQUFPay9DLG9CQUFvQixlQUFnQjRxQixFQUMvQyxFQVNKLENBK0c2QkssQ0FBb0I1eEMsRUFBTXl3QyxFQUFrQjcrQyxNQUFPNitDLEVBQWtCeHVELFNBQVV3dUQsRUFBa0J0cUQsU0FNcEgwckQsRUFBZ0Jyb0UsRUFBTyxDQUV6QnlZLFNBQVUsR0FDVitkLE9BQ0E4eEMsR0FUSixTQUFZbkMsRUFBT29DLEdBQW1CLEdBQzdCQSxHQUNEZixFQUFpQlEsaUJBQ3JCblcsUUFBUXlXLEdBQUduQyxFQUNmLEVBTUlMLFdBQVlBLEVBQVdwZ0UsS0FBSyxLQUFNOHdCLElBQ25DeXdDLEVBQW1CTyxHQVN0QixPQVJBem5FLE9BQU9pMkIsZUFBZXF5QyxFQUFlLFdBQVksQ0FDN0NweUMsWUFBWSxFQUNaaDFCLElBQUssSUFBTWdtRSxFQUFrQnh1RCxTQUFTdGMsUUFFMUM0RCxPQUFPaTJCLGVBQWVxeUMsRUFBZSxRQUFTLENBQzFDcHlDLFlBQVksRUFDWmgxQixJQUFLLElBQU1nbUUsRUFBa0I3K0MsTUFBTWpzQixRQUVoQ2tzRSxDQUNYLENBU0EsU0FBU0csRUFBb0JoeUMsRUFBTyxJQUNoQyxJQUFJcTNCLEVBQVksR0FDWjc4QyxFQUFRLENBbFlGLElBbVlOMHpELEVBQVcsRUFFZixTQUFTK0QsRUFBWWh3RCxHQUNqQmlzRCxJQUNJQSxJQUFhMXpELEVBQU0zVSxRQU1uQjJVLEVBQU15RSxPQUFPaXZELEdBSmIxekQsRUFBTXJVLEtBQUs4YixFQU9uQixDQVdBLE1BQU00dkQsRUFBZ0IsQ0FFbEI1dkQsU0E3Wk0sR0ErWk4yUCxNQUFPLENBQUMsRUFDUm9PLEtBNUJKQSxFQUFPbXZDLEVBQWNudkMsR0E2QmpCc3ZDLFdBQVlBLEVBQVdwZ0UsS0FBSyxLQUFNOHdCLEdBQ2xDN1osUUFBUW1hLEdBRUo5bEIsRUFBTXlFLE9BQU9pdkQsSUFBWSxHQUN6QitELEVBQVkzeEMsRUFDaEIsRUFDQW42QixLQUFLbTZCLEVBQUkxMkIsR0FDTHFvRSxFQUFZM3hDLEVBQ2hCLEVBQ0FteEMsT0FBT3g4RCxJQUNIb2lELEVBQVVseEQsS0FBSzhPLEdBQ1IsS0FDSCxNQUFNbk8sRUFBUXV3RCxFQUFVcndELFFBQVFpTyxHQUM1Qm5PLEdBQVMsR0FDVHV3RCxFQUFVcDRDLE9BQU9uWSxFQUFPLEVBQUUsR0FHdEM2cUUsVUFDSXRhLEVBQVksR0FDWjc4QyxFQUFRLENBcGJOLElBcWJGMHpELEVBQVcsQ0FDZixFQUNBNEQsR0FBR25DLEVBQU91QyxHQUFnQixHQUN0QixNQUFNejFDLEVBQU81ekIsS0FBS29aLFNBQ1pvdkQsRUFJTjFCLEVBQVEsRUFBSVQsRUFBb0JrQixLQUFPbEIsRUFBb0JtQixRQUMzRG5DLEVBQVczOEIsS0FBSzdaLElBQUksRUFBRzZaLEtBQUtDLElBQUkwOEIsRUFBV3lCLEVBQU9uMUQsRUFBTTNVLE9BQVMsSUFDN0Rxc0UsR0E5Q1osU0FBMEI1eEMsRUFBSTdELEdBQU0sVUFBRTQwQyxFQUFTLE1BQUUxQixJQUM3QyxNQUFNenhELEVBQU8sQ0FDVG16RCxZQUNBMUIsUUFDQW5nRSxLQUFNeS9ELEVBQWVscEUsS0FFekIsSUFBSyxNQUFNa1AsS0FBWW9pRCxFQUNuQnBpRCxFQUFTcXJCLEVBQUk3RCxFQUFNdmUsRUFFM0IsQ0FzQ1k2ekQsQ0FBaUJscEUsS0FBS29aLFNBQVV3YSxFQUFNLENBQ2xDNDBDLFlBQ0ExQixTQUdaLEdBTUosT0FKQXBtRSxPQUFPaTJCLGVBQWVxeUMsRUFBZSxXQUFZLENBQzdDcHlDLFlBQVksRUFDWmgxQixJQUFLLElBQU0rUCxFQUFNMHpELEtBRWQyRCxDQUNYLENBMEJBLFNBQVNNLEVBQXFCbnlDLEdBVzFCLE9BUEFBLEVBQU8vZCxTQUFTK2dDLEtBQU9oakIsR0FBUS9kLFNBQVNxc0QsU0FBV3JzRCxTQUFTK3RELE9BQVMsSUFFM0RsbEUsU0FBUyxPQUNmazFCLEdBQVEsS0FDb0NBLEVBQUs0SixTQUFTLE9BQVU1SixFQUFLNEosU0FBUyxNQUNsRmwrQixFQUFLLHNDQUFzQ3MwQixpQkFBb0JBLEVBQUs3WixRQUFRLE9BQVEsVUFFakZtMUMsRUFBaUJ0N0IsRUFDNUIsQ0FLQSxTQUFTb3lDLEVBQVlsMUQsR0FDakIsTUFBdUIsaUJBQVRBLEdBQXFDLGlCQUFUQSxDQUM5QyxDQWlCQSxNQUFNbTFELEVBQTRCLENBQzlCL2dELEtBQU0sSUFDTnBVLFVBQU01UixFQUNObVosT0FBUSxDQUFDLEVBQ1RncEQsTUFBTyxDQUFDLEVBQ1JFLEtBQU0sR0FDTlMsU0FBVSxJQUNWTSxRQUFTLEdBQ1R4aUIsS0FBTSxDQUFDLEVBQ1BvbUIsb0JBQWdCaG5FLEdBR2RpbkUsRUFBMEJ4a0UsT0FBaUQsc0JBS2pGLElBQUl5a0UsR0FDSixTQUFXQSxHQUtQQSxFQUFzQkEsRUFBK0IsUUFBSSxHQUFLLFVBSzlEQSxFQUFzQkEsRUFBaUMsVUFBSSxHQUFLLFlBS2hFQSxFQUFzQkEsRUFBa0MsV0FBSSxJQUFNLFlBQ3JFLENBaEJELENBZ0JHQSxJQUEwQkEsRUFBd0IsQ0FBQyxJQUV0RCxNQUFNQyxFQUFvQixDQUN0QixFQUFzQyxFQUFDLFNBQUV4d0QsRUFBUSxnQkFBRXVyRCxLQUN4QyxrQkFBa0IzakUsS0FBS08sVUFBVTZYLEtBQVl1ckQsRUFDOUMscUJBQXVCM2pFLEtBQUtPLFVBQVVvakUsR0FDdEMsS0FFVixFQUE4QyxFQUFDLEtBQUUvd0MsRUFBSSxHQUFFNkQsS0FDNUMsb0JBQW9CN0QsRUFBSzJ4QyxpQkFpQ3hDLFNBQXdCOXRDLEdBQ3BCLEdBQWtCLGlCQUFQQSxFQUNQLE9BQU9BLEVBQ1gsR0FBSSxTQUFVQSxFQUNWLE9BQU9BLEVBQUdoUCxLQUNkLE1BQU1yUCxFQUFXLENBQUMsRUFDbEIsSUFBSyxNQUFNeFMsS0FBT2lqRSxFQUNWampFLEtBQU82d0IsSUFDUHJlLEVBQVN4UyxHQUFPNndCLEVBQUc3d0IsSUFFM0IsT0FBTzVGLEtBQUtPLFVBQVU2WCxFQUFVLEtBQU0sRUFDMUMsQ0E1Q3lEMHdELENBQWVyeUMsOEJBRXBFLEVBQXVDLEVBQUMsS0FBRTdELEVBQUksR0FBRTZELEtBQ3JDLDRCQUE0QjdELEVBQUsyeEMsaUJBQWlCOXRDLEVBQUc4dEMsb0NBRWhFLEVBQXlDLEVBQUMsS0FBRTN4QyxFQUFJLEdBQUU2RCxLQUN2Qyw4QkFBOEI3RCxFQUFLMnhDLGlCQUFpQjl0QyxFQUFHOHRDLG1DQUVsRSxHQUEyQyxFQUFDLEtBQUUzeEMsRUFBSSxHQUFFNkQsS0FDekMsc0RBQXNEN0QsRUFBSzJ4QyxjQUcxRSxTQUFTd0UsRUFBa0JwakUsRUFBTWlWLEdBR3pCLE9BQU9qYixFQUFPLElBQUlta0IsTUFBTThrRCxFQUFrQmpqRSxHQUFNaVYsSUFBVSxDQUN0RGpWLE9BQ0EsQ0FBQytpRSxJQUEwQixHQUM1Qjl0RCxFQVFYLENBQ0EsU0FBU291RCxFQUFvQjEwRCxFQUFPM08sR0FDaEMsT0FBUTJPLGFBQWlCd1AsT0FDckI0a0QsS0FBMkJwMEQsSUFDbEIsTUFBUjNPLE1BQW1CMk8sRUFBTTNPLEtBQU9BLEdBQ3pDLENBQ0EsTUFBTWtqRSxFQUFrQixDQUFDLFNBQVUsUUFBUyxRQWV0Q0ksRUFBcUIsU0FDckJDLEVBQTJCLENBQzdCQyxXQUFXLEVBQ1hyWCxRQUFRLEVBQ1J6OEMsT0FBTyxFQUNQQyxLQUFLLEdBR0g4ekQsRUFBaUIsc0JBdUt2QixTQUFTQyxFQUFrQmp1RSxFQUFHQyxHQUMxQixJQUFJSSxFQUFJLEVBQ1IsS0FBT0EsRUFBSUwsRUFBRVksUUFBVVAsRUFBSUosRUFBRVcsUUFBUSxDQUNqQyxNQUFNdWEsRUFBT2xiLEVBQUVJLEdBQUtMLEVBQUVLLEdBRXRCLEdBQUk4YSxFQUNBLE9BQU9BLEVBQ1g5YSxHQUNKLENBR0EsT0FBSUwsRUFBRVksT0FBU1gsRUFBRVcsT0FDTyxJQUFiWixFQUFFWSxRQUF5QixLQUFUWixFQUFFLElBQ3BCLEVBQ0QsRUFFREEsRUFBRVksT0FBU1gsRUFBRVcsT0FDRSxJQUFiWCxFQUFFVyxRQUF5QixLQUFUWCxFQUFFLEdBQ3JCLEdBQ0MsRUFFSixDQUNYLENBUUEsU0FBU2l1RSxFQUF1Qmx1RSxFQUFHQyxHQUMvQixJQUFJSSxFQUFJLEVBQ1IsTUFBTTh0RSxFQUFTbnVFLEVBQUVvdUUsTUFDWEMsRUFBU3B1RSxFQUFFbXVFLE1BQ2pCLEtBQU8vdEUsRUFBSTh0RSxFQUFPdnRFLFFBQVVQLEVBQUlndUUsRUFBT3p0RSxRQUFRLENBQzNDLE1BQU11ZixFQUFPOHRELEVBQWtCRSxFQUFPOXRFLEdBQUlndUUsRUFBT2h1RSxJQUVqRCxHQUFJOGYsRUFDQSxPQUFPQSxFQUNYOWYsR0FDSixDQUNBLEdBQWdELElBQTVDaXNDLEtBQUtnaUMsSUFBSUQsRUFBT3p0RSxPQUFTdXRFLEVBQU92dEUsUUFBZSxDQUMvQyxHQUFJMnRFLEVBQW9CSixHQUNwQixPQUFPLEVBQ1gsR0FBSUksRUFBb0JGLEdBQ3BCLE9BQVEsQ0FDaEIsQ0FFQSxPQUFPQSxFQUFPenRFLE9BQVN1dEUsRUFBT3Z0RSxNQU9sQyxDQU9BLFNBQVMydEUsRUFBb0JILEdBQ3pCLE1BQU16bUUsRUFBT3ltRSxFQUFNQSxFQUFNeHRFLE9BQVMsR0FDbEMsT0FBT3d0RSxFQUFNeHRFLE9BQVMsR0FBSytHLEVBQUtBLEVBQUsvRyxPQUFTLEdBQUssQ0FDdkQsQ0FFQSxNQUFNNHRFLEVBQWEsQ0FDZmprRSxLQUFNLEVBQ043SixNQUFPLElBRUwrdEUsRUFBaUIsZUFvSnZCLFNBQVNDLEVBQXlCenlELEVBQVEvVSxFQUFRMEMsR0FDOUMsTUFBTStrRSxFQTNYVixTQUF3QnJpRCxFQUFVc2lELEdBQzlCLE1BQU1obEUsRUFBVXJGLEVBQU8sQ0FBQyxFQUFHdXBFLEVBQTBCYyxHQUUvQ1IsRUFBUSxHQUVkLElBQUloNkMsRUFBVXhxQixFQUFRcVEsTUFBUSxJQUFNLEdBRXBDLE1BQU1yVSxFQUFPLEdBQ2IsSUFBSyxNQUFNb2pFLEtBQVcxOEMsRUFBVSxDQUU1QixNQUFNdWlELEVBQWdCN0YsRUFBUXBvRSxPQUFTLEdBQUssQ0FBQyxJQUV6Q2dKLEVBQVE4c0QsU0FBV3NTLEVBQVFwb0UsU0FDM0J3ekIsR0FBVyxLQUNmLElBQUssSUFBSTA2QyxFQUFhLEVBQUdBLEVBQWE5RixFQUFRcG9FLE9BQVFrdUUsSUFBYyxDQUNoRSxNQUFNQyxFQUFRL0YsRUFBUThGLEdBRXRCLElBQUlFLEVBQWtCLElBQ2pCcGxFLEVBQVFta0UsVUFBWSxJQUEwQyxHQUNuRSxHQUFtQixJQUFmZ0IsRUFBTXhrRSxLQUVEdWtFLElBQ0QxNkMsR0FBVyxLQUNmQSxHQUFXMjZDLEVBQU1ydUUsTUFBTXdnQixRQUFROHNELEVBQWdCLFFBQy9DZ0IsR0FBbUIsUUFFbEIsR0FBbUIsSUFBZkQsRUFBTXhrRSxLQUFrQyxDQUM3QyxNQUFNLE1BQUU3SixFQUFLLFdBQUV1dUUsRUFBVSxTQUFFQyxFQUFRLE9BQUVDLEdBQVdKLEVBQ2hEbnBFLEVBQUsxRSxLQUFLLENBQ04rVyxLQUFNdlgsRUFDTnV1RSxhQUNBQyxhQUVKLE1BQU03VyxFQUFLOFcsR0FBa0J0QixFQUU3QixHQUFJeFYsSUFBT3dWLEVBQW9CLENBQzNCbUIsR0FBbUIsR0FFbkIsSUFDSSxJQUFJejhDLE9BQU8sSUFBSThsQyxLQUtuQixDQUhBLE1BQU9sZ0QsR0FDSCxNQUFNLElBQUl1USxNQUFNLG9DQUFvQ2hvQixPQUFXMjNELE9BQzNEbGdELEVBQUkrbUIsUUFDWixDQUNKLENBRUEsSUFBSWt3QyxFQUFhSCxFQUFhLE9BQU81VyxZQUFhQSxRQUFXLElBQUlBLEtBRTVEeVcsSUFDRE0sRUFHSUYsR0FBWWxHLEVBQVFwb0UsT0FBUyxFQUN2QixPQUFPd3VFLEtBQ1AsSUFBTUEsR0FDaEJGLElBQ0FFLEdBQWMsS0FDbEJoN0MsR0FBV2c3QyxFQUNYSixHQUFtQixHQUNmRSxJQUNBRixJQUFvQixHQUNwQkMsSUFDQUQsSUFBb0IsSUFDYixPQUFQM1csSUFDQTJXLElBQW9CLEdBQzVCLENBQ0FILEVBQWMzdEUsS0FBSzh0RSxFQUN2QixDQUdBWixFQUFNbHRFLEtBQUsydEUsRUFDZixDQUVBLEdBQUlqbEUsRUFBUThzRCxRQUFVOXNELEVBQVFzUSxJQUFLLENBQy9CLE1BQU03WixFQUFJK3RFLEVBQU14dEUsT0FBUyxFQUN6Qnd0RSxFQUFNL3RFLEdBQUcrdEUsRUFBTS90RSxHQUFHTyxPQUFTLElBQU0saUJBQ3JDLENBRUtnSixFQUFROHNELFNBQ1R0aUMsR0FBVyxNQUNYeHFCLEVBQVFzUSxJQUNSa2EsR0FBVyxJQUVOeHFCLEVBQVE4c0QsU0FDYnRpQyxHQUFXLFdBQ2YsTUFBTWlrQyxFQUFLLElBQUk5bEMsT0FBTzZCLEVBQVN4cUIsRUFBUW1rRSxVQUFZLEdBQUssS0F3RHhELE1BQU8sQ0FDSDFWLEtBQ0ErVixRQUNBeG9FLE9BQ0FmLE1BM0RKLFNBQWV3bkIsR0FDWCxNQUFNNXFCLEVBQVE0cUIsRUFBSzVxQixNQUFNNDJELEdBQ25CNzRDLEVBQVMsQ0FBQyxFQUNoQixJQUFLL2QsRUFDRCxPQUFPLEtBQ1gsSUFBSyxJQUFJcEIsRUFBSSxFQUFHQSxFQUFJb0IsRUFBTWIsT0FBUVAsSUFBSyxDQUNuQyxNQUFNSyxFQUFRZSxFQUFNcEIsSUFBTSxHQUNwQm1LLEVBQU01RSxFQUFLdkYsRUFBSSxHQUNyQm1mLEVBQU9oVixFQUFJeU4sTUFBUXZYLEdBQVM4SixFQUFJeWtFLFdBQWF2dUUsRUFBTTZyQixNQUFNLEtBQU83ckIsQ0FDcEUsQ0FDQSxPQUFPOGUsQ0FDWCxFQWlESXJhLFVBaERKLFNBQW1CcWEsR0FDZixJQUFJNk0sRUFBTyxHQUVQZ2pELEdBQXVCLEVBQzNCLElBQUssTUFBTXJHLEtBQVcxOEMsRUFBVSxDQUN2QitpRCxHQUF5QmhqRCxFQUFLc1ksU0FBUyxPQUN4Q3RZLEdBQVEsS0FDWmdqRCxHQUF1QixFQUN2QixJQUFLLE1BQU1OLEtBQVMvRixFQUNoQixHQUFtQixJQUFmK0YsRUFBTXhrRSxLQUNOOGhCLEdBQVEwaUQsRUFBTXJ1RSxXQUViLEdBQW1CLElBQWZxdUUsRUFBTXhrRSxLQUFrQyxDQUM3QyxNQUFNLE1BQUU3SixFQUFLLFdBQUV1dUUsRUFBVSxTQUFFQyxHQUFhSCxFQUNsQ08sRUFBUTV1RSxLQUFTOGUsRUFBU0EsRUFBTzllLEdBQVMsR0FDaEQsR0FBSTRLLEVBQVFna0UsS0FBV0wsRUFDbkIsTUFBTSxJQUFJdm1ELE1BQU0sbUJBQW1CaG9CLDhEQUV2QyxNQUFNdXhDLEVBQU8zbUMsRUFBUWdrRSxHQUNmQSxFQUFNcDRELEtBQUssS0FDWG80RCxFQUNOLElBQUtyOUIsRUFBTSxDQUNQLElBQUlpOUIsRUFZQSxNQUFNLElBQUl4bUQsTUFBTSwyQkFBMkJob0IsTUFWdkNzb0UsRUFBUXBvRSxPQUFTLElBRWJ5ckIsRUFBS3NZLFNBQVMsS0FDZHRZLEVBQU9BLEVBQUt2VSxNQUFNLEdBQUksR0FHdEJ1M0QsR0FBdUIsRUFLdkMsQ0FDQWhqRCxHQUFRNGxCLENBQ1osQ0FFUixDQUVBLE9BQU81bEIsR0FBUSxHQUNuQixFQVFKLENBc09tQmtqRCxDQWpKbkIsU0FBc0JsakQsR0FDbEIsSUFBS0EsRUFDRCxNQUFPLENBQUMsSUFDWixHQUFhLE1BQVRBLEVBQ0EsTUFBTyxDQUFDLENBQUNtaUQsSUFDYixJQUFLbmlELEVBQUtsTixXQUFXLEtBQ2pCLE1BQU0sSUFBSXVKLE1BQ0oseUNBQXlDMkQsa0JBQXFCQSxPQUl4RSxTQUFTbWpELEVBQU10d0MsR0FDWCxNQUFNLElBQUl4VyxNQUFNLFFBQVFpRSxPQUFXdFAsT0FBWTZoQixJQUNuRCxDQUNBLElBQUl2UyxFQUFRLEVBQ1I4aUQsRUFBZ0I5aUQsRUFDcEIsTUFBTStpRCxFQUFTLEdBR2YsSUFBSTFHLEVBQ0osU0FBUzJHLElBQ0QzRyxHQUNBMEcsRUFBT3h1RSxLQUFLOG5FLEdBQ2hCQSxFQUFVLEVBQ2QsQ0FFQSxJQUVJNEcsRUFGQXZ2RSxFQUFJLEVBSUpnZCxFQUFTLEdBRVR3eUQsRUFBVyxHQUNmLFNBQVNDLElBQ0F6eUQsSUFFUyxJQUFWc1AsRUFDQXE4QyxFQUFROW5FLEtBQUssQ0FDVHFKLEtBQU0sRUFDTjdKLE1BQU8yYyxJQUdJLElBQVZzUCxHQUNLLElBQVZBLEdBQ1UsSUFBVkEsR0FDSXE4QyxFQUFRcG9FLE9BQVMsSUFBZSxNQUFUZ3ZFLEdBQXlCLE1BQVRBLElBQ3ZDSixFQUFNLHVCQUF1Qm55RCxpREFDakMyckQsRUFBUTluRSxLQUFLLENBQ1RxSixLQUFNLEVBQ043SixNQUFPMmMsRUFDUDh4RCxPQUFRVSxFQUNSWixXQUFxQixNQUFUVyxHQUF5QixNQUFUQSxFQUM1QlYsU0FBbUIsTUFBVFUsR0FBeUIsTUFBVEEsS0FJOUJKLEVBQU0sbUNBRVZueUQsRUFBUyxHQUNiLENBQ0EsU0FBUzB5RCxJQUNMMXlELEdBQVV1eUQsQ0FDZCxDQUNBLEtBQU92dkUsRUFBSWdzQixFQUFLenJCLFFBRVosR0FEQWd2RSxFQUFPdmpELEVBQUtoc0IsS0FDQyxPQUFUdXZFLEdBQTJCLElBQVZqakQsRUFLckIsT0FBUUEsR0FDSixLQUFLLEVBQ1ksTUFBVGlqRCxHQUNJdnlELEdBQ0F5eUQsSUFFSkgsS0FFYyxNQUFUQyxHQUNMRSxJQUNBbmpELEVBQVEsR0FHUm9qRCxJQUVKLE1BQ0osS0FBSyxFQUNEQSxJQUNBcGpELEVBQVE4aUQsRUFDUixNQUNKLEtBQUssRUFDWSxNQUFURyxFQUNBampELEVBQVEsRUFFSDhoRCxFQUFlcDZDLEtBQUt1N0MsR0FDekJHLEtBR0FELElBQ0FuakQsRUFBUSxFQUVLLE1BQVRpakQsR0FBeUIsTUFBVEEsR0FBeUIsTUFBVEEsR0FDaEN2dkUsS0FFUixNQUNKLEtBQUssRUFNWSxNQUFUdXZFLEVBRXFDLE1BQWpDQyxFQUFTQSxFQUFTanZFLE9BQVMsR0FDM0JpdkUsRUFBV0EsRUFBUy8zRCxNQUFNLEdBQUksR0FBSzgzRCxFQUVuQ2pqRCxFQUFRLEVBR1prakQsR0FBWUQsRUFFaEIsTUFDSixLQUFLLEVBRURFLElBQ0FuakQsRUFBUSxFQUVLLE1BQVRpakQsR0FBeUIsTUFBVEEsR0FBeUIsTUFBVEEsR0FDaEN2dkUsSUFDSnd2RSxFQUFXLEdBQ1gsTUFDSixRQUNJTCxFQUFNLHNCQWxFVkMsRUFBZ0I5aUQsRUFDaEJBLEVBQVEsRUEwRWhCLE9BTGMsSUFBVkEsR0FDQTZpRCxFQUFNLHVDQUF1Q255RCxNQUNqRHl5RCxJQUNBSCxJQUVPRCxDQUNYLENBR2tDTSxDQUFhL3pELEVBQU9vUSxNQUFPemlCLEdBRVosQ0FDekMsTUFBTXFtRSxFQUFlLElBQUk3bkUsSUFDekIsSUFBSyxNQUFNb0MsS0FBT21rRSxFQUFPL29FLEtBQ2pCcXFFLEVBQWFubEUsSUFBSU4sRUFBSXlOLE9BQ3JCeFIsRUFBSyxzQ0FBc0MrRCxFQUFJeU4sbUJBQW1CZ0UsRUFBT29RLGtFQUM3RTRqRCxFQUFhbGxFLElBQUlQLEVBQUl5TixLQUU3QixDQUNBLE1BQU1pNEQsRUFBVTNyRSxFQUFPb3FFLEVBQVEsQ0FDM0IxeUQsU0FDQS9VLFNBRUFrZCxTQUFVLEdBQ1Y0eEMsTUFBTyxLQVNYLE9BUEk5dUQsSUFJS2dwRSxFQUFRajBELE9BQU80dEQsVUFBYTNpRSxFQUFPK1UsT0FBTzR0RCxTQUMzQzNpRSxFQUFPa2QsU0FBU2xqQixLQUFLZ3ZFLEdBRXRCQSxDQUNYLENBU0EsU0FBU0MsRUFBb0JyYSxFQUFRc2EsR0FFakMsTUFBTUMsRUFBVyxHQUNYQyxFQUFhLElBQUkzbEUsSUFLdkIsU0FBUzRsRSxFQUFTdDBELEVBQVEvVSxFQUFRc3BFLEdBRTlCLE1BQU1DLEdBQWFELEVBQ2JFLEVBa09kLFNBQThCejBELEdBQzFCLE1BQU8sQ0FDSG9RLEtBQU1wUSxFQUFPb1EsS0FDYnNrRCxTQUFVMTBELEVBQU8wMEQsU0FDakIxNEQsS0FBTWdFLEVBQU9oRSxLQUNiZ3ZDLEtBQU1ockMsRUFBT2dyQyxNQUFRLENBQUMsRUFDdEI0aUIsYUFBU3hqRSxFQUNUMHBCLFlBQWE5VCxFQUFPOFQsWUFDcEJyWSxNQUFPazVELEVBQXFCMzBELEdBQzVCbUksU0FBVW5JLEVBQU9tSSxVQUFZLEdBQzdCaEksVUFBVyxDQUFDLEVBQ1p5MEQsWUFBYSxJQUFJem9FLElBQ2pCMG9FLGFBQWMsSUFBSTFvRSxJQUNsQjJvRSxlQUFnQixDQUFDLEVBQ2pCdDBDLFdBQVksZUFBZ0J4Z0IsRUFDdEJBLEVBQU93Z0IsWUFBYyxLQUNyQnhnQixFQUFPM0YsV0FBYSxDQUFFNlIsUUFBU2xNLEVBQU8zRixXQUVwRCxDQXBQcUMwNkQsQ0FBcUIvMEQsSUErVDFELFNBQTRDeTBELEVBQXNCeHBFLEdBQzFEQSxHQUNBQSxFQUFPK1UsT0FBT2hFLE9BQ2J5NEQsRUFBcUJ6NEQsT0FDckJ5NEQsRUFBcUJya0QsTUFDdEI1bEIsRUFBSyxvQkFBb0JpSSxPQUFPeEgsRUFBTytVLE9BQU9oRSxrUEFFdEQsRUFwVVlnNUQsQ0FBbUNQLEVBQXNCeHBFLEdBRzdEd3BFLEVBQXFCN0csUUFBVTJHLEdBQWtCQSxFQUFldjBELE9BQ2hFLE1BQU1yUyxFQUFVd3hCLEdBQWFnMUMsRUFBZW4wRCxHQUV0Q2kxRCxFQUFvQixDQUN0QlIsR0FFSixHQUFJLFVBQVd6MEQsRUFBUSxDQUNuQixNQUFNazFELEVBQWtDLGlCQUFqQmwxRCxFQUFPKzVDLE1BQXFCLENBQUMvNUMsRUFBTys1QyxPQUFTLzVDLEVBQU8rNUMsTUFDM0UsSUFBSyxNQUFNQSxLQUFTbWIsRUFDaEJELEVBQWtCaHdFLEtBQUtxRCxFQUFPLENBQUMsRUFBR21zRSxFQUFzQixDQUdwRGowQyxXQUFZK3pDLEVBQ05BLEVBQWV2MEQsT0FBT3dnQixXQUN0QmkwQyxFQUFxQmowQyxXQUMzQnBRLEtBQU0ycEMsRUFFTjZULFFBQVMyRyxFQUNIQSxFQUFldjBELE9BQ2Z5MEQsSUFLbEIsQ0FDQSxJQUFJUixFQUNBa0IsRUFDSixJQUFLLE1BQU1DLEtBQW9CSCxFQUFtQixDQUM5QyxNQUFNLEtBQUU3a0QsR0FBU2dsRCxFQUlqQixHQUFJbnFFLEdBQXNCLE1BQVptbEIsRUFBSyxHQUFZLENBQzNCLE1BQU1pbEQsRUFBYXBxRSxFQUFPK1UsT0FBT29RLEtBQzNCa2xELEVBQXdELE1BQXRDRCxFQUFXQSxFQUFXMXdFLE9BQVMsR0FBYSxHQUFLLElBQ3pFeXdFLEVBQWlCaGxELEtBQ2JubEIsRUFBTytVLE9BQU9vUSxNQUFRQSxHQUFRa2xELEVBQWtCbGxELEVBQ3hELENBQ0EsR0FBeUUsTUFBMUJnbEQsRUFBaUJobEQsS0FDNUQsTUFBTSxJQUFJM0QsTUFBTSxnTEF5QnBCLEdBckJBd25ELEVBQVV4QixFQUF5QjJDLEVBQWtCbnFFLEVBQVEwQyxHQUNkMUMsR0FBc0IsTUFBWm1sQixFQUFLLElBQzFEbWxELEdBQWlDdEIsRUFBU2hwRSxHQUcxQ3NwRSxHQUNBQSxFQUFleGEsTUFBTTkwRCxLQUFLZ3ZFLEdBRXRCdUIsR0FBZ0JqQixFQUFnQk4sS0FLcENrQixFQUFrQkEsR0FBbUJsQixFQUNqQ2tCLElBQW9CbEIsR0FDcEJrQixFQUFnQnBiLE1BQU05MEQsS0FBS2d2RSxHQUczQk8sR0FBYXgwRCxFQUFPaEUsT0FBU3k1RCxHQUFjeEIsSUFDM0N5QixFQUFZMTFELEVBQU9oRSxPQUV2Qnk0RCxFQUFxQnRzRCxTQUFVLENBQy9CLE1BQU1BLEVBQVdzc0QsRUFBcUJ0c0QsU0FDdEMsSUFBSyxJQUFJL2pCLEVBQUksRUFBR0EsRUFBSStqQixFQUFTeGpCLE9BQVFQLElBQ2pDa3dFLEVBQVNuc0QsRUFBUy9qQixHQUFJNnZFLEVBQVNNLEdBQWtCQSxFQUFlcHNELFNBQVMvakIsR0FFakYsQ0FHQW13RSxFQUFpQkEsR0FBa0JOLEVBS25DMEIsRUFBYzFCLEVBQ2xCLENBQ0EsT0FBT2tCLEVBQ0QsS0FFRU8sRUFBWVAsRUFBZ0IsRUFFOUJqSixDQUNWLENBQ0EsU0FBU3dKLEVBQVlFLEdBQ2pCLEdBQUkxRSxFQUFZMEUsR0FBYSxDQUN6QixNQUFNM0IsRUFBVUksRUFBVzlxRSxJQUFJcXNFLEdBQzNCM0IsSUFDQUksRUFBVzltRSxPQUFPcW9FLEdBQ2xCeEIsRUFBU3IyRCxPQUFPcTJELEVBQVN0dUUsUUFBUW11RSxHQUFVLEdBQzNDQSxFQUFROXJELFNBQVM3WSxRQUFRb21FLEdBQ3pCekIsRUFBUWxhLE1BQU16cUQsUUFBUW9tRSxHQUU5QixLQUNLLENBQ0QsTUFBTTl2RSxFQUFRd3VFLEVBQVN0dUUsUUFBUTh2RSxHQUMzQmh3RSxHQUFTLElBQ1R3dUUsRUFBU3IyRCxPQUFPblksRUFBTyxHQUNuQmd3RSxFQUFXNTFELE9BQU9oRSxNQUNsQnE0RCxFQUFXOW1FLE9BQU9xb0UsRUFBVzUxRCxPQUFPaEUsTUFDeEM0NUQsRUFBV3p0RCxTQUFTN1ksUUFBUW9tRSxHQUM1QkUsRUFBVzdiLE1BQU16cUQsUUFBUW9tRSxHQUVqQyxDQUNKLENBSUEsU0FBU0MsRUFBYzFCLEdBQ25CLElBQUk3dkUsRUFBSSxFQUNSLEtBQU9BLEVBQUlnd0UsRUFBU3p2RSxRQUNoQnN0RSxFQUF1QmdDLEVBQVNHLEVBQVNod0UsS0FBTyxJQUcvQzZ2RSxFQUFRajBELE9BQU9vUSxPQUFTZ2tELEVBQVNod0UsR0FBRzRiLE9BQU9vUSxPQUN2Q3lsRCxHQUFnQjVCLEVBQVNHLEVBQVNod0UsTUFDdkNBLElBQ0pnd0UsRUFBU3IyRCxPQUFPM1osRUFBRyxFQUFHNnZFLEdBRWxCQSxFQUFRajBELE9BQU9oRSxPQUFTeTVELEdBQWN4QixJQUN0Q0ksRUFBVzVsRSxJQUFJd2xFLEVBQVFqMEQsT0FBT2hFLEtBQU1pNEQsRUFDNUMsQ0FrRkEsT0F6TkFFLEVBQWdCaDFDLEdBQWEsQ0FBRXM3QixRQUFRLEVBQU94OEMsS0FBSyxFQUFNNnpELFdBQVcsR0FBU3FDLEdBd043RXRhLEVBQU92cUQsU0FBUXdtRSxHQUFTeEIsRUFBU3dCLEtBQzFCLENBQUV4QixXQUFVenFFLFFBakZuQixTQUFpQmtYLEVBQVV1ckQsR0FDdkIsSUFBSTJILEVBRUE3akQsRUFDQXBVLEVBRkF1SCxFQUFTLENBQUMsRUFHZCxHQUFJLFNBQVV4QyxHQUFZQSxFQUFTL0UsS0FBTSxDQUVyQyxHQURBaTRELEVBQVVJLEVBQVc5cUUsSUFBSXdYLEVBQVMvRSxPQUM3Qmk0RCxFQUNELE1BQU12QyxFQUFrQixFQUFzQyxDQUMxRDN3RCxhQUdxQyxDQUN6QyxNQUFNZzFELEVBQWdCMXRFLE9BQU9zQixLQUFLb1gsRUFBU3dDLFFBQVUsQ0FBQyxHQUFHcFQsUUFBTzZsRSxJQUFjL0IsRUFBUXRxRSxLQUFLc3NFLE1BQUt0dkMsR0FBS0EsRUFBRTNxQixPQUFTZzZELE1BQzVHRCxFQUFjcHhFLFFBQ2Q2RixFQUFLLCtCQUErQnVyRSxFQUFjOTZELEtBQUssd0lBRS9ELENBQ0FlLEVBQU9pNEQsRUFBUWowRCxPQUFPaEUsS0FDdEJ1SCxFQUFTamIsRUFFVDR0RSxFQUFtQjVKLEVBQWdCL29ELE9BR25DMHdELEVBQVF0cUUsS0FBS3dHLFFBQU93MkIsSUFBTUEsRUFBRXNzQyxXQUFVN2lFLEtBQUl1MkIsR0FBS0EsRUFBRTNxQixRQUdqRCtFLEVBQVN3QyxRQUNMMnlELEVBQW1CbjFELEVBQVN3QyxPQUFRMHdELEVBQVF0cUUsS0FBS3lHLEtBQUl1MkIsR0FBS0EsRUFBRTNxQixTQUVoRW9VLEVBQU82akQsRUFBUS9xRSxVQUFVcWEsRUFDN0IsTUFDSyxHQUFJLFNBQVV4QyxFQUdmcVAsRUFBT3JQLEVBQVNxUCxLQUNnQ0EsRUFBS2xOLFdBQVcsTUFDNUQxWSxFQUFLLDJEQUEyRDRsQixxREFBd0RBLHdIQUU1SDZqRCxFQUFVRyxFQUFTNkIsTUFBSzVwRCxHQUFLQSxFQUFFK3ZDLEdBQUdoa0MsS0FBS2hJLEtBRW5DNmpELElBRUExd0QsRUFBUzB3RCxFQUFRcnJFLE1BQU13bkIsR0FDdkJwVSxFQUFPaTRELEVBQVFqMEQsT0FBT2hFLFVBSXpCLENBS0QsR0FIQWk0RCxFQUFVM0gsRUFBZ0J0d0QsS0FDcEJxNEQsRUFBVzlxRSxJQUFJK2lFLEVBQWdCdHdELE1BQy9CbzRELEVBQVM2QixNQUFLNXBELEdBQUtBLEVBQUUrdkMsR0FBR2hrQyxLQUFLazBDLEVBQWdCbDhDLFNBQzlDNmpELEVBQ0QsTUFBTXZDLEVBQWtCLEVBQXNDLENBQzFEM3dELFdBQ0F1ckQsb0JBRVJ0d0QsRUFBT2k0RCxFQUFRajBELE9BQU9oRSxLQUd0QnVILEVBQVNqYixFQUFPLENBQUMsRUFBR2drRSxFQUFnQi9vRCxPQUFReEMsRUFBU3dDLFFBQ3JENk0sRUFBTzZqRCxFQUFRL3FFLFVBQVVxYSxFQUM3QixDQUNBLE1BQU1pcUQsRUFBVSxHQUNoQixJQUFJMkksRUFBZ0JsQyxFQUNwQixLQUFPa0MsR0FFSDNJLEVBQVF2MEMsUUFBUWs5QyxFQUFjbjJELFFBQzlCbTJELEVBQWdCQSxFQUFjbHJFLE9BRWxDLE1BQU8sQ0FDSCtRLE9BQ0FvVSxPQUNBN00sU0FDQWlxRCxVQUNBeGlCLEtBQU1vckIsR0FBZ0I1SSxHQUU5QixFQUc0QmtJLGNBQWFXLFVBbEd6QyxXQUNJLE9BQU9qQyxDQUNYLEVBZ0dvRGtDLGlCQXhOcEQsU0FBMEJ0NkQsR0FDdEIsT0FBT3E0RCxFQUFXOXFFLElBQUl5UyxFQUMxQixFQXVOSixDQUNBLFNBQVNrNkQsRUFBbUIzeUQsRUFBUTVaLEdBQ2hDLE1BQU1zaUUsRUFBWSxDQUFDLEVBQ25CLElBQUssTUFBTTE5RCxLQUFPNUUsRUFDVjRFLEtBQU9nVixJQUNQMG9ELEVBQVUxOUQsR0FBT2dWLEVBQU9oVixJQUVoQyxPQUFPMDlELENBQ1gsQ0ErQkEsU0FBUzBJLEVBQXFCMzBELEdBQzFCLE1BQU11MkQsRUFBYyxDQUFDLEVBRWY5NkQsRUFBUXVFLEVBQU92RSxRQUFTLEVBQzlCLEdBQUksY0FBZXVFLEVBQ2Z1MkQsRUFBWXJxRCxRQUFVelEsT0FLdEIsSUFBSyxNQUFNTyxLQUFRZ0UsRUFBT3dnQixXQUN0QisxQyxFQUFZdjZELEdBQXlCLGtCQUFWUCxFQUFzQkEsRUFBUUEsRUFBTU8sR0FFdkUsT0FBT3U2RCxDQUNYLENBS0EsU0FBU2QsR0FBY3oxRCxHQUNuQixLQUFPQSxHQUFRLENBQ1gsR0FBSUEsRUFBT0EsT0FBTzR0RCxRQUNkLE9BQU8sRUFDWDV0RCxFQUFTQSxFQUFPL1UsTUFDcEIsQ0FDQSxPQUFPLENBQ1gsQ0FNQSxTQUFTbXJFLEdBQWdCNUksR0FDckIsT0FBT0EsRUFBUWx5QixRQUFPLENBQUMwUCxFQUFNaHJDLElBQVcxWCxFQUFPMGlELEVBQU1ockMsRUFBT2dyQyxPQUFPLENBQUMsRUFDeEUsQ0FDQSxTQUFTN3JCLEdBQWE4YixFQUFVdTdCLEdBQzVCLE1BQU03b0UsRUFBVSxDQUFDLEVBQ2pCLElBQUssTUFBTVksS0FBTzBzQyxFQUNkdHRDLEVBQVFZLEdBQU9BLEtBQU9pb0UsRUFBaUJBLEVBQWVqb0UsR0FBTzBzQyxFQUFTMXNDLEdBRTFFLE9BQU9aLENBQ1gsQ0FDQSxTQUFTOG9FLEdBQVkxeUUsRUFBR0MsR0FDcEIsT0FBUUQsRUFBRWlZLE9BQVNoWSxFQUFFZ1ksTUFDakJqWSxFQUFFa3ZFLFdBQWFqdkUsRUFBRWl2RSxVQUNqQmx2RSxFQUFFaXZFLGFBQWVodkUsRUFBRWd2RSxVQUMzQixDQU9BLFNBQVN3QyxHQUFnQnp4RSxFQUFHQyxHQUN4QixJQUFLLE1BQU11SyxLQUFPeEssRUFBRTRGLEtBQ2hCLElBQUs0RSxFQUFJMGtFLFdBQWFqdkUsRUFBRTJGLEtBQUtzc0UsS0FBS1EsR0FBWXpvRSxLQUFLLEtBQU1PLElBQ3JELE9BQU8vRCxFQUFLLFVBQVV4RyxFQUFFZ2MsT0FBT29RLG1DQUFtQ3JzQixFQUFFaWMsT0FBT29RLCtDQUErQzdoQixFQUFJeU4sU0FFdEksSUFBSyxNQUFNek4sS0FBT3ZLLEVBQUUyRixLQUNoQixJQUFLNEUsRUFBSTBrRSxXQUFhbHZFLEVBQUU0RixLQUFLc3NFLEtBQUtRLEdBQVl6b0UsS0FBSyxLQUFNTyxJQUNyRCxPQUFPL0QsRUFBSyxVQUFVeEcsRUFBRWdjLE9BQU9vUSxtQ0FBbUNyc0IsRUFBRWljLE9BQU9vUSwrQ0FBK0M3aEIsRUFBSXlOLFFBRTFJLENBZUEsU0FBU3U1RCxHQUFpQ3YxRCxFQUFRL1UsR0FDOUMsSUFBSyxNQUFNc0QsS0FBT3RELEVBQU90QixLQUNyQixJQUFLcVcsRUFBT3JXLEtBQUtzc0UsS0FBS1EsR0FBWXpvRSxLQUFLLEtBQU1PLElBQ3pDLE9BQU8vRCxFQUFLLGtCQUFrQndWLEVBQU9BLE9BQU9vUSwrQ0FBK0M3aEIsRUFBSXlOLHdCQUF3Qi9RLEVBQU8rVSxPQUFPb1EsU0FFakosQ0FDQSxTQUFTeWxELEdBQWdCNzFELEVBQVEvVSxHQUM3QixPQUFPQSxFQUFPa2QsU0FBU1YsTUFBS2lCLEdBQVNBLElBQVUxSSxHQUFVNjFELEdBQWdCNzFELEVBQVEwSSxJQUNyRixDQW1CQSxNQUFNZ3VELEdBQVUsS0FDVkMsR0FBZSxLQUNmQyxHQUFXLE1BQ1hDLEdBQVcsS0FDWEMsR0FBUSxNQUNSQyxHQUFVLE1BZVZDLEdBQXNCLE9BQ3RCQyxHQUF1QixPQUN2QkMsR0FBZSxPQUNmQyxHQUFrQixPQUNsQkMsR0FBb0IsT0FDcEJDLEdBQWMsT0FDZEMsR0FBcUIsT0FDckJDLEdBQWUsT0FTckIsU0FBU0MsR0FBYXhoQyxHQUNsQixPQUFPeWhDLFVBQVUsR0FBS3poQyxHQUNqQi93QixRQUFRb3lELEdBQWEsS0FDckJweUQsUUFBUSt4RCxHQUFxQixLQUM3Qi94RCxRQUFRZ3lELEdBQXNCLElBQ3ZDLENBb0JBLFNBQVNTLEdBQWlCMWhDLEdBQ3RCLE9BQVF3aEMsR0FBYXhoQyxHQUVoQi93QixRQUFROHhELEdBQVMsT0FDakI5eEQsUUFBUXN5RCxHQUFjLEtBQ3RCdHlELFFBQVF5eEQsR0FBUyxPQUNqQnp4RCxRQUFRMHhELEdBQWMsT0FDdEIxeEQsUUFBUWt5RCxHQUFpQixLQUN6Qmx5RCxRQUFRbXlELEdBQW1CLEtBQzNCbnlELFFBQVFxeUQsR0FBb0IsS0FDNUJyeUQsUUFBUWl5RCxHQUFjLElBQy9CLENBMkJBLFNBQVNTLEdBQVkzaEMsR0FDakIsT0FBZSxNQUFSQSxFQUFlLEdBYjFCLFNBQW9CQSxHQUNoQixPQUFPd2hDLEdBQWF4aEMsR0FBTS93QixRQUFReXhELEdBQVMsT0FBT3p4RCxRQUFRNnhELEdBQU8sTUFDckUsQ0FXK0JjLENBQVc1aEMsR0FBTS93QixRQUFRMnhELEdBQVUsTUFDbEUsQ0FRQSxTQUFTaUIsR0FBTzdoQyxHQUNaLElBQ0ksT0FBTzhoQyxtQkFBbUIsR0FBSzloQyxFQUluQyxDQUZBLE1BQU85NUIsR0FDd0MxUixFQUFLLG1CQUFtQndyQywyQkFDdkUsQ0FDQSxNQUFPLEdBQUtBLENBQ2hCLENBV0EsU0FBU3EyQixHQUFXeUMsR0FDaEIsTUFBTXZDLEVBQVEsQ0FBQyxFQUdmLEdBQWUsS0FBWHVDLEdBQTRCLE1BQVhBLEVBQ2pCLE9BQU92QyxFQUNYLE1BQ013TCxHQUQ2QixNQUFkakosRUFBTyxHQUNTQSxFQUFPanpELE1BQU0sR0FBS2l6RCxHQUFReCtDLE1BQU0sS0FDckUsSUFBSyxJQUFJbHNCLEVBQUksRUFBR0EsRUFBSTJ6RSxFQUFhcHpFLFNBQVVQLEVBQUcsQ0FFMUMsTUFBTTR6RSxFQUFjRCxFQUFhM3pFLEdBQUc2Z0IsUUFBUTh4RCxHQUFTLEtBRS9Da0IsRUFBUUQsRUFBWWx5RSxRQUFRLEtBQzVCeUksRUFBTXNwRSxHQUFPSSxFQUFRLEVBQUlELEVBQWNBLEVBQVluOEQsTUFBTSxFQUFHbzhELElBQzVEeHpFLEVBQVF3ekUsRUFBUSxFQUFJLEtBQU9KLEdBQU9HLEVBQVluOEQsTUFBTW84RCxFQUFRLElBQ2xFLEdBQUkxcEUsS0FBT2crRCxFQUFPLENBRWQsSUFBSTJMLEVBQWUzTCxFQUFNaCtELEdBQ3BCYyxFQUFRNm9FLEtBQ1RBLEVBQWUzTCxFQUFNaCtELEdBQU8sQ0FBQzJwRSxJQUVqQ0EsRUFBYWp6RSxLQUFLUixFQUN0QixNQUVJOG5FLEVBQU1oK0QsR0FBTzlKLENBRXJCLENBQ0EsT0FBTzhuRSxDQUNYLENBVUEsU0FBU2UsR0FBZWYsR0FDcEIsSUFBSXVDLEVBQVMsR0FDYixJQUFLLElBQUl2Z0UsS0FBT2crRCxFQUFPLENBQ25CLE1BQU05bkUsRUFBUThuRSxFQUFNaCtELElBQ3BCQSxFQTNGR21wRSxHQTJGa0JucEUsR0EzRkswVyxRQUFRNHhELEdBQVUsT0E0Ri9CLE1BQVRweUUsSUFRVzRLLEVBQVE1SyxHQUNqQkEsRUFBTTJMLEtBQUkwQyxHQUFLQSxHQUFLNGtFLEdBQWlCNWtFLEtBQ3JDLENBQUNyTyxHQUFTaXpFLEdBQWlCanpFLEtBQzFCNkssU0FBUTdLLFNBR0cyRixJQUFWM0YsSUFFQXFxRSxJQUFXQSxFQUFPbnFFLE9BQVMsSUFBTSxJQUFNNEosRUFDMUIsTUFBVDlKLElBQ0FxcUUsR0FBVSxJQUFNcnFFLEdBQ3hCLFNBakJjMkYsSUFBVjNGLElBQ0FxcUUsSUFBV0EsRUFBT25xRSxPQUFTLElBQU0sSUFBTTRKLEVBa0JuRCxDQUNBLE9BQU91Z0UsQ0FDWCxDQVNBLFNBQVNxSixHQUFlNUwsR0FDcEIsTUFBTTZMLEVBQWtCLENBQUMsRUFDekIsSUFBSyxNQUFNN3BFLEtBQU9nK0QsRUFBTyxDQUNyQixNQUFNOW5FLEVBQVE4bkUsRUFBTWgrRCxRQUNObkUsSUFBVjNGLElBQ0EyekUsRUFBZ0I3cEUsR0FBT2MsRUFBUTVLLEdBQ3pCQSxFQUFNMkwsS0FBSTBDLEdBQVcsTUFBTEEsRUFBWSxLQUFPLEdBQUtBLElBQy9CLE1BQVRyTyxFQUNJQSxFQUNBLEdBQUtBLEVBRXZCLENBQ0EsT0FBTzJ6RSxDQUNYLENBU0EsTUFBTUMsR0FBa0J4ckUsT0FBaUQsZ0NBT25FeXJFLEdBQWV6ckUsT0FBaUQscUJBT2hFMHJFLEdBQVkxckUsT0FBaUQsVUFPN0QyckUsR0FBbUIzckUsT0FBaUQsa0JBT3BFNHJFLEdBQXdCNXJFLE9BQWlELHdCQUsvRSxTQUFTNnJFLEtBQ0wsSUFBSTdrQixFQUFXLEdBWWYsTUFBTyxDQUNIL2tELElBWkosU0FBYStVLEdBRVQsT0FEQWd3QyxFQUFTNXVELEtBQUs0ZSxHQUNQLEtBQ0gsTUFBTXpmLEVBQUl5dkQsRUFBUy90RCxRQUFRK2QsR0FDdkJ6ZixHQUFLLEdBQ0x5dkQsRUFBUzkxQyxPQUFPM1osRUFBRyxFQUFFLENBRWpDLEVBTUlpckQsS0FBTSxJQUFNd0UsRUFDWjhrQixNQU5KLFdBQ0k5a0IsRUFBVyxFQUNmLEVBTUosQ0FFQSxTQUFTK2tCLEdBQWM1NEQsRUFBUWhFLEVBQU1zdkMsR0FDakMsTUFBTXV0QixFQUFpQixLQUNuQjc0RCxFQUFPaEUsR0FBTXpPLE9BQU8rOUMsRUFBTSxHQUU5QixJQUFBeHlCLGFBQVkrL0MsSUFDWixJQUFBdGdELGVBQWNzZ0QsSUFDZCxJQUFBeGdELGNBQVksS0FDUnJZLEVBQU9oRSxHQUFNbE4sSUFBSXc4QyxFQUFNLElBRTNCdHJDLEVBQU9oRSxHQUFNbE4sSUFBSXc4QyxFQUNyQixDQVFBLFNBQVN3dEIsR0FBbUJDLEdBQ3hCLEtBQWdELElBQUEzbUQsc0JBRTVDLFlBREE1bkIsRUFBSywwR0FHVCxNQUFNd3VFLEdBQWUsSUFBQXZxRCxRQUFPNHBELEdBRTVCLENBQUMsR0FBRzV6RSxNQUNDdTBFLEVBS0xKLEdBQWNJLEVBQWMsY0FBZUQsR0FIbkN2dUUsRUFBSywyTEFJakIsQ0FRQSxTQUFTeXVFLEdBQW9CQyxHQUN6QixLQUFnRCxJQUFBOW1ELHNCQUU1QyxZQURBNW5CLEVBQUssMkdBR1QsTUFBTXd1RSxHQUFlLElBQUF2cUQsUUFBTzRwRCxHQUU1QixDQUFDLEdBQUc1ekUsTUFDQ3UwRSxFQUtMSixHQUFjSSxFQUFjLGVBQWdCRSxHQUhwQzF1RSxFQUFLLDRMQUlqQixDQUNBLFNBQVMydUUsR0FBaUI3dEIsRUFBT2xzQixFQUFJN0QsRUFBTXZiLEVBQVFoRSxHQUUvQyxNQUFNbzlELEVBQXFCcDVELElBRXRCQSxFQUFPODBELGVBQWU5NEQsR0FBUWdFLEVBQU84MEQsZUFBZTk0RCxJQUFTLElBQ2xFLE1BQU8sSUFBTSxJQUFJbFMsU0FBUSxDQUFDRCxFQUFTK3JCLEtBQy9CLE1BQU1waEIsRUFBUXN1QixJQTd0Q3RCLElBQXlCZ3pDLEdBOHRDQyxJQUFWaHpDLEVBQ0FsTixFQUFPODdDLEVBQWtCLEVBQXVDLENBQzVEbjJDLE9BQ0E2RCxRQUdDMEQsYUFBaUJyVyxNQUN0Qm1KLEVBQU9rTixHQXB1Q0ssaUJBREhnekMsRUF1dUNZaHpDLElBdHVDSWd6QyxHQUEwQixpQkFBVkEsRUF1dUN6Q2xnRCxFQUFPODdDLEVBQWtCLEVBQThDLENBQ25FbjJDLEtBQU02RCxFQUNOQSxHQUFJMEQsTUFJSnMyQyxHQUVBcDVELEVBQU84MEQsZUFBZTk0RCxLQUFVbzlELEdBQ2YsbUJBQVZ0MkMsR0FDUHMyQyxFQUFtQm4wRSxLQUFLNjlCLEdBRTVCajVCLElBQ0osRUFHRXd2RSxFQUFjL3RCLEVBQU1oNEMsS0FBSzBNLEdBQVVBLEVBQU9HLFVBQVVuRSxHQUFPb2pCLEVBQUk3RCxFQTRCN0UsU0FBNkIvbUIsRUFBTTRxQixFQUFJN0QsR0FDbkMsSUFBSXBILEVBQVMsRUFDYixPQUFPLFdBQ2MsR0FBYkEsS0FDQTNwQixFQUFLLDBGQUEwRit3QixFQUFLMnhDLGlCQUFpQjl0QyxFQUFHOHRDLDJHQUU1SDE0RCxFQUFLOGtFLFNBQVUsRUFDQSxJQUFYbmxELEdBQ0EzZixFQUFLMVAsTUFBTSxLQUFNNnBCLFVBQ3pCLENBQ0osQ0F0QzZINHFELENBQW9CL2tFLEVBQU00cUIsRUFBSTdELElBQ25KLElBQUlpK0MsRUFBWTF2RSxRQUFRRCxRQUFRd3ZFLEdBR2hDLEdBRkkvdEIsRUFBTTNtRCxPQUFTLElBQ2Y2MEUsRUFBWUEsRUFBVXovRCxLQUFLdkYsSUFDZ0I4MkMsRUFBTTNtRCxPQUFTLEVBQUcsQ0FDN0QsTUFBTXMrQixFQUFVLGtEQUFrRHFvQixFQUFNdHZDLEtBQU8sSUFBTXN2QyxFQUFNdHZDLEtBQU8sSUFBTSxRQUFRc3ZDLEVBQU1ucEIscUlBQ3RILEdBQTJCLGlCQUFoQmszQyxHQUE0QixTQUFVQSxFQUM3Q0csRUFBWUEsRUFBVXovRCxNQUFLMC9ELEdBRWxCamxFLEVBQUs4a0UsUUFJSEcsR0FISGp2RSxFQUFLeTRCLEdBQ0VuNUIsUUFBUThyQixPQUFPLElBQUluSixNQUFNLHFDQUt2QyxRQUFvQnJpQixJQUFoQml2RSxJQUVBN2tFLEVBQUs4a0UsUUFHTixPQUZBOXVFLEVBQUt5NEIsUUFDTHJOLEVBQU8sSUFBSW5KLE1BQU0sNEJBSTdCLENBQ0Erc0QsRUFBVWw5RCxPQUFNSixHQUFPMFosRUFBTzFaLElBQUssR0FFM0MsQ0FZQSxTQUFTdzlELEdBQXdCbE0sRUFBU21NLEVBQVd2NkMsRUFBSTdELEdBQ3JELE1BQU1xK0MsRUFBUyxHQUNmLElBQUssTUFBTTU1RCxLQUFVd3RELEVBQVMsQ0FDc0J4dEQsRUFBT3dnQixZQUFleGdCLEVBQU9tSSxTQUFTeGpCLFFBQ2xGNkYsRUFBSyxxQkFBcUJ3VixFQUFPb1Esb0VBR3JDLElBQUssTUFBTXBVLEtBQVFnRSxFQUFPd2dCLFdBQVksQ0FDbEMsSUFBSXE1QyxFQUFlNzVELEVBQU93Z0IsV0FBV3hrQixHQUVqQyxJQUFLNjlELEdBQ3dCLGlCQUFqQkEsR0FDb0IsbUJBQWpCQSxFQUtYLE1BSkFydkUsRUFBSyxjQUFjd1IsMkJBQThCZ0UsRUFBT29RLDZDQUNuQjNkLE9BQU9vbkUsUUFHdEMsSUFBSXB0RCxNQUFNLDJCQUVmLEdBQUksU0FBVW90RCxFQUFjLENBRzdCcnZFLEVBQUssY0FBY3dSLDJCQUE4QmdFLEVBQU9vUSxtTUFLeEQsTUFBTTBwRCxFQUFVRCxFQUNoQkEsRUFBZSxJQUFNQyxDQUN6QixNQUNTRCxFQUFhLzRELGdCQUVqQis0RCxFQUFhRSxzQkFDZEYsRUFBYUUscUJBQXNCLEVBQ25DdnZFLEVBQUssY0FBY3dSLDJCQUE4QmdFLEVBQU9vUSwySkFPaEUsR0FBa0IscUJBQWR1cEQsR0FBcUMzNUQsRUFBT0csVUFBVW5FLEdBRTFELEdBdUNxQixpQkFEUDNCLEVBdENPdy9ELElBd0N6QixnQkFBaUJ4L0QsR0FDakIsVUFBV0EsR0FDWCxjQUFlQSxFQTFDeUIsQ0FFaEMsTUFDTWl4QyxHQURVdXVCLEVBQWE1NEQsV0FBYTQ0RCxHQUNwQkYsR0FDdEJydUIsR0FBU3N1QixFQUFPMzBFLEtBQUtrMEUsR0FBaUI3dEIsRUFBT2xzQixFQUFJN0QsRUFBTXZiLEVBQVFoRSxHQUNuRSxLQUNLLENBRUQsSUFBSWcrRCxFQUFtQkgsSUFDMEIsVUFBV0csSUFDeER4dkUsRUFBSyxjQUFjd1IsMkJBQThCZ0UsRUFBT29RLGtNQUN4RDRwRCxFQUFtQmx3RSxRQUFRRCxRQUFRbXdFLElBRXZDSixFQUFPMzBFLE1BQUssSUFBTSswRSxFQUFpQmpnRSxNQUFLbWxCLElBQ3BDLElBQUtBLEVBQ0QsT0FBT3AxQixRQUFROHJCLE9BQU8sSUFBSW5KLE1BQU0sK0JBQStCelEsVUFBYWdFLEVBQU9vUSxVQUN2RixNQUFNNnBELEVBQW9CbE8sRUFBVzdzQyxHQUMvQkEsRUFBU2hULFFBQ1RnVCxFQUdObGYsRUFBT3dnQixXQUFXeGtCLEdBQVFpK0QsRUFFMUIsTUFDTTN1QixHQURVMnVCLEVBQWtCaDVELFdBQWFnNUQsR0FDekJOLEdBQ3RCLE9BQU9ydUIsR0FBUzZ0QixHQUFpQjd0QixFQUFPbHNCLEVBQUk3RCxFQUFNdmIsRUFBUWhFLEVBQTFDbTlELEVBQWlELEtBRXpFLENBQ0osQ0FDSixDQVNKLElBQTBCOStELEVBUnRCLE9BQU91L0QsQ0FDWCxDQWtCQSxTQUFTTSxHQUFrQnBFLEdBQ3ZCLE9BQU9BLEVBQU10SSxRQUFRNTVDLE9BQU01VCxHQUFVQSxFQUFPMDBELFdBQ3RDNXFFLFFBQVE4ckIsT0FBTyxJQUFJbkosTUFBTSx3Q0FDekIzaUIsUUFBUTJyRCxJQUFJcWdCLEVBQU10SSxRQUFRcDlELEtBQUk0UCxHQUFVQSxFQUFPd2dCLFlBQzdDMTJCLFFBQVEyckQsSUFBSXB0RCxPQUFPc0IsS0FBS3FXLEVBQU93Z0IsWUFBWThhLFFBQU8sQ0FBQzYrQixFQUFVbitELEtBQ3pELE1BQU02OUQsRUFBZTc1RCxFQUFPd2dCLFdBQVd4a0IsR0FldkMsTUFkNEIsbUJBQWpCNjlELEdBQ0wsZ0JBQWlCQSxHQUNuQk0sRUFBU2wxRSxLQUFLNDBFLElBQWU5L0QsTUFBS21sQixJQUM5QixJQUFLQSxFQUNELE9BQU9wMUIsUUFBUThyQixPQUFPLElBQUluSixNQUFNLCtCQUErQnpRLFVBQWFnRSxFQUFPb1EsZ0VBQ3ZGLE1BQU02cEQsRUFBb0JsTyxFQUFXN3NDLEdBQy9CQSxFQUFTaFQsUUFDVGdULEVBR05sZixFQUFPd2dCLFdBQVd4a0IsR0FBUWkrRCxDQUNwQixLQUdQRSxDQUFRLEdBQ2hCLFFBQU9wZ0UsTUFBSyxJQUFNKzdELEdBQ2pDLENBSUEsU0FBU3NFLEdBQVEzK0QsR0FDYixNQUFNNCtELEdBQVMsSUFBQTVyRCxRQUFPOHBELElBQ2hCK0IsR0FBZSxJQUFBN3JELFFBQU8rcEQsSUFDdEIxQyxHQUFRLElBQUFubUUsV0FBUyxJQUFNMHFFLEVBQU94d0UsU0FBUSxJQUFBd04sT0FBTW9FLEVBQU0yakIsT0FDbERtN0MsR0FBb0IsSUFBQTVxRSxXQUFTLEtBQy9CLE1BQU0sUUFBRTY5RCxHQUFZc0ksRUFBTXJ4RSxPQUNwQixPQUFFRSxHQUFXNm9FLEVBQ2JnTixFQUFlaE4sRUFBUTdvRSxFQUFTLEdBQ2hDODFFLEVBQWlCSCxFQUFhOU0sUUFDcEMsSUFBS2dOLElBQWlCQyxFQUFlOTFFLE9BQ2pDLE9BQVEsRUFDWixNQUFNaUIsRUFBUTYwRSxFQUFlbjRDLFVBQVVvckMsRUFBa0IxL0QsS0FBSyxLQUFNd3NFLElBQ3BFLEdBQUk1MEUsR0FBUyxFQUNULE9BQU9BLEVBRVgsTUFBTTgwRSxFQUFtQkMsR0FBZ0JuTixFQUFRN29FLEVBQVMsSUFDMUQsT0FFQUEsRUFBUyxHQUlMZzJFLEdBQWdCSCxLQUFrQkUsR0FFbENELEVBQWVBLEVBQWU5MUUsT0FBUyxHQUFHeXJCLE9BQVNzcUQsRUFDakRELEVBQWVuNEMsVUFBVW9yQyxFQUFrQjEvRCxLQUFLLEtBQU13L0QsRUFBUTdvRSxFQUFTLEtBQ3ZFaUIsQ0FBTSxJQUVWZzFFLEdBQVcsSUFBQWpyRSxXQUFTLElBQU00cUUsRUFBa0I5MUUsT0FBUyxHQXNIL0QsU0FBd0JvMkUsRUFBT0MsR0FDM0IsSUFBSyxNQUFNdnNFLEtBQU91c0UsRUFBTyxDQUNyQixNQUFNQyxFQUFhRCxFQUFNdnNFLEdBQ25CeXNFLEVBQWFILEVBQU10c0UsR0FDekIsR0FBMEIsaUJBQWZ3c0UsR0FDUCxHQUFJQSxJQUFlQyxFQUNmLE9BQU8sT0FHWCxJQUFLM3JFLEVBQVEyckUsSUFDVEEsRUFBV3IyRSxTQUFXbzJFLEVBQVdwMkUsUUFDakNvMkUsRUFBV3R6RCxNQUFLLENBQUNoakIsRUFBT0wsSUFBTUssSUFBVXUyRSxFQUFXNTJFLEtBQ25ELE9BQU8sQ0FFbkIsQ0FDQSxPQUFPLENBQ1gsQ0FySVE2MkUsQ0FBZVgsRUFBYS8yRCxPQUFRdXlELEVBQU1yeEUsTUFBTThlLFVBQzlDMjNELEdBQWdCLElBQUF2ckUsV0FBUyxJQUFNNHFFLEVBQWtCOTFFLE9BQVMsR0FDNUQ4MUUsRUFBa0I5MUUsUUFBVTYxRSxFQUFhOU0sUUFBUTdvRSxPQUFTLEdBQzFEZ3BFLEVBQTBCMk0sRUFBYS8yRCxPQUFRdXlELEVBQU1yeEUsTUFBTThlLFVBVS9ELEdBQTBFdW9ELEVBQVcsQ0FDakYsTUFBTTF4RCxHQUFXLElBQUFnWSxzQkFDakIsR0FBSWhZLEVBQVUsQ0FDVixNQUFNK2dFLEVBQXNCLENBQ3hCckYsTUFBT0EsRUFBTXJ4RSxNQUNibTJFLFNBQVVBLEVBQVNuMkUsTUFDbkJ5MkUsY0FBZUEsRUFBY3oyRSxPQUdqQzJWLEVBQVNnaEUsZUFBaUJoaEUsRUFBU2doRSxnQkFBa0IsR0FFckRoaEUsRUFBU2doRSxlQUFlbjJFLEtBQUtrMkUsSUFDN0IsSUFBQXZzRCxjQUFZLEtBQ1J1c0QsRUFBb0JyRixNQUFRQSxFQUFNcnhFLE1BQ2xDMDJFLEVBQW9CUCxTQUFXQSxFQUFTbjJFLE1BQ3hDMDJFLEVBQW9CRCxjQUFnQkEsRUFBY3oyRSxLQUFLLEdBQ3hELENBQUUrVSxNQUFPLFFBQ2hCLENBQ0osQ0FDQSxNQUFPLENBQ0hzOEQsUUFDQTFhLE1BQU0sSUFBQXpyRCxXQUFTLElBQU1tbUUsRUFBTXJ4RSxNQUFNMjJELE9BQ2pDd2YsV0FDQU0sZ0JBQ0FHLFNBakNKLFNBQWtCeHlFLEVBQUksQ0FBQyxHQUNuQixPQXlGUixTQUFvQkEsR0FFaEIsS0FBSUEsRUFBRW9pRCxTQUFXcGlELEVBQUVraUQsUUFBVWxpRCxFQUFFOGhELFNBQVc5aEQsRUFBRWdpRCxVQUd4Q2hpRCxFQUFFeXlFLHVCQUdXbHhFLElBQWJ2QixFQUFFcWlELFFBQXFDLElBQWJyaUQsRUFBRXFpRCxRQUFoQyxDQUlBLEdBQUlyaUQsRUFBRTRoRCxlQUFpQjVoRCxFQUFFNGhELGNBQWNwSixhQUFjLENBRWpELE1BQU10NkMsRUFBUzhCLEVBQUU0aEQsY0FBY3BKLGFBQWEsVUFDNUMsR0FBSSxjQUFjanBCLEtBQUtyeEIsR0FDbkIsTUFDUixDQUlBLE9BRkk4QixFQUFFMmhELGdCQUNGM2hELEVBQUUyaEQsa0JBQ0MsQ0FaRyxDQWFkLENBL0dZK3dCLENBQVcxeUUsR0FDSnd4RSxHQUFPLElBQUFoakUsT0FBTW9FLEVBQU13SixTQUFXLFVBQVksU0FBUSxJQUFBNU4sT0FBTW9FLEVBQU0yakIsS0FFbkU5aUIsTUFBTTR2RCxHQUVMcGlFLFFBQVFELFNBQ25CLEVBNEJKLENBQ0EsTUFxRE0yeEUsSUFyRCtCLElBQUEzbUQsaUJBQWdCLENBQ2pEN1ksS0FBTSxhQUNOeS9ELGFBQWMsQ0FBRUMsS0FBTSxHQUN0QmpnRSxNQUFPLENBQ0gyakIsR0FBSSxDQUNBOXdCLEtBQU0sQ0FBQ21FLE9BQVFwSyxRQUNmczZCLFVBQVUsR0FFZDFkLFFBQVNvTSxRQUNUc3FELFlBQWFscEUsT0FFYm1wRSxpQkFBa0JucEUsT0FDbEJvcEUsT0FBUXhxRCxRQUNSeXFELGlCQUFrQixDQUNkeHRFLEtBQU1tRSxPQUNOeVosUUFBUyxTQUdqQmt1RCxXQUNBam9ELE1BQU0xVyxHQUFPLE1BQUVnTCxJQUNYLE1BQU1zMUQsR0FBTyxJQUFBbHFFLFVBQVN1b0UsR0FBUTMrRCxLQUN4QixRQUFFOU4sSUFBWSxJQUFBOGdCLFFBQU84cEQsSUFDckJ5RCxHQUFVLElBQUFyc0UsV0FBUyxLQUFNLENBQzNCLENBQUNzc0UsR0FBYXhnRSxFQUFNa2dFLFlBQWFodUUsRUFBUXV1RSxnQkFBaUIsdUJBQXdCSCxFQUFLbkIsU0FNdkYsQ0FBQ3FCLEdBQWF4Z0UsRUFBTW1nRSxpQkFBa0JqdUUsRUFBUXd1RSxxQkFBc0IsNkJBQThCSixFQUFLYixrQkFFM0csTUFBTyxLQUNILE1BQU0veUQsRUFBVzFCLEVBQU15RixTQUFXekYsRUFBTXlGLFFBQVE2dkQsR0FDaEQsT0FBT3RnRSxFQUFNb2dFLE9BQ1AxekQsR0FDQSxJQUFBeVcsR0FBRSxJQUFLLENBQ0wsZUFBZ0JtOUMsRUFBS2IsY0FDZnovRCxFQUFNcWdFLGlCQUNOLEtBQ04xZ0IsS0FBTTJnQixFQUFLM2dCLEtBR1h6eUIsUUFBU296QyxFQUFLVixTQUNkbnVDLE1BQU84dUMsRUFBUXYzRSxPQUNoQjBqQixFQUFTLENBRXhCLElBb0RKLFNBQVN3eUQsR0FBZ0IzNkQsR0FDckIsT0FBT0EsRUFBVUEsRUFBTzR0RCxRQUFVNXRELEVBQU80dEQsUUFBUXg5QyxLQUFPcFEsRUFBT29RLEtBQVEsRUFDM0UsQ0FPQSxNQUFNNnJELEdBQWUsQ0FBQ0csRUFBV0MsRUFBYUMsSUFBOEIsTUFBYkYsRUFDekRBLEVBQ2UsTUFBZkMsRUFDSUEsRUFDQUMsRUE2SFYsU0FBU3o0QyxHQUFjbkksRUFBTWh6QixHQUN6QixJQUFLZ3pCLEVBQ0QsT0FBTyxLQUNYLE1BQU02Z0QsRUFBYzdnRCxFQUFLaHpCLEdBQ3pCLE9BQThCLElBQXZCNnpFLEVBQVk1M0UsT0FBZTQzRSxFQUFZLEdBQUtBLENBQ3ZELENBTUEsTUFBTUMsSUF0SStCLElBQUEzbkQsaUJBQWdCLENBQ2pEN1ksS0FBTSxhQUVONEssY0FBYyxFQUNkbkwsTUFBTyxDQUNITyxLQUFNLENBQ0YxTixLQUFNbUUsT0FDTnlaLFFBQVMsV0FFYjRwRCxNQUFPenRFLFFBSVhvekUsYUFBYyxDQUFFQyxLQUFNLEdBQ3RCdnBELE1BQU0xVyxHQUFPLE1BQUVpTCxFQUFLLE1BQUVELEtBMkgxQixXQUNJLE1BQU1yTSxHQUFXLElBQUFnWSxzQkFDWHFxRCxFQUFhcmlFLEVBQVNuUCxRQUFVbVAsRUFBU25QLE9BQU9xRCxLQUFLME4sS0FDM0QsR0FBSXlnRSxJQUNnQixjQUFmQSxHQUE4QkEsRUFBVzd5RSxTQUFTLGVBQWdCLENBQ25FLE1BQU1zYSxFQUFzQixjQUFmdTRELEVBQTZCLGFBQWUsYUFDekRqeUUsRUFHSSwwSkFBTTBaLDhDQUVDQSxxQkFFZixDQUNKLENBeEltRHc0RCxHQUMzQyxNQUFNQyxHQUFnQixJQUFBbHVELFFBQU9ncUQsSUFDdkJtRSxHQUFpQixJQUFBanRFLFdBQVMsSUFBTThMLEVBQU1xNkQsT0FBUzZHLEVBQWNsNEUsUUFDN0RvNEUsR0FBZ0IsSUFBQXB1RCxRQUFPNnBELEdBQWMsR0FHckN3RSxHQUFRLElBQUFudEUsV0FBUyxLQUNuQixJQUFJb3RFLEdBQWUsSUFBQTFsRSxPQUFNd2xFLEdBQ3pCLE1BQU0sUUFBRXJQLEdBQVlvUCxFQUFlbjRFLE1BQ25DLElBQUl1NEUsRUFDSixNQUFRQSxFQUFleFAsRUFBUXVQLE1BQzFCQyxFQUFheDhDLFlBQ2R1OEMsSUFFSixPQUFPQSxDQUFZLElBRWpCRSxHQUFrQixJQUFBdHRFLFdBQVMsSUFBTWl0RSxFQUFlbjRFLE1BQU0rb0UsUUFBUXNQLEVBQU1yNEUsVUFDMUUsSUFBQTRwQixTQUFRaXFELElBQWMsSUFBQTNvRSxXQUFTLElBQU1tdEUsRUFBTXI0RSxNQUFRLE1BQ25ELElBQUE0cEIsU0FBUWdxRCxHQUFpQjRFLElBQ3pCLElBQUE1dUQsU0FBUW9xRCxHQUF1Qm1FLEdBQy9CLE1BQU1NLEdBQVUsSUFBQTNtRSxPQWlDaEIsT0E5QkEsSUFBQTBZLFFBQU0sSUFBTSxDQUFDaXVELEVBQVF6NEUsTUFBT3c0RSxFQUFnQng0RSxNQUFPZ1gsRUFBTU8sUUFBTyxFQUFFNUIsRUFBVWdsQixFQUFJcGpCLElBQVFtaEUsRUFBYTVoRCxFQUFNNmhELE1BRW5HaCtDLElBR0FBLEVBQUdqZixVQUFVbkUsR0FBUTVCLEVBT2pCbWhCLEdBQVFBLElBQVM2RCxHQUFNaGxCLEdBQVlBLElBQWEraUUsSUFDM0MvOUMsRUFBR3cxQyxZQUFZcGhFLE9BQ2hCNHJCLEVBQUd3MUMsWUFBY3I1QyxFQUFLcTVDLGFBRXJCeDFDLEVBQUd5MUMsYUFBYXJoRSxPQUNqQjRyQixFQUFHeTFDLGFBQWV0NUMsRUFBS3M1QyxpQkFLL0J6NkQsSUFDQWdsQixHQUdFN0QsR0FBU215QyxFQUFrQnR1QyxFQUFJN0QsSUFBVTRoRCxJQUMxQy85QyxFQUFHMDFDLGVBQWU5NEQsSUFBUyxJQUFJMU0sU0FBUXlFLEdBQVlBLEVBQVNxRyxJQUNqRSxHQUNELENBQUVaLE1BQU8sU0FDTCxLQUNILE1BQU1zOEQsRUFBUThHLEVBQWVuNEUsTUFHdkI0NEUsRUFBYzVoRSxFQUFNTyxLQUNwQmdoRSxFQUFlQyxFQUFnQng0RSxNQUMvQjY0RSxFQUFnQk4sR0FBZ0JBLEVBQWF4OEMsV0FBVzY4QyxHQUM5RCxJQUFLQyxFQUNELE9BQU96NUMsR0FBY3BkLEVBQU15RixRQUFTLENBQUUzRixVQUFXKzJELEVBQWV4SCxVQUdwRSxNQUFNeUgsRUFBbUJQLEVBQWF2aEUsTUFBTTRoRSxHQUN0Q0csRUFBYUQsR0FDUSxJQUFyQkEsRUFDSXpILEVBQU12eUQsT0FDc0IsbUJBQXJCZzZELEVBQ0hBLEVBQWlCekgsR0FDakJ5SCxFQUNSLEtBT0FsakUsR0FBWSxJQUFBdWtCLEdBQUUwK0MsRUFBZWgxRSxFQUFPLENBQUMsRUFBR2sxRSxFQUFZOTJELEVBQU8sQ0FDN0RnUixpQkFQcUJ4ZCxJQUVqQkEsRUFBTUcsVUFBVXNJLGNBQ2hCcTZELEVBQWE3OEQsVUFBVWs5RCxHQUFlLEtBQzFDLEVBSUE5bUUsSUFBSzJtRSxLQUVULEdBQ0lwUixHQUNBenhELEVBQVU5RCxJQUFLLENBRWYsTUFBTXlHLEVBQU8sQ0FDVDgvRCxNQUFPQSxFQUFNcjRFLE1BQ2J1WCxLQUFNZ2hFLEVBQWFoaEUsS0FDbkJvVSxLQUFNNHNELEVBQWE1c0QsS0FDbkI0NkIsS0FBTWd5QixFQUFhaHlCLE9BRUczN0MsRUFBUWdMLEVBQVU5RCxLQUN0QzhELEVBQVU5RCxJQUFJbkcsS0FBSXNHLEdBQUtBLEVBQUV0UyxJQUN6QixDQUFDaVcsRUFBVTlELElBQUluUyxJQUNIa0wsU0FBUThLLElBRXRCQSxFQUFTcWpFLGVBQWlCemdFLENBQUksR0FFdEMsQ0FDQSxPQUdBNm1CLEdBQWNwZCxFQUFNeUYsUUFBUyxDQUFFM0YsVUFBV2xNLEVBQVd5N0QsV0FDakR6N0QsQ0FBVSxDQUV0QixJQXVDSixTQUFTcWpFLEdBQW9CQyxFQUFlclksR0FDeEMsTUFBTXpGLEVBQU92M0QsRUFBTyxDQUFDLEVBQUdxMUUsRUFBZSxDQUVuQ25RLFFBQVNtUSxFQUFjblEsUUFBUXA5RCxLQUFJbzlELEdBdWEzQyxTQUFjbHhDLEVBQUszeUIsR0FDZixNQUFNcU8sRUFBTSxDQUFDLEVBQ2IsSUFBSyxNQUFNekosS0FBTyt0QixFQUNUM3lCLEVBQUtDLFNBQVMyRSxLQUVmeUosRUFBSXpKLEdBQU8rdEIsRUFBSS90QixJQUd2QixPQUFPeUosQ0FDWCxDQWhic0Q0bEUsQ0FBS3BRLEVBQVMsQ0FBQyxZQUFhLFdBQVksZ0JBRTFGLE1BQU8sQ0FDSG5JLFFBQVMsQ0FDTC8yRCxLQUFNLEtBQ051dkUsVUFBVSxFQUNWaDNCLFFBQVM4MkIsRUFBY3pRLFNBQ3ZCNUgsVUFDQTdnRSxNQUFPbzdELEdBR25CLENBQ0EsU0FBU2llLEdBQWNqM0IsR0FDbkIsTUFBTyxDQUNId2UsUUFBUyxDQUNMeGUsV0FHWixDQUVBLElBQUlrM0IsR0FBVyxFQUNmLFNBQVNyYSxHQUFZdmhELEVBQUtrNEQsRUFBUXBHLEdBRzlCLEdBQUlvRyxFQUFPMkQsY0FDUCxPQUNKM0QsRUFBTzJELGVBQWdCLEVBRXZCLE1BQU1oMkUsRUFBSysxRSxNQUNYLElBQUFwM0UscUJBQW9CLENBQ2hCcUIsR0FBSSxvQkFBc0JBLEVBQUssSUFBTUEsRUFBSyxJQUMxQzI3RCxNQUFPLGFBQ1BHLFlBQWEsYUFDYkYsU0FBVSwyQkFDVkMsS0FBTSxvQ0FDTkUsb0JBQXFCLENBQUMsV0FDdEI1aEQsUUFDRDZoRCxJQUN3QixtQkFBWkEsRUFBSTc2RCxLQUNYdUIsUUFBUUYsS0FBSyx5TkFHakJ3NUQsRUFBSTU2RCxHQUFHNjBFLGtCQUFpQixDQUFDOWIsRUFBU3Y4QyxLQUMxQnU4QyxFQUFRK2IsY0FDUi9iLEVBQVErYixhQUFheHRELE1BQU16ckIsS0FBSyxDQUM1QnFKLEtBQU0sVUFDTkMsSUFBSyxTQUNMMjJELFVBQVUsRUFDVnpnRSxNQUFPaTVFLEdBQW9CckQsRUFBT0MsYUFBYTcxRSxNQUFPLGtCQUU5RCxJQUdKdS9ELEVBQUk1NkQsR0FBRyswRSxvQkFBbUIsRUFBR0MsU0FBVTF5RCxFQUFNMnlELHdCQUN6QyxHQUFJQSxFQUFrQlosZUFBZ0IsQ0FDbEMsTUFBTXpnRSxFQUFPcWhFLEVBQWtCWixlQUMvQi94RCxFQUFLbTdDLEtBQUs1aEUsS0FBSyxDQUNYMCtELE9BQVEzbUQsRUFBS2hCLEtBQU8sR0FBR2dCLEVBQUtoQixLQUFLbW1CLGVBQWlCLElBQU1ubEIsRUFBS29ULEtBQzdEdTJDLFVBQVcsRUFDWHJCLFFBQVMsb0RBQ1RzQixnQkFBaUIwWCxJQUV6QixDQUVJanZFLEVBQVFndkUsRUFBa0JqRCxrQkFDMUJpRCxFQUFrQkUsY0FBZ0J2YSxFQUNsQ3FhLEVBQWtCakQsZUFBZTlyRSxTQUFRa3ZFLElBQ3JDLElBQUk1WCxFQUFrQjZYLEdBQ2xCblosRUFBVSxHQUNWa1osRUFBYXRELGVBQ2J0VSxFQUFrQjhYLEdBQ2xCcFosRUFBVSwwQkFFTGtaLEVBQWE1RCxXQUNsQmhVLEVBQWtCK1gsR0FDbEJyWixFQUFVLHVCQUVkNTVDLEVBQUttN0MsS0FBSzVoRSxLQUFLLENBQ1gwK0QsTUFBTzZhLEVBQWExSSxNQUFNMWxELEtBQzFCdTJDLFVBQVcsRUFDWHJCLFVBQ0FzQixtQkFDRixJQUVWLEtBRUosSUFBQTMzQyxPQUFNb3JELEVBQU9DLGNBQWMsS0FFdkJzRSxJQUNBNWEsRUFBSStCLHdCQUNKL0IsRUFBSWdDLGtCQUFrQjZZLEdBQ3RCN2EsRUFBSWlDLG1CQUFtQjRZLEVBQWtCLElBRTdDLE1BQU1DLEVBQXFCLHNCQUF3QjkyRSxFQUNuRGc4RCxFQUFJQyxpQkFBaUIsQ0FDakJqOEQsR0FBSTgyRSxFQUNKbmIsTUFBTyxTQUFTMzdELEVBQUssSUFBTUEsRUFBSyxpQkFDaENrOEQsTUFBTyxVQVFYbVcsRUFBT2hsRCxTQUFRLENBQUNwWSxFQUFPbWlCLEtBQ25CNGtDLEVBQUlrQyxpQkFBaUIsQ0FDakJDLFFBQVMyWSxFQUNUeDlELE1BQU8sQ0FDSDhrRCxNQUFPLDBCQUNQSSxTQUFVcG5DLEVBQUc4dEMsU0FDYjZSLFFBQVMsUUFDVHY4RCxLQUFNd2hELEVBQUk3NkQsTUFDVlQsS0FBTSxDQUFFdVUsU0FDUnNwRCxRQUFTbm5DLEVBQUc0ckIsS0FBS2cwQixpQkFFdkIsSUFHTixJQUFJQyxFQUFlLEVBQ25CNUUsRUFBTzZFLFlBQVcsQ0FBQzkvQyxFQUFJN0QsS0FDbkIsTUFBTTd5QixFQUFPLENBQ1Q0aUQsTUFBT3d5QixHQUFjLGNBQ3JCdmlELEtBQU1taUQsR0FBb0JuaUQsRUFBTSwyQ0FDaEM2RCxHQUFJcytDLEdBQW9CdCtDLEVBQUksb0JBR2hDLzJCLE9BQU9pMkIsZUFBZWMsRUFBRzRyQixLQUFNLGlCQUFrQixDQUM3Q3ZtRCxNQUFPdzZFLE1BRVhqYixFQUFJa0MsaUJBQWlCLENBQ2pCQyxRQUFTMlksRUFDVHg5RCxNQUFPLENBQ0hrQixLQUFNd2hELEVBQUk3NkQsTUFDVmk5RCxNQUFPLHNCQUNQSSxTQUFVcG5DLEVBQUc4dEMsU0FDYnhrRSxPQUNBNjlELFFBQVNubkMsRUFBRzRyQixLQUFLZzBCLGlCQUV2QixJQUVOM0UsRUFBTzhFLFdBQVUsQ0FBQy8vQyxFQUFJN0QsRUFBTTZqRCxLQUN4QixNQUFNMTJFLEVBQU8sQ0FDVDRpRCxNQUFPd3lCLEdBQWMsY0FFckJzQixHQUNBMTJFLEVBQUswMkUsUUFBVSxDQUNYL1osUUFBUyxDQUNMLzJELEtBQU1tZSxNQUNOb3hELFVBQVUsRUFDVmgzQixRQUFTdTRCLEVBQVVBLEVBQVFuOEMsUUFBVSxHQUNyQ3FpQyxRQUFTLHFCQUNUN2dFLE1BQU8yNkUsSUFHZjEyRSxFQUFLMjJFLE9BQVN2QixHQUFjLE1BRzVCcDFFLEVBQUsyMkUsT0FBU3ZCLEdBQWMsS0FHaENwMUUsRUFBSzZ5QixLQUFPbWlELEdBQW9CbmlELEVBQU0sMkNBQ3RDN3lCLEVBQUswMkIsR0FBS3MrQyxHQUFvQnQrQyxFQUFJLG1CQUNsQzRrQyxFQUFJa0MsaUJBQWlCLENBQ2pCQyxRQUFTMlksRUFDVHg5RCxNQUFPLENBQ0g4a0QsTUFBTyxvQkFDUEksU0FBVXBuQyxFQUFHOHRDLFNBQ2IxcUQsS0FBTXdoRCxFQUFJNzZELE1BQ1ZULE9BQ0FxMkUsUUFBU0ssRUFBVSxVQUFZLFVBQy9CN1ksUUFBU25uQyxFQUFHNHJCLEtBQUtnMEIsaUJBRXZCLElBS04sTUFBTUgsRUFBb0Isb0JBQXNCNzJFLEVBT2hELFNBQVM0MkUsSUFFTCxJQUFLVSxFQUNELE9BQ0osTUFBTW5kLEVBQVVtZCxFQUVoQixJQUFJemxCLEVBQVNvYSxFQUFRb0MsWUFBWWxtRSxRQUFPMmxFLElBQVVBLEVBQU03cUUsU0FFeEQ0dUQsRUFBT3ZxRCxRQUFRaXdFLElBRVhwZCxFQUFRaHlELFNBQ1IwcEQsRUFBU0EsRUFBTzFwRCxRQUFPMmxFLEdBRXZCMEosR0FBZ0IxSixFQUFPM1QsRUFBUWh5RCxPQUFPdVQsa0JBRzFDbTJDLEVBQU92cUQsU0FBUXdtRSxHQUFTMkosR0FBc0IzSixFQUFPdUUsRUFBT0MsYUFBYTcxRSxTQUN6RTA5RCxFQUFRd0MsVUFBWTlLLEVBQU96cEQsSUFBSXN2RSxHQUNuQyxDQUNBLElBQUlKLEVBekJKdGIsRUFBSUksYUFBYSxDQUNicDhELEdBQUk2MkUsRUFDSmxiLE1BQU8sVUFBWTM3RCxFQUFLLElBQU1BLEVBQUssSUFDbkNxOEQsS0FBTSxPQUNOQyxzQkFBdUIsa0JBc0IzQk4sRUFBSTU2RCxHQUFHbTdELGtCQUFpQnBDLElBQ3BCbWQsRUFBc0JuZCxFQUNsQkEsRUFBUWhnRCxNQUFRQSxHQUFPZ2dELEVBQVFxQyxjQUFnQnFhLEdBQy9DRCxHQUNKLElBS0o1YSxFQUFJNTZELEdBQUd5N0QsbUJBQWtCMUMsSUFDckIsR0FBSUEsRUFBUWhnRCxNQUFRQSxHQUFPZ2dELEVBQVFxQyxjQUFnQnFhLEVBQW1CLENBQ2xFLE1BQ00vSSxFQURTN0IsRUFBUW9DLFlBQ0ZKLE1BQUtILEdBQVNBLEVBQU05MUQsT0FBTzIvRCxVQUFZeGQsRUFBUTRDLFNBQ2hFK1EsSUFDQTNULEVBQVF6eEMsTUFBUSxDQUNaL2lCLFFBQVNpeUUsR0FBMEM5SixJQUcvRCxLQUVKOVIsRUFBSWdDLGtCQUFrQjZZLEdBQ3RCN2EsRUFBSWlDLG1CQUFtQjRZLEVBQWtCLEdBRWpELENBU0EsU0FBU2UsR0FBMEM5SixHQUMvQyxNQUFNLE9BQUU5MUQsR0FBVzgxRCxFQUNiK0osRUFBUyxDQUNYLENBQUUzYSxVQUFVLEVBQU8zMkQsSUFBSyxPQUFROUosTUFBT3ViLEVBQU9vUSxPQTZEbEQsT0EzRG1CLE1BQWZwUSxFQUFPaEUsTUFDUDZqRSxFQUFPNTZFLEtBQUssQ0FDUmlnRSxVQUFVLEVBQ1YzMkQsSUFBSyxPQUNMOUosTUFBT3ViLEVBQU9oRSxPQUd0QjZqRSxFQUFPNTZFLEtBQUssQ0FBRWlnRSxVQUFVLEVBQU8zMkQsSUFBSyxTQUFVOUosTUFBT3F4RSxFQUFNMVosS0FDdkQwWixFQUFNbnNFLEtBQUtoRixRQUNYazdFLEVBQU81NkUsS0FBSyxDQUNSaWdFLFVBQVUsRUFDVjMyRCxJQUFLLE9BQ0w5SixNQUFPLENBQ0g0Z0UsUUFBUyxDQUNMLzJELEtBQU0sS0FDTnV2RSxVQUFVLEVBQ1ZoM0IsUUFBU2l2QixFQUFNbnNFLEtBQ1Z5RyxLQUFJN0IsR0FBTyxHQUFHQSxFQUFJeU4sT0E5QjNDLFNBQXdCek4sR0FDcEIsT0FBSUEsRUFBSTBrRSxTQUNHMWtFLEVBQUl5a0UsV0FBYSxJQUFNLElBR3ZCemtFLEVBQUl5a0UsV0FBYSxJQUFNLEVBRXRDLENBdUJrRDhNLENBQWV2eEUsT0FDeEMwTSxLQUFLLEtBQ1ZxcUQsUUFBUyxhQUNUN2dFLE1BQU9xeEUsRUFBTW5zRSxTQUtOLE1BQW5CcVcsRUFBTzAwRCxVQUNQbUwsRUFBTzU2RSxLQUFLLENBQ1JpZ0UsVUFBVSxFQUNWMzJELElBQUssV0FDTDlKLE1BQU91YixFQUFPMDBELFdBR2xCb0IsRUFBTS9iLE1BQU1wMUQsUUFDWms3RSxFQUFPNTZFLEtBQUssQ0FDUmlnRSxVQUFVLEVBQ1YzMkQsSUFBSyxVQUNMOUosTUFBT3F4RSxFQUFNL2IsTUFBTTNwRCxLQUFJMnBELEdBQVNBLEVBQU0vNUMsT0FBT29RLFNBR2pEL25CLE9BQU9zQixLQUFLbXNFLEVBQU05MUQsT0FBT2dyQyxNQUFNcm1ELFFBQy9CazdFLEVBQU81NkUsS0FBSyxDQUNSaWdFLFVBQVUsRUFDVjMyRCxJQUFLLE9BQ0w5SixNQUFPcXhFLEVBQU05MUQsT0FBT2dyQyxPQUc1QjYwQixFQUFPNTZFLEtBQUssQ0FDUnNKLElBQUssUUFDTDIyRCxVQUFVLEVBQ1Z6Z0UsTUFBTyxDQUNINGdFLFFBQVMsQ0FDTC8yRCxLQUFNLEtBQ051dkUsVUFBVSxFQUNWaDNCLFFBQVNpdkIsRUFBTTNELE1BQU0vaEUsS0FBSStoRSxHQUFTQSxFQUFNbDNELEtBQUssUUFBT0EsS0FBSyxPQUN6RHFxRCxRQUFTLDRCQUNUN2dFLE1BQU9xeEUsRUFBTTNELFVBSWxCME4sQ0FDWCxDQUlBLE1BQU12QixHQUFXLFNBQ1hLLEdBQVcsUUFDWEQsR0FBVyxRQUVYRCxHQUFhLFNBR25CLFNBQVNpQixHQUE4QjVKLEdBQ25DLE1BQU1qUCxFQUFPLElBQ1AsT0FBRTdtRCxHQUFXODFELEVBQ0EsTUFBZjkxRCxFQUFPaEUsTUFDUDZxRCxFQUFLNWhFLEtBQUssQ0FDTjArRCxNQUFPbHhELE9BQU91TixFQUFPaEUsTUFDckIycUQsVUFBVyxFQUNYQyxnQkFYSyxVQWNUNW1ELEVBQU80dEQsU0FDUC9HLEVBQUs1aEUsS0FBSyxDQUNOMCtELE1BQU8sUUFDUGdELFVBQVcsRUFDWEMsZ0JBQWlCNlgsS0FHckIzSSxFQUFNaUssWUFDTmxaLEVBQUs1aEUsS0FBSyxDQUNOMCtELE1BQU8sVUFDUGdELFVBQVcsRUFDWEMsZ0JBQWlCMFgsS0FHckJ4SSxFQUFNa0ssa0JBQ05uWixFQUFLNWhFLEtBQUssQ0FDTjArRCxNQUFPLFFBQ1BnRCxVQUFXLEVBQ1hDLGdCQUFpQjhYLEtBR3JCNUksRUFBTW1LLGFBQ05wWixFQUFLNWhFLEtBQUssQ0FDTjArRCxNQUFPLFNBQ1BnRCxVQUFXLEVBQ1hDLGdCQUFpQitYLEtBR3JCMytELEVBQU8wMEQsVUFDUDdOLEVBQUs1aEUsS0FBSyxDQUNOMCtELE1BQWtDLGlCQUFwQjNqRCxFQUFPMDBELFNBQ2YsYUFBYTEwRCxFQUFPMDBELFdBQ3BCLFlBQ04vTixVQUFXLFNBQ1hDLGdCQTdDQyxVQWtEVCxJQUFJNStELEVBQUtnWSxFQUFPMi9ELFFBS2hCLE9BSlUsTUFBTjMzRSxJQUNBQSxFQUFLeUssT0FBT3l0RSxNQUNabGdFLEVBQU8yL0QsUUFBVTMzRSxHQUVkLENBQ0hBLEtBQ0EyN0QsTUFBTzNqRCxFQUFPb1EsS0FDZHkyQyxPQUNBMStDLFNBQVUydEQsRUFBTTN0RCxTQUFTL1gsSUFBSXN2RSxJQUVyQyxDQUVBLElBQUlRLEdBQWdCLEVBQ3BCLE1BQU1DLEdBQW9CLHFCQUMxQixTQUFTVixHQUFzQjNKLEVBQU93RSxHQUdsQyxNQUFNWSxFQUFnQlosRUFBYTlNLFFBQVE3b0UsUUFDdkMrb0UsRUFBa0I0TSxFQUFhOU0sUUFBUThNLEVBQWE5TSxRQUFRN29FLE9BQVMsR0FBSW14RSxFQUFNOTFELFFBQ25GODFELEVBQU1rSyxpQkFBbUJsSyxFQUFNbUssWUFBYy9FLEVBQ3hDQSxJQUNEcEYsRUFBTW1LLFlBQWMzRixFQUFhOU0sUUFBUS9sRCxNQUFLamlCLEdBQVNrb0UsRUFBa0Jsb0UsRUFBT3N3RSxFQUFNOTFELFdBRTFGODFELEVBQU0zdEQsU0FBUzdZLFNBQVE4d0UsR0FBY1gsR0FBc0JXLEVBQVk5RixJQUMzRSxDQUNBLFNBQVNpRixHQUE2QnpKLEdBQ2xDQSxFQUFNaUssWUFBYSxFQUNuQmpLLEVBQU0zdEQsU0FBUzdZLFFBQVFpd0UsR0FDM0IsQ0FDQSxTQUFTQyxHQUFnQjFKLEVBQU8zbEUsR0FDNUIsTUFBTTg0QyxFQUFReDJDLE9BQU9xakUsRUFBTTFaLElBQUk1MkQsTUFBTTI2RSxJQUVyQyxHQURBckssRUFBTWlLLFlBQWEsR0FDZDkyQixHQUFTQSxFQUFNdGtELE9BQVMsRUFDekIsT0FBTyxFQUlYLEdBRG9CLElBQUkyeEIsT0FBTzJ5QixFQUFNLEdBQUdoa0MsUUFBUSxNQUFPLElBQUtna0MsRUFBTSxJQUNsRDd3QixLQUFLam9CLEdBSWpCLE9BRkEybEUsRUFBTTN0RCxTQUFTN1ksU0FBUW9aLEdBQVM4MkQsR0FBZ0I5MkQsRUFBT3ZZLE1BRTdCLE1BQXRCMmxFLEVBQU05MUQsT0FBT29RLE1BQTJCLE1BQVhqZ0IsS0FDN0IybEUsRUFBTWlLLFdBQWFqSyxFQUFNMVosR0FBR2hrQyxLQUFLam9CLElBQzFCLEdBS2YsTUFBTWlnQixFQUFPMGxELEVBQU05MUQsT0FBT29RLEtBQUsxTSxjQUN6QjI4RCxFQUFjeEksR0FBT3puRCxHQUUzQixRQUFLamdCLEVBQU8rUyxXQUFXLE9BQ2xCbTlELEVBQVl6MkUsU0FBU3VHLEtBQVdpZ0IsRUFBS3htQixTQUFTdUcsUUFFL0Nrd0UsRUFBWW45RCxXQUFXL1MsS0FBV2lnQixFQUFLbE4sV0FBVy9TLFFBRWxEMmxFLEVBQU05MUQsT0FBT2hFLE9BQVF2SixPQUFPcWpFLEVBQU05MUQsT0FBT2hFLE1BQU1wUyxTQUFTdUcsS0FFckQybEUsRUFBTTN0RCxTQUFTVixNQUFLaUIsR0FBUzgyRCxHQUFnQjkyRCxFQUFPdlksSUFDL0QsQ0FpQkEsU0FBUytwRCxHQUFhdnNELEdBQ2xCLE1BQU1zbUUsRUFBVUMsRUFBb0J2bUUsRUFBUWtzRCxPQUFRbHNELEdBQzlDMnlFLEVBQWUzeUUsRUFBUTArRCxZQUFjQSxHQUNyQ2tVLEVBQW1CNXlFLEVBQVEyL0QsZ0JBQWtCQSxHQUM3Q3FELEVBQWdCaGpFLEVBQVF3c0QsUUFDOUIsSUFBZ0R3VyxFQUM1QyxNQUFNLElBQUlsa0QsTUFBTSwyR0FFcEIsTUFBTSt6RCxFQUFlOUgsS0FDZitILEVBQXNCL0gsS0FDdEJnSSxFQUFjaEksS0FDZDRCLEdBQWUsSUFBQXpqRSxZQUFXczZELEdBQ2hDLElBQUl3UCxFQUFrQnhQLEVBRWxCckYsR0FBYW4rRCxFQUFRaXpFLGdCQUFrQixzQkFBdUJ6bUIsVUFDOURBLFFBQVEwbUIsa0JBQW9CLFVBRWhDLE1BQU1DLEVBQWtCOVUsRUFBY2grRCxLQUFLLE1BQU0reUUsR0FBYyxHQUFLQSxJQUM5REMsRUFBZWhWLEVBQWNoK0QsS0FBSyxLQUFNMnBFLElBQ3hDc0osRUFFTmpWLEVBQWNoK0QsS0FBSyxLQUFNNnBFLElBNEJ6QixTQUFTaHVFLEVBQVFxM0UsRUFBYTVVLEdBSTFCLEdBREFBLEVBQWtCaGtFLEVBQU8sQ0FBQyxFQUFHZ2tFLEdBQW1CZ08sRUFBYTcxRSxPQUNsQyxpQkFBaEJ5OEUsRUFBMEIsQ0FDakMsTUFBTUMsRUFBcUIvVSxFQUFTa1UsRUFBY1ksRUFBYTVVLEVBQWdCbDhDLE1BQ3pFNHNELEVBQWUvSSxFQUFRcHFFLFFBQVEsQ0FBRXVtQixLQUFNK3dELEVBQW1CL3dELE1BQVFrOEMsR0FDbEVsUixFQUFPdVYsRUFBY3ZDLFdBQVcrUyxFQUFtQmpVLFVBU3pELE9BUFE5UixFQUFLbDRDLFdBQVcsTUFDaEIxWSxFQUFLLGFBQWEwMkUsbUJBQTZCOWxCLCtEQUN6QzRoQixFQUFheFAsUUFBUTdvRSxRQUMzQjZGLEVBQUssMENBQTBDMDJFLE1BSWhENTRFLEVBQU82NEUsRUFBb0JuRSxFQUFjLENBQzVDejVELE9BQVEwOUQsRUFBYWpFLEVBQWF6NUQsUUFDbENrcEQsS0FBTW9MLEdBQU9zSixFQUFtQjFVLE1BQ2hDMkUsb0JBQWdCaG5FLEVBQ2hCZ3hELFFBRVIsQ0FDQSxJQUFJZ21CLEVBRUosR0FBSSxTQUFVRixFQUVOLFdBQVlBLEtBQ1YsU0FBVUEsSUFFWjc0RSxPQUFPc0IsS0FBS3UzRSxFQUFZMzlELFFBQVE1ZSxRQUNoQzZGLEVBQUssU0FFTDAyRSxFQUFZOXdELHNHQUVoQmd4RCxFQUFrQjk0RSxFQUFPLENBQUMsRUFBRzQ0RSxFQUFhLENBQ3RDOXdELEtBQU1nOEMsRUFBU2tVLEVBQWNZLEVBQVk5d0QsS0FBTWs4QyxFQUFnQmw4QyxNQUFNQSxXQUd4RSxDQUVELE1BQU1peEQsRUFBZS80RSxFQUFPLENBQUMsRUFBRzQ0RSxFQUFZMzlELFFBQzVDLElBQUssTUFBTWhWLEtBQU84eUUsRUFDVyxNQUFyQkEsRUFBYTl5RSxXQUNOOHlFLEVBQWE5eUUsR0FJNUI2eUUsRUFBa0I5NEUsRUFBTyxDQUFDLEVBQUc0NEUsRUFBYSxDQUN0QzM5RCxPQUFReTlELEVBQWFFLEVBQVkzOUQsVUFJckMrb0QsRUFBZ0Ivb0QsT0FBU3k5RCxFQUFhMVUsRUFBZ0Ivb0QsT0FDMUQsQ0FDQSxNQUFNeTVELEVBQWUvSSxFQUFRcHFFLFFBQVF1M0UsRUFBaUI5VSxHQUNoREcsRUFBT3lVLEVBQVl6VSxNQUFRLEdBQ2NBLElBQVNBLEVBQUt2cEQsV0FBVyxNQUNwRTFZLEVBQUssbUVBQW1FaWlFLGFBQWdCQSxPQUk1RnVRLEVBQWF6NUQsT0FBU3U5RCxFQUFnQkcsRUFBYWpFLEVBQWF6NUQsU0FDaEUsTUFBTTJwRCxFQTk0RmQsU0FBc0JJLEVBQWdCdnNELEdBQ2xDLE1BQU13ckQsRUFBUXhyRCxFQUFTd3JELE1BQVFlLEVBQWV2c0QsRUFBU3dyRCxPQUFTLEdBQ2hFLE9BQU94ckQsRUFBU3FQLE1BQVFtOEMsR0FBUyxLQUFPQSxHQUFTeHJELEVBQVMwckQsTUFBUSxHQUN0RSxDQTI0RnlCNlUsQ0FBYWYsRUFBa0JqNEUsRUFBTyxDQUFDLEVBQUc0NEUsRUFBYSxDQUNwRXpVLE1BNTFDUXoyQixFQTQxQ1N5MkIsRUEzMUNsQitLLEdBQWF4aEMsR0FDZi93QixRQUFRbXlELEdBQW1CLEtBQzNCbnlELFFBQVFxeUQsR0FBb0IsS0FDNUJyeUQsUUFBUWl5RCxHQUFjLE1BeTFDbkI5bUQsS0FBTTRzRCxFQUFhNXNELFFBNzFDL0IsSUFBb0I0bEIsRUErMUNaLE1BQU1vbEIsRUFBT3VWLEVBQWN2QyxXQUFXbEIsR0FTdEMsT0FQUTlSLEVBQUtsNEMsV0FBVyxNQUNoQjFZLEVBQUssYUFBYTAyRSxtQkFBNkI5bEIsK0RBRXpDNGhCLEVBQWF4UCxRQUFRN29FLFFBQzNCNkYsRUFBSywwQ0FBMEMsU0FBVTAyRSxFQUFjQSxFQUFZOXdELEtBQU84d0QsTUFHM0Y1NEUsRUFBTyxDQUNWNGtFLFdBR0FULE9BQ0FGLE1BTUFnVSxJQUFxQmpULEdBQ2Y2SyxHQUFlK0ksRUFBWTNVLE9BQzFCMlUsRUFBWTNVLE9BQVMsQ0FBQyxHQUM5QnlRLEVBQWMsQ0FDYjVMLG9CQUFnQmhuRSxFQUNoQmd4RCxRQUVSLENBQ0EsU0FBU21tQixFQUFpQm5pRCxHQUN0QixNQUFxQixpQkFBUEEsRUFDUmd0QyxFQUFTa1UsRUFBY2xoRCxFQUFJazdDLEVBQWE3MUUsTUFBTTJyQixNQUM5QzluQixFQUFPLENBQUMsRUFBRzgyQixFQUNyQixDQUNBLFNBQVNvaUQsRUFBd0JwaUQsRUFBSTdELEdBQ2pDLEdBQUlvbEQsSUFBb0J2aEQsRUFDcEIsT0FBT3N5QyxFQUFrQixFQUF5QyxDQUM5RG4yQyxPQUNBNkQsTUFHWixDQUNBLFNBQVNuNkIsRUFBS202QixHQUNWLE9BQU9xaUQsRUFBaUJyaUQsRUFDNUIsQ0FJQSxTQUFTc2lELEVBQXFCdGlELEdBQzFCLE1BQU11aUQsRUFBY3ZpRCxFQUFHb3VDLFFBQVFwdUMsRUFBR291QyxRQUFRN29FLE9BQVMsR0FDbkQsR0FBSWc5RSxHQUFlQSxFQUFZak4sU0FBVSxDQUNyQyxNQUFNLFNBQUVBLEdBQWFpTixFQUNyQixJQUFJQyxFQUF3QyxtQkFBYmxOLEVBQTBCQSxFQUFTdDFDLEdBQU1zMUMsRUFXeEUsR0FWaUMsaUJBQXRCa04sSUFDUEEsRUFDSUEsRUFBa0JoNEUsU0FBUyxNQUFRZzRFLEVBQWtCaDRFLFNBQVMsS0FDdkRnNEUsRUFBb0JMLEVBQWlCSyxHQUVwQyxDQUFFeHhELEtBQU13eEQsR0FHcEJBLEVBQWtCcitELE9BQVMsQ0FBQyxLQUcxQixTQUFVcStELE1BQ1YsU0FBVUEsR0FFWixNQURBcDNFLEVBQUssNEJBQTRCN0IsS0FBS08sVUFBVTA0RSxFQUFtQixLQUFNLDRCQUE0QnhpRCxFQUFHOHRDLHFGQUNsRyxJQUFJemdELE1BQU0sb0JBRXBCLE9BQU9ua0IsRUFBTyxDQUNWaWtFLE1BQU9udEMsRUFBR210QyxNQUNWRSxLQUFNcnRDLEVBQUdxdEMsS0FFVGxwRCxPQUFRLFNBQVVxK0QsRUFBb0IsQ0FBQyxFQUFJeGlELEVBQUc3YixRQUMvQ3ErRCxFQUNQLENBQ0osQ0FDQSxTQUFTSCxFQUFpQnJpRCxFQUFJZ3lDLEdBQzFCLE1BQU15USxFQUFrQmxCLEVBQWtCOTJFLEVBQVF1MUIsR0FDNUM3RCxFQUFPKytDLEVBQWE3MUUsTUFDcEJpRSxFQUFPMDJCLEVBQUcxTyxNQUNWb3hELEVBQVExaUQsRUFBRzBpRCxNQUVYNzhELEdBQXlCLElBQWZtYSxFQUFHbmEsUUFDYjg4RCxFQUFpQkwsRUFBcUJHLEdBQzVDLEdBQUlFLEVBQ0EsT0FBT04sRUFBaUJuNUUsRUFBT2k1RSxFQUFpQlEsR0FBaUIsQ0FDN0RyeEQsTUFBaUMsaUJBQW5CcXhELEVBQ1J6NUUsRUFBTyxDQUFDLEVBQUdJLEVBQU1xNUUsRUFBZXJ4RCxPQUNoQ2hvQixFQUNObzVFLFFBQ0E3OEQsWUFHSm1zRCxHQUFrQnlRLEdBRXRCLE1BQU1HLEVBQWFILEVBRW5CLElBQUl6QyxFQVlKLE9BYkE0QyxFQUFXNVEsZUFBaUJBLEdBRXZCMFEsR0FBU3pVLEVBQW9Ca1QsRUFBa0JobEQsRUFBTXNtRCxLQUN0RHpDLEVBQVUxTixFQUFrQixHQUEyQyxDQUFFdHlDLEdBQUk0aUQsRUFBWXptRCxTQUV6RjBtRCxFQUFhMW1ELEVBQU1BLEdBR25CLEdBR0EsS0FFSTZqRCxFQUFVdDFFLFFBQVFELFFBQVF1MUUsR0FBVy9ELEVBQVMyRyxFQUFZem1ELElBQzdEamYsT0FBT1csR0FBVTAwRCxFQUFvQjEwRCxHQUVsQzAwRCxFQUFvQjEwRCxFQUFPLEdBQ3JCQSxFQUNBaWxFLEVBQVlqbEUsR0FFbEJrbEUsRUFBYWxsRSxFQUFPK2tFLEVBQVl6bUQsS0FDbkN4aEIsTUFBTXFsRSxJQUNQLEdBQUlBLEdBQ0EsR0FBSXpOLEVBQW9CeU4sRUFBUyxHQUM3QixPQUVJL1IsRUFBb0JrVCxFQUFrQjEyRSxFQUFRdTFFLEVBQVFoZ0QsSUFBSzRpRCxJQUUzRDVRLElBRUNBLEVBQWVnUixPQUFTaFIsRUFBZWdSLE9BRWhDaFIsRUFBZWdSLE9BQVMsRUFDMUIsR0FBSyxJQUNYNTNFLEVBQUssMkVBQTJFK3dCLEVBQUsyeEMsaUJBQWlCOFUsRUFBVzlVLDhGQUMxR3BqRSxRQUFROHJCLE9BQU8sSUFBSW5KLE1BQU0sMkNBRTdCZzFELEVBRVBuNUUsRUFBTyxDQUVIMmMsV0FDRHM4RCxFQUFpQm5DLEVBQVFoZ0QsSUFBSyxDQUM3QjFPLE1BQTZCLGlCQUFmMHVELEVBQVFoZ0QsR0FDaEI5MkIsRUFBTyxDQUFDLEVBQUdJLEVBQU0wMkUsRUFBUWhnRCxHQUFHMU8sT0FDNUJob0IsRUFDTm81RSxVQUdKMVEsR0FBa0I0USxRQUt0QjVDLEVBQVVpRCxFQUFtQkwsRUFBWXptRCxHQUFNLEVBQU10VyxFQUFTdmMsR0FHbEUsT0FEQTQ1RSxFQUFpQk4sRUFBWXptRCxFQUFNNmpELEdBQzVCQSxDQUFPLEdBRXRCLENBTUEsU0FBU21ELEVBQWlDbmpELEVBQUk3RCxHQUMxQyxNQUFNdGUsRUFBUXVrRSxFQUF3QnBpRCxFQUFJN0QsR0FDMUMsT0FBT3RlLEVBQVFuVCxRQUFROHJCLE9BQU8zWSxHQUFTblQsUUFBUUQsU0FDbkQsQ0FFQSxTQUFTd3hFLEVBQVNqOEMsRUFBSTdELEdBQ2xCLElBQUlxK0MsRUFDSixNQUFPNEksRUFBZ0JDLEVBQWlCQyxHQXlWaEQsU0FBZ0N0akQsRUFBSTdELEdBQ2hDLE1BQU1pbkQsRUFBaUIsR0FDakJDLEVBQWtCLEdBQ2xCQyxFQUFrQixHQUNsQmx4QyxFQUFNbkIsS0FBSzdaLElBQUkrRSxFQUFLaXlDLFFBQVE3b0UsT0FBUXk2QixFQUFHb3VDLFFBQVE3b0UsUUFDckQsSUFBSyxJQUFJUCxFQUFJLEVBQUdBLEVBQUlvdEMsRUFBS3B0QyxJQUFLLENBQzFCLE1BQU11K0UsRUFBYXBuRCxFQUFLaXlDLFFBQVFwcEUsR0FDNUJ1K0UsSUFDSXZqRCxFQUFHb3VDLFFBQVF5SSxNQUFLajJELEdBQVUwdEQsRUFBa0IxdEQsRUFBUTJpRSxLQUNwREYsRUFBZ0J4OUUsS0FBSzA5RSxHQUVyQkgsRUFBZXY5RSxLQUFLMDlFLElBRTVCLE1BQU1DLEVBQVd4akQsRUFBR291QyxRQUFRcHBFLEdBQ3hCdytFLElBRUtybkQsRUFBS2l5QyxRQUFReUksTUFBS2oyRCxHQUFVMHRELEVBQWtCMXRELEVBQVE0aUUsTUFDdkRGLEVBQWdCejlFLEtBQUsyOUUsR0FHakMsQ0FDQSxNQUFPLENBQUNKLEVBQWdCQyxFQUFpQkMsRUFDN0MsQ0EvV21FRyxDQUF1QnpqRCxFQUFJN0QsR0FFdEZxK0MsRUFBU0YsR0FBd0I4SSxFQUFleDhFLFVBQVcsbUJBQW9CbzVCLEVBQUk3RCxHQUVuRixJQUFLLE1BQU12YixLQUFVd2lFLEVBQ2pCeGlFLEVBQU80MEQsWUFBWXRsRSxTQUFRZzhDLElBQ3ZCc3VCLEVBQU8zMEUsS0FBS2swRSxHQUFpQjd0QixFQUFPbHNCLEVBQUk3RCxHQUFNLElBR3RELE1BQU11bkQsRUFBMEJQLEVBQWlDdjBFLEtBQUssS0FBTW94QixFQUFJN0QsR0FHaEYsT0FGQXErQyxFQUFPMzBFLEtBQUs2OUUsR0FFSkMsR0FBY25KLEdBQ2pCNy9ELE1BQUssS0FFTjYvRCxFQUFTLEdBQ1QsSUFBSyxNQUFNdHVCLEtBQVNrMUIsRUFBYW54QixPQUM3QnVxQixFQUFPMzBFLEtBQUtrMEUsR0FBaUI3dEIsRUFBT2xzQixFQUFJN0QsSUFHNUMsT0FEQXErQyxFQUFPMzBFLEtBQUs2OUUsR0FDTEMsR0FBY25KLEVBQU8sSUFFM0I3L0QsTUFBSyxLQUVONi9ELEVBQVNGLEdBQXdCK0ksRUFBaUIsb0JBQXFCcmpELEVBQUk3RCxHQUMzRSxJQUFLLE1BQU12YixLQUFVeWlFLEVBQ2pCemlFLEVBQU82MEQsYUFBYXZsRSxTQUFRZzhDLElBQ3hCc3VCLEVBQU8zMEUsS0FBS2swRSxHQUFpQjd0QixFQUFPbHNCLEVBQUk3RCxHQUFNLElBS3RELE9BRkFxK0MsRUFBTzMwRSxLQUFLNjlFLEdBRUxDLEdBQWNuSixFQUFPLElBRTNCNy9ELE1BQUssS0FFTjYvRCxFQUFTLEdBQ1QsSUFBSyxNQUFNNTVELEtBQVVvZixFQUFHb3VDLFFBRXBCLEdBQUl4dEQsRUFBTzhULGNBQWdCeUgsRUFBS2l5QyxRQUFRNWpFLFNBQVNvVyxHQUM3QyxHQUFJM1EsRUFBUTJRLEVBQU84VCxhQUNmLElBQUssTUFBTUEsS0FBZTlULEVBQU84VCxZQUM3QjhsRCxFQUFPMzBFLEtBQUtrMEUsR0FBaUJybEQsRUFBYXNMLEVBQUk3RCxTQUdsRHErQyxFQUFPMzBFLEtBQUtrMEUsR0FBaUJuNUQsRUFBTzhULFlBQWFzTCxFQUFJN0QsSUFNakUsT0FGQXErQyxFQUFPMzBFLEtBQUs2OUUsR0FFTEMsR0FBY25KLEVBQU8sSUFFM0I3L0QsTUFBSyxLQUdOcWxCLEVBQUdvdUMsUUFBUWwrRCxTQUFRMFEsR0FBV0EsRUFBTzgwRCxlQUFpQixDQUFDLElBRXZEOEUsRUFBU0YsR0FBd0JnSixFQUFpQixtQkFBb0J0akQsRUFBSTdELEdBQzFFcStDLEVBQU8zMEUsS0FBSzY5RSxHQUVMQyxHQUFjbkosTUFFcEI3L0QsTUFBSyxLQUVONi9ELEVBQVMsR0FDVCxJQUFLLE1BQU10dUIsS0FBU20xQixFQUFvQnB4QixPQUNwQ3VxQixFQUFPMzBFLEtBQUtrMEUsR0FBaUI3dEIsRUFBT2xzQixFQUFJN0QsSUFHNUMsT0FEQXErQyxFQUFPMzBFLEtBQUs2OUUsR0FDTEMsR0FBY25KLEVBQU8sSUFHM0J0OUQsT0FBTUosR0FBT3kxRCxFQUFvQnoxRCxFQUFLLEdBQ3JDQSxFQUNBcFMsUUFBUThyQixPQUFPMVosSUFDekIsQ0FDQSxTQUFTb21FLEVBQWlCbGpELEVBQUk3RCxFQUFNNmpELEdBR2hDLElBQUssTUFBTTl6QixLQUFTbzFCLEVBQVlyeEIsT0FDNUIvRCxFQUFNbHNCLEVBQUk3RCxFQUFNNmpELEVBQ3hCLENBTUEsU0FBU2lELEVBQW1CTCxFQUFZem1ELEVBQU15bkQsRUFBUS85RCxFQUFTdmMsR0FFM0QsTUFBTXVVLEVBQVF1a0UsRUFBd0JRLEVBQVl6bUQsR0FDbEQsR0FBSXRlLEVBQ0EsT0FBT0EsRUFFWCxNQUFNZ21FLEVBQW9CMW5ELElBQVM0MUMsRUFDN0J6Z0QsRUFBU283QyxFQUFpQjNSLFFBQVF6cEMsTUFBYixDQUFDLEVBR3hCc3lELElBR0kvOUQsR0FBV2crRCxFQUNYdFMsRUFBYzFyRCxRQUFRKzhELEVBQVc5VSxTQUFVNWtFLEVBQU8sQ0FDOUNnbkUsT0FBUTJULEdBQXFCdnlELEdBQVNBLEVBQU00K0MsUUFDN0M1bUUsSUFFSGlvRSxFQUFjMXJFLEtBQUsrOEUsRUFBVzlVLFNBQVV4a0UsSUFHaEQ0eEUsRUFBYTcxRSxNQUFRdTlFLEVBQ3JCQyxFQUFhRCxFQUFZem1ELEVBQU15bkQsRUFBUUMsR0FDdkNmLEdBQ0osQ0FDQSxJQUFJZ0IsRUE0RkosSUFFSUMsRUFGQUMsRUFBZ0IxSyxLQUNoQjJLLEVBQWdCM0ssS0FVcEIsU0FBU3lKLEVBQWFsbEUsRUFBT21pQixFQUFJN0QsR0FDN0IybUQsRUFBWWpsRSxHQUNaLE1BQU1veUMsRUFBT2cwQixFQUFjaDBCLE9BVTNCLE9BVElBLEVBQUsxcUQsT0FDTDBxRCxFQUFLLy9DLFNBQVF1VSxHQUFXQSxFQUFRNUcsRUFBT21pQixFQUFJN0QsTUFJdkMvd0IsRUFBSywyQ0FFVEUsUUFBUXVTLE1BQU1BLElBRVhuVCxRQUFROHJCLE9BQU8zWSxFQUMxQixDQVFBLFNBQVNpbEUsRUFBWWhtRSxHQVVqQixPQVRLaW5FLElBRURBLEdBQVNqbkUsRUEzSFRnbkUsSUFFSkEsRUFBd0J2UyxFQUFjSixRQUFPLENBQUNueEMsRUFBSWtrRCxFQUFPdG1FLEtBQ3JELElBQUtxOUQsRUFBT2tKLFVBQ1IsT0FFSixNQUFNdkIsRUFBYW40RSxFQUFRdTFCLEdBSXJCMmlELEVBQWlCTCxFQUFxQk0sR0FDNUMsR0FBSUQsRUFFQSxZQURBTixFQUFpQm41RSxFQUFPeTVFLEVBQWdCLENBQUU5OEQsU0FBUyxJQUFTKzhELEdBQVkxbEUsTUFBTTR2RCxHQUdsRnlVLEVBQWtCcUIsRUFDbEIsTUFBTXptRCxFQUFPKytDLEVBQWE3MUUsTUFwOEZ0QyxJQUE0QjhKLEVBQUtpMUUsRUFzOEZqQjFYLElBdDhGWXY5RCxFQXU4Rk9pZ0UsRUFBYWp6QyxFQUFLMnhDLFNBQVVsd0QsRUFBS3l4RCxPQXY4Rm5DK1UsRUF1OEYyQ25WLElBdDhGeEVLLEVBQWdCamdFLElBQUlGLEVBQUtpMUUsSUF3OEZqQm5JLEVBQVMyRyxFQUFZem1ELEdBQ2hCamYsT0FBT1csR0FDSjAwRCxFQUFvQjEwRCxFQUFPLElBQ3BCQSxFQUVQMDBELEVBQW9CMTBELEVBQU8sSUFVM0J3a0UsRUFBaUJ4a0UsRUFBTW1pQixHQUFJNGlELEdBR3RCam9FLE1BQUtxbEUsSUFJRnpOLEVBQW9CeU4sRUFBUyxNQUU1QnBpRSxFQUFLeXhELE9BQ056eEQsRUFBSzFPLE9BQVN5L0QsRUFBZWxwRSxLQUM3QjhyRSxFQUFjQyxJQUFJLEdBQUcsRUFDekIsSUFFQ3QwRCxNQUFNNHZELEdBRUpwaUUsUUFBUThyQixXQUdmNVksRUFBS3l4RCxPQUNMa0MsRUFBY0MsSUFBSTV6RCxFQUFLeXhELE9BQU8sR0FHM0IwVCxFQUFhbGxFLEVBQU8ra0UsRUFBWXptRCxNQUV0Q3hoQixNQUFNcWxFLEtBQ1BBLEVBQ0lBLEdBQ0lpRCxFQUVBTCxFQUFZem1ELEdBQU0sTUFHbEJ2ZSxFQUFLeXhELFFBR0prRCxFQUFvQnlOLEVBQVMsR0FDOUJ6TyxFQUFjQyxJQUFJNXpELEVBQUt5eEQsT0FBTyxHQUV6Qnp4RCxFQUFLMU8sT0FBU3kvRCxFQUFlbHBFLEtBQ2xDOHNFLEVBQW9CeU4sRUFBUyxLQUc3QnpPLEVBQWNDLElBQUksR0FBRyxJQUc3QjBSLEVBQWlCTixFQUFZem1ELEVBQU02akQsRUFBUSxJQUUxQzlpRSxNQUFNNHZELEVBQUssS0F5Q2hCa1gsRUFDSy96QixPQUNBLy9DLFNBQVEsRUFBRXpGLEVBQVMrckIsS0FBYTFaLEVBQU0wWixFQUFPMVosR0FBT3JTLE1BQ3pEdTVFLEVBQWN6SyxTQUVYejhELENBQ1gsQ0FFQSxTQUFTK2xFLEVBQWE3aUQsRUFBSTdELEVBQU15bkQsRUFBUUMsR0FDcEMsTUFBTSxlQUFFckMsR0FBbUJqekUsRUFDM0IsSUFBS20rRCxJQUFjOFUsRUFDZixPQUFPOTJFLFFBQVFELFVBQ25CLE1BQU0yNUUsR0FBbUJSLEdBMWpHakMsU0FBZ0N6MEUsR0FDNUIsTUFBTStnRSxFQUFTWixFQUFnQm5sRSxJQUFJZ0YsR0FHbkMsT0FEQW1nRSxFQUFnQm5oRSxPQUFPZ0IsR0FDaEIrZ0UsQ0FDWCxDQXFqRzJDbVUsQ0FBdUJqVixFQUFhcHZDLEVBQUc4dEMsU0FBVSxNQUM5RStWLElBQXNCRCxJQUNwQjdvQixRQUFRenBDLE9BQ1J5cEMsUUFBUXpwQyxNQUFNNCtDLFFBQ2xCLEtBQ0osT0FBTyxJQUFBM3hELFlBQ0Y1RCxNQUFLLElBQU02bUUsRUFBZXhoRCxFQUFJN0QsRUFBTWlvRCxLQUNwQ3pwRSxNQUFLaXpELEdBQVlBLEdBem9HOUIsU0FBMEJBLEdBQ3RCLElBQUkwVyxFQUNKLEdBQUksT0FBUTFXLEVBQVUsQ0FDbEIsTUFBTTJXLEVBQWEzVyxFQUFTL2pELEdBQ3RCMjZELEVBQXFDLGlCQUFmRCxHQUEyQkEsRUFBV3pnRSxXQUFXLEtBc0I3RSxLQUFzRSxpQkFBaEI4cEQsRUFBUy9qRCxJQUN0RDI2RCxHQUFpQi8zRCxTQUFTZzRELGVBQWU3VyxFQUFTL2pELEdBQUdwTixNQUFNLEtBQzVELElBQ0ksTUFBTWlvRSxFQUFVajRELFNBQVM4bkIsY0FBY3E1QixFQUFTL2pELElBQ2hELEdBQUkyNkQsR0FBZ0JFLEVBR2hCLFlBRkF0NUUsRUFBSyxpQkFBaUJ3aUUsRUFBUy9qRCx3REFBd0QrakQsRUFBUy9qRCxvQ0FTeEcsQ0FKQSxNQUFPL00sR0FHSCxZQUZBMVIsRUFBSyxpQkFBaUJ3aUUsRUFBUy9qRCwrUUFHbkMsQ0FHUixNQUFNQSxFQUEyQixpQkFBZjA2RCxFQUNaQyxFQUNJLzNELFNBQVNnNEQsZUFBZUYsRUFBVzluRSxNQUFNLElBQ3pDZ1EsU0FBUzhuQixjQUFjZ3dDLEdBQzNCQSxFQUNOLElBQUsxNkQsRUFHRCxZQURJemUsRUFBSyx5Q0FBeUN3aUUsRUFBUy9qRCxtQ0FHL0R5NkQsRUFsRVIsU0FBNEJ6NkQsRUFBSTg2RCxHQUM1QixNQUFNQyxFQUFVbjRELFNBQVNvNEQsZ0JBQWdCeDhCLHdCQUNuQ3k4QixFQUFTajdELEVBQUd3K0Isd0JBQ2xCLE1BQU8sQ0FDSDA4QixTQUFVSixFQUFPSSxTQUNqQnQ4QixLQUFNcThCLEVBQU9yOEIsS0FBT204QixFQUFRbjhCLE1BQVFrOEIsRUFBT2w4QixNQUFRLEdBQ25ERSxJQUFLbThCLEVBQU9uOEIsSUFBTWk4QixFQUFRajhCLEtBQU9nOEIsRUFBT2g4QixLQUFPLEdBRXZELENBMEQwQnE4QixDQUFtQm43RCxFQUFJK2pELEVBQzdDLE1BRUkwVyxFQUFrQjFXLEVBRWxCLG1CQUFvQm5oRCxTQUFTbzRELGdCQUFnQjkyQyxNQUM3QzVtQyxPQUFPODlFLFNBQVNYLEdBRWhCbjlFLE9BQU84OUUsU0FBaUMsTUFBeEJYLEVBQWdCNzdCLEtBQWU2N0IsRUFBZ0I3N0IsS0FBT3RoRCxPQUFPK25FLFlBQW9DLE1BQXZCb1YsRUFBZ0IzN0IsSUFBYzI3QixFQUFnQjM3QixJQUFNeGhELE9BQU9nb0UsWUFFN0osQ0Ewa0cwQytWLENBQWlCdFgsS0FDOUMxd0QsT0FBTUosR0FBT2ltRSxFQUFham1FLEVBQUtrakIsRUFBSTdELElBQzVDLENBQ0EsTUFBTXExQyxFQUFNbkMsR0FBVWtDLEVBQWNDLEdBQUduQyxHQUN2QyxJQUFJOFYsRUFDSixNQUFNQyxFQUFnQixJQUFJcjRFLElBQ3BCa3VFLEVBQVMsQ0FDWEMsZUFDQWlKLFdBQVcsRUFDWGpQLFNBcGhCSixTQUFrQm1RLEVBQWUzTyxHQUM3QixJQUFJN3FFLEVBQ0ErVSxFQVFKLE9BUElreEQsRUFBWXVULElBQ1p4NUUsRUFBU2dwRSxFQUFRcUMsaUJBQWlCbU8sR0FDbEN6a0UsRUFBUzgxRCxHQUdUOTFELEVBQVN5a0UsRUFFTnhRLEVBQVFLLFNBQVN0MEQsRUFBUS9VLEVBQ3BDLEVBMGdCSXlxRSxZQXpnQkosU0FBcUIxNUQsR0FDakIsTUFBTTBvRSxFQUFnQnpRLEVBQVFxQyxpQkFBaUJ0NkQsR0FDM0Mwb0UsRUFDQXpRLEVBQVF5QixZQUFZZ1AsR0FHcEJsNkUsRUFBSyxxQ0FBcUNpSSxPQUFPdUosTUFFekQsRUFrZ0JJMm9FLFNBOWZKLFNBQWtCM29FLEdBQ2QsUUFBU2k0RCxFQUFRcUMsaUJBQWlCdDZELEVBQ3RDLEVBNmZJcTZELFVBbGdCSixXQUNJLE9BQU9wQyxFQUFRb0MsWUFBWWptRSxLQUFJdzBFLEdBQWdCQSxFQUFhNWtFLFFBQ2hFLEVBaWdCSW5XLFVBQ0E4RCxVQUNBMUksT0FDQWdnQixRQWpaSixTQUFpQm1hLEdBQ2IsT0FBT242QixFQUFLcUQsRUFBT2k1RSxFQUFpQm5pRCxHQUFLLENBQUVuYSxTQUFTLElBQ3hELEVBZ1pJMnJELEtBQ0ExQixLQUFNLElBQU0wQixHQUFJLEdBQ2hCekIsUUFBUyxJQUFNeUIsRUFBRyxHQUNsQnNPLFdBQVlzQixFQUFhMXhFLElBQ3pCKzFFLGNBQWVwRSxFQUFvQjN4RSxJQUNuQ3F3RSxVQUFXdUIsRUFBWTV4RSxJQUN2QnVtQixRQUFTZ3VELEVBQWN2MEUsSUFDdkJnMkUsUUF2REosV0FDSSxPQUFJM0IsR0FBUzdJLEVBQWE3MUUsUUFBVTBzRSxFQUN6QnJuRSxRQUFRRCxVQUNaLElBQUlDLFNBQVEsQ0FBQ0QsRUFBUytyQixLQUN6Qnd0RCxFQUFjdDBFLElBQUksQ0FBQ2pGLEVBQVMrckIsR0FBUSxHQUU1QyxFQWtESXdQLFFBQVFqakIsR0FDSixNQUFNazRELEVBQVMxeUUsS0FDZndhLEVBQUk5SCxVQUFVLGFBQWNtaEUsSUFDNUJyNUQsRUFBSTlILFVBQVUsYUFBY21pRSxJQUM1QnI2RCxFQUFJM0gsT0FBTzRqQixpQkFBaUIybUQsUUFBVTFLLEVBQ3RDaHlFLE9BQU9pMkIsZUFBZW5jLEVBQUkzSCxPQUFPNGpCLGlCQUFrQixTQUFVLENBQ3pERyxZQUFZLEVBQ1poMUIsSUFBSyxLQUFNLElBQUE4TixPQUFNaWpFLEtBS2pCeE8sSUFHQ3lZLEdBQ0RqSyxFQUFhNzFFLFFBQVUwc0UsSUFFdkJvVCxHQUFVLEVBQ1Z0L0UsRUFBSzByRSxFQUFjNXZELFVBQVV6RSxPQUFNSixJQUUzQjFSLEVBQUssNkNBQThDMFIsRUFBSSxLQUduRSxNQUFNOG9FLEVBQWdCLENBQUMsRUFDdkIsSUFBSyxNQUFNejJFLEtBQU80aUUsRUFFZDZULEVBQWN6MkUsSUFBTyxJQUFBb0IsV0FBUyxJQUFNMnFFLEVBQWE3MUUsTUFBTThKLEtBRTNENFQsRUFBSWtNLFFBQVFrcUQsR0FBVzhCLEdBQ3ZCbDRELEVBQUlrTSxRQUFRbXFELElBQWtCLElBQUEzbUUsVUFBU216RSxJQUN2QzdpRSxFQUFJa00sUUFBUW9xRCxHQUF1QjZCLEdBQ25DLE1BQU0ySyxFQUFhOWlFLEVBQUkySSxRQUN2QjA1RCxFQUFjMTFFLElBQUlxVCxHQUNsQkEsRUFBSTJJLFFBQVUsV0FDVjA1RCxFQUFjajNFLE9BQU80VSxHQUVqQnFpRSxFQUFjaHhFLEtBQU8sSUFFckJtdEUsRUFBa0J4UCxFQUNsQitSLEdBQXlCQSxJQUN6QkEsRUFBd0IsS0FDeEI1SSxFQUFhNzFFLE1BQVEwc0UsRUFDckJvVCxHQUFVLEVBQ1ZwQixHQUFRLEdBRVo4QixHQUNKLEVBRTBFblosR0FDdEVwSSxHQUFZdmhELEVBQUtrNEQsRUFBUXBHLEVBRWpDLEdBRUosT0FBT29HLENBQ1gsQ0FDQSxTQUFTMEksR0FBY25KLEdBQ25CLE9BQU9BLEVBQU90K0IsUUFBTyxDQUFDdytCLEVBQVN4dUIsSUFBVXd1QixFQUFRLy9ELE1BQUssSUFBTXV4QyxPQUFVeGhELFFBQVFELFVBQ2xGLENBNkJBLFNBQVNxN0UsS0FDTCxPQUFPLElBQUF6MkQsUUFBTzhwRCxHQUNsQixDQUtBLFNBQVM0TSxLQUNMLE9BQU8sSUFBQTEyRCxRQUFPK3BELEdBQ2xCLElDM2dISTRNLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQmw3RSxJQUFqQm03RSxFQUNILE9BQU9BLEVBQWF6cEIsUUFHckIsSUFBSUQsRUFBU3VwQixFQUF5QkUsR0FBWSxDQUdqRHhwQixRQUFTLENBQUMsR0FPWCxPQUhBMHBCLEVBQW9CRixHQUFVenBCLEVBQVFBLEVBQU9DLFFBQVN1cEIsR0FHL0N4cEIsRUFBT0MsT0FDZixDQ3JCQXVwQixFQUFvQmxnRixFQUFLMDJELElBQ3hCLElBQUlwakQsRUFBU29qRCxHQUFVQSxFQUFPaG1DLFdBQzdCLElBQU9nbUMsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREF3cEIsRUFBb0IvK0IsRUFBRTd0QyxFQUFRLENBQUUxVSxFQUFHMFUsSUFDNUJBLENBQU0sRUNMZDRzRSxFQUFvQi8rQixFQUFJLENBQUN3VixFQUFTMnBCLEtBQ2pDLElBQUksSUFBSWwzRSxLQUFPazNFLEVBQ1hKLEVBQW9CbjdELEVBQUV1N0QsRUFBWWwzRSxLQUFTODJFLEVBQW9CbjdELEVBQUU0eEMsRUFBU3Z0RCxJQUM1RWxHLE9BQU9pMkIsZUFBZXc5QixFQUFTdnRELEVBQUssQ0FBRWd3QixZQUFZLEVBQU1oMUIsSUFBS2s4RSxFQUFXbDNFLElBRTFFLEVDTkQ4MkUsRUFBb0I3K0UsRUFBSSxXQUN2QixHQUEwQixpQkFBZjZzRCxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU8xckQsTUFBUSxJQUFJdXBCLFNBQVMsY0FBYixFQUdoQixDQUZFLE1BQU9yb0IsR0FDUixHQUFzQixpQkFBWHRDLE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsR0NBeEI4K0UsRUFBb0JuN0QsRUFBSSxDQUFDb1MsRUFBSzd5QixJQUFVcEIsT0FBT3d6QyxVQUFVNzJDLGVBQWVzTyxLQUFLZ3BCLEVBQUs3eUIsR0NDbEY0N0UsRUFBb0IzdUUsRUFBS29sRCxJQUNILG9CQUFYanZELFFBQTBCQSxPQUFPaXBCLGFBQzFDenRCLE9BQU9pMkIsZUFBZXc5QixFQUFTanZELE9BQU9pcEIsWUFBYSxDQUFFcnhCLE1BQU8sV0FFN0Q0RCxPQUFPaTJCLGVBQWV3OUIsRUFBUyxhQUFjLENBQUVyM0QsT0FBTyxHQUFPLDBWQ2F4RDBkLEdBQU13d0IsRUFBQUEsRUFBQUEsV0FBVSxDQUNsQjd0QixRQUFTNGdFLEVBQUFBLFFBQ1Q3Z0UsT0FBUSxDQUFDOGdFLEVBQUFBLFdBRWJ4akUsRUFBSWdqQixJQUFJazFDLEVBQUFBLFNBQ1JsNEQsRUFBSWdqQixJQUFJaTdCLEVBQUFBLFNBQ1JqK0MsRUFBSTNILE9BQU8yRyxVQUFXbUksRUFHdEJuSCxFQUFJcWpCLE1BQU0sZUFHVmovQixPQUFPcS9FLGdCQUFpQkMsRUFBQUEsRUFBQUEsZUFDeEJELGVBQWVweEIsVUFBWSxTQUFDZixFQUFVQyxFQUFXcjVDLEdBQTZCLElBQWxCczVDLEVBQVcsVUFBSCw2Q0FBRyxHQUNyRWl5QixlQUFlL3hELE1BQU0yZ0MsVUFDbkJmLEVBQ0FDLEdBQ0EsU0FBQWx6QixHQUVFLE9BREFBLEVBQVd2N0IsS0FBS29WLEdBQ1RtbUIsQ0FDVCxHQUNBbXpCLEVBRUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9AdGFubmluL2NvbXBpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHRhbm5pbi9ldmFsdWF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9AdGFubmluL3BsdXJhbC1mb3Jtcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9AdGFubmluL3Bvc3RmaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHZ1ZS9kZXZ0b29scy1hcGkvbGliL2VzbS9jb25zdC5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL2Vudi5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B2dWUvZGV2dG9vbHMtYXBpL2xpYi9lc20vcHJveHkuanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHZ1ZS9kZXZ0b29scy1hcGkvbGliL2VzbS90aW1lLmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B2dWUvcmVhY3Rpdml0eS9kaXN0L3JlYWN0aXZpdHkuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWNvcmUvZGlzdC9ydW50aW1lLWNvcmUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWRvbS9kaXN0L3J1bnRpbWUtZG9tLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2NyZWF0ZUFkZEhvb2suanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlQ3VycmVudEhvb2suanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlRGlkSG9vay5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVEb2luZ0hvb2suanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlSGFzSG9vay5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVIb29rcy5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVSZW1vdmVIb29rLmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL2NyZWF0ZVJ1bkhvb2suanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvdmFsaWRhdGVIb29rTmFtZS5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS92YWxpZGF0ZU5hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2kxOG4vYnVpbGQtbW9kdWxlL2NyZWF0ZS1pMThuLmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaTE4bi9idWlsZC1tb2R1bGUvZGVmYXVsdC1pMThuLmpzIiwid2VicGFjazovL3dwdnVla2l0Ly4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaTE4bi9idWlsZC1tb2R1bGUvc3ByaW50Zi5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9BcHAudnVlIiwid2VicGFjazovL3dwdnVla2l0Ly4vc3JjL2NvbXBvbmVudHMvYnV0dG9uL0J1dHRvbi52dWUiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9zcmMvY29tcG9uZW50cy90YWJzL1RhYnMudnVlIiwid2VicGFjazovL3dwdnVla2l0Ly4vc3JjL3BhZ2VzL0dyYXBoLnZ1ZSIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9wYWdlcy9MaXN0LnZ1ZSIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9wYWdlcy9TZXR0aW5ncy52dWUiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9zcmMvaTE4bi5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9taXhpbnMvaTE4bi5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9zcmMvc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9zcmMvc3RvcmUvbW9kdWxlcy9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy91dGlscy9tZW51LWZpeC5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9tZW1pemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvc3ByaW50Zi1qcy9zcmMvc3ByaW50Zi5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL25vZGVfbW9kdWxlcy90YW5uaW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9BcHAudnVlPzY4MzkiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9zcmMvY29tcG9uZW50cy9idXR0b24vQnV0dG9uLnZ1ZT9hMGE1Iiwid2VicGFjazovL3dwdnVla2l0Ly4vc3JjL2NvbXBvbmVudHMvdGFicy9UYWJzLnZ1ZT81Y2EzIiwid2VicGFjazovL3dwdnVla2l0Ly4vc3JjL3BhZ2VzL0dyYXBoLnZ1ZT9iZjRhIiwid2VicGFjazovL3dwdnVla2l0Ly4vc3JjL3BhZ2VzL0xpc3QudnVlP2IwMTUiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9zcmMvcGFnZXMvU2V0dGluZ3MudnVlPzBjNjciLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvdnVleC9kaXN0L3Z1ZXguZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvLi9ub2RlX21vZHVsZXMvdnVlLXJvdXRlci9kaXN0L3Z1ZS1yb3V0ZXIubWpzIiwid2VicGFjazovL3dwdnVla2l0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dwdnVla2l0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dwdnVla2l0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93cHZ1ZWtpdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dwdnVla2l0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd3B2dWVraXQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93cHZ1ZWtpdC8uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwb3N0Zml4IGZyb20gJ0B0YW5uaW4vcG9zdGZpeCc7XG5pbXBvcnQgZXZhbHVhdGUgZnJvbSAnQHRhbm5pbi9ldmFsdWF0ZSc7XG5cbi8qKlxuICogR2l2ZW4gYSBDIGV4cHJlc3Npb24sIHJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYW4gYmUgY2FsbGVkIHRvIGV2YWx1YXRlIGl0c1xuICogcmVzdWx0LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGltcG9ydCBjb21waWxlIGZyb20gJ0B0YW5uaW4vY29tcGlsZSc7XG4gKlxuICogY29uc3QgZXZhbHVhdGUgPSBjb21waWxlKCAnbiA+IDEnICk7XG4gKlxuICogZXZhbHVhdGUoIHsgbjogMiB9ICk7XG4gKiAvLyDih5IgdHJ1ZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gQyBleHByZXNzaW9uLlxuICpcbiAqIEByZXR1cm4geyh2YXJpYWJsZXM/OntbdmFyaWFibGU6c3RyaW5nXToqfSk9Pip9IENvbXBpbGVkIGV2YWx1YXRvci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGlsZSggZXhwcmVzc2lvbiApIHtcblx0dmFyIHRlcm1zID0gcG9zdGZpeCggZXhwcmVzc2lvbiApO1xuXG5cdHJldHVybiBmdW5jdGlvbiggdmFyaWFibGVzICkge1xuXHRcdHJldHVybiBldmFsdWF0ZSggdGVybXMsIHZhcmlhYmxlcyApO1xuXHR9O1xufVxuIiwiLyoqXG4gKiBPcGVyYXRvciBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIE9QRVJBVE9SUyA9IHtcblx0JyEnOiBmdW5jdGlvbiggYSApIHtcblx0XHRyZXR1cm4gISBhO1xuXHR9LFxuXHQnKic6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhICogYjtcblx0fSxcblx0Jy8nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSAvIGI7XG5cdH0sXG5cdCclJzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgJSBiO1xuXHR9LFxuXHQnKyc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhICsgYjtcblx0fSxcblx0Jy0nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSAtIGI7XG5cdH0sXG5cdCc8JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgPCBiO1xuXHR9LFxuXHQnPD0nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA8PSBiO1xuXHR9LFxuXHQnPic6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhID4gYjtcblx0fSxcblx0Jz49JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgPj0gYjtcblx0fSxcblx0Jz09JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgPT09IGI7XG5cdH0sXG5cdCchPSc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhICE9PSBiO1xuXHR9LFxuXHQnJiYnOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSAmJiBiO1xuXHR9LFxuXHQnfHwnOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSB8fCBiO1xuXHR9LFxuXHQnPzonOiBmdW5jdGlvbiggYSwgYiwgYyApIHtcblx0XHRpZiAoIGEgKSB7XG5cdFx0XHR0aHJvdyBiO1xuXHRcdH1cblxuXHRcdHJldHVybiBjO1xuXHR9LFxufTtcblxuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBwb3N0Zml4IHRlcm1zIGFuZCBvcGVyYW5kIHZhcmlhYmxlcywgcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gKiB0aGUgcG9zdGZpeCBldmFsdWF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGltcG9ydCBldmFsdWF0ZSBmcm9tICdAdGFubmluL2V2YWx1YXRlJztcbiAqXG4gKiAvLyAzICsgNCAqIDUgLyA2IOKHkiAnMyA0IDUgKiA2IC8gKydcbiAqIGNvbnN0IHRlcm1zID0gWyAnMycsICc0JywgJzUnLCAnKicsICc2JywgJy8nLCAnKycgXTtcbiAqXG4gKiBldmFsdWF0ZSggdGVybXMsIHt9ICk7XG4gKiAvLyDih5IgNi4zMzMzMzMzMzMzMzMzMzRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IHBvc3RmaXggICBQb3N0Zml4IHRlcm1zLlxuICogQHBhcmFtIHtPYmplY3R9ICAgdmFyaWFibGVzIE9wZXJhbmQgdmFyaWFibGVzLlxuICpcbiAqIEByZXR1cm4geyp9IFJlc3VsdCBvZiBldmFsdWF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmFsdWF0ZSggcG9zdGZpeCwgdmFyaWFibGVzICkge1xuXHR2YXIgc3RhY2sgPSBbXSxcblx0XHRpLCBqLCBhcmdzLCBnZXRPcGVyYXRvclJlc3VsdCwgdGVybSwgdmFsdWU7XG5cblx0Zm9yICggaSA9IDA7IGkgPCBwb3N0Zml4Lmxlbmd0aDsgaSsrICkge1xuXHRcdHRlcm0gPSBwb3N0Zml4WyBpIF07XG5cblx0XHRnZXRPcGVyYXRvclJlc3VsdCA9IE9QRVJBVE9SU1sgdGVybSBdO1xuXHRcdGlmICggZ2V0T3BlcmF0b3JSZXN1bHQgKSB7XG5cdFx0XHQvLyBQb3AgZnJvbSBzdGFjayBieSBudW1iZXIgb2YgZnVuY3Rpb24gYXJndW1lbnRzLlxuXHRcdFx0aiA9IGdldE9wZXJhdG9yUmVzdWx0Lmxlbmd0aDtcblx0XHRcdGFyZ3MgPSBBcnJheSggaiApO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGFyZ3NbIGogXSA9IHN0YWNrLnBvcCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWx1ZSA9IGdldE9wZXJhdG9yUmVzdWx0LmFwcGx5KCBudWxsLCBhcmdzICk7XG5cdFx0XHR9IGNhdGNoICggZWFybHlSZXR1cm4gKSB7XG5cdFx0XHRcdHJldHVybiBlYXJseVJldHVybjtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCB2YXJpYWJsZXMuaGFzT3duUHJvcGVydHkoIHRlcm0gKSApIHtcblx0XHRcdHZhbHVlID0gdmFyaWFibGVzWyB0ZXJtIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbHVlID0gK3Rlcm07XG5cdFx0fVxuXG5cdFx0c3RhY2sucHVzaCggdmFsdWUgKTtcblx0fVxuXG5cdHJldHVybiBzdGFja1sgMCBdO1xufVxuIiwiaW1wb3J0IGNvbXBpbGUgZnJvbSAnQHRhbm5pbi9jb21waWxlJztcblxuLyoqXG4gKiBHaXZlbiBhIEMgZXhwcmVzc2lvbiwgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCB3aXRoIGEgdmFsdWUsXG4gKiBldmFsdWF0ZXMgdGhlIHJlc3VsdCB3aXRoIHRoZSB2YWx1ZSBhc3N1bWVkIHRvIGJlIHRoZSBcIm5cIiB2YXJpYWJsZSBvZiB0aGVcbiAqIGV4cHJlc3Npb24uIFRoZSByZXN1bHQgd2lsbCBiZSBjb2VyY2VkIHRvIGl0cyBudW1lcmljIGVxdWl2YWxlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gQyBleHByZXNzaW9uLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBFdmFsdWF0b3IgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBsdXJhbEZvcm1zKCBleHByZXNzaW9uICkge1xuXHR2YXIgZXZhbHVhdGUgPSBjb21waWxlKCBleHByZXNzaW9uICk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCBuICkge1xuXHRcdHJldHVybiArZXZhbHVhdGUoIHsgbjogbiB9ICk7XG5cdH07XG59XG4iLCJ2YXIgUFJFQ0VERU5DRSwgT1BFTkVSUywgVEVSTUlOQVRPUlMsIFBBVFRFUk47XG5cbi8qKlxuICogT3BlcmF0b3IgcHJlY2VkZW5jZSBtYXBwaW5nLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblBSRUNFREVOQ0UgPSB7XG5cdCcoJzogOSxcblx0JyEnOiA4LFxuXHQnKic6IDcsXG5cdCcvJzogNyxcblx0JyUnOiA3LFxuXHQnKyc6IDYsXG5cdCctJzogNixcblx0JzwnOiA1LFxuXHQnPD0nOiA1LFxuXHQnPic6IDUsXG5cdCc+PSc6IDUsXG5cdCc9PSc6IDQsXG5cdCchPSc6IDQsXG5cdCcmJic6IDMsXG5cdCd8fCc6IDIsXG5cdCc/JzogMSxcblx0Jz86JzogMSxcbn07XG5cbi8qKlxuICogQ2hhcmFjdGVycyB3aGljaCBzaWduYWwgcGFpciBvcGVuaW5nLCB0byBiZSB0ZXJtaW5hdGVkIGJ5IHRlcm1pbmF0b3JzLlxuICpcbiAqIEB0eXBlIHtzdHJpbmdbXX1cbiAqL1xuT1BFTkVSUyA9IFsgJygnLCAnPycgXTtcblxuLyoqXG4gKiBDaGFyYWN0ZXJzIHdoaWNoIHNpZ25hbCBwYWlyIHRlcm1pbmF0aW9uLCB0aGUgdmFsdWUgYW4gYXJyYXkgd2l0aCB0aGVcbiAqIG9wZW5lciBhcyBpdHMgZmlyc3QgbWVtYmVyLiBUaGUgc2Vjb25kIG1lbWJlciBpcyBhbiBvcHRpb25hbCBvcGVyYXRvclxuICogcmVwbGFjZW1lbnQgdG8gcHVzaCB0byB0aGUgc3RhY2suXG4gKlxuICogQHR5cGUge3N0cmluZ1tdfVxuICovXG5URVJNSU5BVE9SUyA9IHtcblx0JyknOiBbICcoJyBdLFxuXHQnOic6IFsgJz8nLCAnPzonIF0sXG59O1xuXG4vKipcbiAqIFBhdHRlcm4gbWF0Y2hpbmcgb3BlcmF0b3JzIGFuZCBvcGVuZXJzLlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cblBBVFRFUk4gPSAvPD18Pj18PT18IT18JiZ8XFx8XFx8fFxcPzp8XFwofCF8XFwqfFxcL3wlfFxcK3wtfDx8PnxcXD98XFwpfDovO1xuXG4vKipcbiAqIEdpdmVuIGEgQyBleHByZXNzaW9uLCByZXR1cm5zIHRoZSBlcXVpdmFsZW50IHBvc3RmaXggKFJldmVyc2UgUG9saXNoKVxuICogbm90YXRpb24gdGVybXMgYXMgYW4gYXJyYXkuXG4gKlxuICogSWYgYSBwb3N0Zml4IHN0cmluZyBpcyBkZXNpcmVkLCBzaW1wbHkgYC5qb2luKCAnICcgKWAgdGhlIHJlc3VsdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgcG9zdGZpeCBmcm9tICdAdGFubmluL3Bvc3RmaXgnO1xuICpcbiAqIHBvc3RmaXgoICduID4gMScgKTtcbiAqIC8vIOKHkiBbICduJywgJzEnLCAnPicgXVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gQyBleHByZXNzaW9uLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ1tdfSBQb3N0Zml4IHRlcm1zLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwb3N0Zml4KCBleHByZXNzaW9uICkge1xuXHR2YXIgdGVybXMgPSBbXSxcblx0XHRzdGFjayA9IFtdLFxuXHRcdG1hdGNoLCBvcGVyYXRvciwgdGVybSwgZWxlbWVudDtcblxuXHR3aGlsZSAoICggbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKCBQQVRURVJOICkgKSApIHtcblx0XHRvcGVyYXRvciA9IG1hdGNoWyAwIF07XG5cblx0XHQvLyBUZXJtIGlzIHRoZSBzdHJpbmcgcHJlY2VkaW5nIHRoZSBvcGVyYXRvciBtYXRjaC4gSXQgbWF5IGNvbnRhaW5cblx0XHQvLyB3aGl0ZXNwYWNlLCBhbmQgbWF5IGJlIGVtcHR5IChpZiBvcGVyYXRvciBpcyBhdCBiZWdpbm5pbmcpLlxuXHRcdHRlcm0gPSBleHByZXNzaW9uLnN1YnN0ciggMCwgbWF0Y2guaW5kZXggKS50cmltKCk7XG5cdFx0aWYgKCB0ZXJtICkge1xuXHRcdFx0dGVybXMucHVzaCggdGVybSApO1xuXHRcdH1cblxuXHRcdHdoaWxlICggKCBlbGVtZW50ID0gc3RhY2sucG9wKCkgKSApIHtcblx0XHRcdGlmICggVEVSTUlOQVRPUlNbIG9wZXJhdG9yIF0gKSB7XG5cdFx0XHRcdGlmICggVEVSTUlOQVRPUlNbIG9wZXJhdG9yIF1bIDAgXSA9PT0gZWxlbWVudCApIHtcblx0XHRcdFx0XHQvLyBTdWJzdGl0dXRpb24gd29ya3MgaGVyZSB1bmRlciBhc3N1bXB0aW9uIHRoYXQgYmVjYXVzZVxuXHRcdFx0XHRcdC8vIHRoZSBhc3NpZ25lZCBvcGVyYXRvciB3aWxsIG5vIGxvbmdlciBiZSBhIHRlcm1pbmF0b3IsIGl0XG5cdFx0XHRcdFx0Ly8gd2lsbCBiZSBwdXNoZWQgdG8gdGhlIHN0YWNrIGR1cmluZyB0aGUgY29uZGl0aW9uIGJlbG93LlxuXHRcdFx0XHRcdG9wZXJhdG9yID0gVEVSTUlOQVRPUlNbIG9wZXJhdG9yIF1bIDEgXSB8fCBvcGVyYXRvcjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICggT1BFTkVSUy5pbmRleE9mKCBlbGVtZW50ICkgPj0gMCB8fCBQUkVDRURFTkNFWyBlbGVtZW50IF0gPCBQUkVDRURFTkNFWyBvcGVyYXRvciBdICkge1xuXHRcdFx0XHQvLyBQdXNoIHRvIHN0YWNrIGlmIGVpdGhlciBhbiBvcGVuZXIgb3Igd2hlbiBwb3AgcmV2ZWFscyBhblxuXHRcdFx0XHQvLyBlbGVtZW50IG9mIGxvd2VyIHByZWNlZGVuY2UuXG5cdFx0XHRcdHN0YWNrLnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBlYWNoIHBvcHBlZCBmcm9tIHN0YWNrLCBwdXNoIHRvIHRlcm1zLlxuXHRcdFx0dGVybXMucHVzaCggZWxlbWVudCApO1xuXHRcdH1cblxuXHRcdGlmICggISBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXSApIHtcblx0XHRcdHN0YWNrLnB1c2goIG9wZXJhdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2xpY2UgbWF0Y2hlZCBmcmFnbWVudCBmcm9tIGV4cHJlc3Npb24gdG8gY29udGludWUgbWF0Y2guXG5cdFx0ZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24uc3Vic3RyKCBtYXRjaC5pbmRleCArIG9wZXJhdG9yLmxlbmd0aCApO1xuXHR9XG5cblx0Ly8gUHVzaCByZW1haW5kZXIgb2Ygb3BlcmFuZCwgaWYgZXhpc3RzLCB0byB0ZXJtcy5cblx0ZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24udHJpbSgpO1xuXHRpZiAoIGV4cHJlc3Npb24gKSB7XG5cdFx0dGVybXMucHVzaCggZXhwcmVzc2lvbiApO1xuXHR9XG5cblx0Ly8gUG9wIHJlbWFpbmluZyBpdGVtcyBmcm9tIHN0YWNrIGludG8gdGVybXMuXG5cdHJldHVybiB0ZXJtcy5jb25jYXQoIHN0YWNrLnJldmVyc2UoKSApO1xufVxuIiwiZXhwb3J0IGNvbnN0IEhPT0tfU0VUVVAgPSAnZGV2dG9vbHMtcGx1Z2luOnNldHVwJztcbmV4cG9ydCBjb25zdCBIT09LX1BMVUdJTl9TRVRUSU5HU19TRVQgPSAncGx1Z2luOnNldHRpbmdzOnNldCc7XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0RGV2dG9vbHNHbG9iYWxIb29rKCkge1xuICAgIHJldHVybiBnZXRUYXJnZXQoKS5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgICAgIDoge307XG59XG5leHBvcnQgY29uc3QgaXNQcm94eUF2YWlsYWJsZSA9IHR5cGVvZiBQcm94eSA9PT0gJ2Z1bmN0aW9uJztcbiIsImltcG9ydCB7IGdldFRhcmdldCwgZ2V0RGV2dG9vbHNHbG9iYWxIb29rLCBpc1Byb3h5QXZhaWxhYmxlIH0gZnJvbSAnLi9lbnYuanMnO1xuaW1wb3J0IHsgSE9PS19TRVRVUCB9IGZyb20gJy4vY29uc3QuanMnO1xuaW1wb3J0IHsgQXBpUHJveHkgfSBmcm9tICcuL3Byb3h5LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYXBpL2luZGV4LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vcGx1Z2luLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdGltZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBEZXZ0b29sc1BsdWdpbihwbHVnaW5EZXNjcmlwdG9yLCBzZXR1cEZuKSB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IHBsdWdpbkRlc2NyaXB0b3I7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KCk7XG4gICAgY29uc3QgaG9vayA9IGdldERldnRvb2xzR2xvYmFsSG9vaygpO1xuICAgIGNvbnN0IGVuYWJsZVByb3h5ID0gaXNQcm94eUF2YWlsYWJsZSAmJiBkZXNjcmlwdG9yLmVuYWJsZUVhcmx5UHJveHk7XG4gICAgaWYgKGhvb2sgJiYgKHRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5fQVBJX0FWQUlMQUJMRV9fIHx8ICFlbmFibGVQcm94eSkpIHtcbiAgICAgICAgaG9vay5lbWl0KEhPT0tfU0VUVVAsIHBsdWdpbkRlc2NyaXB0b3IsIHNldHVwRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcHJveHkgPSBlbmFibGVQcm94eSA/IG5ldyBBcGlQcm94eShkZXNjcmlwdG9yLCBob29rKSA6IG51bGw7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfUExVR0lOU19fID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyB8fCBbXTtcbiAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIHBsdWdpbkRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICAgICAgICBzZXR1cEZuLFxuICAgICAgICAgICAgcHJveHksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJveHkpXG4gICAgICAgICAgICBzZXR1cEZuKHByb3h5LnByb3hpZWRUYXJnZXQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCB9IGZyb20gJy4vY29uc3QuanMnO1xuaW1wb3J0IHsgbm93IH0gZnJvbSAnLi90aW1lLmpzJztcbmV4cG9ydCBjbGFzcyBBcGlQcm94eSB7XG4gICAgY29uc3RydWN0b3IocGx1Z2luLCBob29rKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy50YXJnZXRRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLm9uUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMuaG9vayA9IGhvb2s7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTZXR0aW5ncyA9IHt9O1xuICAgICAgICBpZiAocGx1Z2luLnNldHRpbmdzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHBsdWdpbi5zZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBwbHVnaW4uc2V0dGluZ3NbaWRdO1xuICAgICAgICAgICAgICAgIGRlZmF1bHRTZXR0aW5nc1tpZF0gPSBpdGVtLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhbFNldHRpbmdzU2F2ZUlkID0gYF9fdnVlLWRldnRvb2xzLXBsdWdpbi1zZXR0aW5nc19fJHtwbHVnaW4uaWR9YDtcbiAgICAgICAgbGV0IGN1cnJlbnRTZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRTZXR0aW5ncyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByYXcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsb2NhbFNldHRpbmdzU2F2ZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJhdyk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGN1cnJlbnRTZXR0aW5ncywgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIGdldFNldHRpbmdzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50U2V0dGluZ3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0U2V0dGluZ3ModmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsb2NhbFNldHRpbmdzU2F2ZUlkLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5ncyA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vdygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm93KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBpZiAoaG9vaykge1xuICAgICAgICAgICAgaG9vay5vbihIT09LX1BMVUdJTl9TRVRUSU5HU19TRVQsIChwbHVnaW5JZCwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luSWQgPT09IHRoaXMucGx1Z2luLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFsbGJhY2tzLnNldFNldHRpbmdzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3hpZWRPbiA9IG5ldyBQcm94eSh7fSwge1xuICAgICAgICAgICAgZ2V0OiAoX3RhcmdldCwgcHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQub25bcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25RdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb3hpZWRUYXJnZXQgPSBuZXcgUHJveHkoe30sIHtcbiAgICAgICAgICAgIGdldDogKF90YXJnZXQsIHByb3ApID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wID09PSAnb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3hpZWRPbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoT2JqZWN0LmtleXModGhpcy5mYWxsYmFja3MpLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiAoKSA9PiB7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZhbGxiYWNrc1twcm9wXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzZXRSZWFsVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMub25RdWV1ZSkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQub25baXRlbS5tZXRob2RdKC4uLml0ZW0uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMudGFyZ2V0UXVldWUpIHtcbiAgICAgICAgICAgIGl0ZW0ucmVzb2x2ZShhd2FpdCB0aGlzLnRhcmdldFtpdGVtLm1ldGhvZF0oLi4uaXRlbS5hcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJsZXQgc3VwcG9ydGVkO1xubGV0IHBlcmY7XG5leHBvcnQgZnVuY3Rpb24gaXNQZXJmb3JtYW5jZVN1cHBvcnRlZCgpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHN1cHBvcnRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcGVyZiA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgKChfYSA9IGdsb2JhbC5wZXJmX2hvb2tzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGVyZm9ybWFuY2UpKSB7XG4gICAgICAgIHN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIHBlcmYgPSBnbG9iYWwucGVyZl9ob29rcy5wZXJmb3JtYW5jZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydGVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gaXNQZXJmb3JtYW5jZVN1cHBvcnRlZCgpID8gcGVyZi5ub3coKSA6IERhdGUubm93KCk7XG59XG4iLCJpbXBvcnQgeyBleHRlbmQsIGlzQXJyYXksIGlzTWFwLCBpc0ludGVnZXJLZXksIGhhc093biwgaXNTeW1ib2wsIGlzT2JqZWN0LCBoYXNDaGFuZ2VkLCBtYWtlTWFwLCBjYXBpdGFsaXplLCB0b1Jhd1R5cGUsIGRlZiwgaXNGdW5jdGlvbiwgTk9PUCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLndhcm4oYFtWdWUgd2Fybl0gJHttc2d9YCwgLi4uYXJncyk7XG59XG5cbmxldCBhY3RpdmVFZmZlY3RTY29wZTtcbmNsYXNzIEVmZmVjdFNjb3BlIHtcbiAgICBjb25zdHJ1Y3RvcihkZXRhY2hlZCA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZGV0YWNoZWQgPSBkZXRhY2hlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGVhbnVwcyA9IFtdO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgICBpZiAoIWRldGFjaGVkICYmIGFjdGl2ZUVmZmVjdFNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID1cbiAgICAgICAgICAgICAgICAoYWN0aXZlRWZmZWN0U2NvcGUuc2NvcGVzIHx8IChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgPSBbXSkpLnB1c2godGhpcykgLSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJ1bihmbikge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRFZmZlY3RTY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IGN1cnJlbnRFZmZlY3RTY29wZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYGNhbm5vdCBydW4gYW4gaW5hY3RpdmUgZWZmZWN0IHNjb3BlLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIG5vbi1kZXRhY2hlZCBzY29wZXNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBvbigpIHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBub24tZGV0YWNoZWQgc2NvcGVzXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgb2ZmKCkge1xuICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXMucGFyZW50O1xuICAgIH1cbiAgICBzdG9wKGZyb21QYXJlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICBsZXQgaSwgbDtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmVmZmVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNsZWFudXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cHNbaV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNjb3Blcykge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLnNjb3Blcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY29wZXNbaV0uc3RvcCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBuZXN0ZWQgc2NvcGUsIGRlcmVmZXJlbmNlIGZyb20gcGFyZW50IHRvIGF2b2lkIG1lbW9yeSBsZWFrc1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRldGFjaGVkICYmIHRoaXMucGFyZW50ICYmICFmcm9tUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gb3B0aW1pemVkIE8oMSkgcmVtb3ZhbFxuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLnBhcmVudC5zY29wZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QgJiYgbGFzdCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5zY29wZXNbdGhpcy5pbmRleF0gPSBsYXN0O1xuICAgICAgICAgICAgICAgICAgICBsYXN0LmluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlZmZlY3RTY29wZShkZXRhY2hlZCkge1xuICAgIHJldHVybiBuZXcgRWZmZWN0U2NvcGUoZGV0YWNoZWQpO1xufVxuZnVuY3Rpb24gcmVjb3JkRWZmZWN0U2NvcGUoZWZmZWN0LCBzY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlKSB7XG4gICAgaWYgKHNjb3BlICYmIHNjb3BlLmFjdGl2ZSkge1xuICAgICAgICBzY29wZS5lZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVmZmVjdFNjb3BlO1xufVxuZnVuY3Rpb24gb25TY29wZURpc3Bvc2UoZm4pIHtcbiAgICBpZiAoYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUuY2xlYW51cHMucHVzaChmbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBvblNjb3BlRGlzcG9zZSgpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBlZmZlY3Qgc2NvcGVgICtcbiAgICAgICAgICAgIGAgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLmApO1xuICAgIH1cbn1cblxuY29uc3QgY3JlYXRlRGVwID0gKGVmZmVjdHMpID0+IHtcbiAgICBjb25zdCBkZXAgPSBuZXcgU2V0KGVmZmVjdHMpO1xuICAgIGRlcC53ID0gMDtcbiAgICBkZXAubiA9IDA7XG4gICAgcmV0dXJuIGRlcDtcbn07XG5jb25zdCB3YXNUcmFja2VkID0gKGRlcCkgPT4gKGRlcC53ICYgdHJhY2tPcEJpdCkgPiAwO1xuY29uc3QgbmV3VHJhY2tlZCA9IChkZXApID0+IChkZXAubiAmIHRyYWNrT3BCaXQpID4gMDtcbmNvbnN0IGluaXREZXBNYXJrZXJzID0gKHsgZGVwcyB9KSA9PiB7XG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwc1tpXS53IHw9IHRyYWNrT3BCaXQ7IC8vIHNldCB3YXMgdHJhY2tlZFxuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGZpbmFsaXplRGVwTWFya2VycyA9IChlZmZlY3QpID0+IHtcbiAgICBjb25zdCB7IGRlcHMgfSA9IGVmZmVjdDtcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICAgICAgbGV0IHB0ciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGVwID0gZGVwc1tpXTtcbiAgICAgICAgICAgIGlmICh3YXNUcmFja2VkKGRlcCkgJiYgIW5ld1RyYWNrZWQoZGVwKSkge1xuICAgICAgICAgICAgICAgIGRlcC5kZWxldGUoZWZmZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlcHNbcHRyKytdID0gZGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2xlYXIgYml0c1xuICAgICAgICAgICAgZGVwLncgJj0gfnRyYWNrT3BCaXQ7XG4gICAgICAgICAgICBkZXAubiAmPSB+dHJhY2tPcEJpdDtcbiAgICAgICAgfVxuICAgICAgICBkZXBzLmxlbmd0aCA9IHB0cjtcbiAgICB9XG59O1xuXG5jb25zdCB0YXJnZXRNYXAgPSBuZXcgV2Vha01hcCgpO1xuLy8gVGhlIG51bWJlciBvZiBlZmZlY3RzIGN1cnJlbnRseSBiZWluZyB0cmFja2VkIHJlY3Vyc2l2ZWx5LlxubGV0IGVmZmVjdFRyYWNrRGVwdGggPSAwO1xubGV0IHRyYWNrT3BCaXQgPSAxO1xuLyoqXG4gKiBUaGUgYml0d2lzZSB0cmFjayBtYXJrZXJzIHN1cHBvcnQgYXQgbW9zdCAzMCBsZXZlbHMgb2YgcmVjdXJzaW9uLlxuICogVGhpcyB2YWx1ZSBpcyBjaG9zZW4gdG8gZW5hYmxlIG1vZGVybiBKUyBlbmdpbmVzIHRvIHVzZSBhIFNNSSBvbiBhbGwgcGxhdGZvcm1zLlxuICogV2hlbiByZWN1cnNpb24gZGVwdGggaXMgZ3JlYXRlciwgZmFsbCBiYWNrIHRvIHVzaW5nIGEgZnVsbCBjbGVhbnVwLlxuICovXG5jb25zdCBtYXhNYXJrZXJCaXRzID0gMzA7XG5sZXQgYWN0aXZlRWZmZWN0O1xuY29uc3QgSVRFUkFURV9LRVkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ2l0ZXJhdGUnIDogJycpO1xuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnTWFwIGtleSBpdGVyYXRlJyA6ICcnKTtcbmNsYXNzIFJlYWN0aXZlRWZmZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcihmbiwgc2NoZWR1bGVyID0gbnVsbCwgc2NvcGUpIHtcbiAgICAgICAgdGhpcy5mbiA9IGZuO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlcHMgPSBbXTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJlY29yZEVmZmVjdFNjb3BlKHRoaXMsIHNjb3BlKTtcbiAgICB9XG4gICAgcnVuKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnQgPSBhY3RpdmVFZmZlY3Q7XG4gICAgICAgIGxldCBsYXN0U2hvdWxkVHJhY2sgPSBzaG91bGRUcmFjaztcbiAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0O1xuICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gdGhpcztcbiAgICAgICAgICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWNrT3BCaXQgPSAxIDw8ICsrZWZmZWN0VHJhY2tEZXB0aDtcbiAgICAgICAgICAgIGlmIChlZmZlY3RUcmFja0RlcHRoIDw9IG1heE1hcmtlckJpdHMpIHtcbiAgICAgICAgICAgICAgICBpbml0RGVwTWFya2Vycyh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVmZmVjdFRyYWNrRGVwdGggPD0gbWF4TWFya2VyQml0cykge1xuICAgICAgICAgICAgICAgIGZpbmFsaXplRGVwTWFya2Vycyh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNrT3BCaXQgPSAxIDw8IC0tZWZmZWN0VHJhY2tEZXB0aDtcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdCA9IHRoaXMucGFyZW50O1xuICAgICAgICAgICAgc2hvdWxkVHJhY2sgPSBsYXN0U2hvdWxkVHJhY2s7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlZmVyU3RvcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIC8vIHN0b3BwZWQgd2hpbGUgcnVubmluZyBpdHNlbGYgLSBkZWZlciB0aGUgY2xlYW51cFxuICAgICAgICBpZiAoYWN0aXZlRWZmZWN0ID09PSB0aGlzKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmVyU3RvcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XG4gICAgICAgICAgICBpZiAodGhpcy5vblN0b3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uU3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFudXBFZmZlY3QoZWZmZWN0KSB7XG4gICAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBkZXBzLmxlbmd0aCA9IDA7XG4gICAgfVxufVxuZnVuY3Rpb24gZWZmZWN0KGZuLCBvcHRpb25zKSB7XG4gICAgaWYgKGZuLmVmZmVjdCkge1xuICAgICAgICBmbiA9IGZuLmVmZmVjdC5mbjtcbiAgICB9XG4gICAgY29uc3QgX2VmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChmbik7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKF9lZmZlY3QsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy5zY29wZSlcbiAgICAgICAgICAgIHJlY29yZEVmZmVjdFNjb3BlKF9lZmZlY3QsIG9wdGlvbnMuc2NvcGUpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMubGF6eSkge1xuICAgICAgICBfZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgICBjb25zdCBydW5uZXIgPSBfZWZmZWN0LnJ1bi5iaW5kKF9lZmZlY3QpO1xuICAgIHJ1bm5lci5lZmZlY3QgPSBfZWZmZWN0O1xuICAgIHJldHVybiBydW5uZXI7XG59XG5mdW5jdGlvbiBzdG9wKHJ1bm5lcikge1xuICAgIHJ1bm5lci5lZmZlY3Quc3RvcCgpO1xufVxubGV0IHNob3VsZFRyYWNrID0gdHJ1ZTtcbmNvbnN0IHRyYWNrU3RhY2sgPSBbXTtcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgICBzaG91bGRUcmFjayA9IGZhbHNlO1xufVxuZnVuY3Rpb24gZW5hYmxlVHJhY2tpbmcoKSB7XG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XG59XG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xuICAgIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xuICAgIHNob3VsZFRyYWNrID0gbGFzdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGxhc3Q7XG59XG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xuICAgIGlmIChzaG91bGRUcmFjayAmJiBhY3RpdmVFZmZlY3QpIHtcbiAgICAgICAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgIGlmICghZGVwc01hcCkge1xuICAgICAgICAgICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQsIChkZXBzTWFwID0gbmV3IE1hcCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRlcCA9IGRlcHNNYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghZGVwKSB7XG4gICAgICAgICAgICBkZXBzTWFwLnNldChrZXksIChkZXAgPSBjcmVhdGVEZXAoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50SW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgPyB7IGVmZmVjdDogYWN0aXZlRWZmZWN0LCB0YXJnZXQsIHR5cGUsIGtleSB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgdHJhY2tFZmZlY3RzKGRlcCwgZXZlbnRJbmZvKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFja0VmZmVjdHMoZGVwLCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSB7XG4gICAgbGV0IHNob3VsZFRyYWNrID0gZmFsc2U7XG4gICAgaWYgKGVmZmVjdFRyYWNrRGVwdGggPD0gbWF4TWFya2VyQml0cykge1xuICAgICAgICBpZiAoIW5ld1RyYWNrZWQoZGVwKSkge1xuICAgICAgICAgICAgZGVwLm4gfD0gdHJhY2tPcEJpdDsgLy8gc2V0IG5ld2x5IHRyYWNrZWRcbiAgICAgICAgICAgIHNob3VsZFRyYWNrID0gIXdhc1RyYWNrZWQoZGVwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRnVsbCBjbGVhbnVwIG1vZGUuXG4gICAgICAgIHNob3VsZFRyYWNrID0gIWRlcC5oYXMoYWN0aXZlRWZmZWN0KTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFRyYWNrKSB7XG4gICAgICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcbiAgICAgICAgYWN0aXZlRWZmZWN0LmRlcHMucHVzaChkZXApO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGFjdGl2ZUVmZmVjdC5vblRyYWNrKSB7XG4gICAgICAgICAgICBhY3RpdmVFZmZlY3Qub25UcmFjayhPYmplY3QuYXNzaWduKHsgZWZmZWN0OiBhY3RpdmVFZmZlY3QgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlcih0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQpIHtcbiAgICBjb25zdCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xuICAgIGlmICghZGVwc01hcCkge1xuICAgICAgICAvLyBuZXZlciBiZWVuIHRyYWNrZWRcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZGVwcyA9IFtdO1xuICAgIGlmICh0eXBlID09PSBcImNsZWFyXCIgLyogVHJpZ2dlck9wVHlwZXMuQ0xFQVIgKi8pIHtcbiAgICAgICAgLy8gY29sbGVjdGlvbiBiZWluZyBjbGVhcmVkXG4gICAgICAgIC8vIHRyaWdnZXIgYWxsIGVmZmVjdHMgZm9yIHRhcmdldFxuICAgICAgICBkZXBzID0gWy4uLmRlcHNNYXAudmFsdWVzKCldO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdsZW5ndGgnICYmIGlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBkZXBzTWFwLmZvckVhY2goKGRlcCwga2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnbGVuZ3RoJyB8fCBrZXkgPj0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBzY2hlZHVsZSBydW5zIGZvciBTRVQgfCBBREQgfCBERUxFVEVcbiAgICAgICAgaWYgKGtleSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWxzbyBydW4gZm9yIGl0ZXJhdGlvbiBrZXkgb24gQUREIHwgREVMRVRFIHwgTWFwLlNFVFxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJhZGRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5BREQgKi86XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZWdlcktleShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBpbmRleCBhZGRlZCB0byBhcnJheSAtPiBsZW5ndGggY2hhbmdlc1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoJ2xlbmd0aCcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovOlxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi86XG4gICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50SW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IHsgdGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0IH1cbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgaWYgKGRlcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmIChkZXBzWzBdKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMoZGVwc1swXSwgZXZlbnRJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGRlcHNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBlZmZlY3RzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZGVwIG9mIGRlcHMpIHtcbiAgICAgICAgICAgIGlmIChkZXApIHtcbiAgICAgICAgICAgICAgICBlZmZlY3RzLnB1c2goLi4uZGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhjcmVhdGVEZXAoZWZmZWN0cyksIGV2ZW50SW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhjcmVhdGVEZXAoZWZmZWN0cykpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlckVmZmVjdHMoZGVwLCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSB7XG4gICAgLy8gc3ByZWFkIGludG8gYXJyYXkgZm9yIHN0YWJpbGl6YXRpb25cbiAgICBjb25zdCBlZmZlY3RzID0gaXNBcnJheShkZXApID8gZGVwIDogWy4uLmRlcF07XG4gICAgZm9yIChjb25zdCBlZmZlY3Qgb2YgZWZmZWN0cykge1xuICAgICAgICBpZiAoZWZmZWN0LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0KGVmZmVjdCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBlZmZlY3Qgb2YgZWZmZWN0cykge1xuICAgICAgICBpZiAoIWVmZmVjdC5jb21wdXRlZCkge1xuICAgICAgICAgICAgdHJpZ2dlckVmZmVjdChlZmZlY3QsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlckVmZmVjdChlZmZlY3QsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pIHtcbiAgICBpZiAoZWZmZWN0ICE9PSBhY3RpdmVFZmZlY3QgfHwgZWZmZWN0LmFsbG93UmVjdXJzZSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGVmZmVjdC5vblRyaWdnZXIpIHtcbiAgICAgICAgICAgIGVmZmVjdC5vblRyaWdnZXIoZXh0ZW5kKHsgZWZmZWN0IH0sIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWZmZWN0LnNjaGVkdWxlcikge1xuICAgICAgICAgICAgZWZmZWN0LnNjaGVkdWxlcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBpc05vblRyYWNrYWJsZUtleXMgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYF9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZWApO1xuY29uc3QgYnVpbHRJblN5bWJvbHMgPSBuZXcgU2V0KFxuLyojX19QVVJFX18qL1xuT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKVxuICAgIC8vIGlvczEwLnggT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKSBjYW4gZW51bWVyYXRlICdhcmd1bWVudHMnIGFuZCAnY2FsbGVyJ1xuICAgIC8vIGJ1dCBhY2Nlc3NpbmcgdGhlbSBvbiBTeW1ib2wgbGVhZHMgdG8gVHlwZUVycm9yIGJlY2F1c2UgU3ltYm9sIGlzIGEgc3RyaWN0IG1vZGVcbiAgICAvLyBmdW5jdGlvblxuICAgIC5maWx0ZXIoa2V5ID0+IGtleSAhPT0gJ2FyZ3VtZW50cycgJiYga2V5ICE9PSAnY2FsbGVyJylcbiAgICAubWFwKGtleSA9PiBTeW1ib2xba2V5XSlcbiAgICAuZmlsdGVyKGlzU3ltYm9sKSk7XG5jb25zdCBnZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcigpO1xuY29uc3Qgc2hhbGxvd0dldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKGZhbHNlLCB0cnVlKTtcbmNvbnN0IHJlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSk7XG5jb25zdCBzaGFsbG93UmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlLCB0cnVlKTtcbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IC8qI19fUFVSRV9fKi8gY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zKCk7XG5mdW5jdGlvbiBjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMoKSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHt9O1xuICAgIFsnaW5jbHVkZXMnLCAnaW5kZXhPZicsICdsYXN0SW5kZXhPZiddLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uc1trZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IHRvUmF3KHRoaXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHRyYWNrKGFyciwgXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLCBpICsgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UgcnVuIHRoZSBtZXRob2QgdXNpbmcgdGhlIG9yaWdpbmFsIGFyZ3MgZmlyc3QgKHdoaWNoIG1heSBiZSByZWFjdGl2ZSlcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGFycltrZXldKC4uLmFyZ3MpO1xuICAgICAgICAgICAgaWYgKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoYXQgZGlkbid0IHdvcmssIHJ1biBpdCBhZ2FpbiB1c2luZyByYXcgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJba2V5XSguLi5hcmdzLm1hcCh0b1JhdykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBbJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnLCAnc3BsaWNlJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gdG9SYXcodGhpcylba2V5XS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXIoaXNSZWFkb25seSA9IGZhbHNlLCBzaGFsbG93ID0gZmFsc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgICAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqLykge1xuICAgICAgICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNTaGFsbG93XCIgLyogUmVhY3RpdmVGbGFncy5JU19TSEFMTE9XICovKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hhbGxvdztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovICYmXG4gICAgICAgICAgICByZWNlaXZlciA9PT1cbiAgICAgICAgICAgICAgICAoaXNSZWFkb25seVxuICAgICAgICAgICAgICAgICAgICA/IHNoYWxsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2hhbGxvd1JlYWRvbmx5TWFwXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlYWRvbmx5TWFwXG4gICAgICAgICAgICAgICAgICAgIDogc2hhbGxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93UmVhY3RpdmVNYXBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVhY3RpdmVNYXApLmdldCh0YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldElzQXJyYXkgPSBpc0FycmF5KHRhcmdldCk7XG4gICAgICAgIGlmICghaXNSZWFkb25seSAmJiB0YXJnZXRJc0FycmF5ICYmIGhhc093bihhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldChhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSwgcmVjZWl2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XG4gICAgICAgIGlmIChpc1N5bWJvbChrZXkpID8gYnVpbHRJblN5bWJvbHMuaGFzKGtleSkgOiBpc05vblRyYWNrYWJsZUtleXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkpIHtcbiAgICAgICAgICAgIHRyYWNrKHRhcmdldCwgXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFsbG93KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlZihyZXMpKSB7XG4gICAgICAgICAgICAvLyByZWYgdW53cmFwcGluZyAtIHNraXAgdW53cmFwIGZvciBBcnJheSArIGludGVnZXIga2V5LlxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldElzQXJyYXkgJiYgaXNJbnRlZ2VyS2V5KGtleSkgPyByZXMgOiByZXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgcmV0dXJuZWQgdmFsdWUgaW50byBhIHByb3h5IGFzIHdlbGwuIHdlIGRvIHRoZSBpc09iamVjdCBjaGVja1xuICAgICAgICAgICAgLy8gaGVyZSB0byBhdm9pZCBpbnZhbGlkIHZhbHVlIHdhcm5pbmcuIEFsc28gbmVlZCB0byBsYXp5IGFjY2VzcyByZWFkb25seVxuICAgICAgICAgICAgLy8gYW5kIHJlYWN0aXZlIGhlcmUgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5ID8gcmVhZG9ubHkocmVzKSA6IHJlYWN0aXZlKHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuY29uc3Qgc2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVTZXR0ZXIoKTtcbmNvbnN0IHNoYWxsb3dTZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcih0cnVlKTtcbmZ1bmN0aW9uIGNyZWF0ZVNldHRlcihzaGFsbG93ID0gZmFsc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgbGV0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGlmIChpc1JlYWRvbmx5KG9sZFZhbHVlKSAmJiBpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2hhbGxvdykge1xuICAgICAgICAgICAgaWYgKCFpc1NoYWxsb3codmFsdWUpICYmICFpc1JlYWRvbmx5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdG9SYXcob2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhZEtleSA9IGlzQXJyYXkodGFyZ2V0KSAmJiBpc0ludGVnZXJLZXkoa2V5KVxuICAgICAgICAgICAgPyBOdW1iZXIoa2V5KSA8IHRhcmdldC5sZW5ndGhcbiAgICAgICAgICAgIDogaGFzT3duKHRhcmdldCwga2V5KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICAgIC8vIGRvbid0IHRyaWdnZXIgaWYgdGFyZ2V0IGlzIHNvbWV0aGluZyB1cCBpbiB0aGUgcHJvdG90eXBlIGNoYWluIG9mIG9yaWdpbmFsXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xuICAgICAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5BREQgKi8sIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIgLyogVHJpZ2dlck9wVHlwZXMuU0VUICovLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcbiAgICBjb25zdCBoYWRLZXkgPSBoYXNPd24odGFyZ2V0LCBrZXkpO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSk7XG4gICAgaWYgKHJlc3VsdCAmJiBoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaGFzKHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xuICAgIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcbiAgICAgICAgdHJhY2sodGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIGtleSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xuICAgIHRyYWNrKHRhcmdldCwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIGlzQXJyYXkodGFyZ2V0KSA/ICdsZW5ndGgnIDogSVRFUkFURV9LRVkpO1xuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbn1cbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcbiAgICBnZXQsXG4gICAgc2V0LFxuICAgIGRlbGV0ZVByb3BlcnR5LFxuICAgIGhhcyxcbiAgICBvd25LZXlzXG59O1xuY29uc3QgcmVhZG9ubHlIYW5kbGVycyA9IHtcbiAgICBnZXQ6IHJlYWRvbmx5R2V0LFxuICAgIHNldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBtdXRhYmxlSGFuZGxlcnMsIHtcbiAgICBnZXQ6IHNoYWxsb3dHZXQsXG4gICAgc2V0OiBzaGFsbG93U2V0XG59KTtcbi8vIFByb3BzIGhhbmRsZXJzIGFyZSBzcGVjaWFsIGluIHRoZSBzZW5zZSB0aGF0IGl0IHNob3VsZCBub3QgdW53cmFwIHRvcC1sZXZlbFxuLy8gcmVmcyAoaW4gb3JkZXIgdG8gYWxsb3cgcmVmcyB0byBiZSBleHBsaWNpdGx5IHBhc3NlZCBkb3duKSwgYnV0IHNob3VsZFxuLy8gcmV0YWluIHRoZSByZWFjdGl2aXR5IG9mIHRoZSBub3JtYWwgcmVhZG9ubHkgb2JqZWN0LlxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgcmVhZG9ubHlIYW5kbGVycywge1xuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XG59KTtcblxuY29uc3QgdG9TaGFsbG93ID0gKHZhbHVlKSA9PiB2YWx1ZTtcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XG5mdW5jdGlvbiBnZXQkMSh0YXJnZXQsIGtleSwgaXNSZWFkb25seSA9IGZhbHNlLCBpc1NoYWxsb3cgPSBmYWxzZSkge1xuICAgIC8vICMxNzcyOiByZWFkb25seShyZWFjdGl2ZShNYXApKSBzaG91bGQgcmV0dXJuIHJlYWRvbmx5ICsgcmVhY3RpdmUgdmVyc2lvblxuICAgIC8vIG9mIHRoZSB2YWx1ZVxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICAgIGlmICghaXNSZWFkb25seSkge1xuICAgICAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLCByYXdLZXkpO1xuICAgIH1cbiAgICBjb25zdCB7IGhhcyB9ID0gZ2V0UHJvdG8ocmF3VGFyZ2V0KTtcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChrZXkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQocmF3S2V5KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhcmdldCAhPT0gcmF3VGFyZ2V0KSB7XG4gICAgICAgIC8vICMzNjAyIHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBuZXN0ZWQgcmVhY3RpdmUgYE1hcGAgY2FuIGRvIHRyYWNraW5nIGZvciBpdHNlbGZcbiAgICAgICAgdGFyZ2V0LmdldChrZXkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhcyQxKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICAgIGlmICghaXNSZWFkb25seSkge1xuICAgICAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBUcmFja09wVHlwZXMuSEFTICovLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBUcmFja09wVHlwZXMuSEFTICovLCByYXdLZXkpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5ID09PSByYXdLZXlcbiAgICAgICAgPyB0YXJnZXQuaGFzKGtleSlcbiAgICAgICAgOiB0YXJnZXQuaGFzKGtleSkgfHwgdGFyZ2V0LmhhcyhyYXdLZXkpO1xufVxuZnVuY3Rpb24gc2l6ZSh0YXJnZXQsIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2sodG9SYXcodGFyZ2V0KSwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIElURVJBVEVfS0VZKTtcbiAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCAnc2l6ZScsIHRhcmdldCk7XG59XG5mdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCBwcm90byA9IGdldFByb3RvKHRhcmdldCk7XG4gICAgY29uc3QgaGFkS2V5ID0gcHJvdG8uaGFzLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgdGFyZ2V0LmFkZCh2YWx1ZSk7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLywgdmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBzZXQkMShrZXksIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgIGtleSA9IHRvUmF3KGtleSk7XG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xuICAgIH1cbiAgICBjb25zdCBvbGRWYWx1ZSA9IGdldC5jYWxsKHRhcmdldCwga2V5KTtcbiAgICB0YXJnZXQuc2V0KGtleSwgdmFsdWUpO1xuICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBkZWxldGVFbnRyeShrZXkpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgfVxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0ID8gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpIDogdW5kZWZpbmVkO1xuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xuICAgIGlmIChoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgY29uc3QgaGFkSXRlbXMgPSB0YXJnZXQuc2l6ZSAhPT0gMDtcbiAgICBjb25zdCBvbGRUYXJnZXQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyBpc01hcCh0YXJnZXQpXG4gICAgICAgICAgICA/IG5ldyBNYXAodGFyZ2V0KVxuICAgICAgICAgICAgOiBuZXcgU2V0KHRhcmdldClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcbiAgICBpZiAoaGFkSXRlbXMpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9sZFRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICAgIHJldHVybiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi9dO1xuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgICAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiIC8qIFRyYWNrT3BUeXBlcy5JVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgLy8gaW1wb3J0YW50OiBtYWtlIHN1cmUgdGhlIGNhbGxiYWNrIGlzXG4gICAgICAgICAgICAvLyAxLiBpbnZva2VkIHdpdGggdGhlIHJlYWN0aXZlIG1hcCBhcyBgdGhpc2AgYW5kIDNyZCBhcmdcbiAgICAgICAgICAgIC8vIDIuIHRoZSB2YWx1ZSByZWNlaXZlZCBzaG91bGQgYmUgYSBjb3JyZXNwb25kaW5nIHJlYWN0aXZlL3JlYWRvbmx5LlxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgd3JhcCh2YWx1ZSksIHdyYXAoa2V5KSwgb2JzZXJ2ZWQpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcbiAgICAgICAgY29uc3QgaXNQYWlyID0gbWV0aG9kID09PSAnZW50cmllcycgfHwgKG1ldGhvZCA9PT0gU3ltYm9sLml0ZXJhdG9yICYmIHRhcmdldElzTWFwKTtcbiAgICAgICAgY29uc3QgaXNLZXlPbmx5ID0gbWV0aG9kID09PSAna2V5cycgJiYgdGFyZ2V0SXNNYXA7XG4gICAgICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAgICAgIWlzUmVhZG9ubHkgJiZcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIGlzS2V5T25seSA/IE1BUF9LRVlfSVRFUkFURV9LRVkgOiBJVEVSQVRFX0tFWSk7XG4gICAgICAgIC8vIHJldHVybiBhIHdyYXBwZWQgaXRlcmF0b3Igd2hpY2ggcmV0dXJucyBvYnNlcnZlZCB2ZXJzaW9ucyBvZiB0aGVcbiAgICAgICAgLy8gdmFsdWVzIGVtaXR0ZWQgZnJvbSB0aGUgcmVhbCBpdGVyYXRvclxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gaXRlcmF0b3IgcHJvdG9jb2xcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlLCBkb25lIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNQYWlyID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB3cmFwKHZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWRvbmx5TWV0aG9kKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2NhcGl0YWxpemUodHlwZSl9IG9wZXJhdGlvbiAke2tleX1mYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0b1Jhdyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovID8gZmFsc2UgOiB0aGlzO1xuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25zKCkge1xuICAgIGNvbnN0IG11dGFibGVJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZSh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzOiBoYXMkMSxcbiAgICAgICAgYWRkLFxuICAgICAgICBzZXQ6IHNldCQxLFxuICAgICAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxuICAgICAgICBjbGVhcixcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgZmFsc2UpXG4gICAgfTtcbiAgICBjb25zdCBzaGFsbG93SW5zdHJ1bWVudGF0aW9ucyA9IHtcbiAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBoYXM6IGhhcyQxLFxuICAgICAgICBhZGQsXG4gICAgICAgIHNldDogc2V0JDEsXG4gICAgICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXG4gICAgICAgIGNsZWFyLFxuICAgICAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCB0cnVlKVxuICAgIH07XG4gICAgY29uc3QgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLyksXG4gICAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8pLFxuICAgICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovKSxcbiAgICAgICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLyksXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgZmFsc2UpXG4gICAgfTtcbiAgICBjb25zdCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLyksXG4gICAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8pLFxuICAgICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogVHJpZ2dlck9wVHlwZXMuREVMRVRFICovKSxcbiAgICAgICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLyksXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgdHJ1ZSlcbiAgICB9O1xuICAgIGNvbnN0IGl0ZXJhdG9yTWV0aG9kcyA9IFsna2V5cycsICd2YWx1ZXMnLCAnZW50cmllcycsIFN5bWJvbC5pdGVyYXRvcl07XG4gICAgaXRlcmF0b3JNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIHRydWUpO1xuICAgICAgICBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIHRydWUsIHRydWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIG11dGFibGVJbnN0cnVtZW50YXRpb25zLFxuICAgICAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLFxuICAgICAgICBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXG4gICAgXTtcbn1cbmNvbnN0IFttdXRhYmxlSW5zdHJ1bWVudGF0aW9ucywgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93SW5zdHJ1bWVudGF0aW9ucywgc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc10gPSAvKiAjX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25zKCk7XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoaXNSZWFkb25seSwgc2hhbGxvdykge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSBzaGFsbG93XG4gICAgICAgID8gaXNSZWFkb25seVxuICAgICAgICAgICAgPyBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXG4gICAgICAgICAgICA6IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zXG4gICAgICAgIDogaXNSZWFkb25seVxuICAgICAgICAgICAgPyByZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICAgICAgICAgIDogbXV0YWJsZUluc3RydW1lbnRhdGlvbnM7XG4gICAgcmV0dXJuICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBQ1RJVkUgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNSZWFkb25seTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmdldChoYXNPd24oaW5zdHJ1bWVudGF0aW9ucywga2V5KSAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAgICAgICA/IGluc3RydW1lbnRhdGlvbnNcbiAgICAgICAgICAgIDogdGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICB9O1xufVxuY29uc3QgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCBmYWxzZSlcbn07XG5jb25zdCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIHRydWUpXG59O1xuY29uc3QgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCBmYWxzZSlcbn07XG5jb25zdCBzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCB0cnVlKVxufTtcbmZ1bmN0aW9uIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpIHtcbiAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICAgIGlmIChyYXdLZXkgIT09IGtleSAmJiBoYXMuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRvUmF3VHlwZSh0YXJnZXQpO1xuICAgICAgICBjb25zb2xlLndhcm4oYFJlYWN0aXZlICR7dHlwZX0gY29udGFpbnMgYm90aCB0aGUgcmF3IGFuZCByZWFjdGl2ZSBgICtcbiAgICAgICAgICAgIGB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBvYmplY3Qke3R5cGUgPT09IGBNYXBgID8gYCBhcyBrZXlzYCA6IGBgfSwgYCArXG4gICAgICAgICAgICBgd2hpY2ggY2FuIGxlYWQgdG8gaW5jb25zaXN0ZW5jaWVzLiBgICtcbiAgICAgICAgICAgIGBBdm9pZCBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiB0aGUgcmF3IGFuZCByZWFjdGl2ZSB2ZXJzaW9ucyBgICtcbiAgICAgICAgICAgIGBvZiBhbiBvYmplY3QgYW5kIG9ubHkgdXNlIHRoZSByZWFjdGl2ZSB2ZXJzaW9uIGlmIHBvc3NpYmxlLmApO1xuICAgIH1cbn1cblxuY29uc3QgcmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2hhbGxvd1JlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJlYWRvbmx5TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiB0YXJnZXRUeXBlTWFwKHJhd1R5cGUpIHtcbiAgICBzd2l0Y2ggKHJhd1R5cGUpIHtcbiAgICAgICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgICAgY2FzZSAnQXJyYXknOlxuICAgICAgICAgICAgcmV0dXJuIDEgLyogVGFyZ2V0VHlwZS5DT01NT04gKi87XG4gICAgICAgIGNhc2UgJ01hcCc6XG4gICAgICAgIGNhc2UgJ1NldCc6XG4gICAgICAgIGNhc2UgJ1dlYWtNYXAnOlxuICAgICAgICBjYXNlICdXZWFrU2V0JzpcbiAgICAgICAgICAgIHJldHVybiAyIC8qIFRhcmdldFR5cGUuQ09MTEVDVElPTiAqLztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAwIC8qIFRhcmdldFR5cGUuSU5WQUxJRCAqLztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRUeXBlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIiAvKiBSZWFjdGl2ZUZsYWdzLlNLSVAgKi9dIHx8ICFPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKVxuICAgICAgICA/IDAgLyogVGFyZ2V0VHlwZS5JTlZBTElEICovXG4gICAgICAgIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIHJlYWN0aXZlKHRhcmdldCkge1xuICAgIC8vIGlmIHRyeWluZyB0byBvYnNlcnZlIGEgcmVhZG9ubHkgcHJveHksIHJldHVybiB0aGUgcmVhZG9ubHkgdmVyc2lvbi5cbiAgICBpZiAoaXNSZWFkb25seSh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGZhbHNlLCBtdXRhYmxlSGFuZGxlcnMsIG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMsIHJlYWN0aXZlTWFwKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgc2hhbGxvd2x5LXJlYWN0aXZlIGNvcHkgb2YgdGhlIG9yaWdpbmFsIG9iamVjdCwgd2hlcmUgb25seSB0aGUgcm9vdFxuICogbGV2ZWwgcHJvcGVydGllcyBhcmUgcmVhY3RpdmUuIEl0IGFsc28gZG9lcyBub3QgYXV0by11bndyYXAgcmVmcyAoZXZlbiBhdCB0aGVcbiAqIHJvb3QgbGV2ZWwpLlxuICovXG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzLCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzLCBzaGFsbG93UmVhY3RpdmVNYXApO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcmVhZG9ubHkgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LiBOb3RlIHRoZSByZXR1cm5lZCBjb3B5IGlzIG5vdFxuICogbWFkZSByZWFjdGl2ZSwgYnV0IGByZWFkb25seWAgY2FuIGJlIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHJlYWN0aXZlIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgcmVhZG9ubHlIYW5kbGVycywgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMsIHJlYWRvbmx5TWFwKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJlYWN0aXZlLWNvcHkgb2YgdGhlIG9yaWdpbmFsIG9iamVjdCwgd2hlcmUgb25seSB0aGUgcm9vdCBsZXZlbFxuICogcHJvcGVydGllcyBhcmUgcmVhZG9ubHksIGFuZCBkb2VzIE5PVCB1bndyYXAgcmVmcyBub3IgcmVjdXJzaXZlbHkgY29udmVydFxuICogcmV0dXJuZWQgcHJvcGVydGllcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgY3JlYXRpbmcgdGhlIHByb3BzIHByb3h5IG9iamVjdCBmb3Igc3RhdGVmdWwgY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIHRydWUsIHNoYWxsb3dSZWFkb25seUhhbmRsZXJzLCBzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMsIHNoYWxsb3dSZWFkb25seU1hcCk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGlzUmVhZG9ubHksIGJhc2VIYW5kbGVycywgY29sbGVjdGlvbkhhbmRsZXJzLCBwcm94eU1hcCkge1xuICAgIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHZhbHVlIGNhbm5vdCBiZSBtYWRlIHJlYWN0aXZlOiAke1N0cmluZyh0YXJnZXQpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIC8vIHRhcmdldCBpcyBhbHJlYWR5IGEgUHJveHksIHJldHVybiBpdC5cbiAgICAvLyBleGNlcHRpb246IGNhbGxpbmcgcmVhZG9ubHkoKSBvbiBhIHJlYWN0aXZlIG9iamVjdFxuICAgIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi9dICYmXG4gICAgICAgICEoaXNSZWFkb25seSAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBQ1RJVkUgKi9dKSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICAvLyB0YXJnZXQgYWxyZWFkeSBoYXMgY29ycmVzcG9uZGluZyBQcm94eVxuICAgIGNvbnN0IGV4aXN0aW5nUHJveHkgPSBwcm94eU1hcC5nZXQodGFyZ2V0KTtcbiAgICBpZiAoZXhpc3RpbmdQcm94eSkge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdQcm94eTtcbiAgICB9XG4gICAgLy8gb25seSBzcGVjaWZpYyB2YWx1ZSB0eXBlcyBjYW4gYmUgb2JzZXJ2ZWQuXG4gICAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcbiAgICBpZiAodGFyZ2V0VHlwZSA9PT0gMCAvKiBUYXJnZXRUeXBlLklOVkFMSUQgKi8pIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB0YXJnZXRUeXBlID09PSAyIC8qIFRhcmdldFR5cGUuQ09MTEVDVElPTiAqLyA/IGNvbGxlY3Rpb25IYW5kbGVycyA6IGJhc2VIYW5kbGVycyk7XG4gICAgcHJveHlNYXAuc2V0KHRhcmdldCwgcHJveHkpO1xuICAgIHJldHVybiBwcm94eTtcbn1cbmZ1bmN0aW9uIGlzUmVhY3RpdmUodmFsdWUpIHtcbiAgICBpZiAoaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWVbXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi9dKTtcbiAgICB9XG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhY3RpdmVcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQUNUSVZFICovXSk7XG59XG5mdW5jdGlvbiBpc1JlYWRvbmx5KHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovXSk7XG59XG5mdW5jdGlvbiBpc1NoYWxsb3codmFsdWUpIHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNTaGFsbG93XCIgLyogUmVhY3RpdmVGbGFncy5JU19TSEFMTE9XICovXSk7XG59XG5mdW5jdGlvbiBpc1Byb3h5KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWUpIHx8IGlzUmVhZG9ubHkodmFsdWUpO1xufVxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcbiAgICBjb25zdCByYXcgPSBvYnNlcnZlZCAmJiBvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgcmV0dXJuIHJhdyA/IHRvUmF3KHJhdykgOiBvYnNlcnZlZDtcbn1cbmZ1bmN0aW9uIG1hcmtSYXcodmFsdWUpIHtcbiAgICBkZWYodmFsdWUsIFwiX192X3NraXBcIiAvKiBSZWFjdGl2ZUZsYWdzLlNLSVAgKi8sIHRydWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IHRvUmVhY3RpdmUgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWN0aXZlKHZhbHVlKSA6IHZhbHVlO1xuY29uc3QgdG9SZWFkb25seSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhZG9ubHkodmFsdWUpIDogdmFsdWU7XG5cbmZ1bmN0aW9uIHRyYWNrUmVmVmFsdWUocmVmKSB7XG4gICAgaWYgKHNob3VsZFRyYWNrICYmIGFjdGl2ZUVmZmVjdCkge1xuICAgICAgICByZWYgPSB0b1JhdyhyZWYpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB0cmFja0VmZmVjdHMocmVmLmRlcCB8fCAocmVmLmRlcCA9IGNyZWF0ZURlcCgpKSwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogcmVmLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLyxcbiAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tFZmZlY3RzKHJlZi5kZXAgfHwgKHJlZi5kZXAgPSBjcmVhdGVEZXAoKSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlclJlZlZhbHVlKHJlZiwgbmV3VmFsKSB7XG4gICAgcmVmID0gdG9SYXcocmVmKTtcbiAgICBpZiAocmVmLmRlcCkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhyZWYuZGVwLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sXG4gICAgICAgICAgICAgICAga2V5OiAndmFsdWUnLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMocmVmLmRlcCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpc1JlZihyKSB7XG4gICAgcmV0dXJuICEhKHIgJiYgci5fX3ZfaXNSZWYgPT09IHRydWUpO1xufVxuZnVuY3Rpb24gcmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgZmFsc2UpO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlZih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93KSB7XG4gICAgaWYgKGlzUmVmKHJhd1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcmF3VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVmSW1wbChyYXdWYWx1ZSwgc2hhbGxvdyk7XG59XG5jbGFzcyBSZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgX192X2lzU2hhbGxvdykge1xuICAgICAgICB0aGlzLl9fdl9pc1NoYWxsb3cgPSBfX3ZfaXNTaGFsbG93O1xuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IF9fdl9pc1NoYWxsb3cgPyB2YWx1ZSA6IHRvUmF3KHZhbHVlKTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBfX3ZfaXNTaGFsbG93ID8gdmFsdWUgOiB0b1JlYWN0aXZlKHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICB0cmFja1JlZlZhbHVlKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuICAgIHNldCB2YWx1ZShuZXdWYWwpIHtcbiAgICAgICAgY29uc3QgdXNlRGlyZWN0VmFsdWUgPSB0aGlzLl9fdl9pc1NoYWxsb3cgfHwgaXNTaGFsbG93KG5ld1ZhbCkgfHwgaXNSZWFkb25seShuZXdWYWwpO1xuICAgICAgICBuZXdWYWwgPSB1c2VEaXJlY3RWYWx1ZSA/IG5ld1ZhbCA6IHRvUmF3KG5ld1ZhbCk7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKG5ld1ZhbCwgdGhpcy5fcmF3VmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbDtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWwgOiB0b1JlYWN0aXZlKG5ld1ZhbCk7XG4gICAgICAgICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcywgbmV3VmFsKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmKSB7XG4gICAgdHJpZ2dlclJlZlZhbHVlKHJlZiwgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gcmVmLnZhbHVlIDogdm9pZCAwKTtcbn1cbmZ1bmN0aW9uIHVucmVmKHJlZikge1xuICAgIHJldHVybiBpc1JlZihyZWYpID8gcmVmLnZhbHVlIDogcmVmO1xufVxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xuICAgIGdldDogKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4gdW5yZWYoUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSksXG4gICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5mdW5jdGlvbiBwcm94eVJlZnMob2JqZWN0V2l0aFJlZnMpIHtcbiAgICByZXR1cm4gaXNSZWFjdGl2ZShvYmplY3RXaXRoUmVmcylcbiAgICAgICAgPyBvYmplY3RXaXRoUmVmc1xuICAgICAgICA6IG5ldyBQcm94eShvYmplY3RXaXRoUmVmcywgc2hhbGxvd1Vud3JhcEhhbmRsZXJzKTtcbn1cbmNsYXNzIEN1c3RvbVJlZkltcGwge1xuICAgIGNvbnN0cnVjdG9yKGZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5kZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgeyBnZXQsIHNldCB9ID0gZmFjdG9yeSgoKSA9PiB0cmFja1JlZlZhbHVlKHRoaXMpLCAoKSA9PiB0cmlnZ2VyUmVmVmFsdWUodGhpcykpO1xuICAgICAgICB0aGlzLl9nZXQgPSBnZXQ7XG4gICAgICAgIHRoaXMuX3NldCA9IHNldDtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KCk7XG4gICAgfVxuICAgIHNldCB2YWx1ZShuZXdWYWwpIHtcbiAgICAgICAgdGhpcy5fc2V0KG5ld1ZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3VzdG9tUmVmKGZhY3RvcnkpIHtcbiAgICByZXR1cm4gbmV3IEN1c3RvbVJlZkltcGwoZmFjdG9yeSk7XG59XG5mdW5jdGlvbiB0b1JlZnMob2JqZWN0KSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNQcm94eShvYmplY3QpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgdG9SZWZzKCkgZXhwZWN0cyBhIHJlYWN0aXZlIG9iamVjdCBidXQgcmVjZWl2ZWQgYSBwbGFpbiBvbmUuYCk7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgICByZXRba2V5XSA9IHRvUmVmKG9iamVjdCwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmNsYXNzIE9iamVjdFJlZkltcGwge1xuICAgIGNvbnN0cnVjdG9yKF9vYmplY3QsIF9rZXksIF9kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gX29iamVjdDtcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gX2RlZmF1bHRWYWx1ZTtcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuX29iamVjdFt0aGlzLl9rZXldO1xuICAgICAgICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgPyB0aGlzLl9kZWZhdWx0VmFsdWUgOiB2YWw7XG4gICAgfVxuICAgIHNldCB2YWx1ZShuZXdWYWwpIHtcbiAgICAgICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SZWYob2JqZWN0LCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbCA9IG9iamVjdFtrZXldO1xuICAgIHJldHVybiBpc1JlZih2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogbmV3IE9iamVjdFJlZkltcGwob2JqZWN0LCBrZXksIGRlZmF1bHRWYWx1ZSk7XG59XG5cbnZhciBfYTtcbmNsYXNzIENvbXB1dGVkUmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZ2V0dGVyLCBfc2V0dGVyLCBpc1JlYWRvbmx5LCBpc1NTUikge1xuICAgICAgICB0aGlzLl9zZXR0ZXIgPSBfc2V0dGVyO1xuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgICAgICB0aGlzW19hXSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVmZmVjdC5jb21wdXRlZCA9IHRoaXM7XG4gICAgICAgIHRoaXMuZWZmZWN0LmFjdGl2ZSA9IHRoaXMuX2NhY2hlYWJsZSA9ICFpc1NTUjtcbiAgICAgICAgdGhpc1tcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqL10gPSBpc1JlYWRvbmx5O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIC8vIHRoZSBjb21wdXRlZCByZWYgbWF5IGdldCB3cmFwcGVkIGJ5IG90aGVyIHByb3hpZXMgZS5nLiByZWFkb25seSgpICMzMzc2XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgdHJhY2tSZWZWYWx1ZShzZWxmKTtcbiAgICAgICAgaWYgKHNlbGYuX2RpcnR5IHx8ICFzZWxmLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIHNlbGYuX2RpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLl92YWx1ZSA9IHNlbGYuZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLl92YWx1ZTtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NldHRlcihuZXdWYWx1ZSk7XG4gICAgfVxufVxuX2EgPSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLztcbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucywgZGVidWdPcHRpb25zLCBpc1NTUiA9IGZhbHNlKSB7XG4gICAgbGV0IGdldHRlcjtcbiAgICBsZXQgc2V0dGVyO1xuICAgIGNvbnN0IG9ubHlHZXR0ZXIgPSBpc0Z1bmN0aW9uKGdldHRlck9yT3B0aW9ucyk7XG4gICAgaWYgKG9ubHlHZXR0ZXIpIHtcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zO1xuICAgICAgICBzZXR0ZXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgID8gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgdmFsdWUgaXMgcmVhZG9ubHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogTk9PUDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucy5nZXQ7XG4gICAgICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XG4gICAgfVxuICAgIGNvbnN0IGNSZWYgPSBuZXcgQ29tcHV0ZWRSZWZJbXBsKGdldHRlciwgc2V0dGVyLCBvbmx5R2V0dGVyIHx8ICFzZXR0ZXIsIGlzU1NSKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGRlYnVnT3B0aW9ucyAmJiAhaXNTU1IpIHtcbiAgICAgICAgY1JlZi5lZmZlY3Qub25UcmFjayA9IGRlYnVnT3B0aW9ucy5vblRyYWNrO1xuICAgICAgICBjUmVmLmVmZmVjdC5vblRyaWdnZXIgPSBkZWJ1Z09wdGlvbnMub25UcmlnZ2VyO1xuICAgIH1cbiAgICByZXR1cm4gY1JlZjtcbn1cblxudmFyIF9hJDE7XG5jb25zdCB0aWNrID0gLyojX19QVVJFX18qLyBQcm9taXNlLnJlc29sdmUoKTtcbmNvbnN0IHF1ZXVlID0gW107XG5sZXQgcXVldWVkID0gZmFsc2U7XG5jb25zdCBzY2hlZHVsZXIgPSAoZm4pID0+IHtcbiAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICBpZiAoIXF1ZXVlZCkge1xuICAgICAgICBxdWV1ZWQgPSB0cnVlO1xuICAgICAgICB0aWNrLnRoZW4oZmx1c2gpO1xuICAgIH1cbn07XG5jb25zdCBmbHVzaCA9ICgpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHF1ZXVlW2ldKCk7XG4gICAgfVxuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgcXVldWVkID0gZmFsc2U7XG59O1xuY2xhc3MgRGVmZXJyZWRDb21wdXRlZFJlZkltcGwge1xuICAgIGNvbnN0cnVjdG9yKGdldHRlcikge1xuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIHRoaXNbX2EkMV0gPSB0cnVlO1xuICAgICAgICBsZXQgY29tcGFyZVRhcmdldDtcbiAgICAgICAgbGV0IGhhc0NvbXBhcmVUYXJnZXQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIsIChjb21wdXRlZFRyaWdnZXIpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlcCkge1xuICAgICAgICAgICAgICAgIGlmIChjb21wdXRlZFRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRhcmdldCA9IHRoaXMuX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBoYXNDb21wYXJlVGFyZ2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZVRvQ29tcGFyZSA9IGhhc0NvbXBhcmVUYXJnZXQgPyBjb21wYXJlVGFyZ2V0IDogdGhpcy5fdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVmZmVjdC5hY3RpdmUgJiYgdGhpcy5fZ2V0KCkgIT09IHZhbHVlVG9Db21wYXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclJlZlZhbHVlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjaGFpbmVkIHVwc3RyZWFtIGNvbXB1dGVkcyBhcmUgbm90aWZpZWQgc3luY2hyb25vdXNseSB0byBlbnN1cmVcbiAgICAgICAgICAgICAgICAvLyB2YWx1ZSBpbnZhbGlkYXRpb24gaW4gY2FzZSBvZiBzeW5jIGFjY2Vzczsgbm9ybWFsIGVmZmVjdHMgYXJlXG4gICAgICAgICAgICAgICAgLy8gZGVmZXJyZWQgdG8gYmUgdHJpZ2dlcmVkIGluIHNjaGVkdWxlci5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5kZXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY29tcHV0ZWQgaW5zdGFuY2VvZiBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zY2hlZHVsZXIodHJ1ZSAvKiBjb21wdXRlZFRyaWdnZXIgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lZmZlY3QuY29tcHV0ZWQgPSB0aGlzO1xuICAgIH1cbiAgICBfZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX3ZhbHVlID0gdGhpcy5lZmZlY3QucnVuKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICB0cmFja1JlZlZhbHVlKHRoaXMpO1xuICAgICAgICAvLyB0aGUgY29tcHV0ZWQgcmVmIG1heSBnZXQgd3JhcHBlZCBieSBvdGhlciBwcm94aWVzIGUuZy4gcmVhZG9ubHkoKSAjMzM3NlxuICAgICAgICByZXR1cm4gdG9SYXcodGhpcykuX2dldCgpO1xuICAgIH1cbn1cbl9hJDEgPSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLztcbmZ1bmN0aW9uIGRlZmVycmVkQ29tcHV0ZWQoZ2V0dGVyKSB7XG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbChnZXR0ZXIpO1xufVxuXG5leHBvcnQgeyBFZmZlY3RTY29wZSwgSVRFUkFURV9LRVksIFJlYWN0aXZlRWZmZWN0LCBjb21wdXRlZCwgY3VzdG9tUmVmLCBkZWZlcnJlZENvbXB1dGVkLCBlZmZlY3QsIGVmZmVjdFNjb3BlLCBlbmFibGVUcmFja2luZywgZ2V0Q3VycmVudFNjb3BlLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgaXNTaGFsbG93LCBtYXJrUmF3LCBvblNjb3BlRGlzcG9zZSwgcGF1c2VUcmFja2luZywgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgcmVzZXRUcmFja2luZywgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0cmFjaywgdHJpZ2dlciwgdHJpZ2dlclJlZiwgdW5yZWYgfTtcbiIsImltcG9ydCB7IHBhdXNlVHJhY2tpbmcsIHJlc2V0VHJhY2tpbmcsIGlzUmVmLCB0b1JhdywgaXNTaGFsbG93IGFzIGlzU2hhbGxvdyQxLCBpc1JlYWN0aXZlLCBSZWFjdGl2ZUVmZmVjdCwgcmVmLCBzaGFsbG93UmVhZG9ubHksIHRyYWNrLCByZWFjdGl2ZSwgc2hhbGxvd1JlYWN0aXZlLCB0cmlnZ2VyLCBpc1Byb3h5LCBFZmZlY3RTY29wZSwgbWFya1JhdywgcHJveHlSZWZzLCBjb21wdXRlZCBhcyBjb21wdXRlZCQxLCBpc1JlYWRvbmx5IH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmV4cG9ydCB7IEVmZmVjdFNjb3BlLCBSZWFjdGl2ZUVmZmVjdCwgY3VzdG9tUmVmLCBlZmZlY3QsIGVmZmVjdFNjb3BlLCBnZXRDdXJyZW50U2NvcGUsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBpc1NoYWxsb3csIG1hcmtSYXcsIG9uU2NvcGVEaXNwb3NlLCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgc3RvcCwgdG9SYXcsIHRvUmVmLCB0b1JlZnMsIHRyaWdnZXJSZWYsIHVucmVmIH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0Z1bmN0aW9uLCBpc1Byb21pc2UsIGlzQXJyYXksIE5PT1AsIGdldEdsb2JhbFRoaXMsIGV4dGVuZCwgRU1QVFlfT0JKLCB0b0hhbmRsZXJLZXksIHRvTnVtYmVyLCBoeXBoZW5hdGUsIGNhbWVsaXplLCBpc09iamVjdCwgaXNPbiwgaGFzT3duLCBpc01vZGVsTGlzdGVuZXIsIGhhc0NoYW5nZWQsIHJlbW92ZSwgaXNTZXQsIGlzTWFwLCBpc1BsYWluT2JqZWN0LCBpbnZva2VBcnJheUZucywgaXNCdWlsdEluRGlyZWN0aXZlLCBjYXBpdGFsaXplLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGRlZiwgaXNSZXNlcnZlZFByb3AsIEVNUFRZX0FSUiwgdG9SYXdUeXBlLCBtYWtlTWFwLCBOTywgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVQcm9wcywgbm9ybWFsaXplU3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdGFjayA9IFtdO1xuZnVuY3Rpb24gcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKSB7XG4gICAgc3RhY2sucHVzaCh2bm9kZSk7XG59XG5mdW5jdGlvbiBwb3BXYXJuaW5nQ29udGV4dCgpIHtcbiAgICBzdGFjay5wb3AoKTtcbn1cbmZ1bmN0aW9uIHdhcm4obXNnLCAuLi5hcmdzKSB7XG4gICAgLy8gYXZvaWQgcHJvcHMgZm9ybWF0dGluZyBvciB3YXJuIGhhbmRsZXIgdHJhY2tpbmcgZGVwcyB0aGF0IG1pZ2h0IGJlIG11dGF0ZWRcbiAgICAvLyBkdXJpbmcgcGF0Y2gsIGxlYWRpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrLmxlbmd0aCA/IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XG4gICAgY29uc3QgYXBwV2FybkhhbmRsZXIgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy53YXJuSGFuZGxlcjtcbiAgICBjb25zdCB0cmFjZSA9IGdldENvbXBvbmVudFRyYWNlKCk7XG4gICAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBXYXJuSGFuZGxlciwgaW5zdGFuY2UsIDExIC8qIEVycm9yQ29kZXMuQVBQX1dBUk5fSEFORExFUiAqLywgW1xuICAgICAgICAgICAgbXNnICsgYXJncy5qb2luKCcnKSxcbiAgICAgICAgICAgIGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5LFxuICAgICAgICAgICAgdHJhY2VcbiAgICAgICAgICAgICAgICAubWFwKCh7IHZub2RlIH0pID0+IGBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCB2bm9kZS50eXBlKX0+YClcbiAgICAgICAgICAgICAgICAuam9pbignXFxuJyksXG4gICAgICAgICAgICB0cmFjZVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0cmFjZS5sZW5ndGggJiZcbiAgICAgICAgICAgIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXG4gICAgICAgICAgICAhZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5BcmdzLnB1c2goYFxcbmAsIC4uLmZvcm1hdFRyYWNlKHRyYWNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS53YXJuKC4uLndhcm5BcmdzKTtcbiAgICB9XG4gICAgcmVzZXRUcmFja2luZygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VHJhY2UoKSB7XG4gICAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGlmICghY3VycmVudFZOb2RlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgLy8gd2UgY2FuJ3QganVzdCB1c2UgdGhlIHN0YWNrIGJlY2F1c2UgaXQgd2lsbCBiZSBpbmNvbXBsZXRlIGR1cmluZyB1cGRhdGVzXG4gICAgLy8gdGhhdCBkaWQgbm90IHN0YXJ0IGZyb20gdGhlIHJvb3QuIFJlLWNvbnN0cnVjdCB0aGUgcGFyZW50IGNoYWluIHVzaW5nXG4gICAgLy8gaW5zdGFuY2UgcGFyZW50IHBvaW50ZXJzLlxuICAgIGNvbnN0IG5vcm1hbGl6ZWRTdGFjayA9IFtdO1xuICAgIHdoaWxlIChjdXJyZW50Vk5vZGUpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IG5vcm1hbGl6ZWRTdGFja1swXTtcbiAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC52bm9kZSA9PT0gY3VycmVudFZOb2RlKSB7XG4gICAgICAgICAgICBsYXN0LnJlY3Vyc2VDb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9ybWFsaXplZFN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgIHZub2RlOiBjdXJyZW50Vk5vZGUsXG4gICAgICAgICAgICAgICAgcmVjdXJzZUNvdW50OiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRJbnN0YW5jZSA9IGN1cnJlbnRWTm9kZS5jb21wb25lbnQgJiYgY3VycmVudFZOb2RlLmNvbXBvbmVudC5wYXJlbnQ7XG4gICAgICAgIGN1cnJlbnRWTm9kZSA9IHBhcmVudEluc3RhbmNlICYmIHBhcmVudEluc3RhbmNlLnZub2RlO1xuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZFN0YWNrO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlKHRyYWNlKSB7XG4gICAgY29uc3QgbG9ncyA9IFtdO1xuICAgIHRyYWNlLmZvckVhY2goKGVudHJ5LCBpKSA9PiB7XG4gICAgICAgIGxvZ3MucHVzaCguLi4oaSA9PT0gMCA/IFtdIDogW2BcXG5gXSksIC4uLmZvcm1hdFRyYWNlRW50cnkoZW50cnkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbG9ncztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlRW50cnkoeyB2bm9kZSwgcmVjdXJzZUNvdW50IH0pIHtcbiAgICBjb25zdCBwb3N0Zml4ID0gcmVjdXJzZUNvdW50ID4gMCA/IGAuLi4gKCR7cmVjdXJzZUNvdW50fSByZWN1cnNpdmUgY2FsbHMpYCA6IGBgO1xuICAgIGNvbnN0IGlzUm9vdCA9IHZub2RlLmNvbXBvbmVudCA/IHZub2RlLmNvbXBvbmVudC5wYXJlbnQgPT0gbnVsbCA6IGZhbHNlO1xuICAgIGNvbnN0IG9wZW4gPSBgIGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUodm5vZGUuY29tcG9uZW50LCB2bm9kZS50eXBlLCBpc1Jvb3QpfWA7XG4gICAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xuICAgIHJldHVybiB2bm9kZS5wcm9wc1xuICAgICAgICA/IFtvcGVuLCAuLi5mb3JtYXRQcm9wcyh2bm9kZS5wcm9wcyksIGNsb3NlXVxuICAgICAgICA6IFtvcGVuICsgY2xvc2VdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgcmVzLnB1c2goLi4uZm9ybWF0UHJvcChrZXksIHByb3BzW2tleV0pKTtcbiAgICB9KTtcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XG4gICAgICAgIHJlcy5wdXNoKGAgLi4uYCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0UHJvcChrZXksIHRvUmF3KHZhbHVlLnZhbHVlKSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PVJlZjxgLCB2YWx1ZSwgYD5gXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIFtgJHtrZXl9PWZuJHt2YWx1ZS5uYW1lID8gYDwke3ZhbHVlLm5hbWV9PmAgOiBgYH1gXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1gLCB2YWx1ZV07XG4gICAgfVxufVxuXG5jb25zdCBFcnJvclR5cGVTdHJpbmdzID0ge1xuICAgIFtcInNwXCIgLyogTGlmZWN5Y2xlSG9va3MuU0VSVkVSX1BSRUZFVENIICovXTogJ3NlcnZlclByZWZldGNoIGhvb2snLFxuICAgIFtcImJjXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX0NSRUFURSAqL106ICdiZWZvcmVDcmVhdGUgaG9vaycsXG4gICAgW1wiY1wiIC8qIExpZmVjeWNsZUhvb2tzLkNSRUFURUQgKi9dOiAnY3JlYXRlZCBob29rJyxcbiAgICBbXCJibVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9NT1VOVCAqL106ICdiZWZvcmVNb3VudCBob29rJyxcbiAgICBbXCJtXCIgLyogTGlmZWN5Y2xlSG9va3MuTU9VTlRFRCAqL106ICdtb3VudGVkIGhvb2snLFxuICAgIFtcImJ1XCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX1VQREFURSAqL106ICdiZWZvcmVVcGRhdGUgaG9vaycsXG4gICAgW1widVwiIC8qIExpZmVjeWNsZUhvb2tzLlVQREFURUQgKi9dOiAndXBkYXRlZCcsXG4gICAgW1wiYnVtXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX1VOTU9VTlQgKi9dOiAnYmVmb3JlVW5tb3VudCBob29rJyxcbiAgICBbXCJ1bVwiIC8qIExpZmVjeWNsZUhvb2tzLlVOTU9VTlRFRCAqL106ICd1bm1vdW50ZWQgaG9vaycsXG4gICAgW1wiYVwiIC8qIExpZmVjeWNsZUhvb2tzLkFDVElWQVRFRCAqL106ICdhY3RpdmF0ZWQgaG9vaycsXG4gICAgW1wiZGFcIiAvKiBMaWZlY3ljbGVIb29rcy5ERUFDVElWQVRFRCAqL106ICdkZWFjdGl2YXRlZCBob29rJyxcbiAgICBbXCJlY1wiIC8qIExpZmVjeWNsZUhvb2tzLkVSUk9SX0NBUFRVUkVEICovXTogJ2Vycm9yQ2FwdHVyZWQgaG9vaycsXG4gICAgW1wicnRjXCIgLyogTGlmZWN5Y2xlSG9va3MuUkVOREVSX1RSQUNLRUQgKi9dOiAncmVuZGVyVHJhY2tlZCBob29rJyxcbiAgICBbXCJydGdcIiAvKiBMaWZlY3ljbGVIb29rcy5SRU5ERVJfVFJJR0dFUkVEICovXTogJ3JlbmRlclRyaWdnZXJlZCBob29rJyxcbiAgICBbMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovXTogJ3NldHVwIGZ1bmN0aW9uJyxcbiAgICBbMSAvKiBFcnJvckNvZGVzLlJFTkRFUl9GVU5DVElPTiAqL106ICdyZW5kZXIgZnVuY3Rpb24nLFxuICAgIFsyIC8qIEVycm9yQ29kZXMuV0FUQ0hfR0VUVEVSICovXTogJ3dhdGNoZXIgZ2V0dGVyJyxcbiAgICBbMyAvKiBFcnJvckNvZGVzLldBVENIX0NBTExCQUNLICovXTogJ3dhdGNoZXIgY2FsbGJhY2snLFxuICAgIFs0IC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0xFQU5VUCAqL106ICd3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb24nLFxuICAgIFs1IC8qIEVycm9yQ29kZXMuTkFUSVZFX0VWRU5UX0hBTkRMRVIgKi9dOiAnbmF0aXZlIGV2ZW50IGhhbmRsZXInLFxuICAgIFs2IC8qIEVycm9yQ29kZXMuQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi9dOiAnY29tcG9uZW50IGV2ZW50IGhhbmRsZXInLFxuICAgIFs3IC8qIEVycm9yQ29kZXMuVk5PREVfSE9PSyAqL106ICd2bm9kZSBob29rJyxcbiAgICBbOCAvKiBFcnJvckNvZGVzLkRJUkVDVElWRV9IT09LICovXTogJ2RpcmVjdGl2ZSBob29rJyxcbiAgICBbOSAvKiBFcnJvckNvZGVzLlRSQU5TSVRJT05fSE9PSyAqL106ICd0cmFuc2l0aW9uIGhvb2snLFxuICAgIFsxMCAvKiBFcnJvckNvZGVzLkFQUF9FUlJPUl9IQU5ETEVSICovXTogJ2FwcCBlcnJvckhhbmRsZXInLFxuICAgIFsxMSAvKiBFcnJvckNvZGVzLkFQUF9XQVJOX0hBTkRMRVIgKi9dOiAnYXBwIHdhcm5IYW5kbGVyJyxcbiAgICBbMTIgLyogRXJyb3JDb2Rlcy5GVU5DVElPTl9SRUYgKi9dOiAncmVmIGZ1bmN0aW9uJyxcbiAgICBbMTMgLyogRXJyb3JDb2Rlcy5BU1lOQ19DT01QT05FTlRfTE9BREVSICovXTogJ2FzeW5jIGNvbXBvbmVudCBsb2FkZXInLFxuICAgIFsxNCAvKiBFcnJvckNvZGVzLlNDSEVEVUxFUiAqL106ICdzY2hlZHVsZXIgZmx1c2guIFRoaXMgaXMgbGlrZWx5IGEgVnVlIGludGVybmFscyBidWcuICcgK1xuICAgICAgICAnUGxlYXNlIG9wZW4gYW4gaXNzdWUgYXQgaHR0cHM6Ly9uZXctaXNzdWUudnVlanMub3JnLz9yZXBvPXZ1ZWpzL2NvcmUnXG59O1xuZnVuY3Rpb24gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICAgIGxldCByZXM7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzID0gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgICAgICAgaWYgKHJlcyAmJiBpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAgICAgcmVzLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcbiAgICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgbGV0IGN1ciA9IGluc3RhbmNlLnBhcmVudDtcbiAgICAgICAgLy8gdGhlIGV4cG9zZWQgaW5zdGFuY2UgaXMgdGhlIHJlbmRlciBwcm94eSB0byBrZWVwIGl0IGNvbnNpc3RlbnQgd2l0aCAyLnhcbiAgICAgICAgY29uc3QgZXhwb3NlZEluc3RhbmNlID0gaW5zdGFuY2UucHJveHk7XG4gICAgICAgIC8vIGluIHByb2R1Y3Rpb24gdGhlIGhvb2sgcmVjZWl2ZXMgb25seSB0aGUgZXJyb3IgY29kZVxuICAgICAgICBjb25zdCBlcnJvckluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBFcnJvclR5cGVTdHJpbmdzW3R5cGVdIDogdHlwZTtcbiAgICAgICAgd2hpbGUgKGN1cikge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JDYXB0dXJlZEhvb2tzID0gY3VyLmVjO1xuICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXJyb3JDYXB0dXJlZEhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3NbaV0oZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mbykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXIgPSBjdXIucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIGFwcC1sZXZlbCBoYW5kbGluZ1xuICAgICAgICBjb25zdCBhcHBFcnJvckhhbmRsZXIgPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5lcnJvckhhbmRsZXI7XG4gICAgICAgIGlmIChhcHBFcnJvckhhbmRsZXIpIHtcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBFcnJvckhhbmRsZXIsIG51bGwsIDEwIC8qIEVycm9yQ29kZXMuQVBQX0VSUk9SX0hBTkRMRVIgKi8sIFtlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYpO1xufVxuZnVuY3Rpb24gbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCBpbmZvID0gRXJyb3JUeXBlU3RyaW5nc1t0eXBlXTtcbiAgICAgICAgaWYgKGNvbnRleHRWTm9kZSkge1xuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGNvbnRleHRWTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgd2FybihgVW5oYW5kbGVkIGVycm9yJHtpbmZvID8gYCBkdXJpbmcgZXhlY3V0aW9uIG9mICR7aW5mb31gIDogYGB9YCk7XG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcbiAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3Jhc2ggaW4gZGV2IGJ5IGRlZmF1bHQgc28gaXQncyBtb3JlIG5vdGljZWFibGVcbiAgICAgICAgaWYgKHRocm93SW5EZXYpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gcmVjb3ZlciBpbiBwcm9kIHRvIHJlZHVjZSB0aGUgaW1wYWN0IG9uIGVuZC11c2VyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG59XG5cbmxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XG5sZXQgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcbmNvbnN0IHF1ZXVlID0gW107XG5sZXQgZmx1c2hJbmRleCA9IDA7XG5jb25zdCBwZW5kaW5nUG9zdEZsdXNoQ2JzID0gW107XG5sZXQgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcbmxldCBwb3N0Rmx1c2hJbmRleCA9IDA7XG5jb25zdCByZXNvbHZlZFByb21pc2UgPSAvKiNfX1BVUkVfXyovIFByb21pc2UucmVzb2x2ZSgpO1xubGV0IGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuY29uc3QgUkVDVVJTSU9OX0xJTUlUID0gMTAwO1xuZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICBjb25zdCBwID0gY3VycmVudEZsdXNoUHJvbWlzZSB8fCByZXNvbHZlZFByb21pc2U7XG4gICAgcmV0dXJuIGZuID8gcC50aGVuKHRoaXMgPyBmbi5iaW5kKHRoaXMpIDogZm4pIDogcDtcbn1cbi8vICMyNzY4XG4vLyBVc2UgYmluYXJ5LXNlYXJjaCB0byBmaW5kIGEgc3VpdGFibGUgcG9zaXRpb24gaW4gdGhlIHF1ZXVlLFxuLy8gc28gdGhhdCB0aGUgcXVldWUgbWFpbnRhaW5zIHRoZSBpbmNyZWFzaW5nIG9yZGVyIG9mIGpvYidzIGlkLFxuLy8gd2hpY2ggY2FuIHByZXZlbnQgdGhlIGpvYiBmcm9tIGJlaW5nIHNraXBwZWQgYW5kIGFsc28gY2FuIGF2b2lkIHJlcGVhdGVkIHBhdGNoaW5nLlxuZnVuY3Rpb24gZmluZEluc2VydGlvbkluZGV4KGlkKSB7XG4gICAgLy8gdGhlIHN0YXJ0IGluZGV4IHNob3VsZCBiZSBgZmx1c2hJbmRleCArIDFgXG4gICAgbGV0IHN0YXJ0ID0gZmx1c2hJbmRleCArIDE7XG4gICAgbGV0IGVuZCA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgY29uc3QgbWlkZGxlID0gKHN0YXJ0ICsgZW5kKSA+Pj4gMTtcbiAgICAgICAgY29uc3QgbWlkZGxlSm9iSWQgPSBnZXRJZChxdWV1ZVttaWRkbGVdKTtcbiAgICAgICAgbWlkZGxlSm9iSWQgPCBpZCA/IChzdGFydCA9IG1pZGRsZSArIDEpIDogKGVuZCA9IG1pZGRsZSk7XG4gICAgfVxuICAgIHJldHVybiBzdGFydDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xuICAgIC8vIHRoZSBkZWR1cGUgc2VhcmNoIHVzZXMgdGhlIHN0YXJ0SW5kZXggYXJndW1lbnQgb2YgQXJyYXkuaW5jbHVkZXMoKVxuICAgIC8vIGJ5IGRlZmF1bHQgdGhlIHNlYXJjaCBpbmRleCBpbmNsdWRlcyB0aGUgY3VycmVudCBqb2IgdGhhdCBpcyBiZWluZyBydW5cbiAgICAvLyBzbyBpdCBjYW5ub3QgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgYWdhaW4uXG4gICAgLy8gaWYgdGhlIGpvYiBpcyBhIHdhdGNoKCkgY2FsbGJhY2ssIHRoZSBzZWFyY2ggd2lsbCBzdGFydCB3aXRoIGEgKzEgaW5kZXggdG9cbiAgICAvLyBhbGxvdyBpdCByZWN1cnNpdmVseSB0cmlnZ2VyIGl0c2VsZiAtIGl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG9cbiAgICAvLyBlbnN1cmUgaXQgZG9lc24ndCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcC5cbiAgICBpZiAoIXF1ZXVlLmxlbmd0aCB8fFxuICAgICAgICAhcXVldWUuaW5jbHVkZXMoam9iLCBpc0ZsdXNoaW5nICYmIGpvYi5hbGxvd1JlY3Vyc2UgPyBmbHVzaEluZGV4ICsgMSA6IGZsdXNoSW5kZXgpKSB7XG4gICAgICAgIGlmIChqb2IuaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcXVldWUucHVzaChqb2IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcXVldWUuc3BsaWNlKGZpbmRJbnNlcnRpb25JbmRleChqb2IuaWQpLCAwLCBqb2IpO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlRmx1c2goKTtcbiAgICB9XG59XG5mdW5jdGlvbiBxdWV1ZUZsdXNoKCkge1xuICAgIGlmICghaXNGbHVzaGluZyAmJiAhaXNGbHVzaFBlbmRpbmcpIHtcbiAgICAgICAgaXNGbHVzaFBlbmRpbmcgPSB0cnVlO1xuICAgICAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gcmVzb2x2ZWRQcm9taXNlLnRoZW4oZmx1c2hKb2JzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlSm9iKGpvYikge1xuICAgIGNvbnN0IGkgPSBxdWV1ZS5pbmRleE9mKGpvYik7XG4gICAgaWYgKGkgPiBmbHVzaEluZGV4KSB7XG4gICAgICAgIHF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICB9XG59XG5mdW5jdGlvbiBxdWV1ZVBvc3RGbHVzaENiKGNiKSB7XG4gICAgaWYgKCFpc0FycmF5KGNiKSkge1xuICAgICAgICBpZiAoIWFjdGl2ZVBvc3RGbHVzaENicyB8fFxuICAgICAgICAgICAgIWFjdGl2ZVBvc3RGbHVzaENicy5pbmNsdWRlcyhjYiwgY2IuYWxsb3dSZWN1cnNlID8gcG9zdEZsdXNoSW5kZXggKyAxIDogcG9zdEZsdXNoSW5kZXgpKSB7XG4gICAgICAgICAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLnB1c2goY2IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBpZiBjYiBpcyBhbiBhcnJheSwgaXQgaXMgYSBjb21wb25lbnQgbGlmZWN5Y2xlIGhvb2sgd2hpY2ggY2FuIG9ubHkgYmVcbiAgICAgICAgLy8gdHJpZ2dlcmVkIGJ5IGEgam9iLCB3aGljaCBpcyBhbHJlYWR5IGRlZHVwZWQgaW4gdGhlIG1haW4gcXVldWUsIHNvXG4gICAgICAgIC8vIHdlIGNhbiBza2lwIGR1cGxpY2F0ZSBjaGVjayBoZXJlIHRvIGltcHJvdmUgcGVyZlxuICAgICAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLnB1c2goLi4uY2IpO1xuICAgIH1cbiAgICBxdWV1ZUZsdXNoKCk7XG59XG5mdW5jdGlvbiBmbHVzaFByZUZsdXNoQ2JzKHNlZW4sIFxuLy8gaWYgY3VycmVudGx5IGZsdXNoaW5nLCBza2lwIHRoZSBjdXJyZW50IGpvYiBpdHNlbGZcbmkgPSBpc0ZsdXNoaW5nID8gZmx1c2hJbmRleCArIDEgOiAwKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2IgPSBxdWV1ZVtpXTtcbiAgICAgICAgaWYgKGNiICYmIGNiLnByZSkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgY2IpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbikge1xuICAgIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBkZWR1cGVkID0gWy4uLm5ldyBTZXQocGVuZGluZ1Bvc3RGbHVzaENicyldO1xuICAgICAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCA9IDA7XG4gICAgICAgIC8vICMxOTQ3IGFscmVhZHkgaGFzIGFjdGl2ZSBxdWV1ZSwgbmVzdGVkIGZsdXNoUG9zdEZsdXNoQ2JzIGNhbGxcbiAgICAgICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicykge1xuICAgICAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnB1c2goLi4uZGVkdXBlZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gZGVkdXBlZDtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5zb3J0KChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpKTtcbiAgICAgICAgZm9yIChwb3N0Rmx1c2hJbmRleCA9IDA7IHBvc3RGbHVzaEluZGV4IDwgYWN0aXZlUG9zdEZsdXNoQ2JzLmxlbmd0aDsgcG9zdEZsdXNoSW5kZXgrKykge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzW3Bvc3RGbHVzaEluZGV4XSgpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XG4gICAgICAgIHBvc3RGbHVzaEluZGV4ID0gMDtcbiAgICB9XG59XG5jb25zdCBnZXRJZCA9IChqb2IpID0+IGpvYi5pZCA9PSBudWxsID8gSW5maW5pdHkgOiBqb2IuaWQ7XG5jb25zdCBjb21wYXJhdG9yID0gKGEsIGIpID0+IHtcbiAgICBjb25zdCBkaWZmID0gZ2V0SWQoYSkgLSBnZXRJZChiKTtcbiAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICBpZiAoYS5wcmUgJiYgIWIucHJlKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYi5wcmUgJiYgIWEucHJlKVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiBkaWZmO1xufTtcbmZ1bmN0aW9uIGZsdXNoSm9icyhzZWVuKSB7XG4gICAgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcbiAgICBpc0ZsdXNoaW5nID0gdHJ1ZTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gICAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAgIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZCBzbyBpdHMgcmVuZGVyIGVmZmVjdCB3aWxsIGhhdmUgc21hbGxlclxuICAgIC8vICAgIHByaW9yaXR5IG51bWJlcilcbiAgICAvLyAyLiBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHVwZGF0ZSxcbiAgICAvLyAgICBpdHMgdXBkYXRlIGNhbiBiZSBza2lwcGVkLlxuICAgIHF1ZXVlLnNvcnQoY29tcGFyYXRvcik7XG4gICAgLy8gY29uZGl0aW9uYWwgdXNhZ2Ugb2YgY2hlY2tSZWN1cnNpdmVVcGRhdGUgbXVzdCBiZSBkZXRlcm1pbmVkIG91dCBvZlxuICAgIC8vIHRyeSAuLi4gY2F0Y2ggYmxvY2sgc2luY2UgUm9sbHVwIGJ5IGRlZmF1bHQgZGUtb3B0aW1pemVzIHRyZWVzaGFraW5nXG4gICAgLy8gaW5zaWRlIHRyeS1jYXRjaC4gVGhpcyBjYW4gbGVhdmUgYWxsIHdhcm5pbmcgY29kZSB1bnNoYWtlZC4gQWx0aG91Z2hcbiAgICAvLyB0aGV5IHdvdWxkIGdldCBldmVudHVhbGx5IHNoYWtlbiBieSBhIG1pbmlmaWVyIGxpa2UgdGVyc2VyLCBzb21lIG1pbmlmaWVyc1xuICAgIC8vIHdvdWxkIGZhaWwgdG8gZG8gdGhhdCAoZS5nLiBodHRwczovL2dpdGh1Yi5jb20vZXZhbncvZXNidWlsZC9pc3N1ZXMvMTYxMClcbiAgICBjb25zdCBjaGVjayA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IChqb2IpID0+IGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBqb2IpXG4gICAgICAgIDogTk9PUDtcbiAgICB0cnkge1xuICAgICAgICBmb3IgKGZsdXNoSW5kZXggPSAwOyBmbHVzaEluZGV4IDwgcXVldWUubGVuZ3RoOyBmbHVzaEluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGpvYiA9IHF1ZXVlW2ZsdXNoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKGpvYiAmJiBqb2IuYWN0aXZlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY2hlY2soam9iKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYHJ1bm5pbmc6YCwgam9iLmlkKVxuICAgICAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhqb2IsIG51bGwsIDE0IC8qIEVycm9yQ29kZXMuU0NIRURVTEVSICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgZmx1c2hJbmRleCA9IDA7XG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pO1xuICAgICAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XG4gICAgICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuICAgICAgICAvLyBzb21lIHBvc3RGbHVzaENiIHF1ZXVlZCBqb2JzIVxuICAgICAgICAvLyBrZWVwIGZsdXNoaW5nIHVudGlsIGl0IGRyYWlucy5cbiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCB8fCBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgICAgICAgICAgZmx1c2hKb2JzKHNlZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGZuKSB7XG4gICAgaWYgKCFzZWVuLmhhcyhmbikpIHtcbiAgICAgICAgc2Vlbi5zZXQoZm4sIDEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWVuLmdldChmbik7XG4gICAgICAgIGlmIChjb3VudCA+IFJFQ1VSU0lPTl9MSU1JVCkge1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBmbi5vd25lckluc3RhbmNlO1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGluc3RhbmNlICYmIGdldENvbXBvbmVudE5hbWUoaW5zdGFuY2UudHlwZSk7XG4gICAgICAgICAgICB3YXJuKGBNYXhpbXVtIHJlY3Vyc2l2ZSB1cGRhdGVzIGV4Y2VlZGVkJHtjb21wb25lbnROYW1lID8gYCBpbiBjb21wb25lbnQgPCR7Y29tcG9uZW50TmFtZX0+YCA6IGBgfS4gYCArXG4gICAgICAgICAgICAgICAgYFRoaXMgbWVhbnMgeW91IGhhdmUgYSByZWFjdGl2ZSBlZmZlY3QgdGhhdCBpcyBtdXRhdGluZyBpdHMgb3duIGAgK1xuICAgICAgICAgICAgICAgIGBkZXBlbmRlbmNpZXMgYW5kIHRodXMgcmVjdXJzaXZlbHkgdHJpZ2dlcmluZyBpdHNlbGYuIFBvc3NpYmxlIHNvdXJjZXMgYCArXG4gICAgICAgICAgICAgICAgYGluY2x1ZGUgY29tcG9uZW50IHRlbXBsYXRlLCByZW5kZXIgZnVuY3Rpb24sIHVwZGF0ZWQgaG9vayBvciBgICtcbiAgICAgICAgICAgICAgICBgd2F0Y2hlciBzb3VyY2UgZnVuY3Rpb24uYCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlZW4uc2V0KGZuLCBjb3VudCArIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbmxldCBpc0htclVwZGF0aW5nID0gZmFsc2U7XG5jb25zdCBobXJEaXJ0eUNvbXBvbmVudHMgPSBuZXcgU2V0KCk7XG4vLyBFeHBvc2UgdGhlIEhNUiBydW50aW1lIG9uIHRoZSBnbG9iYWwgb2JqZWN0XG4vLyBUaGlzIG1ha2VzIGl0IGVudGlyZWx5IHRyZWUtc2hha2FibGUgd2l0aG91dCBwb2xsdXRpbmcgdGhlIGV4cG9ydHMgYW5kIG1ha2VzXG4vLyBpdCBlYXNpZXIgdG8gYmUgdXNlZCBpbiB0b29saW5ncyBsaWtlIHZ1ZS1sb2FkZXJcbi8vIE5vdGU6IGZvciBhIGNvbXBvbmVudCB0byBiZSBlbGlnaWJsZSBmb3IgSE1SIGl0IGFsc28gbmVlZHMgdGhlIF9faG1ySWQgb3B0aW9uXG4vLyB0byBiZSBzZXQgc28gdGhhdCBpdHMgaW5zdGFuY2VzIGNhbiBiZSByZWdpc3RlcmVkIC8gcmVtb3ZlZC5cbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfSE1SX1JVTlRJTUVfXyA9IHtcbiAgICAgICAgY3JlYXRlUmVjb3JkOiB0cnlXcmFwKGNyZWF0ZVJlY29yZCksXG4gICAgICAgIHJlcmVuZGVyOiB0cnlXcmFwKHJlcmVuZGVyKSxcbiAgICAgICAgcmVsb2FkOiB0cnlXcmFwKHJlbG9hZClcbiAgICB9O1xufVxuY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gcmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBpZCA9IGluc3RhbmNlLnR5cGUuX19obXJJZDtcbiAgICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgY3JlYXRlUmVjb3JkKGlkLCBpbnN0YW5jZS50eXBlKTtcbiAgICAgICAgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gICAgfVxuICAgIHJlY29yZC5pbnN0YW5jZXMuYWRkKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcbiAgICBtYXAuZ2V0KGluc3RhbmNlLnR5cGUuX19obXJJZCkuaW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWNvcmQoaWQsIGluaXRpYWxEZWYpIHtcbiAgICBpZiAobWFwLmhhcyhpZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBtYXAuc2V0KGlkLCB7XG4gICAgICAgIGluaXRpYWxEZWY6IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluaXRpYWxEZWYpLFxuICAgICAgICBpbnN0YW5jZXM6IG5ldyBTZXQoKVxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiByZXJlbmRlcihpZCwgbmV3UmVuZGVyKSB7XG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB1cGRhdGUgaW5pdGlhbCByZWNvcmQgKGZvciBub3QteWV0LXJlbmRlcmVkIGNvbXBvbmVudClcbiAgICByZWNvcmQuaW5pdGlhbERlZi5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gICAgWy4uLnJlY29yZC5pbnN0YW5jZXNdLmZvckVhY2goaW5zdGFuY2UgPT4ge1xuICAgICAgICBpZiAobmV3UmVuZGVyKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gICAgICAgICAgICBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKS5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UucmVuZGVyQ2FjaGUgPSBbXTtcbiAgICAgICAgLy8gdGhpcyBmbGFnIGZvcmNlcyBjaGlsZCBjb21wb25lbnRzIHdpdGggc2xvdCBjb250ZW50IHRvIHVwZGF0ZVxuICAgICAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlbG9hZChpZCwgbmV3Q29tcCkge1xuICAgIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICAgIGlmICghcmVjb3JkKVxuICAgICAgICByZXR1cm47XG4gICAgbmV3Q29tcCA9IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KG5ld0NvbXApO1xuICAgIC8vIHVwZGF0ZSBpbml0aWFsIGRlZiAoZm9yIG5vdC15ZXQtcmVuZGVyZWQgY29tcG9uZW50cylcbiAgICB1cGRhdGVDb21wb25lbnREZWYocmVjb3JkLmluaXRpYWxEZWYsIG5ld0NvbXApO1xuICAgIC8vIGNyZWF0ZSBhIHNuYXBzaG90IHdoaWNoIGF2b2lkcyB0aGUgc2V0IGJlaW5nIG11dGF0ZWQgZHVyaW5nIHVwZGF0ZXNcbiAgICBjb25zdCBpbnN0YW5jZXMgPSBbLi4ucmVjb3JkLmluc3RhbmNlc107XG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcbiAgICAgICAgY29uc3Qgb2xkQ29tcCA9IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpO1xuICAgICAgICBpZiAoIWhtckRpcnR5Q29tcG9uZW50cy5oYXMob2xkQ29tcCkpIHtcbiAgICAgICAgICAgIC8vIDEuIFVwZGF0ZSBleGlzdGluZyBjb21wIGRlZmluaXRpb24gdG8gbWF0Y2ggbmV3IG9uZVxuICAgICAgICAgICAgaWYgKG9sZENvbXAgIT09IHJlY29yZC5pbml0aWFsRGVmKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gMi4gbWFyayBkZWZpbml0aW9uIGRpcnR5LiBUaGlzIGZvcmNlcyB0aGUgcmVuZGVyZXIgdG8gcmVwbGFjZSB0aGVcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCBvbiBwYXRjaC5cbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5hZGQob2xkQ29tcCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4gaW52YWxpZGF0ZSBvcHRpb25zIHJlc29sdXRpb24gY2FjaGVcbiAgICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5vcHRpb25zQ2FjaGUuZGVsZXRlKGluc3RhbmNlLnR5cGUpO1xuICAgICAgICAvLyA0LiBhY3R1YWxseSB1cGRhdGVcbiAgICAgICAgaWYgKGluc3RhbmNlLmNlUmVsb2FkKSB7XG4gICAgICAgICAgICAvLyBjdXN0b20gZWxlbWVudFxuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmFkZChvbGRDb21wKTtcbiAgICAgICAgICAgIGluc3RhbmNlLmNlUmVsb2FkKG5ld0NvbXAuc3R5bGVzKTtcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5kZWxldGUob2xkQ29tcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UucGFyZW50KSB7XG4gICAgICAgICAgICAvLyA0LiBGb3JjZSB0aGUgcGFyZW50IGluc3RhbmNlIHRvIHJlLXJlbmRlci4gVGhpcyB3aWxsIGNhdXNlIGFsbCB1cGRhdGVkXG4gICAgICAgICAgICAvLyBjb21wb25lbnRzIHRvIGJlIHVubW91bnRlZCBhbmQgcmUtbW91bnRlZC4gUXVldWUgdGhlIHVwZGF0ZSBzbyB0aGF0IHdlXG4gICAgICAgICAgICAvLyBkb24ndCBlbmQgdXAgZm9yY2luZyB0aGUgc2FtZSBwYXJlbnQgdG8gcmUtcmVuZGVyIG11bHRpcGxlIHRpbWVzLlxuICAgICAgICAgICAgcXVldWVKb2IoaW5zdGFuY2UucGFyZW50LnVwZGF0ZSk7XG4gICAgICAgICAgICAvLyBpbnN0YW5jZSBpcyB0aGUgaW5uZXIgY29tcG9uZW50IG9mIGFuIGFzeW5jIGN1c3RvbSBlbGVtZW50XG4gICAgICAgICAgICAvLyBpbnZva2UgdG8gcmVzZXQgc3R5bGVzXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UucGFyZW50LnR5cGUuX19hc3luY0xvYWRlciAmJlxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhcmVudC5jZVJlbG9hZCkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhcmVudC5jZVJlbG9hZChuZXdDb21wLnN0eWxlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQpIHtcbiAgICAgICAgICAgIC8vIHJvb3QgaW5zdGFuY2UgbW91bnRlZCB2aWEgY3JlYXRlQXBwKCkgaGFzIGEgcmVsb2FkIG1ldGhvZFxuICAgICAgICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBpbnNpZGUgdHJlZSBjcmVhdGVkIHZpYSByYXcgcmVuZGVyKCkuIEZvcmNlIHJlbG9hZC5cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW0hNUl0gUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyA1LiBtYWtlIHN1cmUgdG8gY2xlYW51cCBkaXJ0eSBobXIgY29tcG9uZW50cyBhZnRlciB1cGRhdGVcbiAgICBxdWV1ZVBvc3RGbHVzaENiKCgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5kZWxldGUobm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnREZWYob2xkQ29tcCwgbmV3Q29tcCkge1xuICAgIGV4dGVuZChvbGRDb21wLCBuZXdDb21wKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvbGRDb21wKSB7XG4gICAgICAgIGlmIChrZXkgIT09ICdfX2ZpbGUnICYmICEoa2V5IGluIG5ld0NvbXApKSB7XG4gICAgICAgICAgICBkZWxldGUgb2xkQ29tcFtrZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJ5V3JhcChmbikge1xuICAgIHJldHVybiAoaWQsIGFyZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKGlkLCBhcmcpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbSE1SXSBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBgICtcbiAgICAgICAgICAgICAgICBgRnVsbCByZWxvYWQgcmVxdWlyZWQuYCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5sZXQgZGV2dG9vbHM7XG5sZXQgYnVmZmVyID0gW107XG5sZXQgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGVtaXQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFkZXZ0b29sc05vdEluc3RhbGxlZCkge1xuICAgICAgICBidWZmZXIucHVzaCh7IGV2ZW50LCBhcmdzIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldERldnRvb2xzSG9vayhob29rLCB0YXJnZXQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGRldnRvb2xzID0gaG9vaztcbiAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGJ1ZmZlci5mb3JFYWNoKCh7IGV2ZW50LCBhcmdzIH0pID0+IGRldnRvb2xzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpKTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKFxuICAgIC8vIGhhbmRsZSBsYXRlIGRldnRvb2xzIGluamVjdGlvbiAtIG9ubHkgZG8gdGhpcyBpZiB3ZSBhcmUgaW4gYW4gYWN0dWFsXG4gICAgLy8gYnJvd3NlciBlbnZpcm9ubWVudCB0byBhdm9pZCB0aGUgdGltZXIgaGFuZGxlIHN0YWxsaW5nIHRlc3QgcnVubmVyIGV4aXRcbiAgICAvLyAoIzQ4MTUpXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgLy8gc29tZSBlbnZzIG1vY2sgd2luZG93IGJ1dCBub3QgZnVsbHlcbiAgICAgICAgd2luZG93LkhUTUxFbGVtZW50ICYmXG4gICAgICAgIC8vIGFsc28gZXhjbHVkZSBqc2RvbVxuICAgICAgICAhKChfYiA9IChfYSA9IHdpbmRvdy5uYXZpZ2F0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51c2VyQWdlbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbmNsdWRlcygnanNkb20nKSkpIHtcbiAgICAgICAgY29uc3QgcmVwbGF5ID0gKHRhcmdldC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fID1cbiAgICAgICAgICAgIHRhcmdldC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIHx8IFtdKTtcbiAgICAgICAgcmVwbGF5LnB1c2goKG5ld0hvb2spID0+IHtcbiAgICAgICAgICAgIHNldERldnRvb2xzSG9vayhuZXdIb29rLCB0YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY2xlYXIgYnVmZmVyIGFmdGVyIDNzIC0gdGhlIHVzZXIgcHJvYmFibHkgZG9lc24ndCBoYXZlIGRldnRvb2xzIGluc3RhbGxlZFxuICAgICAgICAvLyBhdCBhbGwsIGFuZCBrZWVwaW5nIHRoZSBidWZmZXIgd2lsbCBjYXVzZSBtZW1vcnkgbGVha3MgKCM0NzM4KVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghZGV2dG9vbHMpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9IG51bGw7XG4gICAgICAgICAgICAgICAgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAzMDAwKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIG5vbi1icm93c2VyIGVudiwgYXNzdW1lIG5vdCBpbnN0YWxsZWRcbiAgICAgICAgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgICBidWZmZXIgPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKSB7XG4gICAgZW1pdChcImFwcDppbml0XCIgLyogRGV2dG9vbHNIb29rcy5BUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XG4gICAgICAgIEZyYWdtZW50LFxuICAgICAgICBUZXh0LFxuICAgICAgICBDb21tZW50LFxuICAgICAgICBTdGF0aWNcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcbiAgICBlbWl0KFwiYXBwOnVubW91bnRcIiAvKiBEZXZ0b29sc0hvb2tzLkFQUF9VTk1PVU5UICovLCBhcHApO1xufVxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRBZGRlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OmFkZGVkXCIgLyogRGV2dG9vbHNIb29rcy5DT01QT05FTlRfQURERUQgKi8pO1xuY29uc3QgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkID0gXG4vKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDp1cGRhdGVkXCIgLyogRGV2dG9vbHNIb29rcy5DT01QT05FTlRfVVBEQVRFRCAqLyk7XG5jb25zdCBfZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6cmVtb3ZlZFwiIC8qIERldnRvb2xzSG9va3MuQ09NUE9ORU5UX1JFTU9WRUQgKi8pO1xuY29uc3QgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkID0gKGNvbXBvbmVudCkgPT4ge1xuICAgIGlmIChkZXZ0b29scyAmJlxuICAgICAgICB0eXBlb2YgZGV2dG9vbHMuY2xlYW51cEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAvLyByZW1vdmUgdGhlIGNvbXBvbmVudCBpZiBpdCB3YXNuJ3QgYnVmZmVyZWRcbiAgICAgICAgIWRldnRvb2xzLmNsZWFudXBCdWZmZXIoY29tcG9uZW50KSkge1xuICAgICAgICBfZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkKGNvbXBvbmVudCk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhob29rKSB7XG4gICAgcmV0dXJuIChjb21wb25lbnQpID0+IHtcbiAgICAgICAgZW1pdChob29rLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudC51aWQsIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHVuZGVmaW5lZCwgY29tcG9uZW50KTtcbiAgICB9O1xufVxuY29uc3QgZGV2dG9vbHNQZXJmU3RhcnQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKFwicGVyZjpzdGFydFwiIC8qIERldnRvb2xzSG9va3MuUEVSRk9STUFOQ0VfU1RBUlQgKi8pO1xuY29uc3QgZGV2dG9vbHNQZXJmRW5kID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6ZW5kXCIgLyogRGV2dG9vbHNIb29rcy5QRVJGT1JNQU5DRV9FTkQgKi8pO1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soaG9vaykge1xuICAgIHJldHVybiAoY29tcG9uZW50LCB0eXBlLCB0aW1lKSA9PiB7XG4gICAgICAgIGVtaXQoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQsIHR5cGUsIHRpbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiBkZXZ0b29sc0NvbXBvbmVudEVtaXQoY29tcG9uZW50LCBldmVudCwgcGFyYW1zKSB7XG4gICAgZW1pdChcImNvbXBvbmVudDplbWl0XCIgLyogRGV2dG9vbHNIb29rcy5DT01QT05FTlRfRU1JVCAqLywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpO1xufVxuXG5mdW5jdGlvbiBlbWl0JDEoaW5zdGFuY2UsIGV2ZW50LCAuLi5yYXdBcmdzKSB7XG4gICAgaWYgKGluc3RhbmNlLmlzVW5tb3VudGVkKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCB7IGVtaXRzT3B0aW9ucywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGlmIChlbWl0c09wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghKGV2ZW50IGluIGVtaXRzT3B0aW9ucykgJiZcbiAgICAgICAgICAgICAgICAhKGZhbHNlICkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BzT3B0aW9ucyB8fCAhKHRvSGFuZGxlcktleShldmVudCkgaW4gcHJvcHNPcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgZW1pdHRlZCBldmVudCBcIiR7ZXZlbnR9XCIgYnV0IGl0IGlzIG5laXRoZXIgZGVjbGFyZWQgaW4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGhlIGVtaXRzIG9wdGlvbiBub3IgYXMgYW4gXCIke3RvSGFuZGxlcktleShldmVudCl9XCIgcHJvcC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBlbWl0c09wdGlvbnNbZXZlbnRdO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbGlkYXRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvciguLi5yYXdBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIGV2ZW50IGFyZ3VtZW50czogZXZlbnQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGV2ZW50IFwiJHtldmVudH1cIi5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgYXJncyA9IHJhd0FyZ3M7XG4gICAgY29uc3QgaXNNb2RlbExpc3RlbmVyID0gZXZlbnQuc3RhcnRzV2l0aCgndXBkYXRlOicpO1xuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhcHBseSBtb2RpZmllcnMgb24gYXJnc1xuICAgIGNvbnN0IG1vZGVsQXJnID0gaXNNb2RlbExpc3RlbmVyICYmIGV2ZW50LnNsaWNlKDcpO1xuICAgIGlmIChtb2RlbEFyZyAmJiBtb2RlbEFyZyBpbiBwcm9wcykge1xuICAgICAgICBjb25zdCBtb2RpZmllcnNLZXkgPSBgJHttb2RlbEFyZyA9PT0gJ21vZGVsVmFsdWUnID8gJ21vZGVsJyA6IG1vZGVsQXJnfU1vZGlmaWVyc2A7XG4gICAgICAgIGNvbnN0IHsgbnVtYmVyLCB0cmltIH0gPSBwcm9wc1ttb2RpZmllcnNLZXldIHx8IEVNUFRZX09CSjtcbiAgICAgICAgaWYgKHRyaW0pIHtcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcChhID0+IGEudHJpbSgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyKSB7XG4gICAgICAgICAgICBhcmdzID0gcmF3QXJncy5tYXAodG9OdW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiBwcm9wc1t0b0hhbmRsZXJLZXkobG93ZXJDYXNlRXZlbnQpXSkge1xuICAgICAgICAgICAgd2FybihgRXZlbnQgXCIke2xvd2VyQ2FzZUV2ZW50fVwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IGAgK1xuICAgICAgICAgICAgICAgIGAke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBgICtcbiAgICAgICAgICAgICAgICBgTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgYCArXG4gICAgICAgICAgICAgICAgYHYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBgICtcbiAgICAgICAgICAgICAgICBgWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShldmVudCl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGhhbmRsZXJOYW1lO1xuICAgIGxldCBoYW5kbGVyID0gcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGV2ZW50KSldIHx8XG4gICAgICAgIC8vIGFsc28gdHJ5IGNhbWVsQ2FzZSBldmVudCBoYW5kbGVyICgjMjI0OSlcbiAgICAgICAgcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSkpXTtcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYWxzbyB0cmlnZ2VyIGtlYmFiLWNhc2UgZXF1aXZhbGVudFxuICAgIC8vIGZvciBwcm9wcyBwYXNzZWQgdmlhIGtlYmFiLWNhc2VcbiAgICBpZiAoIWhhbmRsZXIgJiYgaXNNb2RlbExpc3RlbmVyKSB7XG4gICAgICAgIGhhbmRsZXIgPSBwcm9wc1soaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSkpXTtcbiAgICB9XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UsIDYgLyogRXJyb3JDb2Rlcy5DT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IG9uY2VIYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgKyBgT25jZWBdO1xuICAgIGlmIChvbmNlSGFuZGxlcikge1xuICAgICAgICBpZiAoIWluc3RhbmNlLmVtaXR0ZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmVtaXR0ZWQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmVtaXR0ZWRbaGFuZGxlck5hbWVdID0gdHJ1ZTtcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcob25jZUhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIEVycm9yQ29kZXMuQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcbiAgICBjb25zdCBjYWNoZSA9IGFwcENvbnRleHQuZW1pdHNDYWNoZTtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XG4gICAgaWYgKGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJhdyA9IGNvbXAuZW1pdHM7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXG4gICAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgICAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGcm9tRXh0ZW5kID0gbm9ybWFsaXplRW1pdHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZEZyb21FeHRlbmQpIHtcbiAgICAgICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgbm9ybWFsaXplZEZyb21FeHRlbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XG4gICAgICAgICAgICBleHRlbmRFbWl0cyhjb21wLmV4dGVuZHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xuICAgICAgICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICAgICAgICBjYWNoZS5zZXQoY29tcCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgICAgcmF3LmZvckVhY2goa2V5ID0+IChub3JtYWxpemVkW2tleV0gPSBudWxsKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcmF3KTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICAgIGNhY2hlLnNldChjb21wLCBub3JtYWxpemVkKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG4vLyBDaGVjayBpZiBhbiBpbmNvbWluZyBwcm9wIGtleSBpcyBhIGRlY2xhcmVkIGVtaXQgZXZlbnQgbGlzdGVuZXIuXG4vLyBlLmcuIFdpdGggYGVtaXRzOiB7IGNsaWNrOiBudWxsIH1gLCBwcm9wcyBuYW1lZCBgb25DbGlja2AgYW5kIGBvbmNsaWNrYCBhcmVcbi8vIGJvdGggY29uc2lkZXJlZCBtYXRjaGVkIGxpc3RlbmVycy5cbmZ1bmN0aW9uIGlzRW1pdExpc3RlbmVyKG9wdGlvbnMsIGtleSkge1xuICAgIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAga2V5ID0ga2V5LnNsaWNlKDIpLnJlcGxhY2UoL09uY2UkLywgJycpO1xuICAgIHJldHVybiAoaGFzT3duKG9wdGlvbnMsIGtleVswXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpKSB8fFxuICAgICAgICBoYXNPd24ob3B0aW9ucywgaHlwaGVuYXRlKGtleSkpIHx8XG4gICAgICAgIGhhc093bihvcHRpb25zLCBrZXkpKTtcbn1cblxuLyoqXG4gKiBtYXJrIHRoZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZSBmb3IgYXNzZXQgcmVzb2x1dGlvbiAoZS5nLlxuICogcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSkgZHVyaW5nIHJlbmRlclxuICovXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG4vKipcbiAqIE5vdGU6IHJlbmRlcmluZyBjYWxscyBtYXliZSBuZXN0ZWQuIFRoZSBmdW5jdGlvbiByZXR1cm5zIHRoZSBwYXJlbnQgcmVuZGVyaW5nXG4gKiBpbnN0YW5jZSBpZiBwcmVzZW50LCB3aGljaCBzaG91bGQgYmUgcmVzdG9yZWQgYWZ0ZXIgdGhlIHJlbmRlciBpcyBkb25lOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwcmV2ID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGkpXG4gKiAvLyAuLi5yZW5kZXJcbiAqIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IHByZXYgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgY3VycmVudFNjb3BlSWQgPSAoaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQpIHx8IG51bGw7XG4gICAgcmV0dXJuIHByZXY7XG59XG4vKipcbiAqIFNldCBzY29wZSBpZCB3aGVuIGNyZWF0aW5nIGhvaXN0ZWQgdm5vZGVzLlxuICogQHByaXZhdGUgY29tcGlsZXIgaGVscGVyXG4gKi9cbmZ1bmN0aW9uIHB1c2hTY29wZUlkKGlkKSB7XG4gICAgY3VycmVudFNjb3BlSWQgPSBpZDtcbn1cbi8qKlxuICogVGVjaG5pY2FsbHkgd2Ugbm8gbG9uZ2VyIG5lZWQgdGhpcyBhZnRlciAzLjAuOCBidXQgd2UgbmVlZCB0byBrZWVwIHRoZSBzYW1lXG4gKiBBUEkgZm9yIGJhY2t3YXJkcyBjb21wYXQgdy8gY29kZSBnZW5lcmF0ZWQgYnkgY29tcGlsZXJzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcbiAgICBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG59XG4vKipcbiAqIE9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdpdGhTY29wZUlkID0gKF9pZCkgPT4gd2l0aEN0eDtcbi8qKlxuICogV3JhcCBhIHNsb3QgZnVuY3Rpb24gdG8gbWVtb2l6ZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZVxuICogQHByaXZhdGUgY29tcGlsZXIgaGVscGVyXG4gKi9cbmZ1bmN0aW9uIHdpdGhDdHgoZm4sIGN0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgaXNOb25TY29wZWRTbG90IC8vIGZhbHNlIG9ubHlcbikge1xuICAgIGlmICghY3R4KVxuICAgICAgICByZXR1cm4gZm47XG4gICAgLy8gYWxyZWFkeSBub3JtYWxpemVkXG4gICAgaWYgKGZuLl9uKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyRm5XaXRoQ29udGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIC8vIElmIGEgdXNlciBjYWxscyBhIGNvbXBpbGVkIHNsb3QgaW5zaWRlIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoIzE3NDUpLCBpdFxuICAgICAgICAvLyBjYW4gbWVzcyB1cCBibG9jayB0cmFja2luZywgc28gYnkgZGVmYXVsdCB3ZSBkaXNhYmxlIGJsb2NrIHRyYWNraW5nIGFuZFxuICAgICAgICAvLyBmb3JjZSBiYWlsIG91dCB3aGVuIGludm9raW5nIGEgY29tcGlsZWQgc2xvdCAoaW5kaWNhdGVkIGJ5IHRoZSAuX2QgZmxhZykuXG4gICAgICAgIC8vIFRoaXMgaXNuJ3QgbmVjZXNzYXJ5IGlmIHJlbmRlcmluZyBhIGNvbXBpbGVkIGA8c2xvdD5gLCBzbyB3ZSBmbGlwIHRoZVxuICAgICAgICAvLyAuX2QgZmxhZyBvZmYgd2hlbiBpbnZva2luZyB0aGUgd3JhcHBlZCBmbiBpbnNpZGUgYHJlbmRlclNsb3RgLlxuICAgICAgICBpZiAocmVuZGVyRm5XaXRoQ29udGV4dC5fZCkge1xuICAgICAgICAgICAgc2V0QmxvY2tUcmFja2luZygtMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldkluc3RhbmNlID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGN0eCk7XG4gICAgICAgIGxldCByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXMgPSBmbiguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2SW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgICAgICAgICAgICBzZXRCbG9ja1RyYWNraW5nKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoY3R4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgLy8gbWFyayBub3JtYWxpemVkIHRvIGF2b2lkIGR1cGxpY2F0ZWQgd3JhcHBpbmdcbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9uID0gdHJ1ZTtcbiAgICAvLyBtYXJrIHRoaXMgYXMgY29tcGlsZWQgYnkgZGVmYXVsdFxuICAgIC8vIHRoaXMgaXMgdXNlZCBpbiB2bm9kZS50cyAtPiBub3JtYWxpemVDaGlsZHJlbigpIHRvIHNldCB0aGUgc2xvdFxuICAgIC8vIHJlbmRlcmluZyBmbGFnLlxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2MgPSB0cnVlO1xuICAgIC8vIGRpc2FibGUgYmxvY2sgdHJhY2tpbmcgYnkgZGVmYXVsdFxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2QgPSB0cnVlO1xuICAgIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xufVxuXG4vKipcbiAqIGRldiBvbmx5IGZsYWcgdG8gdHJhY2sgd2hldGhlciAkYXR0cnMgd2FzIHVzZWQgZHVyaW5nIHJlbmRlci5cbiAqIElmICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyIHRoZW4gdGhlIHdhcm5pbmcgZm9yIGZhaWxlZCBhdHRyc1xuICogZmFsbHRocm91Z2ggY2FuIGJlIHN1cHByZXNzZWQuXG4gKi9cbmxldCBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XG5mdW5jdGlvbiBtYXJrQXR0cnNBY2Nlc3NlZCgpIHtcbiAgICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IHR5cGU6IENvbXBvbmVudCwgdm5vZGUsIHByb3h5LCB3aXRoUHJveHksIHByb3BzLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLCBzbG90cywgYXR0cnMsIGVtaXQsIHJlbmRlciwgcmVuZGVyQ2FjaGUsIGRhdGEsIHNldHVwU3RhdGUsIGN0eCwgaW5oZXJpdEF0dHJzIH0gPSBpbnN0YW5jZTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBmYWxsdGhyb3VnaEF0dHJzO1xuICAgIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgLy8gd2l0aFByb3h5IGlzIGEgcHJveHkgd2l0aCBhIGRpZmZlcmVudCBgaGFzYCB0cmFwIG9ubHkgZm9yXG4gICAgICAgICAgICAvLyBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrLlxuICAgICAgICAgICAgY29uc3QgcHJveHlUb1VzZSA9IHdpdGhQcm94eSB8fCBwcm94eTtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5jYWxsKHByb3h5VG9Vc2UsIHByb3h5VG9Vc2UsIHJlbmRlckNhY2hlLCBwcm9wcywgc2V0dXBTdGF0ZSwgZGF0YSwgY3R4KSk7XG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsXG4gICAgICAgICAgICBjb25zdCByZW5kZXIgPSBDb21wb25lbnQ7XG4gICAgICAgICAgICAvLyBpbiBkZXYsIG1hcmsgYXR0cnMgYWNjZXNzZWQgaWYgb3B0aW9uYWwgcHJvcHMgKGF0dHJzID09PSBwcm9wcylcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYXR0cnMgPT09IHByb3BzKSB7XG4gICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgPyByZW5kZXIocHJvcHMsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzbG90cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgYXR0cnMsIHNsb3RzLCBlbWl0IH0pXG4gICAgICAgICAgICAgICAgOiByZW5kZXIocHJvcHMsIG51bGwgLyogd2Uga25vdyBpdCBkb2Vzbid0IG5lZWQgaXQgKi8pKTtcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHNcbiAgICAgICAgICAgICAgICA/IGF0dHJzXG4gICAgICAgICAgICAgICAgOiBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2goYXR0cnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgYmxvY2tTdGFjay5sZW5ndGggPSAwO1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxIC8qIEVycm9yQ29kZXMuUkVOREVSX0ZVTkNUSU9OICovKTtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gICAgfVxuICAgIC8vIGF0dHIgbWVyZ2luZ1xuICAgIC8vIGluIGRldiBtb2RlLCBjb21tZW50cyBhcmUgcHJlc2VydmVkLCBhbmQgaXQncyBwb3NzaWJsZSBmb3IgYSB0ZW1wbGF0ZVxuICAgIC8vIHRvIGhhdmUgY29tbWVudHMgYWxvbmcgc2lkZSB0aGUgcm9vdCBlbGVtZW50IHdoaWNoIG1ha2VzIGl0IGEgZnJhZ21lbnRcbiAgICBsZXQgcm9vdCA9IHJlc3VsdDtcbiAgICBsZXQgc2V0Um9vdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgIHJlc3VsdC5wYXRjaEZsYWcgPiAwICYmXG4gICAgICAgIHJlc3VsdC5wYXRjaEZsYWcgJiAyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgW3Jvb3QsIHNldFJvb3RdID0gZ2V0Q2hpbGRSb290KHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChmYWxsdGhyb3VnaEF0dHJzICYmIGluaGVyaXRBdHRycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZhbGx0aHJvdWdoQXR0cnMpO1xuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgKDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovIHwgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGEgdi1tb2RlbCBsaXN0ZW5lciAob25VcGRhdGU6eHh4KSBoYXMgYSBjb3JyZXNwb25kaW5nIGRlY2xhcmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3AsIGl0IGluZGljYXRlcyB0aGlzIGNvbXBvbmVudCBleHBlY3RzIHRvIGhhbmRsZSB2LW1vZGVsIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgbm90IGZhbGx0aHJvdWdoLlxuICAgICAgICAgICAgICAgICAgICAvLyByZWxhdGVkOiAjMTU0MywgIzE2NDMsICMxOTg5XG4gICAgICAgICAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBmaWx0ZXJNb2RlbExpc3RlbmVycyhmYWxsdGhyb3VnaEF0dHJzLCBwcm9wc09wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhYWNjZXNzZWRBdHRycyAmJiByb290LnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudEF0dHJzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGFsbEF0dHJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBoYW5kbGVycyB3aGVuIHRoZXkgZmFpbCB0byBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBgb25gLCBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIHRvIHJlZmxlY3QgZXZlbnQgY2FzaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjdXJhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50QXR0cnMucHVzaChrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tcHJvcHMgYXR0cmlidXRlcyAoYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtleHRyYUF0dHJzLmpvaW4oJywgJyl9KSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEV4dHJhbmVvdXMgbm9uLWVtaXRzIGV2ZW50IGxpc3RlbmVycyAoYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtldmVudEF0dHJzLmpvaW4oJywgJyl9KSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBpbmhlcml0IGRpcmVjdGl2ZXNcbiAgICBpZiAodm5vZGUuZGlycykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XG4gICAgICAgICAgICB3YXJuKGBSdW50aW1lIGRpcmVjdGl2ZSB1c2VkIG9uIGNvbXBvbmVudCB3aXRoIG5vbi1lbGVtZW50IHJvb3Qgbm9kZS4gYCArXG4gICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNsb25lIGJlZm9yZSBtdXRhdGluZyBzaW5jZSB0aGUgcm9vdCBtYXkgYmUgYSBob2lzdGVkIHZub2RlXG4gICAgICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QpO1xuICAgICAgICByb290LmRpcnMgPSByb290LmRpcnMgPyByb290LmRpcnMuY29uY2F0KHZub2RlLmRpcnMpIDogdm5vZGUuZGlycztcbiAgICB9XG4gICAgLy8gaW5oZXJpdCB0cmFuc2l0aW9uIGRhdGFcbiAgICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgaW5zaWRlIDxUcmFuc2l0aW9uPiByZW5kZXJzIG5vbi1lbGVtZW50IHJvb3Qgbm9kZSBgICtcbiAgICAgICAgICAgICAgICBgdGhhdCBjYW5ub3QgYmUgYW5pbWF0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdC50cmFuc2l0aW9uID0gdm5vZGUudHJhbnNpdGlvbjtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzZXRSb290KSB7XG4gICAgICAgIHNldFJvb3Qocm9vdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSByb290O1xuICAgIH1cbiAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqIEluIGRldiBtb2RlLCB0ZW1wbGF0ZSByb290IGxldmVsIGNvbW1lbnRzIGFyZSByZW5kZXJlZCwgd2hpY2ggdHVybnMgdGhlXG4gKiB0ZW1wbGF0ZSBpbnRvIGEgZnJhZ21lbnQgcm9vdCwgYnV0IHdlIG5lZWQgdG8gbG9jYXRlIHRoZSBzaW5nbGUgZWxlbWVudFxuICogcm9vdCBmb3IgYXR0cnMgYW5kIHNjb3BlIGlkIHByb2Nlc3NpbmcuXG4gKi9cbmNvbnN0IGdldENoaWxkUm9vdCA9ICh2bm9kZSkgPT4ge1xuICAgIGNvbnN0IHJhd0NoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgIGNvbnN0IGNoaWxkUm9vdCA9IGZpbHRlclNpbmdsZVJvb3QocmF3Q2hpbGRyZW4pO1xuICAgIGlmICghY2hpbGRSb290KSB7XG4gICAgICAgIHJldHVybiBbdm5vZGUsIHVuZGVmaW5lZF07XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gcmF3Q2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpO1xuICAgIGNvbnN0IGR5bmFtaWNJbmRleCA9IGR5bmFtaWNDaGlsZHJlbiA/IGR5bmFtaWNDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCkgOiAtMTtcbiAgICBjb25zdCBzZXRSb290ID0gKHVwZGF0ZWRSb290KSA9PiB7XG4gICAgICAgIHJhd0NoaWxkcmVuW2luZGV4XSA9IHVwZGF0ZWRSb290O1xuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoZHluYW1pY0luZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW5bZHluYW1pY0luZGV4XSA9IHVwZGF0ZWRSb290O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodXBkYXRlZFJvb3QucGF0Y2hGbGFnID4gMCkge1xuICAgICAgICAgICAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IFsuLi5keW5hbWljQ2hpbGRyZW4sIHVwZGF0ZWRSb290XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcbn07XG5mdW5jdGlvbiBmaWx0ZXJTaW5nbGVSb290KGNoaWxkcmVuKSB7XG4gICAgbGV0IHNpbmdsZVJvb3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoaXNWTm9kZShjaGlsZCkpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSB1c2VyIGNvbW1lbnRcbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9PSBDb21tZW50IHx8IGNoaWxkLmNoaWxkcmVuID09PSAndi1pZicpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgbW9yZSB0aGFuIDEgbm9uLWNvbW1lbnQgY2hpbGQsIHJldHVybiBub3dcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlUm9vdCA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2luZ2xlUm9vdDtcbn1cbmNvbnN0IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCA9IChhdHRycykgPT4ge1xuICAgIGxldCByZXM7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScgfHwgaXNPbihrZXkpKSB7XG4gICAgICAgICAgICAocmVzIHx8IChyZXMgPSB7fSkpW2tleV0gPSBhdHRyc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuY29uc3QgZmlsdGVyTW9kZWxMaXN0ZW5lcnMgPSAoYXR0cnMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcbiAgICAgICAgICAgIHJlc1trZXldID0gYXR0cnNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcbiAgICByZXR1cm4gKHZub2RlLnNoYXBlRmxhZyAmICg2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovIHwgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8pIHx8XG4gICAgICAgIHZub2RlLnR5cGUgPT09IENvbW1lbnQgLy8gcG90ZW50aWFsIHYtaWYgYnJhbmNoIHN3aXRjaFxuICAgICk7XG59O1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcbiAgICBjb25zdCB7IHByb3BzOiBwcmV2UHJvcHMsIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sIGNvbXBvbmVudCB9ID0gcHJldlZOb2RlO1xuICAgIGNvbnN0IHsgcHJvcHM6IG5leHRQcm9wcywgY2hpbGRyZW46IG5leHRDaGlsZHJlbiwgcGF0Y2hGbGFnIH0gPSBuZXh0Vk5vZGU7XG4gICAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xuICAgIC8vIFBhcmVudCBjb21wb25lbnQncyByZW5kZXIgZnVuY3Rpb24gd2FzIGhvdC11cGRhdGVkLiBTaW5jZSB0aGlzIG1heSBoYXZlXG4gICAgLy8gY2F1c2VkIHRoZSBjaGlsZCBjb21wb25lbnQncyBzbG90cyBjb250ZW50IHRvIGhhdmUgY2hhbmdlZCwgd2UgbmVlZCB0b1xuICAgIC8vIGZvcmNlIHRoZSBjaGlsZCB0byB1cGRhdGUgYXMgd2VsbC5cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBmb3JjZSBjaGlsZCB1cGRhdGUgZm9yIHJ1bnRpbWUgZGlyZWN0aXZlIG9yIHRyYW5zaXRpb24gb24gY29tcG9uZW50IHZub2RlLlxuICAgIGlmIChuZXh0Vk5vZGUuZGlycyB8fCBuZXh0Vk5vZGUudHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdGltaXplZCAmJiBwYXRjaEZsYWcgPj0gMCkge1xuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTAyNCAvKiBQYXRjaEZsYWdzLkRZTkFNSUNfU0xPVFMgKi8pIHtcbiAgICAgICAgICAgIC8vIHNsb3QgY29udGVudCB0aGF0IHJlZmVyZW5jZXMgdmFsdWVzIHRoYXQgbWlnaHQgaGF2ZSBjaGFuZ2VkLFxuICAgICAgICAgICAgLy8gZS5nLiBpbiBhIHYtZm9yXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovKSB7XG4gICAgICAgICAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHRoaXMgZmxhZyBpbmRpY2F0ZXMgcHJvcHMgYXJlIGFsd2F5cyBub24tbnVsbFxuICAgICAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdGNoRmxhZyAmIDggLyogUGF0Y2hGbGFncy5QUk9QUyAqLykge1xuICAgICAgICAgICAgY29uc3QgZHluYW1pY1Byb3BzID0gbmV4dFZOb2RlLmR5bmFtaWNQcm9wcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZHluYW1pY1Byb3BzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gdGhpcyBwYXRoIGlzIG9ubHkgdGFrZW4gYnkgbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zXG4gICAgICAgIC8vIHNvIHByZXNlbmNlIG9mIGFueSBjaGlsZHJlbiBsZWFkcyB0byBhIGZvcmNlZCB1cGRhdGVcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmICghbmV4dENoaWxkcmVuIHx8ICFuZXh0Q2hpbGRyZW4uJHN0YWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2UHJvcHMgPT09IG5leHRQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcbiAgICBjb25zdCBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XG4gICAgaWYgKG5leHRLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJldlByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbmV4dEtleXNbaV07XG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcbiAgICAgICAgICAgICFpc0VtaXRMaXN0ZW5lcihlbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUhPQ0hvc3RFbCh7IHZub2RlLCBwYXJlbnQgfSwgZWwgLy8gSG9zdE5vZGVcbikge1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XG4gICAgICAgICh2bm9kZSA9IHBhcmVudC52bm9kZSkuZWwgPSBlbDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG59XG5cbmNvbnN0IGlzU3VzcGVuc2UgPSAodHlwZSkgPT4gdHlwZS5fX2lzU3VzcGVuc2U7XG4vLyBTdXNwZW5zZSBleHBvc2VzIGEgY29tcG9uZW50LWxpa2UgQVBJLCBhbmQgaXMgdHJlYXRlZCBsaWtlIGEgY29tcG9uZW50XG4vLyBpbiB0aGUgY29tcGlsZXIsIGJ1dCBpbnRlcm5hbGx5IGl0J3MgYSBzcGVjaWFsIGJ1aWx0LWluIHR5cGUgdGhhdCBob29rc1xuLy8gZGlyZWN0bHkgaW50byB0aGUgcmVuZGVyZXIuXG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XG4gICAgbmFtZTogJ1N1c3BlbnNlJyxcbiAgICAvLyBJbiBvcmRlciB0byBtYWtlIFN1c3BlbnNlIHRyZWUtc2hha2FibGUsIHdlIG5lZWQgdG8gYXZvaWQgaW1wb3J0aW5nIGl0XG4gICAgLy8gZGlyZWN0bHkgaW4gdGhlIHJlbmRlcmVyLiBUaGUgcmVuZGVyZXIgY2hlY2tzIGZvciB0aGUgX19pc1N1c3BlbnNlIGZsYWdcbiAgICAvLyBvbiBhIHZub2RlJ3MgdHlwZSBhbmQgY2FsbHMgdGhlIGBwcm9jZXNzYCBtZXRob2QsIHBhc3NpbmcgaW4gcmVuZGVyZXJcbiAgICAvLyBpbnRlcm5hbHMuXG4gICAgX19pc1N1c3BlbnNlOiB0cnVlLFxuICAgIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBcbiAgICAvLyBwbGF0Zm9ybS1zcGVjaWZpYyBpbXBsIHBhc3NlZCBmcm9tIHJlbmRlcmVyXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIG1vdW50U3VzcGVuc2UobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaHlkcmF0ZTogaHlkcmF0ZVN1c3BlbnNlLFxuICAgIGNyZWF0ZTogY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW5cbn07XG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxuY29uc3QgU3VzcGVuc2UgPSAoU3VzcGVuc2VJbXBsXG4gICAgKTtcbmZ1bmN0aW9uIHRyaWdnZXJFdmVudCh2bm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaXNGdW5jdGlvbihldmVudExpc3RlbmVyKSkge1xuICAgICAgICBldmVudExpc3RlbmVyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICBjb25zdCB7IHA6IHBhdGNoLCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gICAgY29uc3QgaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSk7XG4gICAgLy8gc3RhcnQgbW91bnRpbmcgdGhlIGNvbnRlbnQgc3VidHJlZSBpbiBhbiBvZmYtZG9tIGNvbnRhaW5lclxuICAgIHBhdGNoKG51bGwsIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50KSwgaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAvLyBub3cgY2hlY2sgaWYgd2UgaGF2ZSBlbmNvdW50ZXJlZCBhbnkgYXN5bmMgZGVwc1xuICAgIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xuICAgICAgICAvLyBoYXMgYXN5bmNcbiAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxuICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvblBlbmRpbmcnKTtcbiAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25GYWxsYmFjaycpO1xuICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxuICAgICAgICBwYXRjaChudWxsLCB2bm9kZS5zc0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCB2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFN1c3BlbnNlIGhhcyBubyBhc3luYyBkZXBzLiBKdXN0IHJlc29sdmUuXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7IHA6IHBhdGNoLCB1bTogdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSkge1xuICAgIGNvbnN0IHN1c3BlbnNlID0gKG4yLnN1c3BlbnNlID0gbjEuc3VzcGVuc2UpO1xuICAgIHN1c3BlbnNlLnZub2RlID0gbjI7XG4gICAgbjIuZWwgPSBuMS5lbDtcbiAgICBjb25zdCBuZXdCcmFuY2ggPSBuMi5zc0NvbnRlbnQ7XG4gICAgY29uc3QgbmV3RmFsbGJhY2sgPSBuMi5zc0ZhbGxiYWNrO1xuICAgIGNvbnN0IHsgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBpc0luRmFsbGJhY2ssIGlzSHlkcmF0aW5nIH0gPSBzdXNwZW5zZTtcbiAgICBpZiAocGVuZGluZ0JyYW5jaCkge1xuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgcGVuZGluZ0JyYW5jaCkpIHtcbiAgICAgICAgICAgIC8vIHNhbWUgcm9vdCB0eXBlIGJ1dCBjb250ZW50IG1heSBoYXZlIGNoYW5nZWQuXG4gICAgICAgICAgICBwYXRjaChwZW5kaW5nQnJhbmNoLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0luRmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0b2dnbGVkIGJlZm9yZSBwZW5kaW5nIHRyZWUgaXMgcmVzb2x2ZWRcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCsrO1xuICAgICAgICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdG9nZ2xlZCBiZWZvcmUgaHlkcmF0aW9uIGlzIGZpbmlzaGVkLCB0aGUgY3VycmVudCBET00gdHJlZSBpc1xuICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciB2YWxpZC4gc2V0IGl0IGFzIHRoZSBhY3RpdmUgYnJhbmNoIHNvIGl0IHdpbGwgYmUgdW5tb3VudGVkXG4gICAgICAgICAgICAgICAgLy8gd2hlbiByZXNvbHZlZFxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gcGVuZGluZ0JyYW5jaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVubW91bnQocGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgcGVuZGluZyBJRC4gdGhpcyBpcyB1c2VkIHRvIGludmFsaWRhdGUgYXN5bmMgY2FsbGJhY2tzXG4gICAgICAgICAgICAvLyByZXNldCBzdXNwZW5zZSBzdGF0ZVxuICAgICAgICAgICAgc3VzcGVuc2UuZGVwcyA9IDA7XG4gICAgICAgICAgICAvLyBkaXNjYXJkIGVmZmVjdHMgZnJvbSBwZW5kaW5nIGJyYW5jaFxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgLy8gZGlzY2FyZCBwcmV2aW91cyBjb250YWluZXJcbiAgICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaWYgKGlzSW5GYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgaW4gZmFsbGJhY2sgc3RhdGVcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3RmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XG4gICAgICAgICAgICAgICAgLy8gdG9nZ2xlZCBcImJhY2tcIiB0byBjdXJyZW50IGFjdGl2ZSBicmFuY2hcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgcmVzb2x2ZVxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hlZCB0byBhIDNyZCBicmFuY2hcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xuICAgICAgICAgICAgLy8gcm9vdCBkaWQgbm90IGNoYW5nZSwganVzdCBub3JtYWwgcGF0Y2hcbiAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3QnJhbmNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJvb3Qgbm9kZSB0b2dnbGVkXG4gICAgICAgICAgICAvLyBpbnZva2UgQHBlbmRpbmcgZXZlbnRcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChuMiwgJ29uUGVuZGluZycpO1xuICAgICAgICAgICAgLy8gbW91bnQgcGVuZGluZyBicmFuY2ggaW4gb2ZmLWRvbSBjb250YWluZXJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGluY29taW5nIGJyYW5jaCBoYXMgbm8gYXN5bmMgZGVwcywgcmVzb2x2ZSBub3cuXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0aW1lb3V0LCBwZW5kaW5nSWQgfSA9IHN1c3BlbnNlO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nSWQgPT09IHBlbmRpbmdJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudCwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBpc0h5ZHJhdGluZyA9IGZhbHNlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZmFsc2UgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAvLyBAdHMtaWdub3JlIGBjb25zb2xlLmluZm9gIGNhbm5vdCBiZSBudWxsIGVycm9yXG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKGA8U3VzcGVuc2U+IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBpdHMgQVBJIHdpbGwgbGlrZWx5IGNoYW5nZS5gKTtcbiAgICB9XG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IHVubW91bnQsIG46IG5leHQsIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICAgIGNvbnN0IHRpbWVvdXQgPSB0b051bWJlcih2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50aW1lb3V0KTtcbiAgICBjb25zdCBzdXNwZW5zZSA9IHtcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBoaWRkZW5Db250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgZGVwczogMCxcbiAgICAgICAgcGVuZGluZ0lkOiAwLFxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXG4gICAgICAgIGFjdGl2ZUJyYW5jaDogbnVsbCxcbiAgICAgICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxuICAgICAgICBpc0h5ZHJhdGluZyxcbiAgICAgICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgcmVzb2x2ZShyZXN1bWUgPSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCB3aXRob3V0IGEgcGVuZGluZyBicmFuY2guYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgb24gYW4gYWxyZWFkeSB1bm1vdW50ZWQgc3VzcGVuc2UgYm91bmRhcnkuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBwZW5kaW5nSWQsIGVmZmVjdHMsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyIH0gPSBzdXNwZW5zZTtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghcmVzdW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uLm1vZGUgPT09ICdvdXQtaW4nO1xuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ0lkID09PSBzdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIE1vdmVUeXBlLkVOVEVSICovKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBpbml0aWFsIGFuY2hvciBvbiBtb3VudFxuICAgICAgICAgICAgICAgIGxldCB7IGFuY2hvciB9ID0gc3VzcGVuc2U7XG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmFsbGJhY2sgdHJlZSB3YXMgbW91bnRlZCwgaXQgbWF5IGhhdmUgYmVlbiBtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgY29udGVudCBmcm9tIG9mZi1kb20gY29udGFpbmVyIHRvIGFjdHVhbCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBNb3ZlVHlwZS5FTlRFUiAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBudWxsO1xuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gc3VzcGVuc2UucGFyZW50O1xuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50byB0aGF0IHBhcmVudFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZWZmZWN0cy5wdXNoKC4uLmVmZmVjdHMpO1xuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBmbHVzaCBhbGwgam9ic1xuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xuICAgICAgICAgICAgLy8gaW52b2tlIEByZXNvbHZlIGV2ZW50XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvblJlc29sdmUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xuICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaXNTVkcgfSA9IHN1c3BlbnNlO1xuICAgICAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25GYWxsYmFjaycpO1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1c3BlbnNlLmlzSW5GYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgZmFsbGJhY2tWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgZmFsbGJhY2tWTm9kZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbiAmJiBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XG4gICAgICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSBtb3VudEZhbGxiYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHVubW91bnQgY3VycmVudCBhY3RpdmUgYnJhbmNoXG4gICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XG4gICAgICAgICAgICB0cnVlIC8vIHNob3VsZFJlbW92ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghZGVsYXlFbnRlcikge1xuICAgICAgICAgICAgICAgIG1vdW50RmFsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW92ZShjb250YWluZXIsIGFuY2hvciwgdHlwZSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmXG4gICAgICAgICAgICAgICAgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKTtcbiAgICAgICAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbmV4dChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzSW5QZW5kaW5nU3VzcGVuc2UgPSAhIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2g7XG4gICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSkge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgLmFzeW5jRGVwLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmNTZXR1cFJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgd2hlbiB0aGUgc2V0dXAoKSBwcm9taXNlIHJlc29sdmVzLlxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIHVubW91bnRlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgZnJvbSB0aGlzIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBtYXkgaGF2ZSBiZWVuIHJlcGxhY2VkIGlmIGFuIHVwZGF0ZSBoYXBwZW5lZCBiZWZvcmUgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzeW5jIGRlcCBpcyByZXNvbHZlZC5cbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBoeWRyYXRlZEVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XG4gICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIHZub2RlLCBcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiBtb3ZlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZShoeWRyYXRlZEVsIHx8IGluc3RhbmNlLnN1YlRyZWUuZWwpLCBcbiAgICAgICAgICAgICAgICAvLyBhbmNob3Igd2lsbCBub3QgYmUgdXNlZCBpZiB0aGlzIGlzIGh5ZHJhdGlvbiwgc28gb25seSBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cbiAgICAgICAgICAgICAgICBoeWRyYXRlZEVsID8gbnVsbCA6IG5leHQoaW5zdGFuY2Uuc3ViVHJlZSksIHN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZS5lbCk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvbmx5IGRlY3JlYXNlIGRlcHMgY291bnQgaWYgc3VzcGVuc2UgaXMgbm90IGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSAmJiAtLXN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3VzcGVuc2U7XG59XG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBub2RlLnBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBudWxsLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCB0cnVlIC8qIGh5ZHJhdGluZyAqLykpO1xuICAgIC8vIHRoZXJlIGFyZSB0d28gcG9zc2libGUgc2NlbmFyaW9zIGZvciBzZXJ2ZXItcmVuZGVyZWQgc3VzcGVuc2U6XG4gICAgLy8gLSBzdWNjZXNzOiBzc3IgY29udGVudCBzaG91bGQgYmUgZnVsbHkgcmVzb2x2ZWRcbiAgICAvLyAtIGZhaWx1cmU6IHNzciBjb250ZW50IHNob3VsZCBiZSB0aGUgZmFsbGJhY2sgYnJhbmNoLlxuICAgIC8vIGhvd2V2ZXIsIG9uIHRoZSBjbGllbnQgd2UgZG9uJ3QgcmVhbGx5IGtub3cgaWYgaXQgaGFzIGZhaWxlZCBvciBub3RcbiAgICAvLyBhdHRlbXB0IHRvIGh5ZHJhdGUgdGhlIERPTSBhc3N1bWluZyBpdCBoYXMgc3VjY2VlZGVkLCBidXQgd2Ugc3RpbGxcbiAgICAvLyBuZWVkIHRvIGNvbnN0cnVjdCBhIHN1c3BlbnNlIGJvdW5kYXJ5IGZpcnN0XG4gICAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUobm9kZSwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKSB7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgICBjb25zdCBpc1Nsb3RDaGlsZHJlbiA9IHNoYXBlRmxhZyAmIDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi87XG4gICAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuKTtcbiAgICB2bm9kZS5zc0ZhbGxiYWNrID0gaXNTbG90Q2hpbGRyZW5cbiAgICAgICAgPyBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xuICAgIGxldCBibG9jaztcbiAgICBpZiAoaXNGdW5jdGlvbihzKSkge1xuICAgICAgICBjb25zdCB0cmFja0Jsb2NrID0gaXNCbG9ja1RyZWVFbmFibGVkICYmIHMuX2M7XG4gICAgICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkaXNhYmxlVHJhY2tpbmc6IGZhbHNlXG4gICAgICAgICAgICAvLyBhbGxvdyBibG9jayB0cmFja2luZyBmb3IgY29tcGlsZWQgc2xvdHNcbiAgICAgICAgICAgIC8vIChzZWUgLi9jb21wb25lbnRSZW5kZXJDb250ZXh0LnRzKVxuICAgICAgICAgICAgcy5fZCA9IGZhbHNlO1xuICAgICAgICAgICAgb3BlbkJsb2NrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IHMoKTtcbiAgICAgICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgICAgICAgIHMuX2QgPSB0cnVlO1xuICAgICAgICAgICAgYmxvY2sgPSBjdXJyZW50QmxvY2s7XG4gICAgICAgICAgICBjbG9zZUJsb2NrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQXJyYXkocykpIHtcbiAgICAgICAgY29uc3Qgc2luZ2xlQ2hpbGQgPSBmaWx0ZXJTaW5nbGVSb290KHMpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzaW5nbGVDaGlsZCkge1xuICAgICAgICAgICAgd2FybihgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBzaW5nbGVDaGlsZDtcbiAgICB9XG4gICAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xuICAgIGlmIChibG9jayAmJiAhcy5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcy5keW5hbWljQ2hpbGRyZW4gPSBibG9jay5maWx0ZXIoYyA9PiBjICE9PSBzKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcbiAgICBpZiAoc3VzcGVuc2UgJiYgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xuICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IGJyYW5jaDtcbiAgICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xuICAgIGNvbnN0IGVsID0gKHZub2RlLmVsID0gYnJhbmNoLmVsKTtcbiAgICAvLyBpbiBjYXNlIHN1c3BlbnNlIGlzIHRoZSByb290IG5vZGUgb2YgYSBjb21wb25lbnQsXG4gICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRoZSBIT0MgZWxcbiAgICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgICAgICBwYXJlbnRDb21wb25lbnQudm5vZGUuZWwgPSBlbDtcbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcbiAgICAgICAgLy8gYnkgZGVmYXVsdCBhbiBpbnN0YW5jZSBpbmhlcml0cyBpdHMgcGFyZW50J3MgcHJvdmlkZXMgb2JqZWN0XG4gICAgICAgIC8vIGJ1dCB3aGVuIGl0IG5lZWRzIHRvIHByb3ZpZGUgdmFsdWVzIG9mIGl0cyBvd24sIGl0IGNyZWF0ZXMgaXRzXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXG4gICAgICAgIC8vIHRoaXMgd2F5IGluIGBpbmplY3RgIHdlIGNhbiBzaW1wbHkgbG9vayB1cCBpbmplY3Rpb25zIGZyb20gZGlyZWN0XG4gICAgICAgIC8vIHBhcmVudCBhbmQgbGV0IHRoZSBwcm90b3R5cGUgY2hhaW4gZG8gdGhlIHdvcmsuXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xuICAgICAgICBpZiAocGFyZW50UHJvdmlkZXMgPT09IHByb3ZpZGVzKSB7XG4gICAgICAgICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRTIGRvZXNuJ3QgYWxsb3cgc3ltYm9sIGFzIGluZGV4IHR5cGVcbiAgICAgICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxuICAgIC8vIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIC8vICMyNDAwXG4gICAgICAgIC8vIHRvIHN1cHBvcnQgYGFwcC51c2VgIHBsdWdpbnMsXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnN0YW5jZSBpcyBhdCByb290XG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaW5zdGFuY2UucGFyZW50ID09IG51bGxcbiAgICAgICAgICAgID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzXG4gICAgICAgICAgICA6IGluc3RhbmNlLnBhcmVudC5wcm92aWRlcztcbiAgICAgICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWUuY2FsbChpbnN0YW5jZS5wcm94eSlcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYGluamVjdGlvbiBcIiR7U3RyaW5nKGtleSl9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcbiAgICB9XG59XG5cbi8vIFNpbXBsZSBlZmZlY3QuXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gd2F0Y2hQb3N0RWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgZmx1c2g6ICdwb3N0JyB9KSA6IHsgZmx1c2g6ICdwb3N0JyB9KSk7XG59XG5mdW5jdGlvbiB3YXRjaFN5bmNFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBmbHVzaDogJ3N5bmMnIH0pIDogeyBmbHVzaDogJ3N5bmMnIH0pKTtcbn1cbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXG5jb25zdCBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihjYikpIHtcbiAgICAgICAgd2FybihgXFxgd2F0Y2goZm4sIG9wdGlvbnM/KVxcYCBzaWduYXR1cmUgaGFzIGJlZW4gbW92ZWQgdG8gYSBzZXBhcmF0ZSBBUEkuIGAgK1xuICAgICAgICAgICAgYFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IGAgK1xuICAgICAgICAgICAgYHN1cHBvcnRzIFxcYHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XG4gICAgfVxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9XYXRjaChzb3VyY2UsIGNiLCB7IGltbWVkaWF0ZSwgZGVlcCwgZmx1c2gsIG9uVHJhY2ssIG9uVHJpZ2dlciB9ID0gRU1QVFlfT0JKKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY2IpIHtcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3YXJuKGB3YXRjaCgpIFwiaW1tZWRpYXRlXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWVwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBzb3VyY2U6IGAsIHMsIGBBIHdhdGNoIHNvdXJjZSBjYW4gb25seSBiZSBhIGdldHRlci9lZmZlY3QgZnVuY3Rpb24sIGEgcmVmLCBgICtcbiAgICAgICAgICAgIGBhIHJlYWN0aXZlIG9iamVjdCwgb3IgYW4gYXJyYXkgb2YgdGhlc2UgdHlwZXMuYCk7XG4gICAgfTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICBsZXQgZ2V0dGVyO1xuICAgIGxldCBmb3JjZVRyaWdnZXIgPSBmYWxzZTtcbiAgICBsZXQgaXNNdWx0aVNvdXJjZSA9IGZhbHNlO1xuICAgIGlmIChpc1JlZihzb3VyY2UpKSB7XG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS52YWx1ZTtcbiAgICAgICAgZm9yY2VUcmlnZ2VyID0gaXNTaGFsbG93JDEoc291cmNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzb3VyY2UpKSB7XG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZTtcbiAgICAgICAgZGVlcCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBpc011bHRpU291cmNlID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VUcmlnZ2VyID0gc291cmNlLnNvbWUocyA9PiBpc1JlYWN0aXZlKHMpIHx8IGlzU2hhbGxvdyQxKHMpKTtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLm1hcChzID0+IHtcbiAgICAgICAgICAgIGlmIChpc1JlZihzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzZShzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHMsIGluc3RhbmNlLCAyIC8qIEVycm9yQ29kZXMuV0FUQ0hfR0VUVEVSICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIC8vIGdldHRlciB3aXRoIGNiXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMiAvKiBFcnJvckNvZGVzLldBVENIX0dFVFRFUiAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBubyBjYiAtPiBzaW1wbGUgZWZmZWN0XG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNsZWFudXApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMyAvKiBFcnJvckNvZGVzLldBVENIX0NBTExCQUNLICovLCBbb25DbGVhbnVwXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZXR0ZXIgPSBOT09QO1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcbiAgICB9XG4gICAgaWYgKGNiICYmIGRlZXApIHtcbiAgICAgICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gdHJhdmVyc2UoYmFzZUdldHRlcigpKTtcbiAgICB9XG4gICAgbGV0IGNsZWFudXA7XG4gICAgbGV0IG9uQ2xlYW51cCA9IChmbikgPT4ge1xuICAgICAgICBjbGVhbnVwID0gZWZmZWN0Lm9uU3RvcCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIDQgLyogRXJyb3JDb2Rlcy5XQVRDSF9DTEVBTlVQICovKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8vIGluIFNTUiB0aGVyZSBpcyBubyBuZWVkIHRvIHNldHVwIGFuIGFjdHVhbCBlZmZlY3QsIGFuZCBpdCBzaG91bGQgYmUgbm9vcFxuICAgIC8vIHVubGVzcyBpdCdzIGVhZ2VyXG4gICAgaWYgKGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgICAgICAvLyB3ZSB3aWxsIGFsc28gbm90IGNhbGwgdGhlIGludmFsaWRhdGUgY2FsbGJhY2sgKCsgcnVubmVyIGlzIG5vdCBzZXQgdXApXG4gICAgICAgIG9uQ2xlYW51cCA9IE5PT1A7XG4gICAgICAgIGlmICghY2IpIHtcbiAgICAgICAgICAgIGdldHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoY2IsIGluc3RhbmNlLCAzIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtcbiAgICAgICAgICAgICAgICBnZXR0ZXIoKSxcbiAgICAgICAgICAgICAgICBpc011bHRpU291cmNlID8gW10gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgb25DbGVhbnVwXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTk9PUDtcbiAgICB9XG4gICAgbGV0IG9sZFZhbHVlID0gaXNNdWx0aVNvdXJjZSA/IFtdIDogSU5JVElBTF9XQVRDSEVSX1ZBTFVFO1xuICAgIGNvbnN0IGpvYiA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFlZmZlY3QuYWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAvLyB3YXRjaChzb3VyY2UsIGNiKVxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBlZmZlY3QucnVuKCk7XG4gICAgICAgICAgICBpZiAoZGVlcCB8fFxuICAgICAgICAgICAgICAgIGZvcmNlVHJpZ2dlciB8fFxuICAgICAgICAgICAgICAgIChpc011bHRpU291cmNlXG4gICAgICAgICAgICAgICAgICAgID8gbmV3VmFsdWUuc29tZSgodiwgaSkgPT4gaGFzQ2hhbmdlZCh2LCBvbGRWYWx1ZVtpXSkpXG4gICAgICAgICAgICAgICAgICAgIDogaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSB8fFxuICAgICAgICAgICAgICAgIChmYWxzZSAgKSkge1xuICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgYmVmb3JlIHJ1bm5pbmcgY2IgYWdhaW5cbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMyAvKiBFcnJvckNvZGVzLldBVENIX0NBTExCQUNLICovLCBbXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAvLyBwYXNzIHVuZGVmaW5lZCBhcyB0aGUgb2xkIHZhbHVlIHdoZW4gaXQncyBjaGFuZ2VkIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gdW5kZWZpbmVkIDogb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xlYW51cFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB3YXRjaEVmZmVjdFxuICAgICAgICAgICAgZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBpbXBvcnRhbnQ6IG1hcmsgdGhlIGpvYiBhcyBhIHdhdGNoZXIgY2FsbGJhY2sgc28gdGhhdCBzY2hlZHVsZXIga25vd3NcbiAgICAvLyBpdCBpcyBhbGxvd2VkIHRvIHNlbGYtdHJpZ2dlciAoIzE3MjcpXG4gICAgam9iLmFsbG93UmVjdXJzZSA9ICEhY2I7XG4gICAgbGV0IHNjaGVkdWxlcjtcbiAgICBpZiAoZmx1c2ggPT09ICdzeW5jJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBqb2I7IC8vIHRoZSBzY2hlZHVsZXIgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZGlyZWN0bHlcbiAgICB9XG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0OiAncHJlJ1xuICAgICAgICBqb2IucHJlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluc3RhbmNlKVxuICAgICAgICAgICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZUpvYihqb2IpO1xuICAgIH1cbiAgICBjb25zdCBlZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoZ2V0dGVyLCBzY2hlZHVsZXIpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBvblRyYWNrO1xuICAgICAgICBlZmZlY3Qub25UcmlnZ2VyID0gb25UcmlnZ2VyO1xuICAgIH1cbiAgICAvLyBpbml0aWFsIHJ1blxuICAgIGlmIChjYikge1xuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICBqb2IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9sZFZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGVmZmVjdC5ydW4uYmluZChlZmZlY3QpLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlZmZlY3QucnVuKCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGVmZmVjdC5zdG9wKCk7XG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5zY29wZSkge1xuICAgICAgICAgICAgcmVtb3ZlKGluc3RhbmNlLnNjb3BlLmVmZmVjdHMsIGVmZmVjdCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8gdGhpcy4kd2F0Y2hcbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHB1YmxpY1RoaXMgPSB0aGlzLnByb3h5O1xuICAgIGNvbnN0IGdldHRlciA9IGlzU3RyaW5nKHNvdXJjZSlcbiAgICAgICAgPyBzb3VyY2UuaW5jbHVkZXMoJy4nKVxuICAgICAgICAgICAgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIHNvdXJjZSlcbiAgICAgICAgICAgIDogKCkgPT4gcHVibGljVGhpc1tzb3VyY2VdXG4gICAgICAgIDogc291cmNlLmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgbGV0IGNiO1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBjYiA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IgPSB2YWx1ZS5oYW5kbGVyO1xuICAgICAgICBvcHRpb25zID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IGN1ciA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICBzZXRDdXJyZW50SW5zdGFuY2UodGhpcyk7XG4gICAgY29uc3QgcmVzID0gZG9XYXRjaChnZXR0ZXIsIGNiLmJpbmQocHVibGljVGhpcyksIG9wdGlvbnMpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGN1cik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aEdldHRlcihjdHgsIHBhdGgpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsZXQgY3VyID0gY3R4O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xuICAgICAgICAgICAgY3VyID0gY3VyW3NlZ21lbnRzW2ldXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VyO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmF2ZXJzZSh2YWx1ZSwgc2Vlbikge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlW1wiX192X3NraXBcIiAvKiBSZWFjdGl2ZUZsYWdzLlNLSVAgKi9dKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2VlbiA9IHNlZW4gfHwgbmV3IFNldCgpO1xuICAgIGlmIChzZWVuLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZWVuLmFkZCh2YWx1ZSk7XG4gICAgaWYgKGlzUmVmKHZhbHVlKSkge1xuICAgICAgICB0cmF2ZXJzZSh2YWx1ZS52YWx1ZSwgc2Vlbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKHZhbHVlW2ldLCBzZWVuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkgfHwgaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIHRyYXZlcnNlKHYsIHNlZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKHZhbHVlW2tleV0sIHNlZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgICAgICBpc0xlYXZpbmc6IGZhbHNlLFxuICAgICAgICBpc1VubW91bnRpbmc6IGZhbHNlLFxuICAgICAgICBsZWF2aW5nVk5vZGVzOiBuZXcgTWFwKClcbiAgICB9O1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAgIHN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgICAgc3RhdGUuaXNVbm1vdW50aW5nID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3RhdGU7XG59XG5jb25zdCBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciA9IFtGdW5jdGlvbiwgQXJyYXldO1xuY29uc3QgQmFzZVRyYW5zaXRpb25JbXBsID0ge1xuICAgIG5hbWU6IGBCYXNlVHJhbnNpdGlvbmAsXG4gICAgcHJvcHM6IHtcbiAgICAgICAgbW9kZTogU3RyaW5nLFxuICAgICAgICBhcHBlYXI6IEJvb2xlYW4sXG4gICAgICAgIHBlcnNpc3RlZDogQm9vbGVhbixcbiAgICAgICAgLy8gZW50ZXJcbiAgICAgICAgb25CZWZvcmVFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkVudGVyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgLy8gbGVhdmVcbiAgICAgICAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgLy8gYXBwZWFyXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFmdGVyQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXG4gICAgfSxcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgICAgIGxldCBwcmV2VHJhbnNpdGlvbktleTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBsZXQgaGFzRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWNvbW1lbnQgY2hpbGRcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGMgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBoYXNGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdhcm4gbW9yZSB0aGFuIG9uZSBub24tY29tbWVudCBjaGlsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQgb3IgY29tcG9uZW50LiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZSA8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gdHJhY2sgcmVhY3Rpdml0eSBmb3IgdGhlc2UgcHJvcHMgc28gdXNlIHRoZSByYXdcbiAgICAgICAgICAgIC8vIHByb3BzIGZvciBhIGJpdCBiZXR0ZXIgcGVyZlxuICAgICAgICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICAgICAgICBjb25zdCB7IG1vZGUgfSA9IHJhd1Byb3BzO1xuICAgICAgICAgICAgLy8gY2hlY2sgbW9kZVxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIG1vZGUgJiZcbiAgICAgICAgICAgICAgICBtb2RlICE9PSAnaW4tb3V0JyAmJlxuICAgICAgICAgICAgICAgIG1vZGUgIT09ICdvdXQtaW4nICYmXG4gICAgICAgICAgICAgICAgbW9kZSAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICAgICAgd2FybihgaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJHttb2RlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzTGVhdmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIDx0cmFuc2l0aW9uPjxrZWVwLWFsaXZlLz48L3RyYW5zaXRpb24+LCB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAvLyBjb21wYXJlIHRoZSB0eXBlIG9mIHRoZSBrZXB0LWFsaXZlIGNoaWxkcmVuLlxuICAgICAgICAgICAgY29uc3QgaW5uZXJDaGlsZCA9IGdldEtlZXBBbGl2ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIGlmICghaW5uZXJDaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIGVudGVySG9va3MpO1xuICAgICAgICAgICAgY29uc3Qgb2xkQ2hpbGQgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICAgICAgICAgICAgY29uc3Qgb2xkSW5uZXJDaGlsZCA9IG9sZENoaWxkICYmIGdldEtlZXBBbGl2ZUNoaWxkKG9sZENoaWxkKTtcbiAgICAgICAgICAgIGxldCB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgeyBnZXRUcmFuc2l0aW9uS2V5IH0gPSBpbm5lckNoaWxkLnR5cGU7XG4gICAgICAgICAgICBpZiAoZ2V0VHJhbnNpdGlvbktleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldFRyYW5zaXRpb25LZXkoKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldlRyYW5zaXRpb25LZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSBwcmV2VHJhbnNpdGlvbktleSkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbktleUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhhbmRsZSBtb2RlXG4gICAgICAgICAgICBpZiAob2xkSW5uZXJDaGlsZCAmJlxuICAgICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCAmJlxuICAgICAgICAgICAgICAgICghaXNTYW1lVk5vZGVUeXBlKGlubmVyQ2hpbGQsIG9sZElubmVyQ2hpbGQpIHx8IHRyYW5zaXRpb25LZXlDaGFuZ2VkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdIb29rcyA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3Mob2xkSW5uZXJDaGlsZCwgcmF3UHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIG9sZCB0cmVlJ3MgaG9va3MgaW4gY2FzZSBvZiBkeW5hbWljIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Mob2xkSW5uZXJDaGlsZCwgbGVhdmluZ0hvb2tzKTtcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hpbmcgYmV0d2VlbiBkaWZmZXJlbnQgdmlld3NcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0JyAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0hvb2tzLmRlbGF5TGVhdmUgPSAoZWwsIGVhcmx5UmVtb3ZlLCBkZWxheWVkTGVhdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIG9sZElubmVyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVhcmx5IHJlbW92YWwgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVySG9va3MuZGVsYXllZExlYXZlID0gZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICAgIGNvbnN0IHsgbGVhdmluZ1ZOb2RlcyB9ID0gc3RhdGU7XG4gICAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xuICAgIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBsZWF2aW5nVk5vZGVzQ2FjaGU7XG59XG4vLyBUaGUgdHJhbnNpdGlvbiBob29rcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZub2RlIGFzIHZub2RlLnRyYW5zaXRpb25cbi8vIGFuZCB3aWxsIGJlIGNhbGxlZCBhdCBhcHByb3ByaWF0ZSB0aW1pbmcgaW4gdGhlIHJlbmRlcmVyLlxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgYXBwZWFyLCBtb2RlLCBwZXJzaXN0ZWQgPSBmYWxzZSwgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25BZnRlckVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkJlZm9yZUxlYXZlLCBvbkxlYXZlLCBvbkFmdGVyTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyLCBvbkFwcGVhciwgb25BZnRlckFwcGVhciwgb25BcHBlYXJDYW5jZWxsZWQgfSA9IHByb3BzO1xuICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xuICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcbiAgICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgICAgIGhvb2sgJiZcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA5IC8qIEVycm9yQ29kZXMuVFJBTlNJVElPTl9IT09LICovLCBhcmdzKTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbGxBc3luY0hvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgICAgICBjb25zdCBkb25lID0gYXJnc1sxXTtcbiAgICAgICAgY2FsbEhvb2soaG9vaywgYXJncyk7XG4gICAgICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICAgICAgICBpZiAoaG9vay5ldmVyeShob29rID0+IGhvb2subGVuZ3RoIDw9IDEpKVxuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhvb2tzID0ge1xuICAgICAgICBtb2RlLFxuICAgICAgICBwZXJzaXN0ZWQsXG4gICAgICAgIGJlZm9yZUVudGVyKGVsKSB7XG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uQmVmb3JlRW50ZXI7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9vayA9IG9uQmVmb3JlQXBwZWFyIHx8IG9uQmVmb3JlRW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIHNhbWUgZWxlbWVudCAodi1zaG93KVxuICAgICAgICAgICAgaWYgKGVsLl9sZWF2ZUNiKSB7XG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIHRvZ2dsZWQgZWxlbWVudCB3aXRoIHNhbWUga2V5ICh2LWlmKVxuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2RlID0gbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XG4gICAgICAgICAgICBpZiAobGVhdmluZ1ZOb2RlICYmXG4gICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgZWFybHkgcmVtb3ZhbCAobm90IGNhbmNlbGxlZClcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxIb29rKGhvb2ssIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnRlcihlbCkge1xuICAgICAgICAgICAgbGV0IGhvb2sgPSBvbkVudGVyO1xuICAgICAgICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgICAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJIb29rID0gb25BZnRlckFwcGVhciB8fCBvbkFmdGVyRW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEhvb2sgPSBvbkFwcGVhckNhbmNlbGxlZCB8fCBvbkVudGVyQ2FuY2VsbGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChob29rcy5kZWxheWVkTGVhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsLl9lbnRlckNiID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaG9vaykge1xuICAgICAgICAgICAgICAgIGNhbGxBc3luY0hvb2soaG9vaywgW2VsLCBkb25lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxlYXZlKGVsLCByZW1vdmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xuICAgICAgICAgICAgaWYgKGVsLl9lbnRlckNiKSB7XG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xuICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fbGVhdmVDYiA9IChjYW5jZWxsZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID09PSB2bm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICAgICAgaWYgKG9uTGVhdmUpIHtcbiAgICAgICAgICAgICAgICBjYWxsQXN5bmNIb29rKG9uTGVhdmUsIFtlbCwgZG9uZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9uZSh2bm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gaG9va3M7XG59XG4vLyB0aGUgcGxhY2Vob2xkZXIgcmVhbGx5IG9ubHkgaGFuZGxlcyBvbmUgc3BlY2lhbCBjYXNlOiBLZWVwQWxpdmVcbi8vIGluIHRoZSBjYXNlIG9mIGEgS2VlcEFsaXZlIGluIGEgbGVhdmUgcGhhc2Ugd2UgbmVlZCB0byByZXR1cm4gYSBLZWVwQWxpdmVcbi8vIHBsYWNlaG9sZGVyIHdpdGggZW1wdHkgY29udGVudCB0byBhdm9pZCB0aGUgS2VlcEFsaXZlIGluc3RhbmNlIGZyb20gYmVpbmdcbi8vIHVubW91bnRlZC5cbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcbiAgICBpZiAoaXNLZWVwQWxpdmUodm5vZGUpKSB7XG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEtlZXBBbGl2ZUNoaWxkKHZub2RlKSB7XG4gICAgcmV0dXJuIGlzS2VlcEFsaXZlKHZub2RlKVxuICAgICAgICA/IHZub2RlLmNoaWxkcmVuXG4gICAgICAgICAgICA/IHZub2RlLmNoaWxkcmVuWzBdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICA6IHZub2RlO1xufVxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCBob29rcykge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgdm5vZGUuc3NDb250ZW50LnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0NvbnRlbnQpO1xuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UsIHBhcmVudEtleSkge1xuICAgIGxldCByZXQgPSBbXTtcbiAgICBsZXQga2V5ZWRGcmFnbWVudENvdW50ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAvLyAjNTM2MCBpbmhlcml0IHBhcmVudCBrZXkgaW4gY2FzZSBvZiA8dGVtcGxhdGUgdi1mb3I+XG4gICAgICAgIGNvbnN0IGtleSA9IHBhcmVudEtleSA9PSBudWxsXG4gICAgICAgICAgICA/IGNoaWxkLmtleVxuICAgICAgICAgICAgOiBTdHJpbmcocGFyZW50S2V5KSArIFN0cmluZyhjaGlsZC5rZXkgIT0gbnVsbCA/IGNoaWxkLmtleSA6IGkpO1xuICAgICAgICAvLyBoYW5kbGUgZnJhZ21lbnQgY2hpbGRyZW4gY2FzZSwgZS5nLiB2LWZvclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXRjaEZsYWcgJiAxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqLylcbiAgICAgICAgICAgICAgICBrZXllZEZyYWdtZW50Q291bnQrKztcbiAgICAgICAgICAgIHJldCA9IHJldC5jb25jYXQoZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKGNoaWxkLmNoaWxkcmVuLCBrZWVwQ29tbWVudCwga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tbWVudCBwbGFjZWhvbGRlcnMgc2hvdWxkIGJlIHNraXBwZWQsIGUuZy4gdi1pZlxuICAgICAgICBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICByZXQucHVzaChrZXkgIT0gbnVsbCA/IGNsb25lVk5vZGUoY2hpbGQsIHsga2V5IH0pIDogY2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vICMxMTI2IGlmIGEgdHJhbnNpdGlvbiBjaGlsZHJlbiBsaXN0IGNvbnRhaW5zIG11bHRpcGxlIHN1YiBmcmFnbWVudHMsIHRoZXNlXG4gICAgLy8gZnJhZ21lbnRzIHdpbGwgYmUgbWVyZ2VkIGludG8gYSBmbGF0IGNoaWxkcmVuIGFycmF5LiBTaW5jZSBlYWNoIHYtZm9yXG4gICAgLy8gZnJhZ21lbnQgbWF5IGNvbnRhaW4gZGlmZmVyZW50IHN0YXRpYyBiaW5kaW5ncyBpbnNpZGUsIHdlIG5lZWQgdG8gZGUtb3BcbiAgICAvLyB0aGVzZSBjaGlsZHJlbiB0byBmb3JjZSBmdWxsIGRpZmZzIHRvIGVuc3VyZSBjb3JyZWN0IGJlaGF2aW9yLlxuICAgIGlmIChrZXllZEZyYWdtZW50Q291bnQgPiAxKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbi8vIGltcGxlbWVudGF0aW9uLCBjbG9zZSB0byBuby1vcFxuZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvcHRpb25zKSA/IHsgc2V0dXA6IG9wdGlvbnMsIG5hbWU6IG9wdGlvbnMubmFtZSB9IDogb3B0aW9ucztcbn1cblxuY29uc3QgaXNBc3luY1dyYXBwZXIgPSAoaSkgPT4gISFpLnR5cGUuX19hc3luY0xvYWRlcjtcbmZ1bmN0aW9uIGRlZmluZUFzeW5jQ29tcG9uZW50KHNvdXJjZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xuICAgIH1cbiAgICBjb25zdCB7IGxvYWRlciwgbG9hZGluZ0NvbXBvbmVudCwgZXJyb3JDb21wb25lbnQsIGRlbGF5ID0gMjAwLCB0aW1lb3V0LCAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsIG9uRXJyb3I6IHVzZXJPbkVycm9yIH0gPSBzb3VyY2U7XG4gICAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICBsZXQgcmVzb2x2ZWRDb21wO1xuICAgIGxldCByZXRyaWVzID0gMDtcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcbiAgICAgICAgcmV0cmllcysrO1xuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfTtcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xuICAgICAgICBsZXQgdGhpc1JlcXVlc3Q7XG4gICAgICAgIHJldHVybiAocGVuZGluZ1JlcXVlc3QgfHxcbiAgICAgICAgICAgICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID1cbiAgICAgICAgICAgICAgICBsb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlck9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyRmFpbCA9ICgpID0+IHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoY29tcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlcXVlc3QgIT09IHBlbmRpbmdSZXF1ZXN0ICYmIHBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY29tcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRlcm9wIG1vZHVsZSBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoY29tcC5fX2VzTW9kdWxlIHx8IGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhc3luYyBjb21wb25lbnQgbG9hZCByZXN1bHQ6ICR7Y29tcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZENvbXAgPSBjb21wO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgICAgIG5hbWU6ICdBc3luY0NvbXBvbmVudFdyYXBwZXInLFxuICAgICAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgICAgICBnZXQgX19hc3luY1Jlc29sdmVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQ29tcDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0dXAoKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgICAgICAgIC8vIGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMTMgLyogRXJyb3JDb2Rlcy5BU1lOQ19DT01QT05FTlRfTE9BREVSICovLCAhZXJyb3JDb21wb25lbnQgLyogZG8gbm90IHRocm93IGluIGRldiBpZiB1c2VyIHByb3ZpZGVkIGVycm9yIGNvbXBvbmVudCAqLyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gc3VzcGVuc2UtY29udHJvbGxlZCBvciBTU1IuXG4gICAgICAgICAgICBpZiAoKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlKSB8fFxuICAgICAgICAgICAgICAgIChpc0luU1NSQ29tcG9uZW50U2V0dXApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWQoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb21wID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChjb21wLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGVycm9yQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xuICAgICAgICAgICAgY29uc3QgZGVsYXllZCA9IHJlZighIWRlbGF5KTtcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxheWVkLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZC52YWx1ZSAmJiAhZXJyb3IudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXMuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9hZCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnBhcmVudCAmJiBpc0tlZXBBbGl2ZShpbnN0YW5jZS5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBpcyBrZWVwLWFsaXZlLCBmb3JjZSB1cGRhdGUgc28gdGhlIGxvYWRlZCBjb21wb25lbnQnc1xuICAgICAgICAgICAgICAgICAgICAvLyBuYW1lIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvci52YWx1ZSAmJiBlcnJvckNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5uZXJDb21wKGNvbXAsIHsgdm5vZGU6IHsgcmVmLCBwcm9wcywgY2hpbGRyZW4sIHNoYXBlRmxhZyB9LCBwYXJlbnQgfSkge1xuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoY29tcCwgcHJvcHMsIGNoaWxkcmVuKTtcbiAgICAvLyBlbnN1cmUgaW5uZXIgY29tcG9uZW50IGluaGVyaXRzIHRoZSBhc3luYyB3cmFwcGVyJ3MgcmVmIG93bmVyXG4gICAgdm5vZGUucmVmID0gcmVmO1xuICAgIHJldHVybiB2bm9kZTtcbn1cblxuY29uc3QgaXNLZWVwQWxpdmUgPSAodm5vZGUpID0+IHZub2RlLnR5cGUuX19pc0tlZXBBbGl2ZTtcbmNvbnN0IEtlZXBBbGl2ZUltcGwgPSB7XG4gICAgbmFtZTogYEtlZXBBbGl2ZWAsXG4gICAgLy8gTWFya2VyIGZvciBzcGVjaWFsIGhhbmRsaW5nIGluc2lkZSB0aGUgcmVuZGVyZXIuIFdlIGFyZSBub3QgdXNpbmcgYSA9PT1cbiAgICAvLyBjaGVjayBkaXJlY3RseSBvbiBLZWVwQWxpdmUgaW4gdGhlIHJlbmRlcmVyLCBiZWNhdXNlIGltcG9ydGluZyBpdCBkaXJlY3RseVxuICAgIC8vIHdvdWxkIHByZXZlbnQgaXQgZnJvbSBiZWluZyB0cmVlLXNoYWtlbi5cbiAgICBfX2lzS2VlcEFsaXZlOiB0cnVlLFxuICAgIHByb3BzOiB7XG4gICAgICAgIGluY2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgICAgICBleGNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcbiAgICAgICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gICAgfSxcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgIC8vIEtlZXBBbGl2ZSBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgaW5zdGFudGlhdGVkIHJlbmRlcmVyIHZpYSB0aGVcbiAgICAgICAgLy8gY3R4IHdoZXJlIHRoZSByZW5kZXJlciBwYXNzZXMgaW4gaXRzIGludGVybmFscyxcbiAgICAgICAgLy8gYW5kIHRoZSBLZWVwQWxpdmUgaW5zdGFuY2UgZXhwb3NlcyBhY3RpdmF0ZS9kZWFjdGl2YXRlIGltcGxlbWVudGF0aW9ucy5cbiAgICAgICAgLy8gVGhlIHdob2xlIHBvaW50IG9mIHRoaXMgaXMgdG8gYXZvaWQgaW1wb3J0aW5nIEtlZXBBbGl2ZSBkaXJlY3RseSBpbiB0aGVcbiAgICAgICAgLy8gcmVuZGVyZXIgdG8gZmFjaWxpdGF0ZSB0cmVlLXNoYWtpbmcuXG4gICAgICAgIGNvbnN0IHNoYXJlZENvbnRleHQgPSBpbnN0YW5jZS5jdHg7XG4gICAgICAgIC8vIGlmIHRoZSBpbnRlcm5hbCByZW5kZXJlciBpcyBub3QgcmVnaXN0ZXJlZCwgaXQgaW5kaWNhdGVzIHRoYXQgdGhpcyBpcyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcsXG4gICAgICAgIC8vIGZvciBLZWVwQWxpdmUsIHdlIGp1c3QgbmVlZCB0byByZW5kZXIgaXRzIGNoaWxkcmVuXG4gICAgICAgIGlmICghc2hhcmVkQ29udGV4dC5yZW5kZXJlcikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgaW5zdGFuY2UuX192X2NhY2hlID0gY2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50U3VzcGVuc2UgPSBpbnN0YW5jZS5zdXNwZW5zZTtcbiAgICAgICAgY29uc3QgeyByZW5kZXJlcjogeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IF91bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9IH0gPSBzaGFyZWRDb250ZXh0O1xuICAgICAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNoYXJlZENvbnRleHQuYWN0aXZhdGUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIE1vdmVUeXBlLkVOVEVSICovLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAvLyBpbiBjYXNlIHByb3BzIGhhdmUgY2hhbmdlZFxuICAgICAgICAgICAgcGF0Y2goaW5zdGFuY2Uudm5vZGUsIHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgdm5vZGUuc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UuYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVNb3VudGVkO1xuICAgICAgICAgICAgICAgIGlmICh2bm9kZUhvb2spIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UucGFyZW50LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY29tcG9uZW50cyB0cmVlXG4gICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNoYXJlZENvbnRleHQuZGVhY3RpdmF0ZSA9ICh2bm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICAgICAgICBtb3ZlKHZub2RlLCBzdG9yYWdlQ29udGFpbmVyLCBudWxsLCAxIC8qIE1vdmVUeXBlLkxFQVZFICovLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5kYSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5kYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVVbm1vdW50ZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHZub2RlSG9vaykge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNEZWFjdGl2YXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb21wb25lbnRzIHRyZWVcbiAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSkge1xuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHNoYXBlRmxhZyBzbyBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkXG4gICAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XG4gICAgICAgICAgICBfdW5tb3VudCh2bm9kZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwcnVuZUNhY2hlKGZpbHRlcikge1xuICAgICAgICAgICAgY2FjaGUuZm9yRWFjaCgodm5vZGUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHZub2RlLnR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lICYmICghZmlsdGVyIHx8ICFmaWx0ZXIobmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeShrZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50IHx8IGNhY2hlZC50eXBlICE9PSBjdXJyZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNhY2hlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgaW5zdGFuY2Ugc2hvdWxkIG5vIGxvbmdlciBiZSBrZXB0LWFsaXZlLlxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVubW91bnQgaXQgbm93IGJ1dCBpdCBtaWdodCBiZSBsYXRlciwgc28gcmVzZXQgaXRzIGZsYWcgbm93LlxuICAgICAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKGN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBydW5lIGNhY2hlIG9uIGluY2x1ZGUvZXhjbHVkZSBwcm9wIGNoYW5nZVxuICAgICAgICB3YXRjaCgoKSA9PiBbcHJvcHMuaW5jbHVkZSwgcHJvcHMuZXhjbHVkZV0sIChbaW5jbHVkZSwgZXhjbHVkZV0pID0+IHtcbiAgICAgICAgICAgIGluY2x1ZGUgJiYgcHJ1bmVDYWNoZShuYW1lID0+IG1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpO1xuICAgICAgICAgICAgZXhjbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gIW1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpO1xuICAgICAgICB9LCBcbiAgICAgICAgLy8gcHJ1bmUgcG9zdC1yZW5kZXIgYWZ0ZXIgYGN1cnJlbnRgIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgICAgeyBmbHVzaDogJ3Bvc3QnLCBkZWVwOiB0cnVlIH0pO1xuICAgICAgICAvLyBjYWNoZSBzdWIgdHJlZSBhZnRlciByZW5kZXJcbiAgICAgICAgbGV0IHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XG4gICAgICAgIGNvbnN0IGNhY2hlU3VidHJlZSA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGZpeCAjMTYyMSwgdGhlIHBlbmRpbmdDYWNoZUtleSBjb3VsZCBiZSAwXG4gICAgICAgICAgICBpZiAocGVuZGluZ0NhY2hlS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgb25Nb3VudGVkKGNhY2hlU3VidHJlZSk7XG4gICAgICAgIG9uVXBkYXRlZChjYWNoZVN1YnRyZWUpO1xuICAgICAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgICAgICAgY2FjaGUuZm9yRWFjaChjYWNoZWQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc3ViVHJlZSwgc3VzcGVuc2UgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChzdWJUcmVlKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkLnR5cGUgPT09IHZub2RlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCBpbnN0YW5jZSB3aWxsIGJlIHVubW91bnRlZCBhcyBwYXJ0IG9mIGtlZXAtYWxpdmUncyB1bm1vdW50XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGludm9rZSBpdHMgZGVhY3RpdmF0ZWQgaG9vayBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhID0gdm5vZGUuY29tcG9uZW50LmRhO1xuICAgICAgICAgICAgICAgICAgICBkYSAmJiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZGEsIHN1c3BlbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bm1vdW50KGNhY2hlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFzbG90cy5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJhd1ZOb2RlID0gY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgS2VlcEFsaXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIGNvbXBvbmVudCBjaGlsZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzVk5vZGUocmF3Vk5vZGUpIHx8XG4gICAgICAgICAgICAgICAgKCEocmF3Vk5vZGUuc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLykgJiZcbiAgICAgICAgICAgICAgICAgICAgIShyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChyYXdWTm9kZSk7XG4gICAgICAgICAgICBjb25zdCBjb21wID0gdm5vZGUudHlwZTtcbiAgICAgICAgICAgIC8vIGZvciBhc3luYyBjb21wb25lbnRzLCBuYW1lIGNoZWNrIHNob3VsZCBiZSBiYXNlZCBpbiBpdHMgbG9hZGVkXG4gICAgICAgICAgICAvLyBpbm5lciBjb21wb25lbnQgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShpc0FzeW5jV3JhcHBlcih2bm9kZSlcbiAgICAgICAgICAgICAgICA/IHZub2RlLnR5cGUuX19hc3luY1Jlc29sdmVkIHx8IHt9XG4gICAgICAgICAgICAgICAgOiBjb21wKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5jbHVkZSwgZXhjbHVkZSwgbWF4IH0gPSBwcm9wcztcbiAgICAgICAgICAgIGlmICgoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAgICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdm5vZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5ID0gdm5vZGUua2V5ID09IG51bGwgPyBjb21wIDogdm5vZGUua2V5O1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkVk5vZGUgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgICAgIC8vIGNsb25lIHZub2RlIGlmIGl0J3MgcmV1c2VkIGJlY2F1c2Ugd2UgYXJlIGdvaW5nIHRvIG11dGF0ZSBpdFxuICAgICAgICAgICAgaWYgKHZub2RlLmVsKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmF3Vk5vZGUuc3NDb250ZW50ID0gdm5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gIzE1MTMgaXQncyBwb3NzaWJsZSBmb3IgdGhlIHJldHVybmVkIHZub2RlIHRvIGJlIGNsb25lZCBkdWUgdG8gYXR0clxuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2ggb3Igc2NvcGVJZCwgc28gdGhlIHZub2RlIGhlcmUgbWF5IG5vdCBiZSB0aGUgZmluYWwgdm5vZGVcbiAgICAgICAgICAgIC8vIHRoYXQgaXMgbW91bnRlZC4gSW5zdGVhZCBvZiBjYWNoaW5nIGl0IGRpcmVjdGx5LCB3ZSBzdG9yZSB0aGUgcGVuZGluZ1xuICAgICAgICAgICAgLy8ga2V5IGFuZCBjYWNoZSBgaW5zdGFuY2Uuc3ViVHJlZWAgKHRoZSBub3JtYWxpemVkIHZub2RlKSBpblxuICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQvYmVmb3JlVXBkYXRlIGhvb2tzLlxuICAgICAgICAgICAgcGVuZGluZ0NhY2hlS2V5ID0ga2V5O1xuICAgICAgICAgICAgaWYgKGNhY2hlZFZOb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gY29weSBvdmVyIG1vdW50ZWQgc3RhdGVcbiAgICAgICAgICAgICAgICB2bm9kZS5lbCA9IGNhY2hlZFZOb2RlLmVsO1xuICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudCA9IGNhY2hlZFZOb2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNpdmVseSB1cGRhdGUgdHJhbnNpdGlvbiBob29rcyBvbiBzdWJUcmVlXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgdm5vZGUudHJhbnNpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIG1vdW50ZWQgYXMgZnJlc2hcbiAgICAgICAgICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gNTEyIC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XG4gICAgICAgICAgICAgICAgLy8gbWFrZSB0aGlzIGtleSB0aGUgZnJlc2hlc3RcbiAgICAgICAgICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICAgICAgICAgIGlmIChtYXggJiYga2V5cy5zaXplID4gcGFyc2VJbnQobWF4LCAxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhdm9pZCB2bm9kZSBiZWluZyB1bm1vdW50ZWRcbiAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSAyNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XG4gICAgICAgICAgICBjdXJyZW50ID0gdm5vZGU7XG4gICAgICAgICAgICByZXR1cm4gaXNTdXNwZW5zZShyYXdWTm9kZS50eXBlKSA/IHJhd1ZOb2RlIDogdm5vZGU7XG4gICAgICAgIH07XG4gICAgfVxufTtcbi8vIGV4cG9ydCB0aGUgcHVibGljIHR5cGUgZm9yIGgvdHN4IGluZmVyZW5jZVxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcbmNvbnN0IEtlZXBBbGl2ZSA9IEtlZXBBbGl2ZUltcGw7XG5mdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sIG5hbWUpIHtcbiAgICBpZiAoaXNBcnJheShwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi5zb21lKChwKSA9PiBtYXRjaGVzKHAsIG5hbWUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTdHJpbmcocGF0dGVybikpIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmNsdWRlcyhuYW1lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGF0dGVybi50ZXN0KSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gb25BY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XG4gICAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiYVwiIC8qIExpZmVjeWNsZUhvb2tzLkFDVElWQVRFRCAqLywgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIG9uRGVhY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XG4gICAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiZGFcIiAvKiBMaWZlY3ljbGVIb29rcy5ERUFDVElWQVRFRCAqLywgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCB0eXBlLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAvLyBjYWNoZSB0aGUgZGVhY3RpdmF0ZSBicmFuY2ggY2hlY2sgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWVcbiAgICAvLyBob29rIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZGNcIiBzdGFuZHMgZm9yIFwid2l0aFxuICAgIC8vIGRlYWN0aXZhdGlvbiBjaGVja1wiLlxuICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dkYyB8fFxuICAgICAgICAoaG9vay5fX3dkYyA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG9ubHkgZmlyZSB0aGUgaG9vayBpZiB0aGUgdGFyZ2V0IGluc3RhbmNlIGlzIE5PVCBpbiBhIGRlYWN0aXZhdGVkIGJyYW5jaC5cbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5pc0RlYWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvb2soKTtcbiAgICAgICAgfSk7XG4gICAgaW5qZWN0SG9vayh0eXBlLCB3cmFwcGVkSG9vaywgdGFyZ2V0KTtcbiAgICAvLyBJbiBhZGRpdGlvbiB0byByZWdpc3RlcmluZyBpdCBvbiB0aGUgdGFyZ2V0IGluc3RhbmNlLCB3ZSB3YWxrIHVwIHRoZSBwYXJlbnRcbiAgICAvLyBjaGFpbiBhbmQgcmVnaXN0ZXIgaXQgb24gYWxsIGFuY2VzdG9yIGluc3RhbmNlcyB0aGF0IGFyZSBrZWVwLWFsaXZlIHJvb3RzLlxuICAgIC8vIFRoaXMgYXZvaWRzIHRoZSBuZWVkIHRvIHdhbGsgdGhlIGVudGlyZSBjb21wb25lbnQgdHJlZSB3aGVuIGludm9raW5nIHRoZXNlXG4gICAgLy8gaG9va3MsIGFuZCBtb3JlIGltcG9ydGFudGx5LCBhdm9pZHMgdGhlIG5lZWQgdG8gdHJhY2sgY2hpbGQgY29tcG9uZW50cyBpblxuICAgIC8vIGFycmF5cy5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0LnBhcmVudDtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChpc0tlZXBBbGl2ZShjdXJyZW50LnBhcmVudC52bm9kZSkpIHtcbiAgICAgICAgICAgICAgICBpbmplY3RUb0tlZXBBbGl2ZVJvb3Qod3JhcHBlZEhvb2ssIHR5cGUsIHRhcmdldCwgY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpbmplY3RUb0tlZXBBbGl2ZVJvb3QoaG9vaywgdHlwZSwgdGFyZ2V0LCBrZWVwQWxpdmVSb290KSB7XG4gICAgLy8gaW5qZWN0SG9vayB3cmFwcyB0aGUgb3JpZ2luYWwgZm9yIGVycm9yIGhhbmRsaW5nLCBzbyBtYWtlIHN1cmUgdG8gcmVtb3ZlXG4gICAgLy8gdGhlIHdyYXBwZWQgdmVyc2lvbi5cbiAgICBjb25zdCBpbmplY3RlZCA9IGluamVjdEhvb2sodHlwZSwgaG9vaywga2VlcEFsaXZlUm9vdCwgdHJ1ZSAvKiBwcmVwZW5kICovKTtcbiAgICBvblVubW91bnRlZCgoKSA9PiB7XG4gICAgICAgIHJlbW92ZShrZWVwQWxpdmVSb290W3R5cGVdLCBpbmplY3RlZCk7XG4gICAgfSwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIHJlc2V0U2hhcGVGbGFnKHZub2RlKSB7XG4gICAgbGV0IHNoYXBlRmxhZyA9IHZub2RlLnNoYXBlRmxhZztcbiAgICBpZiAoc2hhcGVGbGFnICYgMjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XG4gICAgICAgIHNoYXBlRmxhZyAtPSAyNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLykge1xuICAgICAgICBzaGFwZUZsYWcgLT0gNTEyIC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XG4gICAgfVxuICAgIHZub2RlLnNoYXBlRmxhZyA9IHNoYXBlRmxhZztcbn1cbmZ1bmN0aW9uIGdldElubmVyQ2hpbGQodm5vZGUpIHtcbiAgICByZXR1cm4gdm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8gPyB2bm9kZS5zc0NvbnRlbnQgOiB2bm9kZTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0SG9vayh0eXBlLCBob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UsIHByZXBlbmQgPSBmYWxzZSkge1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgaG9va3MgPSB0YXJnZXRbdHlwZV0gfHwgKHRhcmdldFt0eXBlXSA9IFtdKTtcbiAgICAgICAgLy8gY2FjaGUgdGhlIGVycm9yIGhhbmRsaW5nIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lIGhvb2tcbiAgICAgICAgLy8gY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dlaFwiIHN0YW5kcyBmb3IgXCJ3aXRoIGVycm9yXG4gICAgICAgIC8vIGhhbmRsaW5nXCIuXG4gICAgICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dlaCB8fFxuICAgICAgICAgICAgKGhvb2suX193ZWggPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBkaXNhYmxlIHRyYWNraW5nIGluc2lkZSBhbGwgbGlmZWN5Y2xlIGhvb2tzXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhleSBjYW4gcG90ZW50aWFsbHkgYmUgY2FsbGVkIGluc2lkZSBlZmZlY3RzLlxuICAgICAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgY3VycmVudEluc3RhbmNlIGR1cmluZyBob29rIGludm9jYXRpb24uXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhc3N1bWVzIHRoZSBob29rIGRvZXMgbm90IHN5bmNocm9ub3VzbHkgdHJpZ2dlciBvdGhlciBob29rcywgd2hpY2hcbiAgICAgICAgICAgICAgICAvLyBjYW4gb25seSBiZSBmYWxzZSB3aGVuIHRoZSB1c2VyIGRvZXMgc29tZXRoaW5nIHJlYWxseSBmdW5reS5cbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCB0YXJnZXQsIHR5cGUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByZXBlbmQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVuc2hpZnQod3JhcHBlZEhvb2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9va3MucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyYXBwZWRIb29rO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY29uc3QgYXBpTmFtZSA9IHRvSGFuZGxlcktleShFcnJvclR5cGVTdHJpbmdzW3R5cGVdLnJlcGxhY2UoLyBob29rJC8sICcnKSk7XG4gICAgICAgIHdhcm4oYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBgICtcbiAgICAgICAgICAgIGBhc3NvY2lhdGVkIHdpdGguIGAgK1xuICAgICAgICAgICAgYExpZmVjeWNsZSBpbmplY3Rpb24gQVBJcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBleGVjdXRpb24gb2Ygc2V0dXAoKS5gICtcbiAgICAgICAgICAgIChgIElmIHlvdSBhcmUgdXNpbmcgYXN5bmMgc2V0dXAoKSwgbWFrZSBzdXJlIHRvIHJlZ2lzdGVyIGxpZmVjeWNsZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYGhvb2tzIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQgc3RhdGVtZW50LmBcbiAgICAgICAgICAgICAgICApKTtcbiAgICB9XG59XG5jb25zdCBjcmVhdGVIb29rID0gKGxpZmVjeWNsZSkgPT4gKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkgPT4gXG4vLyBwb3N0LWNyZWF0ZSBsaWZlY3ljbGUgcmVnaXN0cmF0aW9ucyBhcmUgbm9vcHMgZHVyaW5nIFNTUiAoZXhjZXB0IGZvciBzZXJ2ZXJQcmVmZXRjaClcbighaXNJblNTUkNvbXBvbmVudFNldHVwIHx8IGxpZmVjeWNsZSA9PT0gXCJzcFwiIC8qIExpZmVjeWNsZUhvb2tzLlNFUlZFUl9QUkVGRVRDSCAqLykgJiZcbiAgICBpbmplY3RIb29rKGxpZmVjeWNsZSwgKC4uLmFyZ3MpID0+IGhvb2soLi4uYXJncyksIHRhcmdldCk7XG5jb25zdCBvbkJlZm9yZU1vdW50ID0gY3JlYXRlSG9vayhcImJtXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX01PVU5UICovKTtcbmNvbnN0IG9uTW91bnRlZCA9IGNyZWF0ZUhvb2soXCJtXCIgLyogTGlmZWN5Y2xlSG9va3MuTU9VTlRFRCAqLyk7XG5jb25zdCBvbkJlZm9yZVVwZGF0ZSA9IGNyZWF0ZUhvb2soXCJidVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9VUERBVEUgKi8pO1xuY29uc3Qgb25VcGRhdGVkID0gY3JlYXRlSG9vayhcInVcIiAvKiBMaWZlY3ljbGVIb29rcy5VUERBVEVEICovKTtcbmNvbnN0IG9uQmVmb3JlVW5tb3VudCA9IGNyZWF0ZUhvb2soXCJidW1cIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfVU5NT1VOVCAqLyk7XG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiIC8qIExpZmVjeWNsZUhvb2tzLlVOTU9VTlRFRCAqLyk7XG5jb25zdCBvblNlcnZlclByZWZldGNoID0gY3JlYXRlSG9vayhcInNwXCIgLyogTGlmZWN5Y2xlSG9va3MuU0VSVkVSX1BSRUZFVENIICovKTtcbmNvbnN0IG9uUmVuZGVyVHJpZ2dlcmVkID0gY3JlYXRlSG9vayhcInJ0Z1wiIC8qIExpZmVjeWNsZUhvb2tzLlJFTkRFUl9UUklHR0VSRUQgKi8pO1xuY29uc3Qgb25SZW5kZXJUcmFja2VkID0gY3JlYXRlSG9vayhcInJ0Y1wiIC8qIExpZmVjeWNsZUhvb2tzLlJFTkRFUl9UUkFDS0VEICovKTtcbmZ1bmN0aW9uIG9uRXJyb3JDYXB0dXJlZChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpIHtcbiAgICBpbmplY3RIb29rKFwiZWNcIiAvKiBMaWZlY3ljbGVIb29rcy5FUlJPUl9DQVBUVVJFRCAqLywgaG9vaywgdGFyZ2V0KTtcbn1cblxuLyoqXG5SdW50aW1lIGhlbHBlciBmb3IgYXBwbHlpbmcgZGlyZWN0aXZlcyB0byBhIHZub2RlLiBFeGFtcGxlIHVzYWdlOlxuXG5jb25zdCBjb21wID0gcmVzb2x2ZUNvbXBvbmVudCgnY29tcCcpXG5jb25zdCBmb28gPSByZXNvbHZlRGlyZWN0aXZlKCdmb28nKVxuY29uc3QgYmFyID0gcmVzb2x2ZURpcmVjdGl2ZSgnYmFyJylcblxucmV0dXJuIHdpdGhEaXJlY3RpdmVzKGgoY29tcCksIFtcbiAgW2ZvbywgdGhpcy54XSxcbiAgW2JhciwgdGhpcy55XVxuXSlcbiovXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSkge1xuICAgIGlmIChpc0J1aWx0SW5EaXJlY3RpdmUobmFtZSkpIHtcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBkaXJlY3RpdmUgaWRzIGFzIGN1c3RvbSBkaXJlY3RpdmUgaWQ6ICcgKyBuYW1lKTtcbiAgICB9XG59XG4vKipcbiAqIEFkZHMgZGlyZWN0aXZlcyB0byBhIFZOb2RlLlxuICovXG5mdW5jdGlvbiB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgZGlyZWN0aXZlcykge1xuICAgIGNvbnN0IGludGVybmFsSW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHdpdGhEaXJlY3RpdmVzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHJlbmRlciBmdW5jdGlvbnMuYCk7XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRFeHBvc2VQcm94eShpbnRlcm5hbEluc3RhbmNlKSB8fFxuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLnByb3h5O1xuICAgIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycyB8fCAodm5vZGUuZGlycyA9IFtdKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IFtkaXIsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyA9IEVNUFRZX09CSl0gPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXIpKSB7XG4gICAgICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgICAgICAgbW91bnRlZDogZGlyLFxuICAgICAgICAgICAgICAgIHVwZGF0ZWQ6IGRpclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyLmRlZXApIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBiaW5kaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBvbGRWYWx1ZTogdm9pZCAwLFxuICAgICAgICAgICAgYXJnLFxuICAgICAgICAgICAgbW9kaWZpZXJzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBwcmV2Vk5vZGUsIGluc3RhbmNlLCBuYW1lKSB7XG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzO1xuICAgIGNvbnN0IG9sZEJpbmRpbmdzID0gcHJldlZOb2RlICYmIHByZXZWTm9kZS5kaXJzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgICAgICBpZiAob2xkQmluZGluZ3MpIHtcbiAgICAgICAgICAgIGJpbmRpbmcub2xkVmFsdWUgPSBvbGRCaW5kaW5nc1tpXS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaG9vayA9IGJpbmRpbmcuZGlyW25hbWVdO1xuICAgICAgICBpZiAoaG9vaykge1xuICAgICAgICAgICAgLy8gZGlzYWJsZSB0cmFja2luZyBpbnNpZGUgYWxsIGxpZmVjeWNsZSBob29rc1xuICAgICAgICAgICAgLy8gc2luY2UgdGhleSBjYW4gcG90ZW50aWFsbHkgYmUgY2FsbGVkIGluc2lkZSBlZmZlY3RzLlxuICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDggLyogRXJyb3JDb2Rlcy5ESVJFQ1RJVkVfSE9PSyAqLywgW1xuICAgICAgICAgICAgICAgIHZub2RlLmVsLFxuICAgICAgICAgICAgICAgIGJpbmRpbmcsXG4gICAgICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICAgICAgcHJldlZOb2RlXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgQ09NUE9ORU5UUyA9ICdjb21wb25lbnRzJztcbmNvbnN0IERJUkVDVElWRVMgPSAnZGlyZWN0aXZlcyc7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnQobmFtZSwgbWF5YmVTZWxmUmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBuYW1lLCB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UpIHx8IG5hbWU7XG59XG5jb25zdCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UID0gU3ltYm9sKCk7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGlmIChpc1N0cmluZyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgY29tcG9uZW50LCBmYWxzZSkgfHwgY29tcG9uZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gaW52YWxpZCB0eXBlcyB3aWxsIGZhbGx0aHJvdWdoIHRvIGNyZWF0ZVZOb2RlIGFuZCByYWlzZSB3YXJuaW5nXG4gICAgICAgIHJldHVybiAoY29tcG9uZW50IHx8IE5VTExfRFlOQU1JQ19DT01QT05FTlQpO1xuICAgIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShuYW1lKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChESVJFQ1RJVkVTLCBuYW1lKTtcbn1cbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQodHlwZSwgbmFtZSwgd2Fybk1pc3NpbmcgPSB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRJbnN0YW5jZTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICAgICAgLy8gZXhwbGljaXQgc2VsZiBuYW1lIGhhcyBoaWdoZXN0IHByaW9yaXR5XG4gICAgICAgIGlmICh0eXBlID09PSBDT01QT05FTlRTKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmTmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50LCBmYWxzZSAvKiBkbyBub3QgaW5jbHVkZSBpbmZlcnJlZCBuYW1lIHRvIGF2b2lkIGJyZWFraW5nIGV4aXN0aW5nIGNvZGUgKi8pO1xuICAgICAgICAgICAgaWYgKHNlbGZOYW1lICYmXG4gICAgICAgICAgICAgICAgKHNlbGZOYW1lID09PSBuYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYW1lbGl6ZShuYW1lKSB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBcbiAgICAgICAgLy8gbG9jYWwgcmVnaXN0cmF0aW9uXG4gICAgICAgIC8vIGNoZWNrIGluc3RhbmNlW3R5cGVdIGZpcnN0IHdoaWNoIGlzIHJlc29sdmVkIGZvciBvcHRpb25zIEFQSVxuICAgICAgICByZXNvbHZlKGluc3RhbmNlW3R5cGVdIHx8IENvbXBvbmVudFt0eXBlXSwgbmFtZSkgfHxcbiAgICAgICAgICAgIC8vIGdsb2JhbCByZWdpc3RyYXRpb25cbiAgICAgICAgICAgIHJlc29sdmUoaW5zdGFuY2UuYXBwQ29udGV4dFt0eXBlXSwgbmFtZSk7XG4gICAgICAgIGlmICghcmVzICYmIG1heWJlU2VsZlJlZmVyZW5jZSkge1xuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gaW1wbGljaXQgc2VsZi1yZWZlcmVuY2VcbiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgICAgICAgICBjb25zdCBleHRyYSA9IHR5cGUgPT09IENPTVBPTkVOVFNcbiAgICAgICAgICAgICAgICA/IGBcXG5JZiB0aGlzIGlzIGEgbmF0aXZlIGN1c3RvbSBlbGVtZW50LCBtYWtlIHN1cmUgdG8gZXhjbHVkZSBpdCBmcm9tIGAgK1xuICAgICAgICAgICAgICAgICAgICBgY29tcG9uZW50IHJlc29sdXRpb24gdmlhIGNvbXBpbGVyT3B0aW9ucy5pc0N1c3RvbUVsZW1lbnQuYFxuICAgICAgICAgICAgICAgIDogYGA7XG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gcmVzb2x2ZSAke3R5cGUuc2xpY2UoMCwgLTEpfTogJHtuYW1lfSR7ZXh0cmF9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYHJlc29sdmUke2NhcGl0YWxpemUodHlwZS5zbGljZSgwLCAtMSkpfSBgICtcbiAgICAgICAgICAgIGBjYW4gb25seSBiZSB1c2VkIGluIHJlbmRlcigpIG9yIHNldHVwKCkuYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZShyZWdpc3RyeSwgbmFtZSkge1xuICAgIHJldHVybiAocmVnaXN0cnkgJiZcbiAgICAgICAgKHJlZ2lzdHJ5W25hbWVdIHx8XG4gICAgICAgICAgICByZWdpc3RyeVtjYW1lbGl6ZShuYW1lKV0gfHxcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpXSkpO1xufVxuXG4vKipcbiAqIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0KHNvdXJjZSwgcmVuZGVySXRlbSwgY2FjaGUsIGluZGV4KSB7XG4gICAgbGV0IHJldDtcbiAgICBjb25zdCBjYWNoZWQgPSAoY2FjaGUgJiYgY2FjaGVbaW5kZXhdKTtcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpIHx8IGlzU3RyaW5nKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNvdXJjZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2ldLCBpLCB1bmRlZmluZWQsIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIU51bWJlci5pc0ludGVnZXIoc291cmNlKSkge1xuICAgICAgICAgICAgd2FybihgVGhlIHYtZm9yIHJhbmdlIGV4cGVjdCBhbiBpbnRlZ2VyIHZhbHVlIGJ1dCBnb3QgJHtzb3VyY2V9LmApO1xuICAgICAgICB9XG4gICAgICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZTsgaSsrKSB7XG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKGkgKyAxLCBpLCB1bmRlZmluZWQsIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgICAgaWYgKHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICAgICAgICByZXQgPSBBcnJheS5mcm9tKHNvdXJjZSwgKGl0ZW0sIGkpID0+IHJlbmRlckl0ZW0oaXRlbSwgaSwgdW5kZWZpbmVkLCBjYWNoZWQgJiYgY2FjaGVkW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtrZXldLCBrZXksIGksIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXQgPSBbXTtcbiAgICB9XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlW2luZGV4XSA9IHJldDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgY3JlYXRpbmcgZHluYW1pYyBzbG90cyBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNsb3RzKHNsb3RzLCBkeW5hbWljU2xvdHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNTbG90cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzbG90ID0gZHluYW1pY1Nsb3RzW2ldO1xuICAgICAgICAvLyBhcnJheSBvZiBkeW5hbWljIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWZvcj1cIi4uLlwiICNbLi4uXT5cbiAgICAgICAgaWYgKGlzQXJyYXkoc2xvdCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2xvdC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3Rbal0ubmFtZV0gPSBzbG90W2pdLmZuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFsIHNpbmdsZSBzbG90IGdlbmVyYXRlZCBieSA8dGVtcGxhdGUgdi1pZj1cIi4uLlwiICNmb28+XG4gICAgICAgICAgICBzbG90c1tzbG90Lm5hbWVdID0gc2xvdC5rZXlcbiAgICAgICAgICAgICAgICA/ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHNsb3QuZm4oLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBicmFuY2gga2V5IHNvIGVhY2ggY29uZGl0aW9uYWwgYnJhbmNoIGlzIGNvbnNpZGVyZWQgYVxuICAgICAgICAgICAgICAgICAgICAvLyBkaWZmZXJlbnQgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5rZXkgPSBzbG90LmtleTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBzbG90LmZuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzbG90cztcbn1cblxuLyoqXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIGA8c2xvdC8+YFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdChzbG90cywgbmFtZSwgcHJvcHMgPSB7fSwgXG4vLyB0aGlzIGlzIG5vdCBhIHVzZXItZmFjaW5nIGZ1bmN0aW9uLCBzbyB0aGUgZmFsbGJhY2sgaXMgYWx3YXlzIGdlbmVyYXRlZCBieVxuLy8gdGhlIGNvbXBpbGVyIGFuZCBndWFyYW50ZWVkIHRvIGJlIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGFuIGFycmF5XG5mYWxsYmFjaywgbm9TbG90dGVkKSB7XG4gICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5pc0NFIHx8XG4gICAgICAgIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50ICYmXG4gICAgICAgICAgICBpc0FzeW5jV3JhcHBlcihjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50KSAmJlxuICAgICAgICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudC5pc0NFKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoJ3Nsb3QnLCBuYW1lID09PSAnZGVmYXVsdCcgPyBudWxsIDogeyBuYW1lIH0sIGZhbGxiYWNrICYmIGZhbGxiYWNrKCkpO1xuICAgIH1cbiAgICBsZXQgc2xvdCA9IHNsb3RzW25hbWVdO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgd2FybihgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGAgK1xuICAgICAgICAgICAgYGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIGAgK1xuICAgICAgICAgICAgYHBhcmVudCB0ZW1wbGF0ZS5gKTtcbiAgICAgICAgc2xvdCA9ICgpID0+IFtdO1xuICAgIH1cbiAgICAvLyBhIGNvbXBpbGVkIHNsb3QgZGlzYWJsZXMgYmxvY2sgdHJhY2tpbmcgYnkgZGVmYXVsdCB0byBhdm9pZCBtYW51YWxcbiAgICAvLyBpbnZvY2F0aW9uIGludGVyZmVyaW5nIHdpdGggdGVtcGxhdGUtYmFzZWQgYmxvY2sgdHJhY2tpbmcsIGJ1dCBpblxuICAgIC8vIGByZW5kZXJTbG90YCB3ZSBjYW4gYmUgc3VyZSB0aGF0IGl0J3MgdGVtcGxhdGUtYmFzZWQgc28gd2UgY2FuIGZvcmNlXG4gICAgLy8gZW5hYmxlIGl0LlxuICAgIGlmIChzbG90ICYmIHNsb3QuX2MpIHtcbiAgICAgICAgc2xvdC5fZCA9IGZhbHNlO1xuICAgIH1cbiAgICBvcGVuQmxvY2soKTtcbiAgICBjb25zdCB2YWxpZFNsb3RDb250ZW50ID0gc2xvdCAmJiBlbnN1cmVWYWxpZFZOb2RlKHNsb3QocHJvcHMpKTtcbiAgICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKEZyYWdtZW50LCB7XG4gICAgICAgIGtleTogcHJvcHMua2V5IHx8XG4gICAgICAgICAgICAvLyBzbG90IGNvbnRlbnQgYXJyYXkgb2YgYSBkeW5hbWljIGNvbmRpdGlvbmFsIHNsb3QgbWF5IGhhdmUgYSBicmFuY2hcbiAgICAgICAgICAgIC8vIGtleSBhdHRhY2hlZCBpbiB0aGUgYGNyZWF0ZVNsb3RzYCBoZWxwZXIsIHJlc3BlY3QgdGhhdFxuICAgICAgICAgICAgKHZhbGlkU2xvdENvbnRlbnQgJiYgdmFsaWRTbG90Q29udGVudC5rZXkpIHx8XG4gICAgICAgICAgICBgXyR7bmFtZX1gXG4gICAgfSwgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLCB2YWxpZFNsb3RDb250ZW50ICYmIHNsb3RzLl8gPT09IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqL1xuICAgICAgICA/IDY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovXG4gICAgICAgIDogLTIgLyogUGF0Y2hGbGFncy5CQUlMICovKTtcbiAgICBpZiAoIW5vU2xvdHRlZCAmJiByZW5kZXJlZC5zY29wZUlkKSB7XG4gICAgICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgJy1zJ107XG4gICAgfVxuICAgIGlmIChzbG90ICYmIHNsb3QuX2MpIHtcbiAgICAgICAgc2xvdC5fZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJlZDtcbn1cbmZ1bmN0aW9uIGVuc3VyZVZhbGlkVk5vZGUodm5vZGVzKSB7XG4gICAgcmV0dXJuIHZub2Rlcy5zb21lKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc1ZOb2RlKGNoaWxkKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50ICYmXG4gICAgICAgICAgICAhZW5zdXJlVmFsaWRWTm9kZShjaGlsZC5jaGlsZHJlbikpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pXG4gICAgICAgID8gdm5vZGVzXG4gICAgICAgIDogbnVsbDtcbn1cblxuLyoqXG4gKiBGb3IgcHJlZml4aW5nIGtleXMgaW4gdi1vbj1cIm9ialwiIHdpdGggXCJvblwiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaiwgcHJlc2VydmVDYXNlSWZOZWNlc3NhcnkpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChvYmopKSB7XG4gICAgICAgIHdhcm4oYHYtb24gd2l0aCBubyBhcmd1bWVudCBleHBlY3RzIGFuIG9iamVjdCB2YWx1ZS5gKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIHJldFtwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSAmJiAvW0EtWl0vLnRlc3Qoa2V5KVxuICAgICAgICAgICAgPyBgb246JHtrZXl9YFxuICAgICAgICAgICAgOiB0b0hhbmRsZXJLZXkoa2V5KV0gPSBvYmpba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiAjMjQzNyBJbiBWdWUgMywgZnVuY3Rpb25hbCBjb21wb25lbnRzIGRvIG5vdCBoYXZlIGEgcHVibGljIGluc3RhbmNlIHByb3h5IGJ1dFxuICogdGhleSBleGlzdCBpbiB0aGUgaW50ZXJuYWwgcGFyZW50IGNoYWluLiBGb3IgY29kZSB0aGF0IHJlbGllcyBvbiB0cmF2ZXJzaW5nXG4gKiBwdWJsaWMgJHBhcmVudCBjaGFpbnMsIHNraXAgZnVuY3Rpb25hbCBvbmVzIGFuZCBnbyB0byB0aGUgcGFyZW50IGluc3RlYWQuXG4gKi9cbmNvbnN0IGdldFB1YmxpY0luc3RhbmNlID0gKGkpID0+IHtcbiAgICBpZiAoIWkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKVxuICAgICAgICByZXR1cm4gZ2V0RXhwb3NlUHJveHkoaSkgfHwgaS5wcm94eTtcbiAgICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpO1xufTtcbmNvbnN0IHB1YmxpY1Byb3BlcnRpZXNNYXAgPSBcbi8vIE1vdmUgUFVSRSBtYXJrZXIgdG8gbmV3IGxpbmUgdG8gd29ya2Fyb3VuZCBjb21waWxlciBkaXNjYXJkaW5nIGl0XG4vLyBkdWUgdG8gdHlwZSBhbm5vdGF0aW9uXG4vKiNfX1BVUkVfXyovIGV4dGVuZChPYmplY3QuY3JlYXRlKG51bGwpLCB7XG4gICAgJDogaSA9PiBpLFxuICAgICRlbDogaSA9PiBpLnZub2RlLmVsLFxuICAgICRkYXRhOiBpID0+IGkuZGF0YSxcbiAgICAkcHJvcHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnByb3BzKSA6IGkucHJvcHMpLFxuICAgICRhdHRyczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkuYXR0cnMpIDogaS5hdHRycyksXG4gICAgJHNsb3RzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5zbG90cykgOiBpLnNsb3RzKSxcbiAgICAkcmVmczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucmVmcykgOiBpLnJlZnMpLFxuICAgICRwYXJlbnQ6IGkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxuICAgICRyb290OiBpID0+IGdldFB1YmxpY0luc3RhbmNlKGkucm9vdCksXG4gICAgJGVtaXQ6IGkgPT4gaS5lbWl0LFxuICAgICRvcHRpb25zOiBpID0+IChfX1ZVRV9PUFRJT05TX0FQSV9fID8gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaSkgOiBpLnR5cGUpLFxuICAgICRmb3JjZVVwZGF0ZTogaSA9PiBpLmYgfHwgKGkuZiA9ICgpID0+IHF1ZXVlSm9iKGkudXBkYXRlKSksXG4gICAgJG5leHRUaWNrOiBpID0+IGkubiB8fCAoaS5uID0gbmV4dFRpY2suYmluZChpLnByb3h5KSksXG4gICAgJHdhdGNoOiBpID0+IChfX1ZVRV9PUFRJT05TX0FQSV9fID8gaW5zdGFuY2VXYXRjaC5iaW5kKGkpIDogTk9PUClcbn0pO1xuY29uc3QgaXNSZXNlcnZlZFByZWZpeCA9IChrZXkpID0+IGtleSA9PT0gJ18nIHx8IGtleSA9PT0gJyQnO1xuY29uc3QgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0ge1xuICAgIGdldCh7IF86IGluc3RhbmNlIH0sIGtleSkge1xuICAgICAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcbiAgICAgICAgLy8gZm9yIGludGVybmFsIGZvcm1hdHRlcnMgdG8ga25vdyB0aGF0IHRoaXMgaXMgYSBWdWUgaW5zdGFuY2VcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgPT09ICdfX2lzVnVlJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJpb3JpdGl6ZSA8c2NyaXB0IHNldHVwPiBiaW5kaW5ncyBkdXJpbmcgZGV2LlxuICAgICAgICAvLyB0aGlzIGFsbG93cyBldmVuIHByb3BlcnRpZXMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJCB0byBiZSB1c2VkIC0gc28gdGhhdFxuICAgICAgICAvLyBpdCBhbGlnbnMgd2l0aCB0aGUgcHJvZHVjdGlvbiBiZWhhdmlvciB3aGVyZSB0aGUgcmVuZGVyIGZuIGlzIGlubGluZWQgYW5kXG4gICAgICAgIC8vIGluZGVlZCBoYXMgYWNjZXNzIHRvIGFsbCBkZWNsYXJlZCB2YXJpYWJsZXMuXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIHNldHVwU3RhdGUgIT09IEVNUFRZX09CSiAmJlxuICAgICAgICAgICAgc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiZcbiAgICAgICAgICAgIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRhdGEgLyBwcm9wcyAvIGN0eFxuICAgICAgICAvLyBUaGlzIGdldHRlciBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgcHJvcGVydHkgYWNjZXNzIG9uIHRoZSByZW5kZXIgY29udGV4dFxuICAgICAgICAvLyBkdXJpbmcgcmVuZGVyIGFuZCBpcyBhIG1ham9yIGhvdHNwb3QuIFRoZSBtb3N0IGV4cGVuc2l2ZSBwYXJ0IG9mIHRoaXNcbiAgICAgICAgLy8gaXMgdGhlIG11bHRpcGxlIGhhc093bigpIGNhbGxzLiBJdCdzIG11Y2ggZmFzdGVyIHRvIGRvIGEgc2ltcGxlIHByb3BlcnR5XG4gICAgICAgIC8vIGFjY2VzcyBvbiBhIHBsYWluIG9iamVjdCwgc28gd2UgdXNlIGFuIGFjY2Vzc0NhY2hlIG9iamVjdCAod2l0aCBudWxsXG4gICAgICAgIC8vIHByb3RvdHlwZSkgdG8gbWVtb2l6ZSB3aGF0IGFjY2VzcyB0eXBlIGEga2V5IGNvcnJlc3BvbmRzIHRvLlxuICAgICAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xuICAgICAgICBpZiAoa2V5WzBdICE9PSAnJCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xuICAgICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEgLyogQWNjZXNzVHlwZXMuU0VUVVAgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIgLyogQWNjZXNzVHlwZXMuREFUQSAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBBY2Nlc3NUeXBlcy5DT05URVhUICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDMgLyogQWNjZXNzVHlwZXMuUFJPUFMgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdDoganVzdCBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNldHVwU3RhdGUgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIEFjY2Vzc1R5cGVzLlNFVFVQICovO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMiAvKiBBY2Nlc3NUeXBlcy5EQVRBICovO1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIC8vIG9ubHkgY2FjaGUgb3RoZXIgcHJvcGVydGllcyB3aGVuIGluc3RhbmNlIGhhcyBkZWNsYXJlZCAodGh1cyBzdGFibGUpXG4gICAgICAgICAgICAvLyBwcm9wc1xuICAgICAgICAgICAgKG5vcm1hbGl6ZWRQcm9wcyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkgJiZcbiAgICAgICAgICAgICAgICBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogQWNjZXNzVHlwZXMuUFJPUFMgKi87XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogQWNjZXNzVHlwZXMuQ09OVEVYVCAqLztcbiAgICAgICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX19WVUVfT1BUSU9OU19BUElfXyB8fCBzaG91bGRDYWNoZUFjY2Vzcykge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAwIC8qIEFjY2Vzc1R5cGVzLk9USEVSICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB1YmxpY0dldHRlciA9IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XTtcbiAgICAgICAgbGV0IGNzc01vZHVsZSwgZ2xvYmFsUHJvcGVydGllcztcbiAgICAgICAgLy8gcHVibGljICR4eHggcHJvcGVydGllc1xuICAgICAgICBpZiAocHVibGljR2V0dGVyKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnJGF0dHJzJykge1xuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHVibGljR2V0dGVyKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgLy8gY3NzIG1vZHVsZSAoaW5qZWN0ZWQgYnkgdnVlLWxvYWRlcilcbiAgICAgICAgKGNzc01vZHVsZSA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJlxuICAgICAgICAgICAgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc01vZHVsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgICAgICAvLyB1c2VyIG1heSBzZXQgY3VzdG9tIHByb3BlcnRpZXMgdG8gYHRoaXNgIHRoYXQgc3RhcnQgd2l0aCBgJGBcbiAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIEFjY2Vzc1R5cGVzLkNPTlRFWFQgKi87XG4gICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXG4gICAgICAgICgoZ2xvYmFsUHJvcGVydGllcyA9IGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMpLFxuICAgICAgICAgICAgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSkpKSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFByb3BlcnRpZXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJlxuICAgICAgICAgICAgKCFpc1N0cmluZyhrZXkpIHx8XG4gICAgICAgICAgICAgICAgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcbiAgICAgICAgICAgICAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcbiAgICAgICAgICAgICAgICBrZXkuaW5kZXhPZignX192JykgIT09IDApKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gbXVzdCBiZSBhY2Nlc3NlZCB2aWEgJGRhdGEgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBhIHJlc2VydmVkIGAgK1xuICAgICAgICAgICAgICAgICAgICBgY2hhcmFjdGVyIChcIiRcIiBvciBcIl9cIikgYW5kIGlzIG5vdCBwcm94aWVkIG9uIHRoZSByZW5kZXIgY29udGV4dC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluc3RhbmNlID09PSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHdhcyBhY2Nlc3NlZCBkdXJpbmcgcmVuZGVyIGAgK1xuICAgICAgICAgICAgICAgICAgICBgYnV0IGlzIG5vdCBkZWZpbmVkIG9uIGluc3RhbmNlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgc2V0dXBTdGF0ZSwgY3R4IH0gPSBpbnN0YW5jZTtcbiAgICAgICAgaWYgKHNldHVwU3RhdGUgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgICAgICAgc2V0dXBTdGF0ZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzT3duKGluc3RhbmNlLnByb3BzLCBrZXkpKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwcm9wIFwiJHtrZXl9XCIuIFByb3BzIGFyZSByZWFkb25seS5gLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleVswXSA9PT0gJyQnICYmIGtleS5zbGljZSgxKSBpbiBpbnN0YW5jZSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHVibGljIHByb3BlcnR5IFwiJHtrZXl9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUHJvcGVydGllcyBzdGFydGluZyB3aXRoICQgYXJlIHJlc2VydmVkIGFuZCByZWFkb25seS5gLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXMoeyBfOiB7IGRhdGEsIHNldHVwU3RhdGUsIGFjY2Vzc0NhY2hlLCBjdHgsIGFwcENvbnRleHQsIHByb3BzT3B0aW9ucyB9IH0sIGtleSkge1xuICAgICAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xuICAgICAgICByZXR1cm4gKCEhYWNjZXNzQ2FjaGVba2V5XSB8fFxuICAgICAgICAgICAgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkgfHxcbiAgICAgICAgICAgIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHx8XG4gICAgICAgICAgICAoKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkgfHxcbiAgICAgICAgICAgIGhhc093bihjdHgsIGtleSkgfHxcbiAgICAgICAgICAgIGhhc093bihwdWJsaWNQcm9wZXJ0aWVzTWFwLCBrZXkpIHx8XG4gICAgICAgICAgICBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSk7XG4gICAgfSxcbiAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5nZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gaW52YWxpZGF0ZSBrZXkgY2FjaGUgb2YgYSBnZXR0ZXIgYmFzZWQgcHJvcGVydHkgIzU0MTdcbiAgICAgICAgICAgIHRhcmdldC5fLmFjY2Vzc0NhY2hlW2tleV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc093bihkZXNjcmlwdG9yLCAndmFsdWUnKSkge1xuICAgICAgICAgICAgdGhpcy5zZXQodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IudmFsdWUsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG59O1xuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZmFsc2UpIHtcbiAgICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcbiAgICAgICAgd2FybihgQXZvaWQgYXBwIGxvZ2ljIHRoYXQgcmVsaWVzIG9uIGVudW1lcmF0aW5nIGtleXMgb24gYSBjb21wb25lbnQgaW5zdGFuY2UuIGAgK1xuICAgICAgICAgICAgYFRoZSBrZXlzIHdpbGwgYmUgZW1wdHkgaW4gcHJvZHVjdGlvbiBtb2RlIHRvIGF2b2lkIHBlcmZvcm1hbmNlIG92ZXJoZWFkLmApO1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gICAgfTtcbn1cbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMsIHtcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgLy8gZmFzdCBwYXRoIGZvciB1bnNjb3BhYmxlcyB3aGVuIHVzaW5nIGB3aXRoYCBibG9ja1xuICAgICAgICBpZiAoa2V5ID09PSBTeW1ib2wudW5zY29wYWJsZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmdldCh0YXJnZXQsIGtleSwgdGFyZ2V0KTtcbiAgICB9LFxuICAgIGhhcyhfLCBrZXkpIHtcbiAgICAgICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSAnXycgJiYgIWlzR2xvYmFsbHlXaGl0ZWxpc3RlZChrZXkpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XG4gICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBfIHdoaWNoIGlzIGEgcmVzZXJ2ZWQgcHJlZml4IGZvciBWdWUgaW50ZXJuYWxzLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXM7XG4gICAgfVxufSk7XG4vLyBkZXYgb25seVxuLy8gSW4gZGV2IG1vZGUsIHRoZSBwcm94eSB0YXJnZXQgZXhwb3NlcyB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHNlZW4gb24gYHRoaXNgXG4vLyBmb3IgZWFzaWVyIGNvbnNvbGUgaW5zcGVjdGlvbi4gSW4gcHJvZCBtb2RlIGl0IHdpbGwgYmUgYW4gZW1wdHkgb2JqZWN0IHNvXG4vLyB0aGVzZSBwcm9wZXJ0aWVzIGRlZmluaXRpb25zIGNhbiBiZSBza2lwcGVkLlxuZnVuY3Rpb24gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgIC8vIGV4cG9zZSBpbnRlcm5hbCBpbnN0YW5jZSBmb3IgcHJveHkgaGFuZGxlcnNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgX2AsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZVxuICAgIH0pO1xuICAgIC8vIGV4cG9zZSBwdWJsaWMgcHJvcGVydGllc1xuICAgIE9iamVjdC5rZXlzKHB1YmxpY1Byb3BlcnRpZXNNYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGdldDogKCkgPT4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKSxcbiAgICAgICAgICAgIC8vIGludGVyY2VwdGVkIGJ5IHRoZSBwcm94eSBzbyBubyBuZWVkIGZvciBpbXBsZW1lbnRhdGlvbixcbiAgICAgICAgICAgIC8vIGJ1dCBuZWVkZWQgdG8gcHJldmVudCBzZXQgZXJyb3JzXG4gICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8vIGRldiBvbmx5XG5mdW5jdGlvbiBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgY3R4LCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdIH0gPSBpbnN0YW5jZTtcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZS5wcm9wc1trZXldLFxuICAgICAgICAgICAgICAgIHNldDogTk9PUFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIGRldiBvbmx5XG5mdW5jdGlvbiBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xuICAgIE9iamVjdC5rZXlzKHRvUmF3KHNldHVwU3RhdGUpKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICghc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXApIHtcbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHJldHVybiBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBcIiRcIiBvciBcIl9cIiBgICtcbiAgICAgICAgICAgICAgICAgICAgYHdoaWNoIGFyZSByZXNlcnZlZCBwcmVmaXhlcyBmb3IgVnVlIGludGVybmFscy5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHNldHVwU3RhdGVba2V5XSxcbiAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSB7XG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJldHVybiAodHlwZSwga2V5KSA9PiB7XG4gICAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgICAgICB3YXJuKGAke3R5cGV9IHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluICR7Y2FjaGVba2V5XX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWNoZVtrZXldID0gdHlwZTtcbiAgICAgICAgfVxuICAgIH07XG59XG5sZXQgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xuZnVuY3Rpb24gYXBwbHlPcHRpb25zKGluc3RhbmNlKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKTtcbiAgICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XG4gICAgY29uc3QgY3R4ID0gaW5zdGFuY2UuY3R4O1xuICAgIC8vIGRvIG5vdCBjYWNoZSBwcm9wZXJ0eSBhY2Nlc3Mgb24gcHVibGljIHByb3h5IGR1cmluZyBzdGF0ZSBpbml0aWFsaXphdGlvblxuICAgIHNob3VsZENhY2hlQWNjZXNzID0gZmFsc2U7XG4gICAgLy8gY2FsbCBiZWZvcmVDcmVhdGUgZmlyc3QgYmVmb3JlIGFjY2Vzc2luZyBvdGhlciBvcHRpb25zIHNpbmNlXG4gICAgLy8gdGhlIGhvb2sgbWF5IG11dGF0ZSByZXNvbHZlZCBvcHRpb25zICgjMjc5MSlcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVDcmVhdGUpIHtcbiAgICAgICAgY2FsbEhvb2sob3B0aW9ucy5iZWZvcmVDcmVhdGUsIGluc3RhbmNlLCBcImJjXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX0NSRUFURSAqLyk7XG4gICAgfVxuICAgIGNvbnN0IHsgXG4gICAgLy8gc3RhdGVcbiAgICBkYXRhOiBkYXRhT3B0aW9ucywgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucywgbWV0aG9kcywgd2F0Y2g6IHdhdGNoT3B0aW9ucywgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsIGluamVjdDogaW5qZWN0T3B0aW9ucywgXG4gICAgLy8gbGlmZWN5Y2xlXG4gICAgY3JlYXRlZCwgYmVmb3JlTW91bnQsIG1vdW50ZWQsIGJlZm9yZVVwZGF0ZSwgdXBkYXRlZCwgYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCwgYmVmb3JlRGVzdHJveSwgYmVmb3JlVW5tb3VudCwgZGVzdHJveWVkLCB1bm1vdW50ZWQsIHJlbmRlciwgcmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJpZ2dlcmVkLCBlcnJvckNhcHR1cmVkLCBzZXJ2ZXJQcmVmZXRjaCwgXG4gICAgLy8gcHVibGljIEFQSVxuICAgIGV4cG9zZSwgaW5oZXJpdEF0dHJzLCBcbiAgICAvLyBhc3NldHNcbiAgICBjb21wb25lbnRzLCBkaXJlY3RpdmVzLCBmaWx0ZXJzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCBbcHJvcHNPcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHNPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiUHJvcHNcIiAvKiBPcHRpb25UeXBlcy5QUk9QUyAqLywga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBvcHRpb25zIGluaXRpYWxpemF0aW9uIG9yZGVyICh0byBiZSBjb25zaXN0ZW50IHdpdGggVnVlIDIpOlxuICAgIC8vIC0gcHJvcHMgKGFscmVhZHkgZG9uZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24pXG4gICAgLy8gLSBpbmplY3RcbiAgICAvLyAtIG1ldGhvZHNcbiAgICAvLyAtIGRhdGEgKGRlZmVycmVkIHNpbmNlIGl0IHJlbGllcyBvbiBgdGhpc2AgYWNjZXNzKVxuICAgIC8vIC0gY29tcHV0ZWRcbiAgICAvLyAtIHdhdGNoIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcbiAgICBpZiAoaW5qZWN0T3B0aW9ucykge1xuICAgICAgICByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcywgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcudW53cmFwSW5qZWN0ZWRSZWYpO1xuICAgIH1cbiAgICBpZiAobWV0aG9kcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBkZXYgbW9kZSwgd2UgdXNlIHRoZSBgY3JlYXRlUmVuZGVyQ29udGV4dGAgZnVuY3Rpb24gdG8gZGVmaW5lXG4gICAgICAgICAgICAgICAgLy8gbWV0aG9kcyB0byB0aGUgcHJveHkgdGFyZ2V0LCBhbmQgdGhvc2UgYXJlIHJlYWQtb25seSBidXRcbiAgICAgICAgICAgICAgICAvLyByZWNvbmZpZ3VyYWJsZSwgc28gaXQgbmVlZHMgdG8gYmUgcmVkZWZpbmVkIGhlcmVcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eFtrZXldID0gbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIk1ldGhvZHNcIiAvKiBPcHRpb25UeXBlcy5NRVRIT0RTICovLCBrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYE1ldGhvZCBcIiR7a2V5fVwiIGhhcyB0eXBlIFwiJHt0eXBlb2YgbWV0aG9kSGFuZGxlcn1cIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIGAgK1xuICAgICAgICAgICAgICAgICAgICBgRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihkYXRhT3B0aW9ucykpIHtcbiAgICAgICAgICAgIHdhcm4oYFRoZSBkYXRhIG9wdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24uIGAgK1xuICAgICAgICAgICAgICAgIGBQbGFpbiBvYmplY3QgdXNhZ2UgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gZGF0YU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1Byb21pc2UoZGF0YSkpIHtcbiAgICAgICAgICAgIHdhcm4oYGRhdGEoKSByZXR1cm5lZCBhIFByb21pc2UgLSBub3RlIGRhdGEoKSBjYW5ub3QgYmUgYXN5bmM7IElmIHlvdSBgICtcbiAgICAgICAgICAgICAgICBgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBgICtcbiAgICAgICAgICAgICAgICBgYXN5bmMgc2V0dXAoKSArIDxTdXNwZW5zZT4uYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYGRhdGEoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC5gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmRhdGEgPSByZWFjdGl2ZShkYXRhKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkRhdGFcIiAvKiBPcHRpb25UeXBlcy5EQVRBICovLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBleHBvc2UgZGF0YSBvbiBjdHggZHVyaW5nIGRldlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBkYXRhW2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzdGF0ZSBpbml0aWFsaXphdGlvbiBjb21wbGV0ZSBhdCB0aGlzIHBvaW50IC0gc3RhcnQgY2FjaGluZyBhY2Nlc3NcbiAgICBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG4gICAgaWYgKGNvbXB1dGVkT3B0aW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdCA9IGNvbXB1dGVkT3B0aW9uc1trZXldO1xuICAgICAgICAgICAgY29uc3QgZ2V0ID0gaXNGdW5jdGlvbihvcHQpXG4gICAgICAgICAgICAgICAgPyBvcHQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxuICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbihvcHQuZ2V0KVxuICAgICAgICAgICAgICAgICAgICA/IG9wdC5nZXQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGdldCA9PT0gTk9PUCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYENvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaGFzIG5vIGdldHRlci5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNldCA9ICFpc0Z1bmN0aW9uKG9wdCkgJiYgaXNGdW5jdGlvbihvcHQuc2V0KVxuICAgICAgICAgICAgICAgID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpXG4gICAgICAgICAgICAgICAgOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgPyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb21wdXRlZCh7XG4gICAgICAgICAgICAgICAgZ2V0LFxuICAgICAgICAgICAgICAgIHNldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGMudmFsdWUsXG4gICAgICAgICAgICAgICAgc2V0OiB2ID0+IChjLnZhbHVlID0gdilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkNvbXB1dGVkXCIgLyogT3B0aW9uVHlwZXMuQ09NUFVURUQgKi8sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdhdGNoT3B0aW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB3YXRjaE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNyZWF0ZVdhdGNoZXIod2F0Y2hPcHRpb25zW2tleV0sIGN0eCwgcHVibGljVGhpcywga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBpc0Z1bmN0aW9uKHByb3ZpZGVPcHRpb25zKVxuICAgICAgICAgICAgPyBwcm92aWRlT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMpXG4gICAgICAgICAgICA6IHByb3ZpZGVPcHRpb25zO1xuICAgICAgICBSZWZsZWN0Lm93bktleXMocHJvdmlkZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCBwcm92aWRlc1trZXldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChjcmVhdGVkKSB7XG4gICAgICAgIGNhbGxIb29rKGNyZWF0ZWQsIGluc3RhbmNlLCBcImNcIiAvKiBMaWZlY3ljbGVIb29rcy5DUkVBVEVEICovKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJMaWZlY3ljbGVIb29rKHJlZ2lzdGVyLCBob29rKSB7XG4gICAgICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICAgICAgICBob29rLmZvckVhY2goX2hvb2sgPT4gcmVnaXN0ZXIoX2hvb2suYmluZChwdWJsaWNUaGlzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhvb2spIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyKGhvb2suYmluZChwdWJsaWNUaGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlTW91bnQsIGJlZm9yZU1vdW50KTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Nb3VudGVkLCBtb3VudGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVcGRhdGUsIGJlZm9yZVVwZGF0ZSk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uVXBkYXRlZCwgdXBkYXRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQWN0aXZhdGVkLCBhY3RpdmF0ZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkRlYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uRXJyb3JDYXB0dXJlZCwgZXJyb3JDYXB0dXJlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJhY2tlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJpZ2dlcmVkLCByZW5kZXJUcmlnZ2VyZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZVVubW91bnQsIGJlZm9yZVVubW91bnQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVubW91bnRlZCwgdW5tb3VudGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25TZXJ2ZXJQcmVmZXRjaCwgc2VydmVyUHJlZmV0Y2gpO1xuICAgIGlmIChpc0FycmF5KGV4cG9zZSkpIHtcbiAgICAgICAgaWYgKGV4cG9zZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9zZWQgPSBpbnN0YW5jZS5leHBvc2VkIHx8IChpbnN0YW5jZS5leHBvc2VkID0ge30pO1xuICAgICAgICAgICAgZXhwb3NlLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3NlZCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcHVibGljVGhpc1trZXldLFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IHZhbCA9PiAocHVibGljVGhpc1trZXldID0gdmFsKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmV4cG9zZWQgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBvcHRpb25zIHRoYXQgYXJlIGhhbmRsZWQgd2hlbiBjcmVhdGluZyB0aGUgaW5zdGFuY2UgYnV0IGFsc28gbmVlZCB0byBiZVxuICAgIC8vIGFwcGxpZWQgZnJvbSBtaXhpbnNcbiAgICBpZiAocmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCkge1xuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSByZW5kZXI7XG4gICAgfVxuICAgIGlmIChpbmhlcml0QXR0cnMgIT0gbnVsbCkge1xuICAgICAgICBpbnN0YW5jZS5pbmhlcml0QXR0cnMgPSBpbmhlcml0QXR0cnM7XG4gICAgfVxuICAgIC8vIGFzc2V0IG9wdGlvbnMuXG4gICAgaWYgKGNvbXBvbmVudHMpXG4gICAgICAgIGluc3RhbmNlLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgIGlmIChkaXJlY3RpdmVzKVxuICAgICAgICBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbn1cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3Rpb25zKGluamVjdE9wdGlvbnMsIGN0eCwgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gTk9PUCwgdW53cmFwUmVmID0gZmFsc2UpIHtcbiAgICBpZiAoaXNBcnJheShpbmplY3RPcHRpb25zKSkge1xuICAgICAgICBpbmplY3RPcHRpb25zID0gbm9ybWFsaXplSW5qZWN0KGluamVjdE9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbmplY3RPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IGluamVjdE9wdGlvbnNba2V5XTtcbiAgICAgICAgbGV0IGluamVjdGVkO1xuICAgICAgICBpZiAoaXNPYmplY3Qob3B0KSkge1xuICAgICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBvcHQpIHtcbiAgICAgICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXksIG9wdC5kZWZhdWx0LCB0cnVlIC8qIHRyZWF0IGRlZmF1bHQgZnVuY3Rpb24gYXMgZmFjdG9yeSAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5qZWN0ZWQgPSBpbmplY3Qob3B0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWYoaW5qZWN0ZWQpKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHJlbW92ZSB0aGUgY2hlY2sgaW4gMy4zXG4gICAgICAgICAgICBpZiAodW53cmFwUmVmKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBpbmplY3RlZC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiB2ID0+IChpbmplY3RlZC52YWx1ZSA9IHYpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYGluamVjdGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYSByZWYgYW5kIHdpbGwgYmUgYXV0by11bndyYXBwZWQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgYW5kIG5vIGxvbmdlciBuZWVkcyBcXGAudmFsdWVcXGAgaW4gdGhlIG5leHQgbWlub3IgcmVsZWFzZS4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgVG8gb3B0LWluIHRvIHRoZSBuZXcgYmVoYXZpb3Igbm93LCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBzZXQgXFxgYXBwLmNvbmZpZy51bndyYXBJbmplY3RlZFJlZiA9IHRydWVcXGAgKHRoaXMgY29uZmlnIGlzIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHRlbXBvcmFyeSBhbmQgd2lsbCBub3QgYmUgbmVlZGVkIGluIHRoZSBmdXR1cmUuKWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3RlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBPcHRpb25UeXBlcy5JTkpFQ1QgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjYWxsSG9vayhob29rLCBpbnN0YW5jZSwgdHlwZSkge1xuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGlzQXJyYXkoaG9vaylcbiAgICAgICAgPyBob29rLm1hcChoID0+IGguYmluZChpbnN0YW5jZS5wcm94eSkpXG4gICAgICAgIDogaG9vay5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlcihyYXcsIGN0eCwgcHVibGljVGhpcywga2V5KSB7XG4gICAgY29uc3QgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKCcuJylcbiAgICAgICAgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIGtleSlcbiAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW2tleV07XG4gICAgaWYgKGlzU3RyaW5nKHJhdykpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGN0eFtyYXddO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXd9XCJgLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCByYXcuYmluZChwdWJsaWNUaGlzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHJhdykpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgICAgICAgcmF3LmZvckVhY2gociA9PiBjcmVhdGVXYXRjaGVyKHIsIGN0eCwgcHVibGljVGhpcywga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaXNGdW5jdGlvbihyYXcuaGFuZGxlcilcbiAgICAgICAgICAgICAgICA/IHJhdy5oYW5kbGVyLmJpbmQocHVibGljVGhpcylcbiAgICAgICAgICAgICAgICA6IGN0eFtyYXcuaGFuZGxlcl07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlciwgcmF3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIG9wdGlvbjogXCIke2tleX1cImAsIHJhdyk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXNvbHZlIG1lcmdlZCBvcHRpb25zIGFuZCBjYWNoZSBpdCBvbiB0aGUgY29tcG9uZW50LlxuICogVGhpcyBpcyBkb25lIG9ubHkgb25jZSBwZXItY29tcG9uZW50IHNpbmNlIHRoZSBtZXJnaW5nIGRvZXMgbm90IGludm9sdmVcbiAqIGluc3RhbmNlcy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBiYXNlID0gaW5zdGFuY2UudHlwZTtcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGJhc2U7XG4gICAgY29uc3QgeyBtaXhpbnM6IGdsb2JhbE1peGlucywgb3B0aW9uc0NhY2hlOiBjYWNoZSwgY29uZmlnOiB7IG9wdGlvbk1lcmdlU3RyYXRlZ2llcyB9IH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0O1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChiYXNlKTtcbiAgICBsZXQgcmVzb2x2ZWQ7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgICByZXNvbHZlZCA9IGNhY2hlZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWdsb2JhbE1peGlucy5sZW5ndGggJiYgIW1peGlucyAmJiAhZXh0ZW5kc09wdGlvbnMpIHtcbiAgICAgICAge1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSBiYXNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXNvbHZlZCA9IHt9O1xuICAgICAgICBpZiAoZ2xvYmFsTWl4aW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZ2xvYmFsTWl4aW5zLmZvckVhY2gobSA9PiBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIG0sIG9wdGlvbk1lcmdlU3RyYXRlZ2llcywgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlT3B0aW9ucyhyZXNvbHZlZCwgYmFzZSwgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGJhc2UpKSB7XG4gICAgICAgIGNhY2hlLnNldChiYXNlLCByZXNvbHZlZCk7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbn1cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyh0bywgZnJvbSwgc3RyYXRzLCBhc01peGluID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XG4gICAgaWYgKGV4dGVuZHNPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIHN0cmF0cywgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChtaXhpbnMpIHtcbiAgICAgICAgbWl4aW5zLmZvckVhY2goKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgc3RyYXRzLCB0cnVlKSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICAgICAgaWYgKGFzTWl4aW4gJiYga2V5ID09PSAnZXhwb3NlJykge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgd2FybihgXCJleHBvc2VcIiBvcHRpb24gaXMgaWdub3JlZCB3aGVuIGRlY2xhcmVkIGluIG1peGlucyBvciBleHRlbmRzLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYEl0IHNob3VsZCBvbmx5IGJlIGRlY2xhcmVkIGluIHRoZSBiYXNlIGNvbXBvbmVudCBpdHNlbGYuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHJhdCA9IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHNba2V5XSB8fCAoc3RyYXRzICYmIHN0cmF0c1trZXldKTtcbiAgICAgICAgICAgIHRvW2tleV0gPSBzdHJhdCA/IHN0cmF0KHRvW2tleV0sIGZyb21ba2V5XSkgOiBmcm9tW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xufVxuY29uc3QgaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyA9IHtcbiAgICBkYXRhOiBtZXJnZURhdGFGbixcbiAgICBwcm9wczogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIGVtaXRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgLy8gb2JqZWN0c1xuICAgIG1ldGhvZHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICBjb21wdXRlZDogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIC8vIGxpZmVjeWNsZVxuICAgIGJlZm9yZUNyZWF0ZTogbWVyZ2VBc0FycmF5LFxuICAgIGNyZWF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5LFxuICAgIG1vdW50ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBiZWZvcmVVcGRhdGU6IG1lcmdlQXNBcnJheSxcbiAgICB1cGRhdGVkOiBtZXJnZUFzQXJyYXksXG4gICAgYmVmb3JlRGVzdHJveTogbWVyZ2VBc0FycmF5LFxuICAgIGJlZm9yZVVubW91bnQ6IG1lcmdlQXNBcnJheSxcbiAgICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICB1bm1vdW50ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGVycm9yQ2FwdHVyZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBzZXJ2ZXJQcmVmZXRjaDogbWVyZ2VBc0FycmF5LFxuICAgIC8vIGFzc2V0c1xuICAgIGNvbXBvbmVudHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICBkaXJlY3RpdmVzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgLy8gd2F0Y2hcbiAgICB3YXRjaDogbWVyZ2VXYXRjaE9wdGlvbnMsXG4gICAgLy8gcHJvdmlkZSAvIGluamVjdFxuICAgIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxuICAgIGluamVjdDogbWVyZ2VJbmplY3Rcbn07XG5mdW5jdGlvbiBtZXJnZURhdGFGbih0bywgZnJvbSkge1xuICAgIGlmICghZnJvbSkge1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuICAgIGlmICghdG8pIHtcbiAgICAgICAgcmV0dXJuIGZyb207XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4oKSB7XG4gICAgICAgIHJldHVybiAoZXh0ZW5kKShpc0Z1bmN0aW9uKHRvKSA/IHRvLmNhbGwodGhpcywgdGhpcykgOiB0bywgaXNGdW5jdGlvbihmcm9tKSA/IGZyb20uY2FsbCh0aGlzLCB0aGlzKSA6IGZyb20pO1xuICAgIH07XG59XG5mdW5jdGlvbiBtZXJnZUluamVjdCh0bywgZnJvbSkge1xuICAgIHJldHVybiBtZXJnZU9iamVjdE9wdGlvbnMobm9ybWFsaXplSW5qZWN0KHRvKSwgbm9ybWFsaXplSW5qZWN0KGZyb20pKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdChyYXcpIHtcbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzW3Jhd1tpXV0gPSByYXdbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIHJhdztcbn1cbmZ1bmN0aW9uIG1lcmdlQXNBcnJheSh0bywgZnJvbSkge1xuICAgIHJldHVybiB0byA/IFsuLi5uZXcgU2V0KFtdLmNvbmNhdCh0bywgZnJvbSkpXSA6IGZyb207XG59XG5mdW5jdGlvbiBtZXJnZU9iamVjdE9wdGlvbnModG8sIGZyb20pIHtcbiAgICByZXR1cm4gdG8gPyBleHRlbmQoZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHRvKSwgZnJvbSkgOiBmcm9tO1xufVxuZnVuY3Rpb24gbWVyZ2VXYXRjaE9wdGlvbnModG8sIGZyb20pIHtcbiAgICBpZiAoIXRvKVxuICAgICAgICByZXR1cm4gZnJvbTtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiB0bztcbiAgICBjb25zdCBtZXJnZWQgPSBleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSBtZXJnZUFzQXJyYXkodG9ba2V5XSwgZnJvbVtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgaXNTdGF0ZWZ1bCwgLy8gcmVzdWx0IG9mIGJpdHdpc2UgZmxhZyBjb21wYXJpc29uXG5pc1NTUiA9IGZhbHNlKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7fTtcbiAgICBjb25zdCBhdHRycyA9IHt9O1xuICAgIGRlZihhdHRycywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xuICAgIGluc3RhbmNlLnByb3BzRGVmYXVsdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycyk7XG4gICAgLy8gZW5zdXJlIGFsbCBkZWNsYXJlZCBwcm9wIGtleXMgYXJlIHByZXNlbnRcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAoaXNTdGF0ZWZ1bCkge1xuICAgICAgICAvLyBzdGF0ZWZ1bFxuICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS50eXBlLnByb3BzKSB7XG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIG9wdGlvbmFsIHByb3BzLCBwcm9wcyA9PT0gYXR0cnNcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIGRlY2xhcmVkIHByb3BzXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IHByb3BzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlLmF0dHJzID0gYXR0cnM7XG59XG5mdW5jdGlvbiBpc0luSG1yQ29udGV4dChpbnN0YW5jZSkge1xuICAgIHdoaWxlIChpbnN0YW5jZSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5fX2htcklkKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UucGFyZW50O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcmF3UHJldlByb3BzLCBvcHRpbWl6ZWQpIHtcbiAgICBjb25zdCB7IHByb3BzLCBhdHRycywgdm5vZGU6IHsgcGF0Y2hGbGFnIH0gfSA9IGluc3RhbmNlO1xuICAgIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICBjb25zdCBbb3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAvLyBhbHdheXMgZm9yY2UgZnVsbCBkaWZmIGluIGRldlxuICAgIC8vIC0gIzE5NDIgaWYgaG1yIGlzIGVuYWJsZWQgd2l0aCBzZmMgY29tcG9uZW50XG4gICAgLy8gLSB2aXRlIzg3MiBub24tc2ZjIGNvbXBvbmVudCB1c2VkIGJ5IHNmYyBjb21wb25lbnRcbiAgICAhKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0luSG1yQ29udGV4dChpbnN0YW5jZSkpICYmXG4gICAgICAgIChvcHRpbWl6ZWQgfHwgcGF0Y2hGbGFnID4gMCkgJiZcbiAgICAgICAgIShwYXRjaEZsYWcgJiAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi8pKSB7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBhdGNoRmxhZ3MuUFJPUFMgKi8pIHtcbiAgICAgICAgICAgIC8vIENvbXBpbGVyLWdlbmVyYXRlZCBwcm9wcyAmIG5vIGtleXMgY2hhbmdlLCBqdXN0IHNldCB0aGUgdXBkYXRlZFxuICAgICAgICAgICAgLy8gdGhlIHByb3BzLlxuICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IGluc3RhbmNlLnZub2RlLmR5bmFtaWNQcm9wcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgdGhlIHByb3Aga2V5IGlzIGEgZGVjbGFyZWQgZW1pdCBldmVudCBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGlmIChpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBST1BTIGZsYWcgZ3VhcmFudGVlcyByYXdQcm9wcyB0byBiZSBub24tbnVsbFxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAvLyBhdHRyIC8gcHJvcHMgc2VwYXJhdGlvbiB3YXMgZG9uZSBvbiBpbml0IGFuZCB3aWxsIGJlIGNvbnNpc3RlbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjb2RlIHBhdGgsIHNvIGp1c3QgY2hlY2sgaWYgYXR0cnMgaGF2ZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihhdHRycywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBhdHRyc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxpemVkS2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBjYW1lbGl6ZWRLZXksIHZhbHVlLCBpbnN0YW5jZSwgZmFsc2UgLyogaXNBYnNlbnQgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGZ1bGwgcHJvcHMgdXBkYXRlLlxuICAgICAgICBpZiAoc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKSkge1xuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiBjYXNlIG9mIGR5bmFtaWMgcHJvcHMsIGNoZWNrIGlmIHdlIG5lZWQgdG8gZGVsZXRlIGtleXMgZnJvbVxuICAgICAgICAvLyB0aGUgcHJvcHMgb2JqZWN0XG4gICAgICAgIGxldCBrZWJhYktleTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3Q3VycmVudFByb3BzKSB7XG4gICAgICAgICAgICBpZiAoIXJhd1Byb3BzIHx8XG4gICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgICAgICAgICAgICghaGFzT3duKHJhd1Byb3BzLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhlIG9yaWdpbmFsIHByb3BzIHdhcyBwYXNzZWQgaW4gYXMga2ViYWItY2FzZVxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgY29udmVydGVkIHRvIGNhbWVsQ2FzZSAoIzk1NSlcbiAgICAgICAgICAgICAgICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1ByZXZQcm9wcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgKHJhd1ByZXZQcm9wc1trZXldICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3Iga2ViYWItY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCB1bmRlZmluZWQsIGluc3RhbmNlLCB0cnVlIC8qIGlzQWJzZW50ICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGZ1bmN0aW9uYWwgY29tcG9uZW50IHcvbyBwcm9wcyBkZWNsYXJhdGlvbiwgcHJvcHMgYW5kXG4gICAgICAgIC8vIGF0dHJzIHBvaW50IHRvIHRoZSBzYW1lIG9iamVjdCBzbyBpdCBzaG91bGQgYWxyZWFkeSBoYXZlIGJlZW4gdXBkYXRlZC5cbiAgICAgICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fFxuICAgICAgICAgICAgICAgICAgICAoIWhhc093bihyYXdQcm9wcywga2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFmYWxzZSApKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gdHJpZ2dlciB1cGRhdGVzIGZvciAkYXR0cnMgaW4gY2FzZSBpdCdzIHVzZWQgaW4gY29tcG9uZW50IHNsb3RzXG4gICAgaWYgKGhhc0F0dHJzQ2hhbmdlZCkge1xuICAgICAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLywgJyRhdHRycycpO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKSB7XG4gICAgY29uc3QgW29wdGlvbnMsIG5lZWRDYXN0S2V5c10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGxldCByYXdDYXN0VmFsdWVzO1xuICAgIGlmIChyYXdQcm9wcykge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gcmF3UHJvcHMpIHtcbiAgICAgICAgICAgIC8vIGtleSwgcmVmIGFyZSByZXNlcnZlZCBhbmQgbmV2ZXIgcGFzc2VkIGRvd25cbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgICAgICAvLyBwcm9wIG9wdGlvbiBuYW1lcyBhcmUgY2FtZWxpemVkIGR1cmluZyBub3JtYWxpemF0aW9uLCBzbyB0byBzdXBwb3J0XG4gICAgICAgICAgICAvLyBrZWJhYiAtPiBjYW1lbCBjb252ZXJzaW9uIGhlcmUgd2UgbmVlZCB0byBjYW1lbGl6ZSB0aGUga2V5LlxuICAgICAgICAgICAgbGV0IGNhbWVsS2V5O1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsIChjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSkge1xuICAgICAgICAgICAgICAgIGlmICghbmVlZENhc3RLZXlzIHx8ICFuZWVkQ2FzdEtleXMuaW5jbHVkZXMoY2FtZWxLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgKHJhd0Nhc3RWYWx1ZXMgfHwgKHJhd0Nhc3RWYWx1ZXMgPSB7fSkpW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gYXR0cnMpIHx8IHZhbHVlICE9PSBhdHRyc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5lZWRDYXN0S2V5cykge1xuICAgICAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICAgIGNvbnN0IGNhc3RWYWx1ZXMgPSByYXdDYXN0VmFsdWVzIHx8IEVNUFRZX09CSjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZWVkQ2FzdEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IG5lZWRDYXN0S2V5c1tpXTtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCBjYXN0VmFsdWVzW2tleV0sIGluc3RhbmNlLCAhaGFzT3duKGNhc3RWYWx1ZXMsIGtleSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXNBdHRyc0NoYW5nZWQ7XG59XG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSwgaXNBYnNlbnQpIHtcbiAgICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgaWYgKG9wdCAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGhhc0RlZmF1bHQgPSBoYXNPd24ob3B0LCAnZGVmYXVsdCcpO1xuICAgICAgICAvLyBkZWZhdWx0IHZhbHVlc1xuICAgICAgICBpZiAoaGFzRGVmYXVsdCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBvcHQuZGVmYXVsdDtcbiAgICAgICAgICAgIGlmIChvcHQudHlwZSAhPT0gRnVuY3Rpb24gJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwcm9wc0RlZmF1bHRzIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHByb3BzRGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XSA9IGRlZmF1bHRWYWx1ZS5jYWxsKG51bGwsIHByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBib29sZWFuIGNhc3RpbmdcbiAgICAgICAgaWYgKG9wdFswIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0ICovXSkge1xuICAgICAgICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdFsxIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0VHJ1ZSAqL10gJiZcbiAgICAgICAgICAgICAgICAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5wcm9wc0NhY2hlO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChjb21wKTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJhdyA9IGNvbXAucHJvcHM7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICAgIGNvbnN0IG5lZWRDYXN0S2V5cyA9IFtdO1xuICAgIC8vIGFwcGx5IG1peGluL2V4dGVuZHMgcHJvcHNcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XG4gICAgICAgIGNvbnN0IGV4dGVuZFByb3BzID0gKHJhdykgPT4ge1xuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBbcHJvcHMsIGtleXNdID0gbm9ybWFsaXplUHJvcHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcHJvcHMpO1xuICAgICAgICAgICAgaWYgKGtleXMpXG4gICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2goLi4ua2V5cyk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcbiAgICAgICAgICAgIGV4dGVuZFByb3BzKGNvbXAuZXh0ZW5kcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xuICAgICAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgICAgICAgIGNhY2hlLnNldChjb21wLCBFTVBUWV9BUlIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFTVBUWV9BUlI7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID0gRU1QVFlfT0JKO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHJhdykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChyYXcpKSB7XG4gICAgICAgICAgICB3YXJuKGBpbnZhbGlkIHByb3BzIG9wdGlvbnNgLCByYXcpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhdykge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSAobm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9XG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogb3B0KTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBwcm9wWzAgLyogQm9vbGVhbkZsYWdzLnNob3VsZENhc3QgKi9dID0gYm9vbGVhbkluZGV4ID4gLTE7XG4gICAgICAgICAgICAgICAgICAgIHByb3BbMSAvKiBCb29sZWFuRmxhZ3Muc2hvdWxkQ2FzdFRydWUgKi9dID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHByb3AgbmVlZHMgYm9vbGVhbiBjYXN0aW5nIG9yIGRlZmF1bHQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvb2xlYW5JbmRleCA+IC0xIHx8IGhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaChub3JtYWxpemVkS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXMgPSBbbm9ybWFsaXplZCwgbmVlZENhc3RLZXlzXTtcbiAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KGNvbXAsIHJlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BOYW1lKGtleSkge1xuICAgIGlmIChrZXlbMF0gIT09ICckJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYEludmFsaWQgcHJvcCBuYW1lOiBcIiR7a2V5fVwiIGlzIGEgcmVzZXJ2ZWQgcHJvcGVydHkuYCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIHVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayB0eXBlIGNvbnN0cnVjdG9yc1xuLy8gc28gdGhhdCBpdCB3b3JrcyBhY3Jvc3Mgdm1zIC8gaWZyYW1lcy5cbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xuICAgIGNvbnN0IG1hdGNoID0gY3RvciAmJiBjdG9yLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBjdG9yID09PSBudWxsID8gJ251bGwnIDogJyc7XG59XG5mdW5jdGlvbiBpc1NhbWVUeXBlKGEsIGIpIHtcbiAgICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKTtcbn1cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gICAgaWYgKGlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdGVkVHlwZXMuZmluZEluZGV4KHQgPT4gaXNTYW1lVHlwZSh0LCB0eXBlKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRUeXBlcykpIHtcbiAgICAgICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTE7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhyYXdQcm9wcywgcHJvcHMsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgcmVzb2x2ZWRWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgICAgIGlmIChvcHQgPT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB2YWxpZGF0ZVByb3Aoa2V5LCByZXNvbHZlZFZhbHVlc1trZXldLCBvcHQsICFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiYgIWhhc093bihyYXdQcm9wcywgaHlwaGVuYXRlKGtleSkpKTtcbiAgICB9XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcChuYW1lLCB2YWx1ZSwgcHJvcCwgaXNBYnNlbnQpIHtcbiAgICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IgfSA9IHByb3A7XG4gICAgLy8gcmVxdWlyZWQhXG4gICAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XG4gICAgICAgIHdhcm4oJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG1pc3NpbmcgYnV0IG9wdGlvbmFsXG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB0eXBlIGNoZWNrXG4gICAgaWYgKHR5cGUgIT0gbnVsbCAmJiB0eXBlICE9PSB0cnVlKSB7XG4gICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gaXNBcnJheSh0eXBlKSA/IHR5cGUgOiBbdHlwZV07XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICAgICAgLy8gdmFsdWUgaXMgdmFsaWQgYXMgbG9uZyBhcyBvbmUgb2YgdGhlIHNwZWNpZmllZCB0eXBlcyBtYXRjaFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgICAgICAgaXNWYWxpZCA9IHZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgd2FybihnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjdXN0b20gdmFsaWRhdG9yXG4gICAgaWYgKHZhbGlkYXRvciAmJiAhdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgICB3YXJuKCdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyk7XG4gICAgfVxufVxuY29uc3QgaXNTaW1wbGVUeXBlID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdTdHJpbmcsTnVtYmVyLEJvb2xlYW4sRnVuY3Rpb24sU3ltYm9sLEJpZ0ludCcpO1xuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlKSB7XG4gICAgbGV0IHZhbGlkO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gICAgaWYgKGlzU2ltcGxlVHlwZShleHBlY3RlZFR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICAgICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgICAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdudWxsJykge1xuICAgICAgICB2YWxpZCA9IHZhbHVlID09PSBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHZhbGlkLFxuICAgICAgICBleHBlY3RlZFR5cGVcbiAgICB9O1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLmAgK1xuICAgICAgICBgIEV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignIHwgJyl9YDtcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICAgIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gICAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gICAgY29uc3QgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gICAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYCB3aXRoIHZhbHVlICR7ZXhwZWN0ZWRWYWx1ZX1gO1xuICAgIH1cbiAgICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICAgICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICAgIH1cbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcbiAgICBjb25zdCBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGVsZW0gPT4gdHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKTtcbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gaXNCb29sZWFuKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5zb21lKGVsZW0gPT4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbicpO1xufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSAnXycgfHwga2V5ID09PSAnJHN0YWJsZSc7XG5jb25zdCBub3JtYWxpemVTbG90VmFsdWUgPSAodmFsdWUpID0+IGlzQXJyYXkodmFsdWUpXG4gICAgPyB2YWx1ZS5tYXAobm9ybWFsaXplVk5vZGUpXG4gICAgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcbmNvbnN0IG5vcm1hbGl6ZVNsb3QgPSAoa2V5LCByYXdTbG90LCBjdHgpID0+IHtcbiAgICBpZiAocmF3U2xvdC5fbikge1xuICAgICAgICAvLyBhbHJlYWR5IG5vcm1hbGl6ZWQgLSAjNTM1M1xuICAgICAgICByZXR1cm4gcmF3U2xvdDtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHdpdGhDdHgoKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHdhcm4oYFNsb3QgXCIke2tleX1cIiBpbnZva2VkIG91dHNpZGUgb2YgdGhlIHJlbmRlciBmdW5jdGlvbjogYCArXG4gICAgICAgICAgICAgICAgYHRoaXMgd2lsbCBub3QgdHJhY2sgZGVwZW5kZW5jaWVzIHVzZWQgaW4gdGhlIHNsb3QuIGAgK1xuICAgICAgICAgICAgICAgIGBJbnZva2UgdGhlIHNsb3QgZnVuY3Rpb24gaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybWFsaXplU2xvdFZhbHVlKHJhd1Nsb3QoLi4uYXJncykpO1xuICAgIH0sIGN0eCk7XG4gICAgbm9ybWFsaXplZC5fYyA9IGZhbHNlO1xuICAgIHJldHVybiBub3JtYWxpemVkO1xufTtcbmNvbnN0IG5vcm1hbGl6ZU9iamVjdFNsb3RzID0gKHJhd1Nsb3RzLCBzbG90cywgaW5zdGFuY2UpID0+IHtcbiAgICBjb25zdCBjdHggPSByYXdTbG90cy5fY3R4O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Nsb3RzKSB7XG4gICAgICAgIGlmIChpc0ludGVybmFsS2V5KGtleSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdTbG90c1trZXldO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICEoZmFsc2UgKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3Igc2xvdCBcIiR7a2V5fVwiLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICBzbG90c1trZXldID0gKCkgPT4gbm9ybWFsaXplZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBub3JtYWxpemVWTm9kZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgIWlzS2VlcEFsaXZlKGluc3RhbmNlLnZub2RlKSAmJlxuICAgICAgICAhKGZhbHNlICkpIHtcbiAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBkZWZhdWx0IHNsb3QuIGAgK1xuICAgICAgICAgICAgYFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmApO1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcbiAgICBpbnN0YW5jZS5zbG90cy5kZWZhdWx0ID0gKCkgPT4gbm9ybWFsaXplZDtcbn07XG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XG4gICAgaWYgKGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAvLyB1c2VycyBjYW4gZ2V0IHRoZSBzaGFsbG93IHJlYWRvbmx5IHZlcnNpb24gb2YgdGhlIHNsb3RzIG9iamVjdCB0aHJvdWdoIGB0aGlzLiRzbG90c2AsXG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgYXZvaWQgdGhlIHByb3h5IG9iamVjdCBwb2xsdXRpbmcgdGhlIHNsb3RzIG9mIHRoZSBpbnRlcm5hbCBpbnN0YW5jZVxuICAgICAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB0b1JhdyhjaGlsZHJlbik7XG4gICAgICAgICAgICAvLyBtYWtlIGNvbXBpbGVyIG1hcmtlciBub24tZW51bWVyYWJsZVxuICAgICAgICAgICAgZGVmKGNoaWxkcmVuLCAnXycsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIChpbnN0YW5jZS5zbG90cyA9IHt9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLnNsb3RzID0ge307XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlZihpbnN0YW5jZS5zbG90cywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xufTtcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xuICAgIGxldCBuZWVkRGVsZXRpb25DaGVjayA9IHRydWU7XG4gICAgbGV0IGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IEVNUFRZX09CSjtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLykge1xuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIGNvbXBpbGVkIHNsb3RzLlxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gUGFyZW50IHdhcyBITVIgdXBkYXRlZCBzbyBzbG90IGNvbnRlbnQgbWF5IGhhdmUgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICAvLyBmb3JjZSB1cGRhdGUgc2xvdHMgYW5kIG1hcmsgaW5zdGFuY2UgZm9yIGhtciBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpbWl6ZWQgJiYgdHlwZSA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovKSB7XG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgQU5EIHN0YWJsZS5cbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSwgYW5kIHNraXAgc3RhbGUgc2xvdHMgcmVtb3ZhbC5cbiAgICAgICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgYnV0IGR5bmFtaWMgKHYtaWYvdi1mb3Igb24gc2xvdHMpIC0gdXBkYXRlIHNsb3RzLCBidXQgc2tpcFxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6YXRpb24uXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgLy8gIzI4OTNcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlbmRlcmluZyB0aGUgb3B0aW1pemVkIHNsb3RzIGJ5IG1hbnVhbGx5IHdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZGVsZXRlIHRoZSBgc2xvdHMuX2AgZmxhZyBpZiBuZWNlc3NhcnkgdG8gbWFrZSBzdWJzZXF1ZW50IHVwZGF0ZXMgcmVsaWFibGUsXG4gICAgICAgICAgICAgICAgLy8gaS5lLiBsZXQgdGhlIGByZW5kZXJTbG90YCBjcmVhdGUgdGhlIGJhaWxlZCBGcmFnbWVudFxuICAgICAgICAgICAgICAgIGlmICghb3B0aW1pemVkICYmIHR5cGUgPT09IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqLykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHMuXztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9ICFjaGlsZHJlbi4kc3RhYmxlO1xuICAgICAgICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIHNsb3RzKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgLy8gbm9uIHNsb3Qgb2JqZWN0IGNoaWxkcmVuIChkaXJlY3QgdmFsdWUpIHBhc3NlZCB0byBhIGNvbXBvbmVudFxuICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xuICAgIH1cbiAgICAvLyBkZWxldGUgc3RhbGUgc2xvdHNcbiAgICBpZiAobmVlZERlbGV0aW9uQ2hlY2spIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbEtleShrZXkpICYmICEoa2V5IGluIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwcENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBwOiBudWxsLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgIGlzTmF0aXZlVGFnOiBOTyxcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcbiAgICAgICAgICAgIGdsb2JhbFByb3BlcnRpZXM6IHt9LFxuICAgICAgICAgICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiB7fSxcbiAgICAgICAgICAgIGVycm9ySGFuZGxlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgd2FybkhhbmRsZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uczoge31cbiAgICAgICAgfSxcbiAgICAgICAgbWl4aW5zOiBbXSxcbiAgICAgICAgY29tcG9uZW50czoge30sXG4gICAgICAgIGRpcmVjdGl2ZXM6IHt9LFxuICAgICAgICBwcm92aWRlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgICAgb3B0aW9uc0NhY2hlOiBuZXcgV2Vha01hcCgpLFxuICAgICAgICBwcm9wc0NhY2hlOiBuZXcgV2Vha01hcCgpLFxuICAgICAgICBlbWl0c0NhY2hlOiBuZXcgV2Vha01hcCgpXG4gICAgfTtcbn1cbmxldCB1aWQgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVBcHAocm9vdENvbXBvbmVudCwgcm9vdFByb3BzID0gbnVsbCkge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24ocm9vdENvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIHJvb3RDb21wb25lbnQgPSBPYmplY3QuYXNzaWduKHt9LCByb290Q29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGByb290IHByb3BzIHBhc3NlZCB0byBhcHAubW91bnQoKSBtdXN0IGJlIGFuIG9iamVjdC5gKTtcbiAgICAgICAgICAgIHJvb3RQcm9wcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcbiAgICAgICAgY29uc3QgaW5zdGFsbGVkUGx1Z2lucyA9IG5ldyBTZXQoKTtcbiAgICAgICAgbGV0IGlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBhcHAgPSAoY29udGV4dC5hcHAgPSB7XG4gICAgICAgICAgICBfdWlkOiB1aWQrKyxcbiAgICAgICAgICAgIF9jb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXG4gICAgICAgICAgICBfcHJvcHM6IHJvb3RQcm9wcyxcbiAgICAgICAgICAgIF9jb250YWluZXI6IG51bGwsXG4gICAgICAgICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgIF9pbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICBnZXQgY29uZmlnKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbmZpZztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQgY29uZmlnKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYGFwcC5jb25maWcgY2Fubm90IGJlIHJlcGxhY2VkLiBNb2RpZnkgaW5kaXZpZHVhbCBvcHRpb25zIGluc3RlYWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVzZShwbHVnaW4sIC4uLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xuICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgUGx1Z2luIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmluc3RhbGwoYXBwLCAuLi5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihwbHVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbihhcHAsIC4uLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBmdW5jdGlvbi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaXhpbihtaXhpbikge1xuICAgICAgICAgICAgICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGV4dC5taXhpbnMuaW5jbHVkZXMobWl4aW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1peGlucy5wdXNoKG1peGluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ01peGluIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1peGluLm5hbWUgPyBgOiAke21peGluLm5hbWV9YCA6ICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ01peGlucyBhcmUgb25seSBhdmFpbGFibGUgaW4gYnVpbGRzIHN1cHBvcnRpbmcgT3B0aW9ucyBBUEknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29udGV4dC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb25lbnRzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSA9IGNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRGlyZWN0aXZlIFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb3VudChyb290Q29udGFpbmVyLCBpc0h5ZHJhdGUsIGlzU1ZHKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gIzU1NzFcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBUaGVyZSBpcyBhbHJlYWR5IGFuIGFwcCBpbnN0YW5jZSBtb3VudGVkIG9uIHRoZSBob3N0IGNvbnRhaW5lci5cXG5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIElmIHlvdSB3YW50IHRvIG1vdW50IGFub3RoZXIgYXBwIG9uIHRoZSBzYW1lIGhvc3QgY29udGFpbmVyLGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgeW91IG5lZWQgdG8gdW5tb3VudCB0aGUgcHJldmlvdXMgYXBwIGJ5IGNhbGxpbmcgXFxgYXBwLnVubW91bnQoKVxcYCBmaXJzdC5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGFwcCBjb250ZXh0IG9uIHRoZSByb290IFZOb2RlLlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgc2V0IG9uIHRoZSByb290IGluc3RhbmNlIG9uIGluaXRpYWwgbW91bnQuXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLmFwcENvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAvLyBITVIgcm9vdCByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZWxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKGNsb25lVk5vZGUodm5vZGUpLCByb290Q29udGFpbmVyLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0h5ZHJhdGUgJiYgaHlkcmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZSh2bm9kZSwgcm9vdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIodm5vZGUsIHJvb3RDb250YWluZXIsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBhcHAuX2NvbnRhaW5lciA9IHJvb3RDb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RDb250YWluZXIuX192dWVfYXBwX18gPSBhcHA7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuX2luc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEV4cG9zZVByb3h5KHZub2RlLmNvbXBvbmVudCkgfHwgdm5vZGUuY29tcG9uZW50LnByb3h5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGhhcyBhbHJlYWR5IGJlZW4gbW91bnRlZC5cXG5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3Ugd2FudCB0byByZW1vdW50IHRoZSBzYW1lIGFwcCwgbW92ZSB5b3VyIGFwcCBjcmVhdGlvbiBsb2dpYyBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpbnRvIGEgZmFjdG9yeSBmdW5jdGlvbiBhbmQgY3JlYXRlIGZyZXNoIGFwcCBpbnN0YW5jZXMgZm9yIGVhY2ggYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgbW91bnQgLSBlLmcuIFxcYGNvbnN0IGNyZWF0ZU15QXBwID0gKCkgPT4gY3JlYXRlQXBwKEFwcClcXGBgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5tb3VudCgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzVW5tb3VudEFwcChhcHApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhcHAuX2NvbnRhaW5lci5fX3Z1ZV9hcHBfXztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENhbm5vdCB1bm1vdW50IGFuIGFwcCB0aGF0IGlzIG5vdCBtb3VudGVkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm92aWRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQucHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXBwO1xuICAgIH07XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIGhhbmRsaW5nIGEgdGVtcGxhdGUgcmVmXG4gKi9cbmZ1bmN0aW9uIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCBpc1VubW91bnQgPSBmYWxzZSkge1xuICAgIGlmIChpc0FycmF5KHJhd1JlZikpIHtcbiAgICAgICAgcmF3UmVmLmZvckVhY2goKHIsIGkpID0+IHNldFJlZihyLCBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksIHBhcmVudFN1c3BlbnNlLCB2bm9kZSwgaXNVbm1vdW50KSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhaXNVbm1vdW50KSB7XG4gICAgICAgIC8vIHdoZW4gbW91bnRpbmcgYXN5bmMgY29tcG9uZW50cywgbm90aGluZyBuZWVkcyB0byBiZSBkb25lLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSB0ZW1wbGF0ZSByZWYgaXMgZm9yd2FyZGVkIHRvIGlubmVyIGNvbXBvbmVudFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlZlZhbHVlID0gdm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqL1xuICAgICAgICA/IGdldEV4cG9zZVByb3h5KHZub2RlLmNvbXBvbmVudCkgfHwgdm5vZGUuY29tcG9uZW50LnByb3h5XG4gICAgICAgIDogdm5vZGUuZWw7XG4gICAgY29uc3QgdmFsdWUgPSBpc1VubW91bnQgPyBudWxsIDogcmVmVmFsdWU7XG4gICAgY29uc3QgeyBpOiBvd25lciwgcjogcmVmIH0gPSByYXdSZWY7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhb3duZXIpIHtcbiAgICAgICAgd2FybihgTWlzc2luZyByZWYgb3duZXIgY29udGV4dC4gcmVmIGNhbm5vdCBiZSB1c2VkIG9uIGhvaXN0ZWQgdm5vZGVzLiBgICtcbiAgICAgICAgICAgIGBBIHZub2RlIHdpdGggcmVmIG11c3QgYmUgY3JlYXRlZCBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbi5gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvbGRSZWYgPSBvbGRSYXdSZWYgJiYgb2xkUmF3UmVmLnI7XG4gICAgY29uc3QgcmVmcyA9IG93bmVyLnJlZnMgPT09IEVNUFRZX09CSiA/IChvd25lci5yZWZzID0ge30pIDogb3duZXIucmVmcztcbiAgICBjb25zdCBzZXR1cFN0YXRlID0gb3duZXIuc2V0dXBTdGF0ZTtcbiAgICAvLyBkeW5hbWljIHJlZiBjaGFuZ2VkLiB1bnNldCBvbGQgcmVmXG4gICAgaWYgKG9sZFJlZiAhPSBudWxsICYmIG9sZFJlZiAhPT0gcmVmKSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhvbGRSZWYpKSB7XG4gICAgICAgICAgICByZWZzW29sZFJlZl0gPSBudWxsO1xuICAgICAgICAgICAgaWYgKGhhc093bihzZXR1cFN0YXRlLCBvbGRSZWYpKSB7XG4gICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtvbGRSZWZdID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XG4gICAgICAgICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKHJlZikpIHtcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKHJlZiwgb3duZXIsIDEyIC8qIEVycm9yQ29kZXMuRlVOQ1RJT05fUkVGICovLCBbdmFsdWUsIHJlZnNdKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IF9pc1N0cmluZyA9IGlzU3RyaW5nKHJlZik7XG4gICAgICAgIGNvbnN0IF9pc1JlZiA9IGlzUmVmKHJlZik7XG4gICAgICAgIGlmIChfaXNTdHJpbmcgfHwgX2lzUmVmKSB7XG4gICAgICAgICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmYpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBfaXNTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaGFzT3duKHNldHVwU3RhdGUsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNldHVwU3RhdGVbcmVmXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVmc1tyZWZdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVW5tb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNBcnJheShleGlzdGluZykgJiYgcmVtb3ZlKGV4aXN0aW5nLCByZWZWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkoZXhpc3RpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZzW3JlZl0gPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHJlZnNbcmVmXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmLnZhbHVlID0gW3JlZlZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1JlZi5rKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyYXdSZWYua10gPSByZWYudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWV4aXN0aW5nLmluY2x1ZGVzKHJlZlZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLnB1c2gocmVmVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgICAgICAgICAgICByZWZzW3JlZl0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihzZXR1cFN0YXRlLCByZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfaXNSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuaylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnNbcmF3UmVmLmtdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIHRlbXBsYXRlIHJlZiB0eXBlOicsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkb1NldC5pZCA9IC0xO1xuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9TZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6JywgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmxldCBoYXNNaXNtYXRjaCA9IGZhbHNlO1xuY29uc3QgaXNTVkdDb250YWluZXIgPSAoY29udGFpbmVyKSA9PiAvc3ZnLy50ZXN0KGNvbnRhaW5lci5uYW1lc3BhY2VVUkkpICYmIGNvbnRhaW5lci50YWdOYW1lICE9PSAnZm9yZWlnbk9iamVjdCc7XG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBET01Ob2RlVHlwZXMuQ09NTUVOVCAqLztcbi8vIE5vdGU6IGh5ZHJhdGlvbiBpcyBET00tc3BlY2lmaWNcbi8vIEJ1dCB3ZSBoYXZlIHRvIHBsYWNlIGl0IGluIGNvcmUgZHVlIHRvIHRpZ2h0IGNvdXBsaW5nIHdpdGggY29yZSAtIHNwbGl0dGluZ1xuLy8gaXQgb3V0IGNyZWF0ZXMgYSB0b24gb2YgdW5uZWNlc3NhcnkgY29tcGxleGl0eS5cbi8vIEh5ZHJhdGlvbiBhbHNvIGRlcGVuZHMgb24gc29tZSByZW5kZXJlciBpbnRlcm5hbCBsb2dpYyB3aGljaCBuZWVkcyB0byBiZVxuLy8gcGFzc2VkIGluIHZpYSBhcmd1bWVudHMuXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMocmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICBjb25zdCB7IG10OiBtb3VudENvbXBvbmVudCwgcDogcGF0Y2gsIG86IHsgcGF0Y2hQcm9wLCBjcmVhdGVUZXh0LCBuZXh0U2libGluZywgcGFyZW50Tm9kZSwgcmVtb3ZlLCBpbnNlcnQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gICAgY29uc3QgaHlkcmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyKSA9PiB7XG4gICAgICAgIGlmICghY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFBlcmZvcm1pbmcgZnVsbCBtb3VudCBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xuICAgICAgICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGhhc01pc21hdGNoID0gZmFsc2U7XG4gICAgICAgIGh5ZHJhdGVOb2RlKGNvbnRhaW5lci5maXJzdENoaWxkLCB2bm9kZSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcbiAgICAgICAgaWYgKGhhc01pc21hdGNoICYmICFmYWxzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgc2hvdyB1cCBpbiBwcm9kdWN0aW9uXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBIeWRyYXRpb24gY29tcGxldGVkIGJ1dCBjb250YWlucyBtaXNtYXRjaGVzLmApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoeWRyYXRlTm9kZSA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCBpc0ZyYWdtZW50U3RhcnQgPSBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSAnWyc7XG4gICAgICAgIGNvbnN0IG9uTWlzbWF0Y2ggPSAoKSA9PiBoYW5kbGVNaXNtYXRjaChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBpc0ZyYWdtZW50U3RhcnQpO1xuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnLCBwYXRjaEZsYWcgfSA9IHZub2RlO1xuICAgICAgICBsZXQgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgICAgIHZub2RlLmVsID0gbm9kZTtcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA9PT0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovKSB7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5leHROb2RlID0gbnVsbDtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRleHQ6XG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDMgLyogRE9NTm9kZVR5cGVzLlRFWFQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gIzU3MjggZW1wdHkgdGV4dCBub2RlIGluc2lkZSBhIHNsb3QgY2FuIGNhdXNlIGh5ZHJhdGlvbiBmYWlsdXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIHNlcnZlciByZW5kZXJlZCBIVE1MIHdvbid0IGNvbnRhaW4gYSB0ZXh0IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZub2RlLmNoaWxkcmVuID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KCh2bm9kZS5lbCA9IGNyZWF0ZVRleHQoJycpKSwgcGFyZW50Tm9kZShub2RlKSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoOmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXFxuLSBDbGllbnQ6ICR7SlNPTi5zdHJpbmdpZnkobm9kZS5kYXRhKX1gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbi0gU2VydmVyOiAke0pTT04uc3RyaW5naWZ5KHZub2RlLmNoaWxkcmVuKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIERPTU5vZGVUeXBlcy5DT01NRU5UICovIHx8IGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgICAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbnRpcmUgdGVtcGxhdGUgaXMgc3RhdGljIGJ1dCBTU1JlZCBhcyBhIGZyYWdtZW50XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlID09PSAxIC8qIERPTU5vZGVUeXBlcy5FTEVNRU5UICovIHx8IGRvbVR5cGUgPT09IDMgLyogRE9NTm9kZVR5cGVzLlRFWFQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGFuY2hvciwgYWRvcHQgY29udGVudFxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdGF0aWMgdm5vZGUgaGFzIGl0cyBjb250ZW50IHN0cmlwcGVkIGR1cmluZyBidWlsZCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRvcHQgaXQgZnJvbSB0aGUgc2VydmVyLXJlbmRlcmVkIEhUTUwuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5lZWRUb0Fkb3B0Q29udGVudCA9ICF2bm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuc3RhdGljQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRUb0Fkb3B0Q29udGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5jaGlsZHJlbiArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZS5ub2RlVHlwZSA9PT0gMSAvKiBET01Ob2RlVHlwZXMuRUxFTUVOVCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXh0Tm9kZS5vdXRlckhUTUxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV4dE5vZGUuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSB2bm9kZS5zdGF0aWNDb3VudCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobmV4dE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0ZyYWdtZW50U3RhcnQgPyBuZXh0U2libGluZyhuZXh0Tm9kZSkgOiBuZXh0Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgICAgICAgICAgIGlmICghaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMSAvKiBET01Ob2RlVHlwZXMuRUxFTUVOVCAqLyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudHlwZS50b0xvd2VyQ2FzZSgpICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUVsZW1lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gc2V0dGluZyB1cCB0aGUgcmVuZGVyIGVmZmVjdCwgaWYgdGhlIGluaXRpYWwgdm5vZGUgYWxyZWFkeVxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgLmVsIHNldCwgdGhlIGNvbXBvbmVudCB3aWxsIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnRcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gaXRzIHN1Yi10cmVlLlxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5zbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KHZub2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgYmUgYXN5bmMsIHNvIGluIHRoZSBjYXNlIG9mIGZyYWdtZW50cyB3ZSBjYW5ub3QgcmVseVxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBjb21wb25lbnQncyByZW5kZXJlZCBvdXRwdXQgdG8gZGV0ZXJtaW5lIHRoZSBlbmQgb2YgdGhlIGZyYWdtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIGluc3RlYWQsIHdlIGRvIGEgbG9va2FoZWFkIHRvIGZpbmQgdGhlIGVuZCBhbmNob3Igbm9kZS5cbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBpc0ZyYWdtZW50U3RhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyAjNDI5MyB0ZWxlcG9ydCBhcyBjb21wb25lbnQgcm9vdFxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dE5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tbWVudChuZXh0Tm9kZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlLmRhdGEgPT09ICd0ZWxlcG9ydCBlbmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAjMzc4N1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBjb21wb25lbnQgaXMgYXN5bmMsIGl0IG1heSBnZXQgbW92ZWQgLyB1bm1vdW50ZWQgYmVmb3JlIGl0c1xuICAgICAgICAgICAgICAgICAgICAvLyBpbm5lciBjb21wb25lbnQgaXMgbG9hZGVkLCBzbyB3ZSBuZWVkIHRvIGdpdmUgaXQgYSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSB0aGF0IG1hdGNoZXMgaXRzIGFkb3B0ZWQgRE9NLlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3ViVHJlZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlID0gY3JlYXRlVk5vZGUoRnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWUuYW5jaG9yID0gbmV4dE5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXh0Tm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjb250YWluZXIubGFzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDMgPyBjcmVhdGVUZXh0Vk5vZGUoJycpIDogY3JlYXRlVk5vZGUoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5lbCA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5jb21wb25lbnQuc3ViVHJlZSA9IHN1YlRyZWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCAvKiBET01Ob2RlVHlwZXMuQ09NTUVOVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihwYXJlbnROb2RlKG5vZGUpKSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dE5vZGU7XG4gICAgfTtcbiAgICBjb25zdCBoeWRyYXRlRWxlbWVudCA9IChlbCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgcGF0Y2hGbGFnLCBzaGFwZUZsYWcsIGRpcnMgfSA9IHZub2RlO1xuICAgICAgICAvLyAjNDAwNiBmb3IgZm9ybSBlbGVtZW50cyB3aXRoIG5vbi1zdHJpbmcgdi1tb2RlbCB2YWx1ZSBiaW5kaW5nc1xuICAgICAgICAvLyBlLmcuIDxvcHRpb24gOnZhbHVlPVwib2JqXCI+LCA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgOnRydWUtdmFsdWU9XCIxXCI+XG4gICAgICAgIGNvbnN0IGZvcmNlUGF0Y2hWYWx1ZSA9ICh0eXBlID09PSAnaW5wdXQnICYmIGRpcnMpIHx8IHR5cGUgPT09ICdvcHRpb24nO1xuICAgICAgICAvLyBza2lwIHByb3BzICYgY2hpbGRyZW4gaWYgdGhpcyBpcyBob2lzdGVkIHN0YXRpYyBub2Rlc1xuICAgICAgICAvLyAjNTQwNSBpbiBkZXYsIGFsd2F5cyBoeWRyYXRlIGNoaWxkcmVuIGZvciBITVJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBmb3JjZVBhdGNoVmFsdWUgfHwgcGF0Y2hGbGFnICE9PSAtMSAvKiBQYXRjaEZsYWdzLkhPSVNURUQgKi8pIHtcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnY3JlYXRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcHJvcHNcbiAgICAgICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChmb3JjZVBhdGNoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICAgICAgIW9wdGltaXplZCB8fFxuICAgICAgICAgICAgICAgICAgICBwYXRjaEZsYWcgJiAoMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovIHwgMzIgLyogUGF0Y2hGbGFncy5IWURSQVRFX0VWRU5UUyAqLykpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZm9yY2VQYXRjaFZhbHVlICYmIGtleS5lbmRzV2l0aCgndmFsdWUnKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXNPbihrZXkpICYmICFpc1Jlc2VydmVkUHJvcChrZXkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldLCBmYWxzZSwgdW5kZWZpbmVkLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLm9uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBjbGljayBsaXN0ZW5lcnMgKHdoaWNoIGlzIG1vc3Qgb2Z0ZW4pIHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGluZyB0aHJvdWdoIHByb3BzLlxuICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsICdvbkNsaWNrJywgbnVsbCwgcHJvcHMub25DbGljaywgZmFsc2UsIHVuZGVmaW5lZCwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2bm9kZSAvIGRpcmVjdGl2ZSBob29rc1xuICAgICAgICAgICAgbGV0IHZub2RlSG9va3M7XG4gICAgICAgICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IGRpcnMpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZub2RlSG9va3MgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ21vdW50ZWQnKTtcbiAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjaGlsZHJlblxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8gJiZcbiAgICAgICAgICAgICAgICAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgIShwcm9wcyAmJiAocHJvcHMuaW5uZXJIVE1MIHx8IHByb3BzLnRleHRDb250ZW50KSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihlbC5maXJzdENoaWxkLCB2bm9kZSwgZWwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXNXYXJuZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBtb3JlIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBTU1JlZCBET00gY29udGFpbnMgbW9yZSBub2RlcyB0aGFuIGl0IHNob3VsZC4gUmVtb3ZlIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ciA9IG5leHQ7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUoY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgIGlmIChlbC50ZXh0Q29udGVudCAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiB0ZXh0IGNvbnRlbnQgbWlzbWF0Y2ggaW4gPCR7dm5vZGUudHlwZX0+OlxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIENsaWVudDogJHtlbC50ZXh0Q29udGVudH1cXG5gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBTZXJ2ZXI6ICR7dm5vZGUuY2hpbGRyZW59YCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbC5uZXh0U2libGluZztcbiAgICB9O1xuICAgIGNvbnN0IGh5ZHJhdGVDaGlsZHJlbiA9IChub2RlLCBwYXJlbnRWTm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISFwYXJlbnRWTm9kZS5keW5hbWljQ2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50Vk5vZGUuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZub2RlID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgPyBjaGlsZHJlbltpXVxuICAgICAgICAgICAgICAgIDogKGNoaWxkcmVuW2ldID0gbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGh5ZHJhdGVOb2RlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBUZXh0ICYmICF2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggaW4gPCR7Y29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBzZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBmZXdlciBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmApO1xuICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0aGUgU1NSZWQgRE9NIGRpZG4ndCBjb250YWluIGVub3VnaCBub2Rlcy4gTW91bnQgdGhlIG1pc3Npbmcgb25lcy5cbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgY29uc3QgaHlkcmF0ZUZyYWdtZW50ID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCB7IHNsb3RTY29wZUlkczogZnJhZ21lbnRTbG90U2NvcGVJZHMgfSA9IHZub2RlO1xuICAgICAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkc1xuICAgICAgICAgICAgICAgID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcylcbiAgICAgICAgICAgICAgICA6IGZyYWdtZW50U2xvdFNjb3BlSWRzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgICAgIGNvbnN0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4obmV4dFNpYmxpbmcobm9kZSksIHZub2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gJ10nKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcoKHZub2RlLmFuY2hvciA9IG5leHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZyYWdtZW50IGRpZG4ndCBoeWRyYXRlIHN1Y2Nlc3NmdWxseSwgc2luY2Ugd2UgZGlkbid0IGdldCBhIGVuZCBhbmNob3JcbiAgICAgICAgICAgIC8vIGJhY2suIFRoaXMgc2hvdWxkIGhhdmUgbGVkIHRvIG5vZGUvY2hpbGRyZW4gbWlzbWF0Y2ggd2FybmluZ3MuXG4gICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAvLyBzaW5jZSB0aGUgYW5jaG9yIGlzIG1pc3NpbmcsIHdlIG5lZWQgdG8gY3JlYXRlIG9uZSBhbmQgaW5zZXJ0IGl0XG4gICAgICAgICAgICBpbnNlcnQoKHZub2RlLmFuY2hvciA9IGNyZWF0ZUNvbW1lbnQoYF1gKSksIGNvbnRhaW5lciwgbmV4dCk7XG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudCkgPT4ge1xuICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIG5vZGUgbWlzbWF0Y2g6XFxuLSBDbGllbnQgdm5vZGU6YCwgdm5vZGUudHlwZSwgYFxcbi0gU2VydmVyIHJlbmRlcmVkIERPTTpgLCBub2RlLCBub2RlLm5vZGVUeXBlID09PSAzIC8qIERPTU5vZGVUeXBlcy5URVhUICovXG4gICAgICAgICAgICAgICAgPyBgKHRleHQpYFxuICAgICAgICAgICAgICAgIDogaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snXG4gICAgICAgICAgICAgICAgICAgID8gYChzdGFydCBvZiBmcmFnbWVudClgXG4gICAgICAgICAgICAgICAgICAgIDogYGApO1xuICAgICAgICB2bm9kZS5lbCA9IG51bGw7XG4gICAgICAgIGlmIChpc0ZyYWdtZW50KSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXhjZXNzaXZlIGZyYWdtZW50IG5vZGVzXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3Iobm9kZSk7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKG5leHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHQgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgcmVtb3ZlKG5vZGUpO1xuICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyLCBuZXh0LCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICAgIGNvbnN0IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvciA9IChub2RlKSA9PiB7XG4gICAgICAgIGxldCBtYXRjaCA9IDA7XG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICBub2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICBpZiAobm9kZSAmJiBpc0NvbW1lbnQobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnWycpXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoKys7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gJ10nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIHJldHVybiBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbmxldCBzdXBwb3J0ZWQ7XG5sZXQgcGVyZjtcbmZ1bmN0aW9uIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICAgIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIHBlcmYubWFyayhgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YCk7XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgIGRldnRvb2xzUGVyZlN0YXJ0KGluc3RhbmNlLCB0eXBlLCBpc1N1cHBvcnRlZCgpID8gcGVyZi5ub3coKSA6IERhdGUubm93KCkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcbiAgICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICBjb25zdCBzdGFydFRhZyA9IGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gO1xuICAgICAgICBjb25zdCBlbmRUYWcgPSBzdGFydFRhZyArIGA6ZW5kYDtcbiAgICAgICAgcGVyZi5tYXJrKGVuZFRhZyk7XG4gICAgICAgIHBlcmYubWVhc3VyZShgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YCwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBkZXZ0b29sc1BlcmZFbmQoaW5zdGFuY2UsIHR5cGUsIGlzU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XG4gICAgaWYgKHN1cHBvcnRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcGVyZiA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydGVkO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgb25seSBjYWxsZWQgaW4gZXNtLWJ1bmRsZXIgYnVpbGRzLlxuICogSXQgaXMgY2FsbGVkIHdoZW4gYSByZW5kZXJlciBpcyBjcmVhdGVkLCBpbiBgYmFzZUNyZWF0ZVJlbmRlcmVyYCBzbyB0aGF0XG4gKiBpbXBvcnRpbmcgcnVudGltZS1jb3JlIGlzIHNpZGUtZWZmZWN0cyBmcmVlLlxuICpcbiAqIGlzdGFuYnVsLWlnbm9yZS1uZXh0XG4gKi9cbmZ1bmN0aW9uIGluaXRGZWF0dXJlRmxhZ3MoKSB7XG4gICAgY29uc3QgbmVlZFdhcm4gPSBbXTtcbiAgICBpZiAodHlwZW9mIF9fVlVFX09QVElPTlNfQVBJX18gIT09ICdib29sZWFuJykge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfT1BUSU9OU19BUElfX2ApO1xuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfT1BUSU9OU19BUElfXyA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgX19WVUVfUFJPRF9ERVZUT09MU19fICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuLnB1c2goYF9fVlVFX1BST0RfREVWVE9PTFNfX2ApO1xuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9ERVZUT09MU19fID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbmVlZFdhcm4ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG11bHRpID0gbmVlZFdhcm4ubGVuZ3RoID4gMTtcbiAgICAgICAgY29uc29sZS53YXJuKGBGZWF0dXJlIGZsYWcke211bHRpID8gYHNgIDogYGB9ICR7bmVlZFdhcm4uam9pbignLCAnKX0gJHttdWx0aSA/IGBhcmVgIDogYGlzYH0gbm90IGV4cGxpY2l0bHkgZGVmaW5lZC4gWW91IGFyZSBydW5uaW5nIHRoZSBlc20tYnVuZGxlciBidWlsZCBvZiBWdWUsIGAgK1xuICAgICAgICAgICAgYHdoaWNoIGV4cGVjdHMgdGhlc2UgY29tcGlsZS10aW1lIGZlYXR1cmUgZmxhZ3MgdG8gYmUgZ2xvYmFsbHkgaW5qZWN0ZWQgYCArXG4gICAgICAgICAgICBgdmlhIHRoZSBidW5kbGVyIGNvbmZpZyBpbiBvcmRlciB0byBnZXQgYmV0dGVyIHRyZWUtc2hha2luZyBpbiB0aGUgYCArXG4gICAgICAgICAgICBgcHJvZHVjdGlvbiBidW5kbGUuXFxuXFxuYCArXG4gICAgICAgICAgICBgRm9yIG1vcmUgZGV0YWlscywgc2VlIGh0dHBzOi8vbGluay52dWVqcy5vcmcvZmVhdHVyZS1mbGFncy5gKTtcbiAgICB9XG59XG5cbmNvbnN0IHF1ZXVlUG9zdFJlbmRlckVmZmVjdCA9IHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlXG4gICAgO1xuLyoqXG4gKiBUaGUgY3JlYXRlUmVuZGVyZXIgZnVuY3Rpb24gYWNjZXB0cyB0d28gZ2VuZXJpYyBhcmd1bWVudHM6XG4gKiBIb3N0Tm9kZSBhbmQgSG9zdEVsZW1lbnQsIGNvcnJlc3BvbmRpbmcgdG8gTm9kZSBhbmQgRWxlbWVudCB0eXBlcyBpbiB0aGVcbiAqIGhvc3QgZW52aXJvbm1lbnQuIEZvciBleGFtcGxlLCBmb3IgcnVudGltZS1kb20sIEhvc3ROb2RlIHdvdWxkIGJlIHRoZSBET01cbiAqIGBOb2RlYCBpbnRlcmZhY2UgYW5kIEhvc3RFbGVtZW50IHdvdWxkIGJlIHRoZSBET00gYEVsZW1lbnRgIGludGVyZmFjZS5cbiAqXG4gKiBDdXN0b20gcmVuZGVyZXJzIGNhbiBwYXNzIGluIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyB0eXBlcyBsaWtlIHRoaXM6XG4gKlxuICogYGBgIGpzXG4gKiBjb25zdCB7IHJlbmRlciwgY3JlYXRlQXBwIH0gPSBjcmVhdGVSZW5kZXJlcjxOb2RlLCBFbGVtZW50Pih7XG4gKiAgIHBhdGNoUHJvcCxcbiAqICAgLi4ubm9kZU9wc1xuICogfSlcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zKTtcbn1cbi8vIFNlcGFyYXRlIEFQSSBmb3IgY3JlYXRpbmcgaHlkcmF0aW9uLWVuYWJsZWQgcmVuZGVyZXIuXG4vLyBIeWRyYXRpb24gbG9naWMgaXMgb25seSB1c2VkIHdoZW4gY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBtYWtpbmcgaXRcbi8vIHRyZWUtc2hha2FibGUuXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMpO1xufVxuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAgICAvLyBjb21waWxlLXRpbWUgZmVhdHVyZSBmbGFncyBjaGVja1xuICAgIHtcbiAgICAgICAgaW5pdEZlYXR1cmVGbGFncygpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSBnZXRHbG9iYWxUaGlzKCk7XG4gICAgdGFyZ2V0Ll9fVlVFX18gPSB0cnVlO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgIHNldERldnRvb2xzSG9vayh0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXywgdGFyZ2V0KTtcbiAgICB9XG4gICAgY29uc3QgeyBpbnNlcnQ6IGhvc3RJbnNlcnQsIHJlbW92ZTogaG9zdFJlbW92ZSwgcGF0Y2hQcm9wOiBob3N0UGF0Y2hQcm9wLCBjcmVhdGVFbGVtZW50OiBob3N0Q3JlYXRlRWxlbWVudCwgY3JlYXRlVGV4dDogaG9zdENyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQ6IGhvc3RDcmVhdGVDb21tZW50LCBzZXRUZXh0OiBob3N0U2V0VGV4dCwgc2V0RWxlbWVudFRleHQ6IGhvc3RTZXRFbGVtZW50VGV4dCwgcGFyZW50Tm9kZTogaG9zdFBhcmVudE5vZGUsIG5leHRTaWJsaW5nOiBob3N0TmV4dFNpYmxpbmcsIHNldFNjb3BlSWQ6IGhvc3RTZXRTY29wZUlkID0gTk9PUCwgaW5zZXJ0U3RhdGljQ29udGVudDogaG9zdEluc2VydFN0YXRpY0NvbnRlbnQgfSA9IG9wdGlvbnM7XG4gICAgLy8gTm90ZTogZnVuY3Rpb25zIGluc2lkZSB0aGlzIGNsb3N1cmUgc2hvdWxkIHVzZSBgY29uc3QgeHh4ID0gKCkgPT4ge31gXG4gICAgLy8gc3R5bGUgaW4gb3JkZXIgdG8gcHJldmVudCBiZWluZyBpbmxpbmVkIGJ5IG1pbmlmaWVycy5cbiAgICBjb25zdCBwYXRjaCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yID0gbnVsbCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCwgcGFyZW50U3VzcGVuc2UgPSBudWxsLCBpc1NWRyA9IGZhbHNlLCBzbG90U2NvcGVJZHMgPSBudWxsLCBvcHRpbWl6ZWQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZyA/IGZhbHNlIDogISFuMi5keW5hbWljQ2hpbGRyZW4pID0+IHtcbiAgICAgICAgaWYgKG4xID09PSBuMikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhdGNoaW5nICYgbm90IHNhbWUgdHlwZSwgdW5tb3VudCBvbGQgdHJlZVxuICAgICAgICBpZiAobjEgJiYgIWlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICAgICAgICBhbmNob3IgPSBnZXROZXh0SG9zdE5vZGUobjEpO1xuICAgICAgICAgICAgdW5tb3VudChuMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgICBuMSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4yLnBhdGNoRmxhZyA9PT0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovKSB7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG4yLmR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZyB9ID0gbjI7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUZXh0OlxuICAgICAgICAgICAgICAgIHByb2Nlc3NUZXh0KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICAgICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxuICAgICAgICAgICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50U3RhdGljTm9kZShuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoU3RhdGljTm9kZShuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLykge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRWxlbWVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NDb21wb25lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgICAgICAgICB0eXBlLnByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgICAgICAgICB0eXBlLnByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNldCByZWZcbiAgICAgICAgaWYgKHJlZiAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudCkge1xuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbjEgJiYgbjEucmVmLCBwYXJlbnRTdXNwZW5zZSwgbjIgfHwgbjEsICFuMik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHByb2Nlc3NUZXh0ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoKG4yLmVsID0gaG9zdENyZWF0ZVRleHQobjIuY2hpbGRyZW4pKSwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZWwgPSAobjIuZWwgPSBuMS5lbCk7XG4gICAgICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgaG9zdFNldFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcHJvY2Vzc0NvbW1lbnROb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoKG4yLmVsID0gaG9zdENyZWF0ZUNvbW1lbnQobjIuY2hpbGRyZW4gfHwgJycpKSwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBzdXBwb3J0IGZvciBkeW5hbWljIGNvbW1lbnRzXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3VudFN0YXRpY05vZGUgPSAobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRykgPT4ge1xuICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBuMi5lbCwgbjIuYW5jaG9yKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldiAvIEhNUiBvbmx5XG4gICAgICovXG4gICAgY29uc3QgcGF0Y2hTdGF0aWNOb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBpc1NWRykgPT4ge1xuICAgICAgICAvLyBzdGF0aWMgbm9kZXMgYXJlIG9ubHkgcGF0Y2hlZCBkdXJpbmcgZGV2IGZvciBITVJcbiAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gaG9zdE5leHRTaWJsaW5nKG4xLmFuY2hvcik7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmdcbiAgICAgICAgICAgIHJlbW92ZVN0YXRpY05vZGUobjEpO1xuICAgICAgICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQobjIuY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgICAgICAgbjIuYW5jaG9yID0gbjEuYW5jaG9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSwgY29udGFpbmVyLCBuZXh0U2libGluZykgPT4ge1xuICAgICAgICBsZXQgbmV4dDtcbiAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBhbmNob3IpIHtcbiAgICAgICAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoZWwpO1xuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gICAgICAgICAgICBlbCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdEluc2VydChhbmNob3IsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSkgPT4ge1xuICAgICAgICBsZXQgbmV4dDtcbiAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBhbmNob3IpIHtcbiAgICAgICAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoZWwpO1xuICAgICAgICAgICAgaG9zdFJlbW92ZShlbCk7XG4gICAgICAgICAgICBlbCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdFJlbW92ZShhbmNob3IpO1xuICAgIH07XG4gICAgY29uc3QgcHJvY2Vzc0VsZW1lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgbjIudHlwZSA9PT0gJ3N2Zyc7XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICBtb3VudEVsZW1lbnQobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGF0Y2hFbGVtZW50KG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW91bnRFbGVtZW50ID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGxldCBlbDtcbiAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgc2hhcGVGbGFnLCB0cmFuc2l0aW9uLCBkaXJzIH0gPSB2bm9kZTtcbiAgICAgICAgZWwgPSB2bm9kZS5lbCA9IGhvc3RDcmVhdGVFbGVtZW50KHZub2RlLnR5cGUsIGlzU1ZHLCBwcm9wcyAmJiBwcm9wcy5pcywgcHJvcHMpO1xuICAgICAgICAvLyBtb3VudCBjaGlsZHJlbiBmaXJzdCwgc2luY2Ugc29tZSBwcm9wcyBtYXkgcmVseSBvbiBjaGlsZCBjb250ZW50XG4gICAgICAgIC8vIGJlaW5nIGFscmVhZHkgcmVuZGVyZWQsIGUuZy4gYDxzZWxlY3QgdmFsdWU+YFxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgdm5vZGUuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4odm5vZGUuY2hpbGRyZW4sIGVsLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyAmJiB0eXBlICE9PSAnZm9yZWlnbk9iamVjdCcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlycykge1xuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnY3JlYXRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByb3BzXG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAndmFsdWUnICYmICFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BlY2lhbCBjYXNlIGZvciBzZXR0aW5nIHZhbHVlIG9uIERPTSBlbGVtZW50czpcbiAgICAgICAgICAgICAqIC0gaXQgY2FuIGJlIG9yZGVyLXNlbnNpdGl2ZSAoZS5nLiBzaG91bGQgYmUgc2V0ICphZnRlciogbWluL21heCwgIzIzMjUsICM0MDI0KVxuICAgICAgICAgICAgICogLSBpdCBuZWVkcyB0byBiZSBmb3JjZWQgKCMxNDcxKVxuICAgICAgICAgICAgICogIzIzNTMgcHJvcG9zZXMgYWRkaW5nIGFub3RoZXIgcmVuZGVyZXIgb3B0aW9uIHRvIGNvbmZpZ3VyZSB0aGlzLCBidXRcbiAgICAgICAgICAgICAqIHRoZSBwcm9wZXJ0aWVzIGFmZmVjdHMgYXJlIHNvIGZpbml0ZSBpdCBpcyB3b3J0aCBzcGVjaWFsIGNhc2luZyBpdFxuICAgICAgICAgICAgICogaGVyZSB0byByZWR1Y2UgdGhlIGNvbXBsZXhpdHkuIChTcGVjaWFsIGNhc2luZyBpdCBhbHNvIHNob3VsZCBub3RcbiAgICAgICAgICAgICAqIGFmZmVjdCBub24tRE9NIHJlbmRlcmVycylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCd2YWx1ZScgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAndmFsdWUnLCBudWxsLCBwcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzY29wZUlkXG4gICAgICAgIHNldFNjb3BlSWQoZWwsIHZub2RlLCB2bm9kZS5zY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdfX3Zub2RlJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB2bm9kZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdfX3Z1ZVBhcmVudENvbXBvbmVudCcsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlycykge1xuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAjMTU4MyBGb3IgaW5zaWRlIHN1c3BlbnNlICsgc3VzcGVuc2Ugbm90IHJlc29sdmVkIGNhc2UsIGVudGVyIGhvb2sgc2hvdWxkIGNhbGwgd2hlbiBzdXNwZW5zZSByZXNvbHZlZFxuICAgICAgICAvLyAjMTY4OSBGb3IgaW5zaWRlIHN1c3BlbnNlICsgc3VzcGVuc2UgcmVzb2x2ZWQgY2FzZSwganVzdCBjYWxsIGl0XG4gICAgICAgIGNvbnN0IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzID0gKCFwYXJlbnRTdXNwZW5zZSB8fCAocGFyZW50U3VzcGVuc2UgJiYgIXBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpKSAmJlxuICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkO1xuICAgICAgICBpZiAobmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICB9XG4gICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHxcbiAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8XG4gICAgICAgICAgICBkaXJzKSB7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyAmJiB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ21vdW50ZWQnKTtcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0U2NvcGVJZCA9IChlbCwgdm5vZGUsIHNjb3BlSWQsIHNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50KSA9PiB7XG4gICAgICAgIGlmIChzY29wZUlkKSB7XG4gICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2NvcGVJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsb3RTY29wZUlkcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbG90U2NvcGVJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2xvdFNjb3BlSWRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICAgICAgICBsZXQgc3ViVHJlZSA9IHBhcmVudENvbXBvbmVudC5zdWJUcmVlO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHN1YlRyZWUucGF0Y2hGbGFnID4gMCAmJlxuICAgICAgICAgICAgICAgIHN1YlRyZWUucGF0Y2hGbGFnICYgMjA0OCAvKiBQYXRjaEZsYWdzLkRFVl9ST09UX0ZSQUdNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgc3ViVHJlZSA9XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2bm9kZSA9PT0gc3ViVHJlZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFZOb2RlID0gcGFyZW50Q29tcG9uZW50LnZub2RlO1xuICAgICAgICAgICAgICAgIHNldFNjb3BlSWQoZWwsIHBhcmVudFZOb2RlLCBwYXJlbnRWTm9kZS5zY29wZUlkLCBwYXJlbnRWTm9kZS5zbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudC5wYXJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBzdGFydCA9IDApID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gKGNoaWxkcmVuW2ldID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjaGlsZHJlbltpXSlcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XG4gICAgICAgICAgICBwYXRjaChudWxsLCBjaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBhdGNoRWxlbWVudCA9IChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcbiAgICAgICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIGRpcnMgfSA9IG4yO1xuICAgICAgICAvLyAjMTQyNiB0YWtlIHRoZSBvbGQgdm5vZGUncyBwYXRjaCBmbGFnIGludG8gYWNjb3VudCBzaW5jZSB1c2VyIG1heSBjbG9uZSBhXG4gICAgICAgIC8vIGNvbXBpbGVyLWdlbmVyYXRlZCB2bm9kZSwgd2hpY2ggZGUtb3B0cyB0byBGVUxMX1BST1BTXG4gICAgICAgIHBhdGNoRmxhZyB8PSBuMS5wYXRjaEZsYWcgJiAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi87XG4gICAgICAgIGNvbnN0IG9sZFByb3BzID0gbjEucHJvcHMgfHwgRU1QVFlfT0JKO1xuICAgICAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgLy8gZGlzYWJsZSByZWN1cnNlIGluIGJlZm9yZVVwZGF0ZSBob29rc1xuICAgICAgICBwYXJlbnRDb21wb25lbnQgJiYgdG9nZ2xlUmVjdXJzZShwYXJlbnRDb21wb25lbnQsIGZhbHNlKTtcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSkge1xuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50Q29tcG9uZW50ICYmIHRvZ2dsZVJlY3Vyc2UocGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZUNoaWxkcmVuU1ZHID0gaXNTVkcgJiYgbjIudHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCkge1xuICAgICAgICAgICAgLy8gZnVsbCBkaWZmXG4gICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGFyZUNoaWxkcmVuU1ZHLCBzbG90U2NvcGVJZHMsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xuICAgICAgICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGEgcGF0Y2hGbGFnIG1lYW5zIHRoaXMgZWxlbWVudCdzIHJlbmRlciBjb2RlIHdhc1xuICAgICAgICAgICAgLy8gZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciBhbmQgY2FuIHRha2UgdGhlIGZhc3QgcGF0aC5cbiAgICAgICAgICAgIC8vIGluIHRoaXMgcGF0aCBvbGQgbm9kZSBhbmQgbmV3IG5vZGUgYXJlIGd1YXJhbnRlZWQgdG8gaGF2ZSB0aGUgc2FtZSBzaGFwZVxuICAgICAgICAgICAgLy8gKGkuZS4gYXQgdGhlIGV4YWN0IHNhbWUgcG9zaXRpb24gaW4gdGhlIHNvdXJjZSB0ZW1wbGF0ZSlcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50IHByb3BzIGNvbnRhaW4gZHluYW1pYyBrZXlzLCBmdWxsIGRpZmYgbmVlZGVkXG4gICAgICAgICAgICAgICAgcGF0Y2hQcm9wcyhlbCwgbjIsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY2xhc3NcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIGNsYXNzIGJpbmRpbmdzLlxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAyIC8qIFBhdGNoRmxhZ3MuQ0xBU1MgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFByb3BzLmNsYXNzICE9PSBuZXdQcm9wcy5jbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ2NsYXNzJywgbnVsbCwgbmV3UHJvcHMuY2xhc3MsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzdHlsZVxuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgc3R5bGUgYmluZGluZ3NcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgNCAvKiBQYXRjaEZsYWdzLlNUWUxFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICdzdHlsZScsIG9sZFByb3BzLnN0eWxlLCBuZXdQcm9wcy5zdHlsZSwgaXNTVkcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBwcm9wc1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgcHJvcC9hdHRyIGJpbmRpbmdzXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgdGhhbiBjbGFzcyBhbmQgc3R5bGUuIFRoZSBrZXlzIG9mIGR5bmFtaWMgcHJvcC9hdHRycyBhcmUgc2F2ZWQgZm9yXG4gICAgICAgICAgICAgICAgLy8gZmFzdGVyIGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIGR5bmFtaWMga2V5cyBsaWtlIDpbZm9vXT1cImJhclwiIHdpbGwgY2F1c2UgdGhpcyBvcHRpbWl6YXRpb24gdG9cbiAgICAgICAgICAgICAgICAvLyBiYWlsIG91dCBhbmQgZ28gdGhyb3VnaCBhIGZ1bGwgZGlmZiBiZWNhdXNlIHdlIG5lZWQgdG8gdW5zZXQgdGhlIG9sZCBrZXlcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCAvKiBQYXRjaEZsYWdzLlBST1BTICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmbGFnIGlzIHByZXNlbnQgdGhlbiBkeW5hbWljUHJvcHMgbXVzdCBiZSBub24tbnVsbFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gbjIuZHluYW1pY1Byb3BzO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BzVG9VcGRhdGVbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIzE0NzEgZm9yY2UgcGF0Y2ggdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8IGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgaXNTVkcsIG4xLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGV4dFxuICAgICAgICAgICAgLy8gVGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgb25seSBkeW5hbWljIHRleHQgY2hpbGRyZW4uXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMSAvKiBQYXRjaEZsYWdzLlRFWFQgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAobjEuY2hpbGRyZW4gIT09IG4yLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkICYmIGR5bmFtaWNDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB1bm9wdGltaXplZCwgZnVsbCBkaWZmXG4gICAgICAgICAgICBwYXRjaFByb3BzKGVsLCBuMiwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgJ3VwZGF0ZWQnKTtcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gVGhlIGZhc3QgcGF0aCBmb3IgYmxvY2tzLlxuICAgIGNvbnN0IHBhdGNoQmxvY2tDaGlsZHJlbiA9IChvbGRDaGlsZHJlbiwgbmV3Q2hpbGRyZW4sIGZhbGxiYWNrQ29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZFZOb2RlID0gb2xkQ2hpbGRyZW5baV07XG4gICAgICAgICAgICBjb25zdCBuZXdWTm9kZSA9IG5ld0NoaWxkcmVuW2ldO1xuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBjb250YWluZXIgKHBhcmVudCBlbGVtZW50KSBmb3IgdGhlIHBhdGNoLlxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gXG4gICAgICAgICAgICAvLyBvbGRWTm9kZSBtYXkgYmUgYW4gZXJyb3JlZCBhc3luYyBzZXR1cCgpIGNvbXBvbmVudCBpbnNpZGUgU3VzcGVuc2VcbiAgICAgICAgICAgIC8vIHdoaWNoIHdpbGwgbm90IGhhdmUgYSBtb3VudGVkIGVsZW1lbnRcbiAgICAgICAgICAgIG9sZFZOb2RlLmVsICYmXG4gICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIEZyYWdtZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFjdHVhbCBwYXJlbnRcbiAgICAgICAgICAgICAgICAvLyBvZiB0aGUgRnJhZ21lbnQgaXRzZWxmIHNvIGl0IGNhbiBtb3ZlIGl0cyBjaGlsZHJlbi5cbiAgICAgICAgICAgICAgICAob2xkVk5vZGUudHlwZSA9PT0gRnJhZ21lbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBkaWZmZXJlbnQgbm9kZXMsIHRoZXJlIGlzIGdvaW5nIHRvIGJlIGEgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggYWxzbyByZXF1aXJlcyB0aGUgY29ycmVjdCBwYXJlbnQgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICFpc1NhbWVWTm9kZVR5cGUob2xkVk5vZGUsIG5ld1ZOb2RlKSB8fFxuICAgICAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgY29tcG9uZW50LCBpdCBjb3VsZCBjb250YWluIGFueXRoaW5nLlxuICAgICAgICAgICAgICAgICAgICBvbGRWTm9kZS5zaGFwZUZsYWcgJiAoNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLyB8IDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pKVxuICAgICAgICAgICAgICAgID8gaG9zdFBhcmVudE5vZGUob2xkVk5vZGUuZWwpXG4gICAgICAgICAgICAgICAgOiAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcbiAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBwYXNzIHRoZSBibG9jayBlbGVtZW50IGhlcmUgdG8gYXZvaWQgYSBET00gcGFyZW50Tm9kZSBjYWxsLlxuICAgICAgICAgICAgICAgICAgICBmYWxsYmFja0NvbnRhaW5lcjtcbiAgICAgICAgICAgIHBhdGNoKG9sZFZOb2RlLCBuZXdWTm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGF0Y2hQcm9wcyA9IChlbCwgdm5vZGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpID0+IHtcbiAgICAgICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcykge1xuICAgICAgICAgICAgaWYgKG9sZFByb3BzICE9PSBFTVBUWV9PQkopIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvbGRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG9sZFByb3BzW2tleV0sIG51bGwsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGlzIG5vdCB2YWxpZCBwcm9wXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIC8vIGRlZmVyIHBhdGNoaW5nIHZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgJiYga2V5ICE9PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgndmFsdWUnIGluIG5ld1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3ZhbHVlJywgb2xkUHJvcHMudmFsdWUsIG5ld1Byb3BzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCBmcmFnbWVudFN0YXJ0QW5jaG9yID0gKG4yLmVsID0gbjEgPyBuMS5lbCA6IGhvc3RDcmVhdGVUZXh0KCcnKSk7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50RW5kQW5jaG9yID0gKG4yLmFuY2hvciA9IG4xID8gbjEuYW5jaG9yIDogaG9zdENyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIHNsb3RTY29wZUlkczogZnJhZ21lbnRTbG90U2NvcGVJZHMgfSA9IG4yO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAvLyAjNTUyMyBkZXYgcm9vdCBmcmFnbWVudCBtYXkgaW5oZXJpdCBkaXJlY3RpdmVzXG4gICAgICAgICAgICAoaXNIbXJVcGRhdGluZyB8fCBwYXRjaEZsYWcgJiAyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi8pKSB7XG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCAvIERldiByb290IGZyYWdtZW50ICh3LyBjb21tZW50cyksIGZvcmNlIGZ1bGwgZGlmZlxuICAgICAgICAgICAgcGF0Y2hGbGFnID0gMDtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIGEgc2xvdCBmcmFnbWVudCB3aXRoIDpzbG90dGVkIHNjb3BlIGlkc1xuICAgICAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkc1xuICAgICAgICAgICAgICAgID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcylcbiAgICAgICAgICAgICAgICA6IGZyYWdtZW50U2xvdFNjb3BlSWRzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KGZyYWdtZW50U3RhcnRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRFbmRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIC8vIGEgZnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBhcnJheSBjaGlsZHJlblxuICAgICAgICAgICAgLy8gc2luY2UgdGhleSBhcmUgZWl0aGVyIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIsIG9yIGltcGxpY2l0bHkgY3JlYXRlZFxuICAgICAgICAgICAgLy8gZnJvbSBhcnJheXMuXG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGZyYWdtZW50RW5kQW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDAgJiZcbiAgICAgICAgICAgICAgICBwYXRjaEZsYWcgJiA2NCAvKiBQYXRjaEZsYWdzLlNUQUJMRV9GUkFHTUVOVCAqLyAmJlxuICAgICAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiAmJlxuICAgICAgICAgICAgICAgIC8vICMyNzE1IHRoZSBwcmV2aW91cyBmcmFnbWVudCBjb3VsZCd2ZSBiZWVuIGEgQkFJTGVkIG9uZSBhcyBhIHJlc3VsdFxuICAgICAgICAgICAgICAgIC8vIG9mIHJlbmRlclNsb3QoKSB3aXRoIG5vIHZhbGlkIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBzdGFibGUgZnJhZ21lbnQgKHRlbXBsYXRlIHJvb3Qgb3IgPHRlbXBsYXRlIHYtZm9yPikgZG9lc24ndCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gcGF0Y2ggY2hpbGRyZW4gb3JkZXIsIGJ1dCBpdCBtYXkgY29udGFpbiBkeW5hbWljQ2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAvLyAjMjA4MCBpZiB0aGUgc3RhYmxlIGZyYWdtZW50IGhhcyBhIGtleSwgaXQncyBhIDx0ZW1wbGF0ZSB2LWZvcj4gdGhhdCBtYXlcbiAgICAgICAgICAgICAgICAvLyAgZ2V0IG1vdmVkIGFyb3VuZC4gTWFrZSBzdXJlIGFsbCByb290IGxldmVsIHZub2RlcyBpbmhlcml0IGVsLlxuICAgICAgICAgICAgICAgIC8vICMyMTM0IG9yIGlmIGl0J3MgYSBjb21wb25lbnQgcm9vdCwgaXQgbWF5IGFsc28gZ2V0IG1vdmVkIGFyb3VuZFxuICAgICAgICAgICAgICAgIC8vIGFzIHRoZSBjb21wb25lbnQgaXMgYmVpbmcgbW92ZWQuXG4gICAgICAgICAgICAgICAgbjIua2V5ICE9IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBhcmVudENvbXBvbmVudCAmJiBuMiA9PT0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlIC8qIHNoYWxsb3cgKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGtleWVkIC8gdW5rZXllZCwgb3IgbWFudWFsIGZyYWdtZW50cy5cbiAgICAgICAgICAgICAgICAvLyBmb3Iga2V5ZWQgJiB1bmtleWVkLCBzaW5jZSB0aGV5IGFyZSBjb21waWxlciBnZW5lcmF0ZWQgZnJvbSB2LWZvcixcbiAgICAgICAgICAgICAgICAvLyBlYWNoIGNoaWxkIGlzIGd1YXJhbnRlZWQgdG8gYmUgYSBibG9jayBzbyB0aGUgZnJhZ21lbnQgd2lsbCBuZXZlclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgZHluYW1pY0NoaWxkcmVuLlxuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjb250YWluZXIsIGZyYWdtZW50RW5kQW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzQ29tcG9uZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBuMi5zbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHM7XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobjIuc2hhcGVGbGFnICYgNTEyIC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmFjdGl2YXRlKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3VudENvbXBvbmVudChuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW91bnRDb21wb25lbnQgPSAoaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChpbml0aWFsVk5vZGUuY29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoaW5pdGlhbFZOb2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKSk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XG4gICAgICAgICAgICByZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGluaXRpYWxWTm9kZSk7XG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluamVjdCByZW5kZXJlciBpbnRlcm5hbHMgZm9yIGtlZXBBbGl2ZVxuICAgICAgICBpZiAoaXNLZWVwQWxpdmUoaW5pdGlhbFZOb2RlKSkge1xuICAgICAgICAgICAgaW5zdGFuY2UuY3R4LnJlbmRlcmVyID0gaW50ZXJuYWxzO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlc29sdmUgcHJvcHMgYW5kIHNsb3RzIGZvciBzZXR1cCBjb250ZXh0XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXR1cENvbXBvbmVudChpbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzZXR1cCgpIGlzIGFzeW5jLiBUaGlzIGNvbXBvbmVudCByZWxpZXMgb24gYXN5bmMgbG9naWMgdG8gYmUgcmVzb2x2ZWRcbiAgICAgICAgLy8gYmVmb3JlIHByb2NlZWRpbmdcbiAgICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwKSB7XG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5yZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpO1xuICAgICAgICAgICAgLy8gR2l2ZSBpdCBhIHBsYWNlaG9sZGVyIGlmIHRoaXMgaXMgbm90IGh5ZHJhdGlvblxuICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgc2VsZi1kZWZpbmVkIGZhbGxiYWNrXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxWTm9kZS5lbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKGluc3RhbmNlLnN1YlRyZWUgPSBjcmVhdGVWTm9kZShDb21tZW50KSk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDb21wb25lbnQgPSAobjEsIG4yLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSAobjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50KTtcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCkpIHtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5hc3luY0RlcCAmJlxuICAgICAgICAgICAgICAgICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgJiBzdGlsbCBwZW5kaW5nIC0ganVzdCB1cGRhdGUgcHJvcHMgYW5kIHNsb3RzXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIGNvbXBvbmVudCdzIHJlYWN0aXZlIGVmZmVjdCBmb3IgcmVuZGVyIGlzbid0IHNldC11cCB5ZXRcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgdXBkYXRlXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UubmV4dCA9IG4yO1xuICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBhbHNvIHF1ZXVlZCwgcmVtb3ZlIGl0IHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgLy8gZG91YmxlIHVwZGF0aW5nIHRoZSBzYW1lIGNoaWxkIGNvbXBvbmVudCBpbiB0aGUgc2FtZSBmbHVzaC5cbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRlSm9iKGluc3RhbmNlLnVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UudXBkYXRlIGlzIHRoZSByZWFjdGl2ZSBlZmZlY3QuXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBubyB1cGRhdGUgbmVlZGVkLiBqdXN0IGNvcHkgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuMjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0dXBSZW5kZXJFZmZlY3QgPSAoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFVwZGF0ZUZuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBibSwgbSwgcGFyZW50IH0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FzeW5jV3JhcHBlclZOb2RlID0gaXNBc3luY1dyYXBwZXIoaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQgaG9va1xuICAgICAgICAgICAgICAgIGlmIChibSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhibSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVNb3VudFxuICAgICAgICAgICAgICAgIGlmICghaXNBc3luY1dyYXBwZXJWTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChlbCAmJiBoeWRyYXRlTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBoYXMgYWRvcHRlZCBob3N0IG5vZGUgLSBwZXJmb3JtIGh5ZHJhdGlvbiBpbnN0ZWFkIG9mIG1vdW50LlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoeWRyYXRlU3ViVHJlZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZU5vZGUoZWwsIGluc3RhbmNlLnN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXN5bmNXcmFwcGVyVk5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZS50eXBlLl9fYXN5bmNMb2FkZXIoKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90ZTogd2UgYXJlIG1vdmluZyB0aGUgcmVuZGVyIGNhbGwgaW50byBhbiBhc3luYyBjYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIG1lYW5zIGl0IHdvbid0IHRyYWNrIGRlcGVuZGVuY2llcyAtIGJ1dCBpdCdzIG9rIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgc2VydmVyLXJlbmRlcmVkIGFzeW5jIHdyYXBwZXIgaXMgYWxyZWFkeSBpbiByZXNvbHZlZCBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGl0IHdpbGwgbmV2ZXIgbmVlZCB0byBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAoKSA9PiAhaW5zdGFuY2UuaXNVbm1vdW50ZWQgJiYgaHlkcmF0ZVN1YlRyZWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlU3ViVHJlZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJUcmVlID0gKGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlLmVsID0gc3ViVHJlZS5lbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZU1vdW50ZWRcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY29wZWRJbml0aWFsVk5vZGUgPSBpbml0aWFsVk5vZGU7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIHNjb3BlZEluaXRpYWxWTm9kZSksIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYWN0aXZhdGVkIGhvb2sgZm9yIGtlZXAtYWxpdmUgcm9vdHMuXG4gICAgICAgICAgICAgICAgLy8gIzE3NDIgYWN0aXZhdGVkIGhvb2sgbXVzdCBiZSBhY2Nlc3NlZCBhZnRlciBmaXJzdCByZW5kZXJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgaG9vayBtYXkgYmUgaW5qZWN0ZWQgYnkgYSBjaGlsZCBrZWVwLWFsaXZlXG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxWTm9kZS5zaGFwZUZsYWcgJiAyNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8gfHxcbiAgICAgICAgICAgICAgICAgICAgKHBhcmVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBc3luY1dyYXBwZXIocGFyZW50LnZub2RlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnZub2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuYSAmJiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoaW5zdGFuY2UuYSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAjMjQ1ODogZGVmZXJlbmNlIG1vdW50LW9ubHkgb2JqZWN0IHBhcmFtZXRlcnMgdG8gcHJldmVudCBtZW1sZWFrc1xuICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZSA9IGNvbnRhaW5lciA9IGFuY2hvciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVDb21wb25lbnRcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRyaWdnZXJlZCBieSBtdXRhdGlvbiBvZiBjb21wb25lbnQncyBvd24gc3RhdGUgKG5leHQ6IG51bGwpXG4gICAgICAgICAgICAgICAgLy8gT1IgcGFyZW50IGNhbGxpbmcgcHJvY2Vzc0NvbXBvbmVudCAobmV4dDogVk5vZGUpXG4gICAgICAgICAgICAgICAgbGV0IHsgbmV4dCwgYnUsIHUsIHBhcmVudCwgdm5vZGUgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcbiAgICAgICAgICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEaXNhbGxvdyBjb21wb25lbnQgZWZmZWN0IHJlY3Vyc2lvbiBkdXJpbmcgcHJlLWxpZmVjeWNsZSBob29rcy5cbiAgICAgICAgICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5lbCA9IHZub2RlLmVsO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG5leHQsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gdm5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZVVwZGF0ZSBob29rXG4gICAgICAgICAgICAgICAgaWYgKGJ1KSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZVVwZGF0ZVxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyByZW5kZXJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2VHJlZSA9IGluc3RhbmNlLnN1YlRyZWU7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IG5leHRUcmVlO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGF0Y2gocHJldlRyZWUsIG5leHRUcmVlLCBcbiAgICAgICAgICAgICAgICAvLyBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBpZiBpdCdzIGluIGEgdGVsZXBvcnRcbiAgICAgICAgICAgICAgICBob3N0UGFyZW50Tm9kZShwcmV2VHJlZS5lbCksIFxuICAgICAgICAgICAgICAgIC8vIGFuY2hvciBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSBmcmFnbWVudFxuICAgICAgICAgICAgICAgIGdldE5leHRIb3N0Tm9kZShwcmV2VHJlZSksIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luTmV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWxmLXRyaWdnZXJlZCB1cGRhdGUuIEluIGNhc2Ugb2YgSE9DLCB1cGRhdGUgcGFyZW50IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBlbC4gSE9DIGlzIGluZGljYXRlZCBieSBwYXJlbnQgaW5zdGFuY2UncyBzdWJUcmVlIHBvaW50aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGNoaWxkIGNvbXBvbmVudCdzIHZub2RlXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgbmV4dFRyZWUuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVkIGhvb2tcbiAgICAgICAgICAgICAgICBpZiAodSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvblZub2RlVXBkYXRlZFxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVVcGRhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSksIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gY3JlYXRlIHJlYWN0aXZlIGVmZmVjdCBmb3IgcmVuZGVyaW5nXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IChpbnN0YW5jZS5lZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoY29tcG9uZW50VXBkYXRlRm4sICgpID0+IHF1ZXVlSm9iKHVwZGF0ZSksIGluc3RhbmNlLnNjb3BlIC8vIHRyYWNrIGl0IGluIGNvbXBvbmVudCdzIGVmZmVjdCBzY29wZVxuICAgICAgICApKTtcbiAgICAgICAgY29uc3QgdXBkYXRlID0gKGluc3RhbmNlLnVwZGF0ZSA9ICgpID0+IGVmZmVjdC5ydW4oKSk7XG4gICAgICAgIHVwZGF0ZS5pZCA9IGluc3RhbmNlLnVpZDtcbiAgICAgICAgLy8gYWxsb3dSZWN1cnNlXG4gICAgICAgIC8vICMxODAxLCAjMjA0MyBjb21wb25lbnQgcmVuZGVyIGVmZmVjdHMgc2hvdWxkIGFsbG93IHJlY3Vyc2l2ZSB1cGRhdGVzXG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBlZmZlY3Qub25UcmFjayA9IGluc3RhbmNlLnJ0Y1xuICAgICAgICAgICAgICAgID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGMsIGUpXG4gICAgICAgICAgICAgICAgOiB2b2lkIDA7XG4gICAgICAgICAgICBlZmZlY3Qub25UcmlnZ2VyID0gaW5zdGFuY2UucnRnXG4gICAgICAgICAgICAgICAgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0ZywgZSlcbiAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgICAgIHVwZGF0ZS5vd25lckluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlKCk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIgPSAoaW5zdGFuY2UsIG5leHRWTm9kZSwgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIG5leHRWTm9kZS5jb21wb25lbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgY29uc3QgcHJldlByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHM7XG4gICAgICAgIGluc3RhbmNlLnZub2RlID0gbmV4dFZOb2RlO1xuICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbnVsbDtcbiAgICAgICAgdXBkYXRlUHJvcHMoaW5zdGFuY2UsIG5leHRWTm9kZS5wcm9wcywgcHJldlByb3BzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB1cGRhdGVTbG90cyhpbnN0YW5jZSwgbmV4dFZOb2RlLmNoaWxkcmVuLCBvcHRpbWl6ZWQpO1xuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgIC8vIHByb3BzIHVwZGF0ZSBtYXkgaGF2ZSB0cmlnZ2VyZWQgcHJlLWZsdXNoIHdhdGNoZXJzLlxuICAgICAgICAvLyBmbHVzaCB0aGVtIGJlZm9yZSB0aGUgcmVuZGVyIHVwZGF0ZS5cbiAgICAgICAgZmx1c2hQcmVGbHVzaENicygpO1xuICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgfTtcbiAgICBjb25zdCBwYXRjaENoaWxkcmVuID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGMxID0gbjEgJiYgbjEuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XG4gICAgICAgIGNvbnN0IGMyID0gbjIuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IHsgcGF0Y2hGbGFnLCBzaGFwZUZsYWcgfSA9IG4yO1xuICAgICAgICAvLyBmYXN0IHBhdGhcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqLykge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgY291bGQgYmUgZWl0aGVyIGZ1bGx5LWtleWVkIG9yIG1peGVkIChzb21lIGtleWVkIHNvbWUgbm90KVxuICAgICAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHBhdGNoRmxhZyBtZWFucyBjaGlsZHJlbiBhcmUgZ3VhcmFudGVlZCB0byBiZSBhcnJheXNcbiAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiAyNTYgLyogUGF0Y2hGbGFncy5VTktFWUVEX0ZSQUdNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgLy8gdW5rZXllZFxuICAgICAgICAgICAgICAgIHBhdGNoVW5rZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNoaWxkcmVuIGhhcyAzIHBvc3NpYmlsaXRpZXM6IHRleHQsIGFycmF5IG9yIG5vIGNoaWxkcmVuLlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgIC8vIHRleHQgY2hpbGRyZW4gZmFzdCBwYXRoXG4gICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMyICE9PSBjMSkge1xuICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsIGMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgIC8vIHByZXYgY2hpbGRyZW4gd2FzIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHdvIGFycmF5cywgY2Fubm90IGFzc3VtZSBhbnl0aGluZywgZG8gZnVsbCBkaWZmXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbmV3IGNoaWxkcmVuLCBqdXN0IHVubW91bnQgb2xkXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgdGV4dCBPUiBudWxsXG4gICAgICAgICAgICAgICAgLy8gbmV3IGNoaWxkcmVuIGlzIGFycmF5IE9SIG51bGxcbiAgICAgICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbW91bnQgbmV3IGlmIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwYXRjaFVua2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgYzEgPSBjMSB8fCBFTVBUWV9BUlI7XG4gICAgICAgIGMyID0gYzIgfHwgRU1QVFlfQVJSO1xuICAgICAgICBjb25zdCBvbGRMZW5ndGggPSBjMS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IGMyLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY29tbW9uTGVuZ3RoID0gTWF0aC5taW4ob2xkTGVuZ3RoLCBuZXdMZW5ndGgpO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbW1vbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcbiAgICAgICAgICAgIHBhdGNoKGMxW2ldLCBuZXh0Q2hpbGQsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkXG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUsIGZhbHNlLCBjb21tb25MZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbW91bnQgbmV3XG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBjb21tb25MZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBjYW4gYmUgYWxsLWtleWVkIG9yIG1peGVkXG4gICAgY29uc3QgcGF0Y2hLZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGNvbnN0IGwyID0gYzIubGVuZ3RoO1xuICAgICAgICBsZXQgZTEgPSBjMS5sZW5ndGggLSAxOyAvLyBwcmV2IGVuZGluZyBpbmRleFxuICAgICAgICBsZXQgZTIgPSBsMiAtIDE7IC8vIG5leHQgZW5kaW5nIGluZGV4XG4gICAgICAgIC8vIDEuIHN5bmMgZnJvbSBzdGFydFxuICAgICAgICAvLyAoYSBiKSBjXG4gICAgICAgIC8vIChhIGIpIGQgZVxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICAgICAgICBjb25zdCBuMSA9IGMxW2ldO1xuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMi4gc3luYyBmcm9tIGVuZFxuICAgICAgICAvLyBhIChiIGMpXG4gICAgICAgIC8vIGQgZSAoYiBjKVxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICAgICAgICBjb25zdCBuMSA9IGMxW2UxXTtcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2UyXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbZTJdKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbZTJdKSk7XG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgICAgICAgICBwYXRjaChuMSwgbjIsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZTEtLTtcbiAgICAgICAgICAgIGUyLS07XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4gY29tbW9uIHNlcXVlbmNlICsgbW91bnRcbiAgICAgICAgLy8gKGEgYilcbiAgICAgICAgLy8gKGEgYikgY1xuICAgICAgICAvLyBpID0gMiwgZTEgPSAxLCBlMiA9IDJcbiAgICAgICAgLy8gKGEgYilcbiAgICAgICAgLy8gYyAoYSBiKVxuICAgICAgICAvLyBpID0gMCwgZTEgPSAtMSwgZTIgPSAwXG4gICAgICAgIGlmIChpID4gZTEpIHtcbiAgICAgICAgICAgIGlmIChpIDw9IGUyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFBvcyA9IGUyICsgMTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0UG9zIDwgbDIgPyBjMltuZXh0UG9zXS5lbCA6IHBhcmVudEFuY2hvcjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8PSBlMikge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCAoYzJbaV0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSksIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDQuIGNvbW1vbiBzZXF1ZW5jZSArIHVubW91bnRcbiAgICAgICAgLy8gKGEgYikgY1xuICAgICAgICAvLyAoYSBiKVxuICAgICAgICAvLyBpID0gMiwgZTEgPSAyLCBlMiA9IDFcbiAgICAgICAgLy8gYSAoYiBjKVxuICAgICAgICAvLyAoYiBjKVxuICAgICAgICAvLyBpID0gMCwgZTEgPSAwLCBlMiA9IC0xXG4gICAgICAgIGVsc2UgaWYgKGkgPiBlMikge1xuICAgICAgICAgICAgd2hpbGUgKGkgPD0gZTEpIHtcbiAgICAgICAgICAgICAgICB1bm1vdW50KGMxW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNS4gdW5rbm93biBzZXF1ZW5jZVxuICAgICAgICAvLyBbaSAuLi4gZTEgKyAxXTogYSBiIFtjIGQgZV0gZiBnXG4gICAgICAgIC8vIFtpIC4uLiBlMiArIDFdOiBhIGIgW2UgZCBjIGhdIGYgZ1xuICAgICAgICAvLyBpID0gMiwgZTEgPSA0LCBlMiA9IDVcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzMSA9IGk7IC8vIHByZXYgc3RhcnRpbmcgaW5kZXhcbiAgICAgICAgICAgIGNvbnN0IHMyID0gaTsgLy8gbmV4dCBzdGFydGluZyBpbmRleFxuICAgICAgICAgICAgLy8gNS4xIGJ1aWxkIGtleTppbmRleCBtYXAgZm9yIG5ld0NoaWxkcmVuXG4gICAgICAgICAgICBjb25zdCBrZXlUb05ld0luZGV4TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgZm9yIChpID0gczI7IGkgPD0gZTI7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxuICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleVRvTmV3SW5kZXhNYXAuaGFzKG5leHRDaGlsZC5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBEdXBsaWNhdGUga2V5cyBmb3VuZCBkdXJpbmcgdXBkYXRlOmAsIEpTT04uc3RyaW5naWZ5KG5leHRDaGlsZC5rZXkpLCBgTWFrZSBzdXJlIGtleXMgYXJlIHVuaXF1ZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrZXlUb05ld0luZGV4TWFwLnNldChuZXh0Q2hpbGQua2V5LCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA1LjIgbG9vcCB0aHJvdWdoIG9sZCBjaGlsZHJlbiBsZWZ0IHRvIGJlIHBhdGNoZWQgYW5kIHRyeSB0byBwYXRjaFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgbm9kZXMgJiByZW1vdmUgbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnRcbiAgICAgICAgICAgIGxldCBqO1xuICAgICAgICAgICAgbGV0IHBhdGNoZWQgPSAwO1xuICAgICAgICAgICAgY29uc3QgdG9CZVBhdGNoZWQgPSBlMiAtIHMyICsgMTtcbiAgICAgICAgICAgIGxldCBtb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gdXNlZCB0byB0cmFjayB3aGV0aGVyIGFueSBub2RlIGhhcyBtb3ZlZFxuICAgICAgICAgICAgbGV0IG1heE5ld0luZGV4U29GYXIgPSAwO1xuICAgICAgICAgICAgLy8gd29ya3MgYXMgTWFwPG5ld0luZGV4LCBvbGRJbmRleD5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBvbGRJbmRleCBpcyBvZmZzZXQgYnkgKzFcbiAgICAgICAgICAgIC8vIGFuZCBvbGRJbmRleCA9IDAgaXMgYSBzcGVjaWFsIHZhbHVlIGluZGljYXRpbmcgdGhlIG5ldyBub2RlIGhhc1xuICAgICAgICAgICAgLy8gbm8gY29ycmVzcG9uZGluZyBvbGQgbm9kZS5cbiAgICAgICAgICAgIC8vIHVzZWQgZm9yIGRldGVybWluaW5nIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlXG4gICAgICAgICAgICBjb25zdCBuZXdJbmRleFRvT2xkSW5kZXhNYXAgPSBuZXcgQXJyYXkodG9CZVBhdGNoZWQpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvQmVQYXRjaGVkOyBpKyspXG4gICAgICAgICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID0gMDtcbiAgICAgICAgICAgIGZvciAoaSA9IHMxOyBpIDw9IGUxOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBjMVtpXTtcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hlZCA+PSB0b0JlUGF0Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhbGwgbmV3IGNoaWxkcmVuIGhhdmUgYmVlbiBwYXRjaGVkIHNvIHRoaXMgY2FuIG9ubHkgYmUgYSByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBuZXdJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAocHJldkNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ID0ga2V5VG9OZXdJbmRleE1hcC5nZXQocHJldkNoaWxkLmtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBrZXktbGVzcyBub2RlLCB0cnkgdG8gbG9jYXRlIGEga2V5LWxlc3Mgbm9kZSBvZiB0aGUgc2FtZSB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHMyOyBqIDw9IGUyOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaiAtIHMyXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2FtZVZOb2RlVHlwZShwcmV2Q2hpbGQsIGMyW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbbmV3SW5kZXggLSBzMl0gPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IG1heE5ld0luZGV4U29GYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heE5ld0luZGV4U29GYXIgPSBuZXdJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXRjaChwcmV2Q2hpbGQsIGMyW25ld0luZGV4XSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICBwYXRjaGVkKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNS4zIG1vdmUgYW5kIG1vdW50XG4gICAgICAgICAgICAvLyBnZW5lcmF0ZSBsb25nZXN0IHN0YWJsZSBzdWJzZXF1ZW5jZSBvbmx5IHdoZW4gbm9kZXMgaGF2ZSBtb3ZlZFxuICAgICAgICAgICAgY29uc3QgaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UgPSBtb3ZlZFxuICAgICAgICAgICAgICAgID8gZ2V0U2VxdWVuY2UobmV3SW5kZXhUb09sZEluZGV4TWFwKVxuICAgICAgICAgICAgICAgIDogRU1QVFlfQVJSO1xuICAgICAgICAgICAgaiA9IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAvLyBsb29waW5nIGJhY2t3YXJkcyBzbyB0aGF0IHdlIGNhbiB1c2UgbGFzdCBwYXRjaGVkIG5vZGUgYXMgYW5jaG9yXG4gICAgICAgICAgICBmb3IgKGkgPSB0b0JlUGF0Y2hlZCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gczIgKyBpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW25leHRJbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dEluZGV4ICsgMSA8IGwyID8gYzJbbmV4dEluZGV4ICsgMV0uZWwgOiBwYXJlbnRBbmNob3I7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXdcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV4dENoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpZjpcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gc3RhYmxlIHN1YnNlcXVlbmNlIChlLmcuIGEgcmV2ZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gT1IgY3VycmVudCBub2RlIGlzIG5vdCBhbW9uZyB0aGUgc3RhYmxlIHNlcXVlbmNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBpICE9PSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZVtqXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZShuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCAyIC8qIE1vdmVUeXBlLlJFT1JERVIgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3ZlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUsIHBhcmVudFN1c3BlbnNlID0gbnVsbCkgPT4ge1xuICAgICAgICBjb25zdCB7IGVsLCB0eXBlLCB0cmFuc2l0aW9uLCBjaGlsZHJlbiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgIG1vdmUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS5tb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pIHtcbiAgICAgICAgICAgIHR5cGUubW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGludGVybmFscyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbW92ZShjaGlsZHJlbltpXSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhvc3RJbnNlcnQodm5vZGUuYW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xuICAgICAgICAgICAgbW92ZVN0YXRpY05vZGUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaW5nbGUgbm9kZXNcbiAgICAgICAgY29uc3QgbmVlZFRyYW5zaXRpb24gPSBtb3ZlVHlwZSAhPT0gMiAvKiBNb3ZlVHlwZS5SRU9SREVSICovICYmXG4gICAgICAgICAgICBzaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyAmJlxuICAgICAgICAgICAgdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKG5lZWRUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogTW92ZVR5cGUuRU5URVIgKi8pIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICAgICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHRyYW5zaXRpb24uZW50ZXIoZWwpLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlLCBhZnRlckxlYXZlIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChkZWxheUxlYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5TGVhdmUoZWwsIHJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdW5tb3VudCA9ICh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgcmVmLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBzaGFwZUZsYWcsIHBhdGNoRmxhZywgZGlycyB9ID0gdm5vZGU7XG4gICAgICAgIC8vIHVuc2V0IHJlZlxuICAgICAgICBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG51bGwsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykge1xuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5kZWFjdGl2YXRlKHZub2RlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gJiYgZGlycztcbiAgICAgICAgY29uc3Qgc2hvdWxkSW52b2tlVm5vZGVIb29rID0gIWlzQXN5bmNXcmFwcGVyKHZub2RlKTtcbiAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgaWYgKHNob3VsZEludm9rZVZub2RlSG9vayAmJlxuICAgICAgICAgICAgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVVbm1vdW50KSkge1xuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgIHVubW91bnRDb21wb25lbnQodm5vZGUuY29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuc3VzcGVuc2UudW5tb3VudChwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRJbnZva2VEaXJzKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVW5tb3VudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pIHtcbiAgICAgICAgICAgICAgICB2bm9kZS50eXBlLnJlbW92ZSh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCBpbnRlcm5hbHMsIGRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGR5bmFtaWNDaGlsZHJlbiAmJlxuICAgICAgICAgICAgICAgIC8vICMxMTUzOiBmYXN0IHBhdGggc2hvdWxkIG5vdCBiZSB0YWtlbiBmb3Igbm9uLXN0YWJsZSAodi1mb3IpIGZyYWdtZW50c1xuICAgICAgICAgICAgICAgICh0eXBlICE9PSBGcmFnbWVudCB8fFxuICAgICAgICAgICAgICAgICAgICAocGF0Y2hGbGFnID4gMCAmJiBwYXRjaEZsYWcgJiA2NCAvKiBQYXRjaEZsYWdzLlNUQUJMRV9GUkFHTUVOVCAqLykpKSB7XG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIGZvciBibG9jayBub2Rlczogb25seSBuZWVkIHRvIHVubW91bnQgZHluYW1pYyBjaGlsZHJlbi5cbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oZHluYW1pY0NoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgodHlwZSA9PT0gRnJhZ21lbnQgJiZcbiAgICAgICAgICAgICAgICBwYXRjaEZsYWcgJlxuICAgICAgICAgICAgICAgICAgICAoMTI4IC8qIFBhdGNoRmxhZ3MuS0VZRURfRlJBR01FTlQgKi8gfCAyNTYgLyogUGF0Y2hGbGFncy5VTktFWUVEX0ZSQUdNRU5UICovKSkgfHxcbiAgICAgICAgICAgICAgICAoIW9wdGltaXplZCAmJiBzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSkge1xuICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICByZW1vdmUodm5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmXG4gICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZVVubW91bnRlZCkpIHx8XG4gICAgICAgICAgICBzaG91bGRJbnZva2VEaXJzKSB7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICBzaG91bGRJbnZva2VEaXJzICYmXG4gICAgICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ3VubW91bnRlZCcpO1xuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmUgPSB2bm9kZSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgZWwsIGFuY2hvciwgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XG4gICAgICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyA+IDAgJiZcbiAgICAgICAgICAgICAgICB2bm9kZS5wYXRjaEZsYWcgJiAyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi8gJiZcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uICYmXG4gICAgICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UmVtb3ZlKGNoaWxkLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZUZyYWdtZW50KGVsLCBhbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcbiAgICAgICAgICAgIHJlbW92ZVN0YXRpY05vZGUodm5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBlcmZvcm1SZW1vdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCAmJiB0cmFuc2l0aW9uLmFmdGVyTGVhdmUpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmFmdGVyTGVhdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmXG4gICAgICAgICAgICB0cmFuc2l0aW9uICYmXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUgfSA9IHRyYW5zaXRpb247XG4gICAgICAgICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiBsZWF2ZShlbCwgcGVyZm9ybVJlbW92ZSk7XG4gICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgICAgICAgICAgIGRlbGF5TGVhdmUodm5vZGUuZWwsIHBlcmZvcm1SZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlcmZvcm1SZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlRnJhZ21lbnQgPSAoY3VyLCBlbmQpID0+IHtcbiAgICAgICAgLy8gRm9yIGZyYWdtZW50cywgZGlyZWN0bHkgcmVtb3ZlIGFsbCBjb250YWluZWQgRE9NIG5vZGVzLlxuICAgICAgICAvLyAoZnJhZ21lbnQgY2hpbGQgbm9kZXMgY2Fubm90IGhhdmUgdHJhbnNpdGlvbilcbiAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgIHdoaWxlIChjdXIgIT09IGVuZCkge1xuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xuICAgICAgICAgICAgaG9zdFJlbW92ZShjdXIpO1xuICAgICAgICAgICAgY3VyID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBob3N0UmVtb3ZlKGVuZCk7XG4gICAgfTtcbiAgICBjb25zdCB1bm1vdW50Q29tcG9uZW50ID0gKGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpID0+IHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcbiAgICAgICAgICAgIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYnVtLCBzY29wZSwgdXBkYXRlLCBzdWJUcmVlLCB1bSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIC8vIGJlZm9yZVVubW91bnQgaG9va1xuICAgICAgICBpZiAoYnVtKSB7XG4gICAgICAgICAgICBpbnZva2VBcnJheUZucyhidW0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN0b3AgZWZmZWN0cyBpbiBjb21wb25lbnQgc2NvcGVcbiAgICAgICAgc2NvcGUuc3RvcCgpO1xuICAgICAgICAvLyB1cGRhdGUgbWF5IGJlIG51bGwgaWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBpdHMgYXN5bmNcbiAgICAgICAgLy8gc2V0dXAgaGFzIHJlc29sdmVkLlxuICAgICAgICBpZiAodXBkYXRlKSB7XG4gICAgICAgICAgICAvLyBzbyB0aGF0IHNjaGVkdWxlciB3aWxsIG5vIGxvbmdlciBpbnZva2UgaXRcbiAgICAgICAgICAgIHVwZGF0ZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHVubW91bnQoc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdW5tb3VudGVkIGhvb2tcbiAgICAgICAgaWYgKHVtKSB7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodW0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaW5zdGFuY2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIC8vIEEgY29tcG9uZW50IHdpdGggYXN5bmMgZGVwIGluc2lkZSBhIHBlbmRpbmcgc3VzcGVuc2UgaXMgdW5tb3VudGVkIGJlZm9yZVxuICAgICAgICAvLyBpdHMgYXN5bmMgZGVwIHJlc29sdmVzLiBUaGlzIHNob3VsZCByZW1vdmUgdGhlIGRlcCBmcm9tIHRoZSBzdXNwZW5zZSwgYW5kXG4gICAgICAgIC8vIGNhdXNlIHRoZSBzdXNwZW5zZSB0byByZXNvbHZlIGltbWVkaWF0ZWx5IGlmIHRoYXQgd2FzIHRoZSBsYXN0IGRlcC5cbiAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlICYmXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmXG4gICAgICAgICAgICAhcGFyZW50U3VzcGVuc2UuaXNVbm1vdW50ZWQgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jRGVwICYmXG4gICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCAmJlxuICAgICAgICAgICAgaW5zdGFuY2Uuc3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5kZXBzLS07XG4gICAgICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UuZGVwcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdW5tb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSwgc3RhcnQgPSAwKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB1bm1vdW50KGNoaWxkcmVuW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSwgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZ2V0TmV4dEhvc3ROb2RlID0gdm5vZGUgPT4ge1xuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5leHRIb3N0Tm9kZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICByZXR1cm4gdm5vZGUuc3VzcGVuc2UubmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3N0TmV4dFNpYmxpbmcoKHZub2RlLmFuY2hvciB8fCB2bm9kZS5lbCkpO1xuICAgIH07XG4gICAgY29uc3QgcmVuZGVyID0gKHZub2RlLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XG4gICAgICAgIGlmICh2bm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLl92bm9kZSkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoY29udGFpbmVyLl92bm9kZSwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRjaChjb250YWluZXIuX3Zub2RlIHx8IG51bGwsIHZub2RlLCBjb250YWluZXIsIG51bGwsIG51bGwsIG51bGwsIGlzU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBmbHVzaFByZUZsdXNoQ2JzKCk7XG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcbiAgICB9O1xuICAgIGNvbnN0IGludGVybmFscyA9IHtcbiAgICAgICAgcDogcGF0Y2gsXG4gICAgICAgIHVtOiB1bm1vdW50LFxuICAgICAgICBtOiBtb3ZlLFxuICAgICAgICByOiByZW1vdmUsXG4gICAgICAgIG10OiBtb3VudENvbXBvbmVudCxcbiAgICAgICAgbWM6IG1vdW50Q2hpbGRyZW4sXG4gICAgICAgIHBjOiBwYXRjaENoaWxkcmVuLFxuICAgICAgICBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbixcbiAgICAgICAgbjogZ2V0TmV4dEhvc3ROb2RlLFxuICAgICAgICBvOiBvcHRpb25zXG4gICAgfTtcbiAgICBsZXQgaHlkcmF0ZTtcbiAgICBsZXQgaHlkcmF0ZU5vZGU7XG4gICAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICAgICAgICBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdID0gY3JlYXRlSHlkcmF0aW9uRm5zKGludGVybmFscyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcixcbiAgICAgICAgaHlkcmF0ZSxcbiAgICAgICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVSZWN1cnNlKHsgZWZmZWN0LCB1cGRhdGUgfSwgYWxsb3dlZCkge1xuICAgIGVmZmVjdC5hbGxvd1JlY3Vyc2UgPSB1cGRhdGUuYWxsb3dSZWN1cnNlID0gYWxsb3dlZDtcbn1cbi8qKlxuICogIzExNTZcbiAqIFdoZW4gYSBjb21wb25lbnQgaXMgSE1SLWVuYWJsZWQsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYWxsIHN0YXRpYyBub2Rlc1xuICogaW5zaWRlIGEgYmxvY2sgYWxzbyBpbmhlcml0IHRoZSBET00gZWxlbWVudCBmcm9tIHRoZSBwcmV2aW91cyB0cmVlIHNvIHRoYXRcbiAqIEhNUiB1cGRhdGVzICh3aGljaCBhcmUgZnVsbCB1cGRhdGVzKSBjYW4gcmV0cmlldmUgdGhlIGVsZW1lbnQgZm9yIHBhdGNoaW5nLlxuICpcbiAqICMyMDgwXG4gKiBJbnNpZGUga2V5ZWQgYHRlbXBsYXRlYCBmcmFnbWVudCBzdGF0aWMgY2hpbGRyZW4sIGlmIGEgZnJhZ21lbnQgaXMgbW92ZWQsXG4gKiB0aGUgY2hpbGRyZW4gd2lsbCBhbHdheXMgYmUgbW92ZWQuIFRoZXJlZm9yZSwgaW4gb3JkZXIgdG8gZW5zdXJlIGNvcnJlY3QgbW92ZVxuICogcG9zaXRpb24sIGVsIHNob3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBwcmV2aW91cyBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHNoYWxsb3cgPSBmYWxzZSkge1xuICAgIGNvbnN0IGNoMSA9IG4xLmNoaWxkcmVuO1xuICAgIGNvbnN0IGNoMiA9IG4yLmNoaWxkcmVuO1xuICAgIGlmIChpc0FycmF5KGNoMSkgJiYgaXNBcnJheShjaDIpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2gxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgY2FsbGVkIGluIHRoZSBvcHRpbWl6ZWQgcGF0aCBzbyBhcnJheSBjaGlsZHJlbiBhcmVcbiAgICAgICAgICAgIC8vIGd1YXJhbnRlZWQgdG8gYmUgdm5vZGVzXG4gICAgICAgICAgICBjb25zdCBjMSA9IGNoMVtpXTtcbiAgICAgICAgICAgIGxldCBjMiA9IGNoMltpXTtcbiAgICAgICAgICAgIGlmIChjMi5zaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyAmJiAhYzIuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMyLnBhdGNoRmxhZyA8PSAwIHx8IGMyLnBhdGNoRmxhZyA9PT0gMzIgLyogUGF0Y2hGbGFncy5IWURSQVRFX0VWRU5UUyAqLykge1xuICAgICAgICAgICAgICAgICAgICBjMiA9IGNoMltpXSA9IGNsb25lSWZNb3VudGVkKGNoMltpXSk7XG4gICAgICAgICAgICAgICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc2hhbGxvdylcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihjMSwgYzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWxzbyBpbmhlcml0IGZvciBjb21tZW50IG5vZGVzLCBidXQgbm90IHBsYWNlaG9sZGVycyAoZS5nLiB2LWlmIHdoaWNoXG4gICAgICAgICAgICAvLyB3b3VsZCBoYXZlIHJlY2VpdmVkIC5lbCBkdXJpbmcgYmxvY2sgcGF0Y2gpXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XG4gICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfaW5jcmVhc2luZ19zdWJzZXF1ZW5jZVxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoYXJyKSB7XG4gICAgY29uc3QgcCA9IGFyci5zbGljZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFswXTtcbiAgICBsZXQgaSwgaiwgdSwgdiwgYztcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBhcnJJID0gYXJyW2ldO1xuICAgICAgICBpZiAoYXJySSAhPT0gMCkge1xuICAgICAgICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoYXJyW2pdIDwgYXJySSkge1xuICAgICAgICAgICAgICAgIHBbaV0gPSBqO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdSA9IDA7XG4gICAgICAgICAgICB2ID0gcmVzdWx0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB3aGlsZSAodSA8IHYpIHtcbiAgICAgICAgICAgICAgICBjID0gKHUgKyB2KSA+PiAxO1xuICAgICAgICAgICAgICAgIGlmIChhcnJbcmVzdWx0W2NdXSA8IGFyckkpIHtcbiAgICAgICAgICAgICAgICAgICAgdSA9IGMgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdiA9IGM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xuICAgICAgICAgICAgICAgIGlmICh1ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBwW2ldID0gcmVzdWx0W3UgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0W3VdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1ID0gcmVzdWx0Lmxlbmd0aDtcbiAgICB2ID0gcmVzdWx0W3UgLSAxXTtcbiAgICB3aGlsZSAodS0tID4gMCkge1xuICAgICAgICByZXN1bHRbdV0gPSB2O1xuICAgICAgICB2ID0gcFt2XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSAnJyk7XG5jb25zdCBpc1RhcmdldFNWRyA9ICh0YXJnZXQpID0+IHR5cGVvZiBTVkdFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0YXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50O1xuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBwcm9wcyAmJiBwcm9wcy50bztcbiAgICBpZiAoaXNTdHJpbmcodGFyZ2V0U2VsZWN0b3IpKSB7XG4gICAgICAgIGlmICghc2VsZWN0KSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXJyZW50IHJlbmRlcmVyIGRvZXMgbm90IHN1cHBvcnQgc3RyaW5nIHRhcmdldCBmb3IgVGVsZXBvcnRzLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYChtaXNzaW5nIHF1ZXJ5U2VsZWN0b3IgcmVuZGVyZXIgb3B0aW9uKWApO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIGxvY2F0ZSBUZWxlcG9ydCB0YXJnZXQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYE5vdGUgdGhlIHRhcmdldCBlbGVtZW50IG11c3QgZXhpc3QgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCAtIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGkuZS4gdGhlIHRhcmdldCBjYW5ub3QgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudCBpdHNlbGYsIGFuZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpZGVhbGx5IHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBlbnRpcmUgVnVlIGNvbXBvbmVudCB0cmVlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdGFyZ2V0U2VsZWN0b3IgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgVGVsZXBvcnQgdGFyZ2V0OiAke3RhcmdldFNlbGVjdG9yfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcbiAgICB9XG59O1xuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xuICAgIF9faXNUZWxlcG9ydDogdHJ1ZSxcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKSB7XG4gICAgICAgIGNvbnN0IHsgbWM6IG1vdW50Q2hpbGRyZW4sIHBjOiBwYXRjaENoaWxkcmVuLCBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbiwgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gaW50ZXJuYWxzO1xuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XG4gICAgICAgIGxldCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiB9ID0gbjI7XG4gICAgICAgIC8vICMzMzAyXG4gICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGluc2VydCBhbmNob3JzIGluIHRoZSBtYWluIHZpZXdcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKG4yLmVsID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBzdGFydCcpXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tbWVudCgndGVsZXBvcnQgZW5kJylcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgaW5zZXJ0KG1haW5BbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dCgnJykpO1xuICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGluc2VydCh0YXJnZXRBbmNob3IsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gIzI2NTIgd2UgY291bGQgYmUgdGVsZXBvcnRpbmcgZnJvbSBhIG5vbi1TVkcgdHJlZSBpbnRvIGFuIFNWRyB0cmVlXG4gICAgICAgICAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBpc1RhcmdldFNWRyh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbW91bnQgPSAoY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUZWxlcG9ydCAqYWx3YXlzKiBoYXMgQXJyYXkgY2hpbGRyZW4uIFRoaXMgaXMgZW5mb3JjZWQgaW4gYm90aCB0aGVcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlciBhbmQgdm5vZGUgY2hpbGRyZW4gbm9ybWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgbW91bnQoY29udGFpbmVyLCBtYWluQW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBjb250ZW50XG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSBuMS5hbmNob3IpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKG4yLnRhcmdldCA9IG4xLnRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gbjEudGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHdhc0Rpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4xLnByb3BzKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250YWluZXIgPSB3YXNEaXNhYmxlZCA/IGNvbnRhaW5lciA6IHRhcmdldDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBbmNob3IgPSB3YXNEaXNhYmxlZCA/IG1haW5BbmNob3IgOiB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIHdoZW4gdGhlIHRlbGVwb3J0IGhhcHBlbnMgdG8gYmUgYSBibG9jayByb290XG4gICAgICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBjdXJyZW50Q29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgICAgICAgICAvLyBldmVuIGluIGJsb2NrIHRyZWUgbW9kZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgcm9vdC1sZXZlbCBub2Rlc1xuICAgICAgICAgICAgICAgIC8vIGluIHRoZSB0ZWxlcG9ydCBpbmhlcml0IHByZXZpb3VzIERPTSByZWZlcmVuY2VzIHNvIHRoYXQgdGhleSBjYW5cbiAgICAgICAgICAgICAgICAvLyBiZSBtb3ZlZCBpbiBmdXR1cmUgcGF0Y2hlcy5cbiAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGN1cnJlbnRDb250YWluZXIsIGN1cnJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlZCAtPiBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gbWFpbiBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCBjb250YWluZXIsIG1haW5BbmNob3IsIGludGVybmFscywgMSAvKiBUZWxlcG9ydE1vdmVUeXBlcy5UT0dHTEUgKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIG5leHRUYXJnZXQsIG51bGwsIGludGVybmFscywgMCAvKiBUZWxlcG9ydE1vdmVUeXBlcy5UQVJHRVRfQ0hBTkdFICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3YXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkaXNhYmxlZCAtPiBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byB0ZWxlcG9ydCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCB0YXJnZXQsIHRhcmdldEFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlRPR0dMRSAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICByZW1vdmUodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCwgeyB1bTogdW5tb3VudCwgbzogeyByZW1vdmU6IGhvc3RSZW1vdmUgfSB9LCBkb1JlbW92ZSkge1xuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGFuY2hvciwgdGFyZ2V0QW5jaG9yLCB0YXJnZXQsIHByb3BzIH0gPSB2bm9kZTtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgaG9zdFJlbW92ZSh0YXJnZXRBbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFuIHVubW91bnRlZCB0ZWxlcG9ydCBzaG91bGQgYWx3YXlzIHJlbW92ZSBpdHMgY2hpbGRyZW4gaWYgbm90IGRpc2FibGVkXG4gICAgICAgIGlmIChkb1JlbW92ZSB8fCAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgICAgICAgaG9zdFJlbW92ZShhbmNob3IpO1xuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoY2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUsICEhY2hpbGQuZHluYW1pY0NoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdmU6IG1vdmVUZWxlcG9ydCxcbiAgICBoeWRyYXRlOiBoeWRyYXRlVGVsZXBvcnRcbn07XG5mdW5jdGlvbiBtb3ZlVGVsZXBvcnQodm5vZGUsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCB7IG86IHsgaW5zZXJ0IH0sIG06IG1vdmUgfSwgbW92ZVR5cGUgPSAyIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlJFT1JERVIgKi8pIHtcbiAgICAvLyBtb3ZlIHRhcmdldCBhbmNob3IgaWYgdGhpcyBpcyBhIHRhcmdldCBjaGFuZ2UuXG4gICAgaWYgKG1vdmVUeXBlID09PSAwIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlRBUkdFVF9DSEFOR0UgKi8pIHtcbiAgICAgICAgaW5zZXJ0KHZub2RlLnRhcmdldEFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICAgIH1cbiAgICBjb25zdCB7IGVsLCBhbmNob3IsIHNoYXBlRmxhZywgY2hpbGRyZW4sIHByb3BzIH0gPSB2bm9kZTtcbiAgICBjb25zdCBpc1Jlb3JkZXIgPSBtb3ZlVHlwZSA9PT0gMiAvKiBUZWxlcG9ydE1vdmVUeXBlcy5SRU9SREVSICovO1xuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXG4gICAgaWYgKGlzUmVvcmRlcikge1xuICAgICAgICBpbnNlcnQoZWwsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcbiAgICB9XG4gICAgLy8gaWYgdGhpcyBpcyBhIHJlLW9yZGVyIGFuZCB0ZWxlcG9ydCBpcyBlbmFibGVkIChjb250ZW50IGlzIGluIHRhcmdldClcbiAgICAvLyBkbyBub3QgbW92ZSBjaGlsZHJlbi4gU28gdGhlIG9wcG9zaXRlIGlzOiBvbmx5IG1vdmUgY2hpbGRyZW4gaWYgdGhpc1xuICAgIC8vIGlzIG5vdCBhIHJlb3JkZXIsIG9yIHRoZSB0ZWxlcG9ydCBpcyBkaXNhYmxlZFxuICAgIGlmICghaXNSZW9yZGVyIHx8IGlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgICAgLy8gVGVsZXBvcnQgaGFzIGVpdGhlciBBcnJheSBjaGlsZHJlbiBvciBubyBjaGlsZHJlbi5cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgMiAvKiBNb3ZlVHlwZS5SRU9SREVSICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBtb3ZlIG1haW4gdmlldyBhbmNob3IgaWYgdGhpcyBpcyBhIHJlLW9yZGVyLlxuICAgIGlmIChpc1Jlb3JkZXIpIHtcbiAgICAgICAgaW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGh5ZHJhdGVUZWxlcG9ydChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHsgbzogeyBuZXh0U2libGluZywgcGFyZW50Tm9kZSwgcXVlcnlTZWxlY3RvciB9IH0sIGh5ZHJhdGVDaGlsZHJlbikge1xuICAgIGNvbnN0IHRhcmdldCA9ICh2bm9kZS50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KHZub2RlLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICAvLyBpZiBtdWx0aXBsZSB0ZWxlcG9ydHMgcmVuZGVyZWQgdG8gdGhlIHNhbWUgdGFyZ2V0IGVsZW1lbnQsIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gcGljayB1cCBmcm9tIHdoZXJlIHRoZSBsYXN0IHRlbGVwb3J0IGZpbmlzaGVkIGluc3RlYWQgb2YgdGhlIGZpcnN0IG5vZGVcbiAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgaWYgKGlzVGVsZXBvcnREaXNhYmxlZCh2bm9kZS5wcm9wcykpIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4obmV4dFNpYmxpbmcobm9kZSksIHZub2RlLCBwYXJlbnROb2RlKG5vZGUpLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgIC8vIGxvb2thaGVhZCB1bnRpbCB3ZSBmaW5kIHRoZSB0YXJnZXQgYW5jaG9yXG4gICAgICAgICAgICAgICAgLy8gd2UgY2Fubm90IHJlbHkgb24gcmV0dXJuIHZhbHVlIG9mIGh5ZHJhdGVDaGlsZHJlbigpIGJlY2F1c2UgdGhlcmVcbiAgICAgICAgICAgICAgICAvLyBjb3VsZCBiZSBuZXN0ZWQgdGVsZXBvcnRzXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEFuY2hvciA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRhcmdldEFuY2hvcikge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRBbmNob3IgPSBuZXh0U2libGluZyh0YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QW5jaG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBbmNob3Iubm9kZVR5cGUgPT09IDggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFuY2hvci5kYXRhID09PSAndGVsZXBvcnQgYW5jaG9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0QW5jaG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Ll9scGEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciAmJiBuZXh0U2libGluZyh2bm9kZS50YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHlkcmF0ZUNoaWxkcmVuKHRhcmdldE5vZGUsIHZub2RlLCB0YXJnZXQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XG59XG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxuY29uc3QgVGVsZXBvcnQgPSBUZWxlcG9ydEltcGw7XG5cbmNvbnN0IEZyYWdtZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdGcmFnbWVudCcgOiB1bmRlZmluZWQpO1xuY29uc3QgVGV4dCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnVGV4dCcgOiB1bmRlZmluZWQpO1xuY29uc3QgQ29tbWVudCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnQ29tbWVudCcgOiB1bmRlZmluZWQpO1xuY29uc3QgU3RhdGljID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdTdGF0aWMnIDogdW5kZWZpbmVkKTtcbi8vIFNpbmNlIHYtaWYgYW5kIHYtZm9yIGFyZSB0aGUgdHdvIHBvc3NpYmxlIHdheXMgbm9kZSBzdHJ1Y3R1cmUgY2FuIGR5bmFtaWNhbGx5XG4vLyBjaGFuZ2UsIG9uY2Ugd2UgY29uc2lkZXIgdi1pZiBicmFuY2hlcyBhbmQgZWFjaCB2LWZvciBmcmFnbWVudCBhIGJsb2NrLCB3ZVxuLy8gY2FuIGRpdmlkZSBhIHRlbXBsYXRlIGludG8gbmVzdGVkIGJsb2NrcywgYW5kIHdpdGhpbiBlYWNoIGJsb2NrIHRoZSBub2RlXG4vLyBzdHJ1Y3R1cmUgd291bGQgYmUgc3RhYmxlLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIG1vc3QgY2hpbGRyZW4gZGlmZmluZ1xuLy8gYW5kIG9ubHkgd29ycnkgYWJvdXQgdGhlIGR5bmFtaWMgbm9kZXMgKGluZGljYXRlZCBieSBwYXRjaCBmbGFncykuXG5jb25zdCBibG9ja1N0YWNrID0gW107XG5sZXQgY3VycmVudEJsb2NrID0gbnVsbDtcbi8qKlxuICogT3BlbiBhIGJsb2NrLlxuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYC4gSXQgY2Fubm90IGJlIHBhcnQgb2YgYGNyZWF0ZUJsb2NrYFxuICogYmVjYXVzZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGJsb2NrIGFyZSBldmFsdWF0ZWQgYmVmb3JlIGBjcmVhdGVCbG9ja2AgaXRzZWxmXG4gKiBpcyBjYWxsZWQuIFRoZSBnZW5lcmF0ZWQgY29kZSB0eXBpY2FsbHkgbG9va3MgbGlrZSB0aGlzOlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gKiAgIHJldHVybiAob3BlbkJsb2NrKCksY3JlYXRlQmxvY2soJ2RpdicsIG51bGwsIFsuLi5dKSlcbiAqIH1cbiAqIGBgYFxuICogZGlzYWJsZVRyYWNraW5nIGlzIHRydWUgd2hlbiBjcmVhdGluZyBhIHYtZm9yIGZyYWdtZW50IGJsb2NrLCBzaW5jZSBhIHYtZm9yXG4gKiBmcmFnbWVudCBhbHdheXMgZGlmZnMgaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG9wZW5CbG9jayhkaXNhYmxlVHJhY2tpbmcgPSBmYWxzZSkge1xuICAgIGJsb2NrU3RhY2sucHVzaCgoY3VycmVudEJsb2NrID0gZGlzYWJsZVRyYWNraW5nID8gbnVsbCA6IFtdKSk7XG59XG5mdW5jdGlvbiBjbG9zZUJsb2NrKCkge1xuICAgIGJsb2NrU3RhY2sucG9wKCk7XG4gICAgY3VycmVudEJsb2NrID0gYmxvY2tTdGFja1tibG9ja1N0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XG59XG4vLyBXaGV0aGVyIHdlIHNob3VsZCBiZSB0cmFja2luZyBkeW5hbWljIGNoaWxkIG5vZGVzIGluc2lkZSBhIGJsb2NrLlxuLy8gT25seSB0cmFja3Mgd2hlbiB0aGlzIHZhbHVlIGlzID4gMFxuLy8gV2UgYXJlIG5vdCB1c2luZyBhIHNpbXBsZSBib29sZWFuIGJlY2F1c2UgdGhpcyB2YWx1ZSBtYXkgbmVlZCB0byBiZVxuLy8gaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWQgYnkgbmVzdGVkIHVzYWdlIG9mIHYtb25jZSAoc2VlIGJlbG93KVxubGV0IGlzQmxvY2tUcmVlRW5hYmxlZCA9IDE7XG4vKipcbiAqIEJsb2NrIHRyYWNraW5nIHNvbWV0aW1lcyBuZWVkcyB0byBiZSBkaXNhYmxlZCwgZm9yIGV4YW1wbGUgZHVyaW5nIHRoZVxuICogY3JlYXRpb24gb2YgYSB0cmVlIHRoYXQgbmVlZHMgdG8gYmUgY2FjaGVkIGJ5IHYtb25jZS4gVGhlIGNvbXBpbGVyIGdlbmVyYXRlc1xuICogY29kZSBsaWtlIHRoaXM6XG4gKlxuICogYGBgIGpzXG4gKiBfY2FjaGVbMV0gfHwgKFxuICogICBzZXRCbG9ja1RyYWNraW5nKC0xKSxcbiAqICAgX2NhY2hlWzFdID0gY3JlYXRlVk5vZGUoLi4uKSxcbiAqICAgc2V0QmxvY2tUcmFja2luZygxKSxcbiAqICAgX2NhY2hlWzFdXG4gKiApXG4gKiBgYGBcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXRCbG9ja1RyYWNraW5nKHZhbHVlKSB7XG4gICAgaXNCbG9ja1RyZWVFbmFibGVkICs9IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xuICAgIC8vIHNhdmUgY3VycmVudCBibG9jayBjaGlsZHJlbiBvbiB0aGUgYmxvY2sgdm5vZGVcbiAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPVxuICAgICAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XG4gICAgLy8gY2xvc2UgYmxvY2tcbiAgICBjbG9zZUJsb2NrKCk7XG4gICAgLy8gYSBibG9jayBpcyBhbHdheXMgZ29pbmcgdG8gYmUgcGF0Y2hlZCwgc28gdHJhY2sgaXQgYXMgYSBjaGlsZCBvZiBpdHNcbiAgICAvLyBwYXJlbnQgYmxvY2tcbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcpIHtcbiAgICByZXR1cm4gc2V0dXBCbG9jayhjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgc2hhcGVGbGFnLCB0cnVlIC8qIGlzQmxvY2sgKi8pKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgYmxvY2sgcm9vdCB2bm9kZS4gVGFrZXMgdGhlIHNhbWUgZXhhY3QgYXJndW1lbnRzIGFzIGBjcmVhdGVWTm9kZWAuXG4gKiBBIGJsb2NrIHJvb3Qga2VlcHMgdHJhY2sgb2YgZHluYW1pYyBub2RlcyB3aXRoaW4gdGhlIGJsb2NrIGluIHRoZVxuICogYGR5bmFtaWNDaGlsZHJlbmAgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiBzZXR1cEJsb2NrKGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHRydWUgLyogaXNCbG9jazogcHJldmVudCBhIGJsb2NrIGZyb20gdHJhY2tpbmcgaXRzZWxmICovKSk7XG59XG5mdW5jdGlvbiBpc1ZOb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgIG4yLnNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8gJiZcbiAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmhhcyhuMi50eXBlKSkge1xuICAgICAgICAvLyBITVIgb25seTogaWYgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBob3QtdXBkYXRlZCwgZm9yY2UgYSByZWxvYWQuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG4xLnR5cGUgPT09IG4yLnR5cGUgJiYgbjEua2V5ID09PSBuMi5rZXk7XG59XG5sZXQgdm5vZGVBcmdzVHJhbnNmb3JtZXI7XG4vKipcbiAqIEludGVybmFsIEFQSSBmb3IgcmVnaXN0ZXJpbmcgYW4gYXJndW1lbnRzIHRyYW5zZm9ybSBmb3IgY3JlYXRlVk5vZGVcbiAqIHVzZWQgZm9yIGNyZWF0aW5nIHN0dWJzIGluIHRoZSB0ZXN0LXV0aWxzXG4gKiBJdCBpcyAqaW50ZXJuYWwqIGJ1dCBuZWVkcyB0byBiZSBleHBvc2VkIGZvciB0ZXN0LXV0aWxzIHRvIHBpY2sgdXAgcHJvcGVyXG4gKiB0eXBpbmdzXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybVZOb2RlQXJncyh0cmFuc2Zvcm1lcikge1xuICAgIHZub2RlQXJnc1RyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG59XG5jb25zdCBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtID0gKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKC4uLih2bm9kZUFyZ3NUcmFuc2Zvcm1lclxuICAgICAgICA/IHZub2RlQXJnc1RyYW5zZm9ybWVyKGFyZ3MsIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSlcbiAgICAgICAgOiBhcmdzKSk7XG59O1xuY29uc3QgSW50ZXJuYWxPYmplY3RLZXkgPSBgX192SW50ZXJuYWxgO1xuY29uc3Qgbm9ybWFsaXplS2V5ID0gKHsga2V5IH0pID0+IGtleSAhPSBudWxsID8ga2V5IDogbnVsbDtcbmNvbnN0IG5vcm1hbGl6ZVJlZiA9ICh7IHJlZiwgcmVmX2tleSwgcmVmX2ZvciB9KSA9PiB7XG4gICAgcmV0dXJuIChyZWYgIT0gbnVsbFxuICAgICAgICA/IGlzU3RyaW5nKHJlZikgfHwgaXNSZWYocmVmKSB8fCBpc0Z1bmN0aW9uKHJlZilcbiAgICAgICAgICAgID8geyBpOiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsIHI6IHJlZiwgazogcmVmX2tleSwgZjogISFyZWZfZm9yIH1cbiAgICAgICAgICAgIDogcmVmXG4gICAgICAgIDogbnVsbCk7XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBzaGFwZUZsYWcgPSB0eXBlID09PSBGcmFnbWVudCA/IDAgOiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLywgaXNCbG9ja05vZGUgPSBmYWxzZSwgbmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24gPSBmYWxzZSkge1xuICAgIGNvbnN0IHZub2RlID0ge1xuICAgICAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcbiAgICAgICAgX192X3NraXA6IHRydWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBrZXk6IHByb3BzICYmIG5vcm1hbGl6ZUtleShwcm9wcyksXG4gICAgICAgIHJlZjogcHJvcHMgJiYgbm9ybWFsaXplUmVmKHByb3BzKSxcbiAgICAgICAgc2NvcGVJZDogY3VycmVudFNjb3BlSWQsXG4gICAgICAgIHNsb3RTY29wZUlkczogbnVsbCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICAgICAgc3VzcGVuc2U6IG51bGwsXG4gICAgICAgIHNzQ29udGVudDogbnVsbCxcbiAgICAgICAgc3NGYWxsYmFjazogbnVsbCxcbiAgICAgICAgZGlyczogbnVsbCxcbiAgICAgICAgdHJhbnNpdGlvbjogbnVsbCxcbiAgICAgICAgZWw6IG51bGwsXG4gICAgICAgIGFuY2hvcjogbnVsbCxcbiAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICB0YXJnZXRBbmNob3I6IG51bGwsXG4gICAgICAgIHN0YXRpY0NvdW50OiAwLFxuICAgICAgICBzaGFwZUZsYWcsXG4gICAgICAgIHBhdGNoRmxhZyxcbiAgICAgICAgZHluYW1pY1Byb3BzLFxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IG51bGwsXG4gICAgICAgIGFwcENvbnRleHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbikge1xuICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pO1xuICAgICAgICAvLyBub3JtYWxpemUgc3VzcGVuc2UgY2hpbGRyZW5cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICB0eXBlLm5vcm1hbGl6ZSh2bm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgLy8gY29tcGlsZWQgZWxlbWVudCB2bm9kZSAtIGlmIGNoaWxkcmVuIGlzIHBhc3NlZCwgb25seSBwb3NzaWJsZSB0eXBlcyBhcmVcbiAgICAgICAgLy8gc3RyaW5nIG9yIEFycmF5LlxuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gaXNTdHJpbmcoY2hpbGRyZW4pXG4gICAgICAgICAgICA/IDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovXG4gICAgICAgICAgICA6IDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi87XG4gICAgfVxuICAgIC8vIHZhbGlkYXRlIGtleVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgdm5vZGUua2V5ICE9PSB2bm9kZS5rZXkpIHtcbiAgICAgICAgd2FybihgVk5vZGUgY3JlYXRlZCB3aXRoIGludmFsaWQga2V5IChOYU4pLiBWTm9kZSB0eXBlOmAsIHZub2RlLnR5cGUpO1xuICAgIH1cbiAgICAvLyB0cmFjayB2bm9kZSBmb3IgYmxvY2sgdHJlZVxuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmXG4gICAgICAgIC8vIGF2b2lkIGEgYmxvY2sgbm9kZSBmcm9tIHRyYWNraW5nIGl0c2VsZlxuICAgICAgICAhaXNCbG9ja05vZGUgJiZcbiAgICAgICAgLy8gaGFzIGN1cnJlbnQgcGFyZW50IGJsb2NrXG4gICAgICAgIGN1cnJlbnRCbG9jayAmJlxuICAgICAgICAvLyBwcmVzZW5jZSBvZiBhIHBhdGNoIGZsYWcgaW5kaWNhdGVzIHRoaXMgbm9kZSBuZWVkcyBwYXRjaGluZyBvbiB1cGRhdGVzLlxuICAgICAgICAvLyBjb21wb25lbnQgbm9kZXMgYWxzbyBzaG91bGQgYWx3YXlzIGJlIHBhdGNoZWQsIGJlY2F1c2UgZXZlbiBpZiB0aGVcbiAgICAgICAgLy8gY29tcG9uZW50IGRvZXNuJ3QgbmVlZCB0byB1cGRhdGUsIGl0IG5lZWRzIHRvIHBlcnNpc3QgdGhlIGluc3RhbmNlIG9uIHRvXG4gICAgICAgIC8vIHRoZSBuZXh0IHZub2RlIHNvIHRoYXQgaXQgY2FuIGJlIHByb3Blcmx5IHVubW91bnRlZCBsYXRlci5cbiAgICAgICAgKHZub2RlLnBhdGNoRmxhZyA+IDAgfHwgc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykgJiZcbiAgICAgICAgLy8gdGhlIEVWRU5UUyBmbGFnIGlzIG9ubHkgZm9yIGh5ZHJhdGlvbiBhbmQgaWYgaXQgaXMgdGhlIG9ubHkgZmxhZywgdGhlXG4gICAgICAgIC8vIHZub2RlIHNob3VsZCBub3QgYmUgY29uc2lkZXJlZCBkeW5hbWljIGR1ZSB0byBoYW5kbGVyIGNhY2hpbmcuXG4gICAgICAgIHZub2RlLnBhdGNoRmxhZyAhPT0gMzIgLyogUGF0Y2hGbGFncy5IWURSQVRFX0VWRU5UUyAqLykge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn1cbmNvbnN0IGNyZWF0ZVZOb2RlID0gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gOiBfY3JlYXRlVk5vZGUpO1xuZnVuY3Rpb24gX2NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBpc0Jsb2NrTm9kZSA9IGZhbHNlKSB7XG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdHlwZSkge1xuICAgICAgICAgICAgd2FybihgSW52YWxpZCB2bm9kZSB0eXBlIHdoZW4gY3JlYXRpbmcgdm5vZGU6ICR7dHlwZX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgdHlwZSA9IENvbW1lbnQ7XG4gICAgfVxuICAgIGlmIChpc1ZOb2RlKHR5cGUpKSB7XG4gICAgICAgIC8vIGNyZWF0ZVZOb2RlIHJlY2VpdmluZyBhbiBleGlzdGluZyB2bm9kZS4gVGhpcyBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgICAgLy8gPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiLz5cbiAgICAgICAgLy8gIzIwNzggbWFrZSBzdXJlIHRvIG1lcmdlIHJlZnMgZHVyaW5nIHRoZSBjbG9uZSBpbnN0ZWFkIG9mIG92ZXJ3cml0aW5nIGl0XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodHlwZSwgcHJvcHMsIHRydWUgLyogbWVyZ2VSZWY6IHRydWUgKi8pO1xuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmICFpc0Jsb2NrTm9kZSAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgICAgICAgIGlmIChjbG9uZWQuc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja1tjdXJyZW50QmxvY2suaW5kZXhPZih0eXBlKV0gPSBjbG9uZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2sucHVzaChjbG9uZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNsb25lZC5wYXRjaEZsYWcgfD0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovO1xuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgICAvLyBjbGFzcyBjb21wb25lbnQgbm9ybWFsaXphdGlvbi5cbiAgICBpZiAoaXNDbGFzc0NvbXBvbmVudCh0eXBlKSkge1xuICAgICAgICB0eXBlID0gdHlwZS5fX3ZjY09wdHM7XG4gICAgfVxuICAgIC8vIGNsYXNzICYgc3R5bGUgbm9ybWFsaXphdGlvbi5cbiAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgLy8gZm9yIHJlYWN0aXZlIG9yIHByb3h5IG9iamVjdHMsIHdlIG5lZWQgdG8gY2xvbmUgaXQgdG8gZW5hYmxlIG11dGF0aW9uLlxuICAgICAgICBwcm9wcyA9IGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcyk7XG4gICAgICAgIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xuICAgICAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0KHN0eWxlKSkge1xuICAgICAgICAgICAgLy8gcmVhY3RpdmUgc3RhdGUgb2JqZWN0cyBuZWVkIHRvIGJlIGNsb25lZCBzaW5jZSB0aGV5IGFyZSBsaWtlbHkgdG8gYmVcbiAgICAgICAgICAgIC8vIG11dGF0ZWRcbiAgICAgICAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IGV4dGVuZCh7fSwgc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcHMuc3R5bGUgPSBub3JtYWxpemVTdHlsZShzdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5jb2RlIHRoZSB2bm9kZSB0eXBlIGluZm9ybWF0aW9uIGludG8gYSBiaXRtYXBcbiAgICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKVxuICAgICAgICA/IDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovXG4gICAgICAgIDogaXNTdXNwZW5zZSh0eXBlKVxuICAgICAgICAgICAgPyAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqL1xuICAgICAgICAgICAgOiBpc1RlbGVwb3J0KHR5cGUpXG4gICAgICAgICAgICAgICAgPyA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovXG4gICAgICAgICAgICAgICAgOiBpc09iamVjdCh0eXBlKVxuICAgICAgICAgICAgICAgICAgICA/IDQgLyogU2hhcGVGbGFncy5TVEFURUZVTF9DT01QT05FTlQgKi9cbiAgICAgICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDIgLyogU2hhcGVGbGFncy5GVU5DVElPTkFMX0NPTVBPTkVOVCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLyAmJiBpc1Byb3h5KHR5cGUpKSB7XG4gICAgICAgIHR5cGUgPSB0b1Jhdyh0eXBlKTtcbiAgICAgICAgd2FybihgVnVlIHJlY2VpdmVkIGEgQ29tcG9uZW50IHdoaWNoIHdhcyBtYWRlIGEgcmVhY3RpdmUgb2JqZWN0LiBUaGlzIGNhbiBgICtcbiAgICAgICAgICAgIGBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkLCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgYCArXG4gICAgICAgICAgICBgbWFya2luZyB0aGUgY29tcG9uZW50IHdpdGggXFxgbWFya1Jhd1xcYCBvciB1c2luZyBcXGBzaGFsbG93UmVmXFxgIGAgK1xuICAgICAgICAgICAgYGluc3RlYWQgb2YgXFxgcmVmXFxgLmAsIGBcXG5Db21wb25lbnQgdGhhdCB3YXMgbWFkZSByZWFjdGl2ZTogYCwgdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgc2hhcGVGbGFnLCBpc0Jsb2NrTm9kZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBndWFyZFJlYWN0aXZlUHJvcHMocHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gaXNQcm94eShwcm9wcykgfHwgSW50ZXJuYWxPYmplY3RLZXkgaW4gcHJvcHNcbiAgICAgICAgPyBleHRlbmQoe30sIHByb3BzKVxuICAgICAgICA6IHByb3BzO1xufVxuZnVuY3Rpb24gY2xvbmVWTm9kZSh2bm9kZSwgZXh0cmFQcm9wcywgbWVyZ2VSZWYgPSBmYWxzZSkge1xuICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBOT1QgdXNpbmcgc3ByZWFkIG9yIGV4dGVuZCB0byBhdm9pZCB0aGUgcnVudGltZVxuICAgIC8vIGtleSBlbnVtZXJhdGlvbiBjb3N0LlxuICAgIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XG4gICAgY29uc3QgbWVyZ2VkUHJvcHMgPSBleHRyYVByb3BzID8gbWVyZ2VQcm9wcyhwcm9wcyB8fCB7fSwgZXh0cmFQcm9wcykgOiBwcm9wcztcbiAgICBjb25zdCBjbG9uZWQgPSB7XG4gICAgICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgICAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICAgICAgdHlwZTogdm5vZGUudHlwZSxcbiAgICAgICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgICAgICBrZXk6IG1lcmdlZFByb3BzICYmIG5vcm1hbGl6ZUtleShtZXJnZWRQcm9wcyksXG4gICAgICAgIHJlZjogZXh0cmFQcm9wcyAmJiBleHRyYVByb3BzLnJlZlxuICAgICAgICAgICAgPyAvLyAjMjA3OCBpbiB0aGUgY2FzZSBvZiA8Y29tcG9uZW50IDppcz1cInZub2RlXCIgcmVmPVwiZXh0cmFcIi8+XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHZub2RlIGl0c2VsZiBhbHJlYWR5IGhhcyBhIHJlZiwgY2xvbmVWTm9kZSB3aWxsIG5lZWQgdG8gbWVyZ2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVmcyBzbyB0aGUgc2luZ2xlIHZub2RlIGNhbiBiZSBzZXQgb24gbXVsdGlwbGUgcmVmc1xuICAgICAgICAgICAgICAgIG1lcmdlUmVmICYmIHJlZlxuICAgICAgICAgICAgICAgICAgICA/IGlzQXJyYXkocmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW3JlZiwgbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXVxuICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKVxuICAgICAgICAgICAgOiByZWYsXG4gICAgICAgIHNjb3BlSWQ6IHZub2RlLnNjb3BlSWQsXG4gICAgICAgIHNsb3RTY29wZUlkczogdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICBjaGlsZHJlbjogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhdGNoRmxhZyA9PT0gLTEgLyogUGF0Y2hGbGFncy5IT0lTVEVEICovICYmIGlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICAgICAgICA/IGNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSlcbiAgICAgICAgICAgIDogY2hpbGRyZW4sXG4gICAgICAgIHRhcmdldDogdm5vZGUudGFyZ2V0LFxuICAgICAgICB0YXJnZXRBbmNob3I6IHZub2RlLnRhcmdldEFuY2hvcixcbiAgICAgICAgc3RhdGljQ291bnQ6IHZub2RlLnN0YXRpY0NvdW50LFxuICAgICAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcbiAgICAgICAgLy8gaWYgdGhlIHZub2RlIGlzIGNsb25lZCB3aXRoIGV4dHJhIHByb3BzLCB3ZSBjYW4gbm8gbG9uZ2VyIGFzc3VtZSBpdHNcbiAgICAgICAgLy8gZXhpc3RpbmcgcGF0Y2ggZmxhZyB0byBiZSByZWxpYWJsZSBhbmQgbmVlZCB0byBhZGQgdGhlIEZVTExfUFJPUFMgZmxhZy5cbiAgICAgICAgLy8gbm90ZTogcHJlc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxuICAgICAgICAvLyBmYXN0IHBhdGhzIG9ubHkuXG4gICAgICAgIHBhdGNoRmxhZzogZXh0cmFQcm9wcyAmJiB2bm9kZS50eXBlICE9PSBGcmFnbWVudFxuICAgICAgICAgICAgPyBwYXRjaEZsYWcgPT09IC0xIC8vIGhvaXN0ZWQgbm9kZVxuICAgICAgICAgICAgICAgID8gMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovXG4gICAgICAgICAgICAgICAgOiBwYXRjaEZsYWcgfCAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi9cbiAgICAgICAgICAgIDogcGF0Y2hGbGFnLFxuICAgICAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuOiB2bm9kZS5keW5hbWljQ2hpbGRyZW4sXG4gICAgICAgIGFwcENvbnRleHQ6IHZub2RlLmFwcENvbnRleHQsXG4gICAgICAgIGRpcnM6IHZub2RlLmRpcnMsXG4gICAgICAgIHRyYW5zaXRpb246IHZub2RlLnRyYW5zaXRpb24sXG4gICAgICAgIC8vIFRoZXNlIHNob3VsZCB0ZWNobmljYWxseSBvbmx5IGJlIG5vbi1udWxsIG9uIG1vdW50ZWQgVk5vZGVzLiBIb3dldmVyLFxuICAgICAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcbiAgICAgICAgLy8gdGhlbSBzaW5jZSB0aGVtIGJlaW5nIG5vbi1udWxsIGR1cmluZyBhIG1vdW50IGRvZXNuJ3QgYWZmZWN0IHRoZSBsb2dpYyBhc1xuICAgICAgICAvLyB0aGV5IHdpbGwgc2ltcGx5IGJlIG92ZXJ3cml0dGVuLlxuICAgICAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2U6IHZub2RlLnN1c3BlbnNlLFxuICAgICAgICBzc0NvbnRlbnQ6IHZub2RlLnNzQ29udGVudCAmJiBjbG9uZVZOb2RlKHZub2RlLnNzQ29udGVudCksXG4gICAgICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcbiAgICAgICAgZWw6IHZub2RlLmVsLFxuICAgICAgICBhbmNob3I6IHZub2RlLmFuY2hvclxuICAgIH07XG4gICAgcmV0dXJuIGNsb25lZDtcbn1cbi8qKlxuICogRGV2IG9ubHksIGZvciBITVIgb2YgaG9pc3RlZCB2bm9kZXMgcmV1c2VkIGluIHYtZm9yXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUvaXNzdWVzLzIwMjJcbiAqL1xuZnVuY3Rpb24gZGVlcENsb25lVk5vZGUodm5vZGUpIHtcbiAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICBpZiAoaXNBcnJheSh2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgICAgY2xvbmVkLmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW4ubWFwKGRlZXBDbG9uZVZOb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lZDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlKHRleHQgPSAnICcsIGZsYWcgPSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIHRleHQsIGZsYWcpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNWTm9kZShjb250ZW50LCBudW1iZXJPZk5vZGVzKSB7XG4gICAgLy8gQSBzdGF0aWMgdm5vZGUgY2FuIGNvbnRhaW4gbXVsdGlwbGUgc3RyaW5naWZpZWQgZWxlbWVudHMsIGFuZCB0aGUgbnVtYmVyXG4gICAgLy8gb2YgZWxlbWVudHMgaXMgbmVjZXNzYXJ5IGZvciBoeWRyYXRpb24uXG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShTdGF0aWMsIG51bGwsIGNvbnRlbnQpO1xuICAgIHZub2RlLnN0YXRpY0NvdW50ID0gbnVtYmVyT2ZOb2RlcztcbiAgICByZXR1cm4gdm5vZGU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnRWTm9kZSh0ZXh0ID0gJycsIFxuLy8gd2hlbiB1c2VkIGFzIHRoZSB2LWVsc2UgYnJhbmNoLCB0aGUgY29tbWVudCBub2RlIG11c3QgYmUgY3JlYXRlZCBhcyBhXG4vLyBibG9jayB0byBlbnN1cmUgY29ycmVjdCB1cGRhdGVzLlxuYXNCbG9jayA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGFzQmxvY2tcbiAgICAgICAgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKENvbW1lbnQsIG51bGwsIHRleHQpKVxuICAgICAgICA6IGNyZWF0ZVZOb2RlKENvbW1lbnQsIG51bGwsIHRleHQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVk5vZGUoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgPT09ICdib29sZWFuJykge1xuICAgICAgICAvLyBlbXB0eSBwbGFjZWhvbGRlclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIC8vIGZyYWdtZW50XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShGcmFnbWVudCwgbnVsbCwgXG4gICAgICAgIC8vICMzNjY2LCBhdm9pZCByZWZlcmVuY2UgcG9sbHV0aW9uIHdoZW4gcmV1c2luZyB2bm9kZVxuICAgICAgICBjaGlsZC5zbGljZSgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBhbHJlYWR5IHZub2RlLCB0aGlzIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gc2luY2UgY29tcGlsZWQgdGVtcGxhdGVzXG4gICAgICAgIC8vIGFsd2F5cyBwcm9kdWNlIGFsbC12bm9kZSBjaGlsZHJlbiBhcnJheXNcbiAgICAgICAgcmV0dXJuIGNsb25lSWZNb3VudGVkKGNoaWxkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHN0cmluZ3MgYW5kIG51bWJlcnNcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIFN0cmluZyhjaGlsZCkpO1xuICAgIH1cbn1cbi8vIG9wdGltaXplZCBub3JtYWxpemF0aW9uIGZvciB0ZW1wbGF0ZS1jb21waWxlZCByZW5kZXIgZm5zXG5mdW5jdGlvbiBjbG9uZUlmTW91bnRlZChjaGlsZCkge1xuICAgIHJldHVybiAoY2hpbGQuZWwgPT09IG51bGwgJiYgY2hpbGQucGF0Y2hGbGFnICE9PSAtMSAvKiBQYXRjaEZsYWdzLkhPSVNURUQgKi8pIHx8XG4gICAgICAgIGNoaWxkLm1lbW9cbiAgICAgICAgPyBjaGlsZFxuICAgICAgICA6IGNsb25lVk5vZGUoY2hpbGQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKSB7XG4gICAgbGV0IHR5cGUgPSAwO1xuICAgIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSB2bm9kZTtcbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIHR5cGUgPSAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gfCA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSkge1xuICAgICAgICAgICAgLy8gTm9ybWFsaXplIHNsb3QgdG8gcGxhaW4gY2hpbGRyZW4gZm9yIHBsYWluIGVsZW1lbnQgYW5kIFRlbGVwb3J0XG4gICAgICAgICAgICBjb25zdCBzbG90ID0gY2hpbGRyZW4uZGVmYXVsdDtcbiAgICAgICAgICAgIGlmIChzbG90KSB7XG4gICAgICAgICAgICAgICAgLy8gX2MgbWFya2VyIGlzIGFkZGVkIGJ5IHdpdGhDdHgoKSBpbmRpY2F0aW5nIHRoaXMgaXMgYSBjb21waWxlZCBzbG90XG4gICAgICAgICAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgc2xvdCgpKTtcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eXBlID0gMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLztcbiAgICAgICAgICAgIGNvbnN0IHNsb3RGbGFnID0gY2hpbGRyZW4uXztcbiAgICAgICAgICAgIGlmICghc2xvdEZsYWcgJiYgIShJbnRlcm5hbE9iamVjdEtleSBpbiBjaGlsZHJlbikpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5fY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2xvdEZsYWcgPT09IDMgLyogU2xvdEZsYWdzLkZPUldBUkRFRCAqLyAmJiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAvLyBhIGNoaWxkIGNvbXBvbmVudCByZWNlaXZlcyBmb3J3YXJkZWQgc2xvdHMgZnJvbSB0aGUgcGFyZW50LlxuICAgICAgICAgICAgICAgIC8vIGl0cyBzbG90IHR5cGUgaXMgZGV0ZXJtaW5lZCBieSBpdHMgcGFyZW50J3Mgc2xvdCB0eXBlLlxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2Uuc2xvdHMuXyA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAxIC8qIFNsb3RGbGFncy5TVEFCTEUgKi87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMiAvKiBTbG90RmxhZ3MuRFlOQU1JQyAqLztcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnIHw9IDEwMjQgLyogUGF0Y2hGbGFncy5EWU5BTUlDX1NMT1RTICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZHJlbiA9IHsgZGVmYXVsdDogY2hpbGRyZW4sIF9jdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB9O1xuICAgICAgICB0eXBlID0gMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICAgICAgLy8gZm9yY2UgdGVsZXBvcnQgY2hpbGRyZW4gdG8gYXJyYXkgc28gaXQgY2FuIGJlIG1vdmVkIGFyb3VuZFxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgdHlwZSA9IDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi87XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2bm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIHZub2RlLnNoYXBlRmxhZyB8PSB0eXBlO1xufVxuZnVuY3Rpb24gbWVyZ2VQcm9wcyguLi5hcmdzKSB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRvTWVyZ2UgPSBhcmdzW2ldO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0b01lcmdlKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldC5jbGFzcyAhPT0gdG9NZXJnZS5jbGFzcykge1xuICAgICAgICAgICAgICAgICAgICByZXQuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhbcmV0LmNsYXNzLCB0b01lcmdlLmNsYXNzXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0LnN0eWxlID0gbm9ybWFsaXplU3R5bGUoW3JldC5zdHlsZSwgdG9NZXJnZS5zdHlsZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNPbihrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSByZXRba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmNvbWluZyA9IHRvTWVyZ2Vba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoaW5jb21pbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgIT09IGluY29taW5nICYmXG4gICAgICAgICAgICAgICAgICAgICEoaXNBcnJheShleGlzdGluZykgJiYgZXhpc3RpbmcuaW5jbHVkZXMoaW5jb21pbmcpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXRba2V5XSA9IGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaW5jb21pbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGluY29taW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXRba2V5XSA9IHRvTWVyZ2Vba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gaW52b2tlVk5vZGVIb29rKGhvb2ssIGluc3RhbmNlLCB2bm9kZSwgcHJldlZOb2RlID0gbnVsbCkge1xuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA3IC8qIEVycm9yQ29kZXMuVk5PREVfSE9PSyAqLywgW1xuICAgICAgICB2bm9kZSxcbiAgICAgICAgcHJldlZOb2RlXG4gICAgXSk7XG59XG5cbmNvbnN0IGVtcHR5QXBwQ29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcbmxldCB1aWQkMSA9IDA7XG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSh2bm9kZSwgcGFyZW50LCBzdXNwZW5zZSkge1xuICAgIGNvbnN0IHR5cGUgPSB2bm9kZS50eXBlO1xuICAgIC8vIGluaGVyaXQgcGFyZW50IGFwcCBjb250ZXh0IC0gb3IgLSBpZiByb290LCBhZG9wdCBmcm9tIHJvb3Qgdm5vZGVcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gKHBhcmVudCA/IHBhcmVudC5hcHBDb250ZXh0IDogdm5vZGUuYXBwQ29udGV4dCkgfHwgZW1wdHlBcHBDb250ZXh0O1xuICAgIGNvbnN0IGluc3RhbmNlID0ge1xuICAgICAgICB1aWQ6IHVpZCQxKyssXG4gICAgICAgIHZub2RlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGFwcENvbnRleHQsXG4gICAgICAgIHJvb3Q6IG51bGwsXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHN1YlRyZWU6IG51bGwsXG4gICAgICAgIGVmZmVjdDogbnVsbCxcbiAgICAgICAgdXBkYXRlOiBudWxsLFxuICAgICAgICBzY29wZTogbmV3IEVmZmVjdFNjb3BlKHRydWUgLyogZGV0YWNoZWQgKi8pLFxuICAgICAgICByZW5kZXI6IG51bGwsXG4gICAgICAgIHByb3h5OiBudWxsLFxuICAgICAgICBleHBvc2VkOiBudWxsLFxuICAgICAgICBleHBvc2VQcm94eTogbnVsbCxcbiAgICAgICAgd2l0aFByb3h5OiBudWxsLFxuICAgICAgICBwcm92aWRlczogcGFyZW50ID8gcGFyZW50LnByb3ZpZGVzIDogT2JqZWN0LmNyZWF0ZShhcHBDb250ZXh0LnByb3ZpZGVzKSxcbiAgICAgICAgYWNjZXNzQ2FjaGU6IG51bGwsXG4gICAgICAgIHJlbmRlckNhY2hlOiBbXSxcbiAgICAgICAgLy8gbG9jYWwgcmVzb2x2ZWQgYXNzZXRzXG4gICAgICAgIGNvbXBvbmVudHM6IG51bGwsXG4gICAgICAgIGRpcmVjdGl2ZXM6IG51bGwsXG4gICAgICAgIC8vIHJlc29sdmVkIHByb3BzIGFuZCBlbWl0cyBvcHRpb25zXG4gICAgICAgIHByb3BzT3B0aW9uczogbm9ybWFsaXplUHJvcHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxuICAgICAgICBlbWl0c09wdGlvbnM6IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcbiAgICAgICAgLy8gZW1pdFxuICAgICAgICBlbWl0OiBudWxsLFxuICAgICAgICBlbWl0dGVkOiBudWxsLFxuICAgICAgICAvLyBwcm9wcyBkZWZhdWx0IHZhbHVlXG4gICAgICAgIHByb3BzRGVmYXVsdHM6IEVNUFRZX09CSixcbiAgICAgICAgLy8gaW5oZXJpdEF0dHJzXG4gICAgICAgIGluaGVyaXRBdHRyczogdHlwZS5pbmhlcml0QXR0cnMsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIGN0eDogRU1QVFlfT0JKLFxuICAgICAgICBkYXRhOiBFTVBUWV9PQkosXG4gICAgICAgIHByb3BzOiBFTVBUWV9PQkosXG4gICAgICAgIGF0dHJzOiBFTVBUWV9PQkosXG4gICAgICAgIHNsb3RzOiBFTVBUWV9PQkosXG4gICAgICAgIHJlZnM6IEVNUFRZX09CSixcbiAgICAgICAgc2V0dXBTdGF0ZTogRU1QVFlfT0JKLFxuICAgICAgICBzZXR1cENvbnRleHQ6IG51bGwsXG4gICAgICAgIC8vIHN1c3BlbnNlIHJlbGF0ZWRcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIHN1c3BlbnNlSWQ6IHN1c3BlbnNlID8gc3VzcGVuc2UucGVuZGluZ0lkIDogMCxcbiAgICAgICAgYXN5bmNEZXA6IG51bGwsXG4gICAgICAgIGFzeW5jUmVzb2x2ZWQ6IGZhbHNlLFxuICAgICAgICAvLyBsaWZlY3ljbGUgaG9va3NcbiAgICAgICAgLy8gbm90IHVzaW5nIGVudW1zIGhlcmUgYmVjYXVzZSBpdCByZXN1bHRzIGluIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAgICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgICAgICBpc0RlYWN0aXZhdGVkOiBmYWxzZSxcbiAgICAgICAgYmM6IG51bGwsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICAgIGJtOiBudWxsLFxuICAgICAgICBtOiBudWxsLFxuICAgICAgICBidTogbnVsbCxcbiAgICAgICAgdTogbnVsbCxcbiAgICAgICAgdW06IG51bGwsXG4gICAgICAgIGJ1bTogbnVsbCxcbiAgICAgICAgZGE6IG51bGwsXG4gICAgICAgIGE6IG51bGwsXG4gICAgICAgIHJ0ZzogbnVsbCxcbiAgICAgICAgcnRjOiBudWxsLFxuICAgICAgICBlYzogbnVsbCxcbiAgICAgICAgc3A6IG51bGxcbiAgICB9O1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgaW5zdGFuY2UuY3R4ID0gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5jdHggPSB7IF86IGluc3RhbmNlIH07XG4gICAgfVxuICAgIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xuICAgIGluc3RhbmNlLmVtaXQgPSBlbWl0JDEuYmluZChudWxsLCBpbnN0YW5jZSk7XG4gICAgLy8gYXBwbHkgY3VzdG9tIGVsZW1lbnQgc3BlY2lhbCBoYW5kbGluZ1xuICAgIGlmICh2bm9kZS5jZSkge1xuICAgICAgICB2bm9kZS5jZShpbnN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZTtcbn1cbmxldCBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbmNvbnN0IHNldEN1cnJlbnRJbnN0YW5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICAgIGN1cnJlbnRJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIGluc3RhbmNlLnNjb3BlLm9uKCk7XG59O1xuY29uc3QgdW5zZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiB7XG4gICAgY3VycmVudEluc3RhbmNlICYmIGN1cnJlbnRJbnN0YW5jZS5zY29wZS5vZmYoKTtcbiAgICBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xufTtcbmNvbnN0IGlzQnVpbHRJblRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnKTtcbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBhcHBJc05hdGl2ZVRhZyA9IGNvbmZpZy5pc05hdGl2ZVRhZyB8fCBOTztcbiAgICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGFwcElzTmF0aXZlVGFnKG5hbWUpKSB7XG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgaWQ6ICcgKyBuYW1lKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDQgLyogU2hhcGVGbGFncy5TVEFURUZVTF9DT01QT05FTlQgKi87XG59XG5sZXQgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XG5mdW5jdGlvbiBzZXR1cENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IgPSBmYWxzZSkge1xuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGlzU1NSO1xuICAgIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuIH0gPSBpbnN0YW5jZS52bm9kZTtcbiAgICBjb25zdCBpc1N0YXRlZnVsID0gaXNTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSk7XG4gICAgaW5pdFByb3BzKGluc3RhbmNlLCBwcm9wcywgaXNTdGF0ZWZ1bCwgaXNTU1IpO1xuICAgIGluaXRTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gaXNTdGF0ZWZ1bFxuICAgICAgICA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcbiAgICByZXR1cm4gc2V0dXBSZXN1bHQ7XG59XG5mdW5jdGlvbiBzZXR1cFN0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUikge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgaWYgKENvbXBvbmVudC5uYW1lKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoQ29tcG9uZW50Lm5hbWUsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmNvbXBvbmVudHMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lc1tpXSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wb25lbnQuZGlyZWN0aXZlcykge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29tcG9uZW50LmNvbXBpbGVyT3B0aW9ucyAmJiBpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICAgICAgICAgIHdhcm4oYFwiY29tcGlsZXJPcHRpb25zXCIgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZSB0aGF0IGAgK1xuICAgICAgICAgICAgICAgIGBpbmNsdWRlcyB0aGUgcnVudGltZSBjb21waWxlci4gU2luY2UgeW91IGFyZSB1c2luZyBhIHJ1bnRpbWUtb25seSBgICtcbiAgICAgICAgICAgICAgICBgYnVpbGQsIHRoZSBvcHRpb25zIHNob3VsZCBiZSBwYXNzZWQgdmlhIHlvdXIgYnVpbGQgdG9vbCBjb25maWcgaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyAwLiBjcmVhdGUgcmVuZGVyIHByb3h5IHByb3BlcnR5IGFjY2VzcyBjYWNoZVxuICAgIGluc3RhbmNlLmFjY2Vzc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAvLyAxLiBjcmVhdGUgcHVibGljIGluc3RhbmNlIC8gcmVuZGVyIHByb3h5XG4gICAgLy8gYWxzbyBtYXJrIGl0IHJhdyBzbyBpdCdzIG5ldmVyIG9ic2VydmVkXG4gICAgaW5zdGFuY2UucHJveHkgPSBtYXJrUmF3KG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycykpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICAgIH1cbiAgICAvLyAyLiBjYWxsIHNldHVwKClcbiAgICBjb25zdCB7IHNldHVwIH0gPSBDb21wb25lbnQ7XG4gICAgaWYgKHNldHVwKSB7XG4gICAgICAgIGNvbnN0IHNldHVwQ29udGV4dCA9IChpbnN0YW5jZS5zZXR1cENvbnRleHQgPVxuICAgICAgICAgICAgc2V0dXAubGVuZ3RoID4gMSA/IGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkgOiBudWxsKTtcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzZXR1cCwgaW5zdGFuY2UsIDAgLyogRXJyb3JDb2Rlcy5TRVRVUF9GVU5DVElPTiAqLywgWyhwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpbnN0YW5jZS5wcm9wcykgOiBpbnN0YW5jZS5wcm9wcywgc2V0dXBDb250ZXh0XSk7XG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShzZXR1cFJlc3VsdCkpIHtcbiAgICAgICAgICAgIHNldHVwUmVzdWx0LnRoZW4odW5zZXRDdXJyZW50SW5zdGFuY2UsIHVuc2V0Q3VycmVudEluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChpc1NTUikge1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgcHJvbWlzZSBzbyBzZXJ2ZXItcmVuZGVyZXIgY2FuIHdhaXQgb24gaXRcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc29sdmVkUmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCByZXNvbHZlZFJlc3VsdCwgaXNTU1IpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgaW5zdGFuY2UsIDAgLyogRXJyb3JDb2Rlcy5TRVRVUF9GVU5DVElPTiAqLyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhc3luYyBzZXR1cCByZXR1cm5lZCBQcm9taXNlLlxuICAgICAgICAgICAgICAgIC8vIGJhaWwgaGVyZSBhbmQgd2FpdCBmb3IgcmUtZW50cnkuXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgPSBzZXR1cFJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpbnN0YW5jZS5zdXNwZW5zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gKF9hID0gQ29tcG9uZW50Lm5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdBbm9ueW1vdXMnO1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgPCR7bmFtZX0+OiBzZXR1cCBmdW5jdGlvbiByZXR1cm5lZCBhIHByb21pc2UsIGJ1dCBubyBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGA8U3VzcGVuc2U+IGJvdW5kYXJ5IHdhcyBmb3VuZCBpbiB0aGUgcGFyZW50IGNvbXBvbmVudCB0cmVlLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBBIGNvbXBvbmVudCB3aXRoIGFzeW5jIHNldHVwKCkgbXVzdCBiZSBuZXN0ZWQgaW4gYSA8U3VzcGVuc2U+IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGluIG9yZGVyIHRvIGJlIHJlbmRlcmVkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCwgaXNTU1IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCwgaXNTU1IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcbiAgICAgICAgLy8gc2V0dXAgcmV0dXJuZWQgYW4gaW5saW5lIHJlbmRlciBmdW5jdGlvblxuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5fX3NzcklubGluZVJlbmRlcikge1xuICAgICAgICAgICAgLy8gd2hlbiB0aGUgZnVuY3Rpb24ncyBuYW1lIGlzIGBzc3JSZW5kZXJgIChjb21waWxlZCBieSBTRkMgaW5saW5lIG1vZGUpLFxuICAgICAgICAgICAgLy8gc2V0IGl0IGFzIHNzclJlbmRlciBpbnN0ZWFkLlxuICAgICAgICAgICAgaW5zdGFuY2Uuc3NyUmVuZGVyID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSBzZXR1cFJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdChzZXR1cFJlc3VsdCkpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xuICAgICAgICAgICAgd2Fybihgc2V0dXAoKSBzaG91bGQgbm90IHJldHVybiBWTm9kZXMgZGlyZWN0bHkgLSBgICtcbiAgICAgICAgICAgICAgICBgcmV0dXJuIGEgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0dXAgcmV0dXJuZWQgYmluZGluZ3MuXG4gICAgICAgIC8vIGFzc3VtaW5nIGEgcmVuZGVyIGZ1bmN0aW9uIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaXMgcHJlc2VudC5cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSA9IHNldHVwUmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLnNldHVwU3RhdGUgPSBwcm94eVJlZnMoc2V0dXBSZXN1bHQpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2V0dXBSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LiBSZWNlaXZlZDogJHtzZXR1cFJlc3VsdCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBzZXR1cFJlc3VsdH1gKTtcbiAgICB9XG4gICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbn1cbmxldCBjb21waWxlO1xubGV0IGluc3RhbGxXaXRoUHJveHk7XG4vKipcbiAqIEZvciBydW50aW1lLWRvbSB0byByZWdpc3RlciB0aGUgY29tcGlsZXIuXG4gKiBOb3RlIHRoZSBleHBvcnRlZCBtZXRob2QgdXNlcyBhbnkgdG8gYXZvaWQgZC50cyByZWx5aW5nIG9uIHRoZSBjb21waWxlciB0eXBlcy5cbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoX2NvbXBpbGUpIHtcbiAgICBjb21waWxlID0gX2NvbXBpbGU7XG4gICAgaW5zdGFsbFdpdGhQcm94eSA9IGkgPT4ge1xuICAgICAgICBpZiAoaS5yZW5kZXIuX3JjKSB7XG4gICAgICAgICAgICBpLndpdGhQcm94eSA9IG5ldyBQcm94eShpLmN0eCwgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyBkZXYgb25seVxuY29uc3QgaXNSdW50aW1lT25seSA9ICgpID0+ICFjb21waWxlO1xuZnVuY3Rpb24gZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSLCBza2lwT3B0aW9ucykge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gICAgLy8gdGVtcGxhdGUgLyByZW5kZXIgZnVuY3Rpb24gbm9ybWFsaXphdGlvblxuICAgIC8vIGNvdWxkIGJlIGFscmVhZHkgc2V0IHdoZW4gcmV0dXJuZWQgZnJvbSBzZXR1cCgpXG4gICAgaWYgKCFpbnN0YW5jZS5yZW5kZXIpIHtcbiAgICAgICAgLy8gb25seSBkbyBvbi10aGUtZmx5IGNvbXBpbGUgaWYgbm90IGluIFNTUiAtIFNTUiBvbi10aGUtZmx5IGNvbXBpbGF0aW9uXG4gICAgICAgIC8vIGlzIGRvbmUgYnkgc2VydmVyLXJlbmRlcmVyXG4gICAgICAgIGlmICghaXNTU1IgJiYgY29tcGlsZSAmJiAhQ29tcG9uZW50LnJlbmRlcikge1xuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBDb21wb25lbnQudGVtcGxhdGUgfHxcbiAgICAgICAgICAgICAgICByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkudGVtcGxhdGU7XG4gICAgICAgICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBpc0N1c3RvbUVsZW1lbnQsIGNvbXBpbGVyT3B0aW9ucyB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWc7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkZWxpbWl0ZXJzLCBjb21waWxlck9wdGlvbnM6IGNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyB9ID0gQ29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsQ29tcGlsZXJPcHRpb25zID0gZXh0ZW5kKGV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyc1xuICAgICAgICAgICAgICAgIH0sIGNvbXBpbGVyT3B0aW9ucyksIGNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50LnJlbmRlciA9IGNvbXBpbGUodGVtcGxhdGUsIGZpbmFsQ29tcGlsZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IChDb21wb25lbnQucmVuZGVyIHx8IE5PT1ApO1xuICAgICAgICAvLyBmb3IgcnVudGltZS1jb21waWxlZCByZW5kZXIgZnVuY3Rpb25zIHVzaW5nIGB3aXRoYCBibG9ja3MsIHRoZSByZW5kZXJcbiAgICAgICAgLy8gcHJveHkgdXNlZCBuZWVkcyBhIGRpZmZlcmVudCBgaGFzYCBoYW5kbGVyIHdoaWNoIGlzIG1vcmUgcGVyZm9ybWFudCBhbmRcbiAgICAgICAgLy8gYWxzbyBvbmx5IGFsbG93cyBhIHdoaXRlbGlzdCBvZiBnbG9iYWxzIHRvIGZhbGx0aHJvdWdoLlxuICAgICAgICBpZiAoaW5zdGFsbFdpdGhQcm94eSkge1xuICAgICAgICAgICAgaW5zdGFsbFdpdGhQcm94eShpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc3VwcG9ydCBmb3IgMi54IG9wdGlvbnNcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhKGZhbHNlICkpIHtcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICBhcHBseU9wdGlvbnMoaW5zdGFuY2UpO1xuICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgfVxuICAgIC8vIHdhcm4gbWlzc2luZyB0ZW1wbGF0ZS9yZW5kZXJcbiAgICAvLyB0aGUgcnVudGltZSBjb21waWxhdGlvbiBvZiB0ZW1wbGF0ZSBpbiBTU1IgaXMgZG9uZSBieSBzZXJ2ZXItcmVuZGVyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhQ29tcG9uZW50LnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1AgJiYgIWlzU1NSKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWNvbXBpbGUgJiYgQ29tcG9uZW50LnRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgcHJvdmlkZWQgdGVtcGxhdGUgb3B0aW9uIGJ1dCBgICtcbiAgICAgICAgICAgICAgICBgcnVudGltZSBjb21waWxhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgVnVlLmAgK1xuICAgICAgICAgICAgICAgIChgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmBcbiAgICAgICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24uYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVBdHRyc1Byb3h5KGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm94eShpbnN0YW5jZS5hdHRycywgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLCAnJGF0dHJzJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGV0ZVByb3BlcnR5KCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgICAgICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLCAnJGF0dHJzJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkge1xuICAgIGNvbnN0IGV4cG9zZSA9IGV4cG9zZWQgPT4ge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgICAgICAgIHdhcm4oYGV4cG9zZSgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBzZXR1cCgpLmApO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmV4cG9zZWQgPSBleHBvc2VkIHx8IHt9O1xuICAgIH07XG4gICAgbGV0IGF0dHJzO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgLy8gV2UgdXNlIGdldHRlcnMgaW4gZGV2IGluIGNhc2UgbGlicyBsaWtlIHRlc3QtdXRpbHMgb3ZlcndyaXRlIGluc3RhbmNlXG4gICAgICAgIC8vIHByb3BlcnRpZXMgKG92ZXJ3cml0ZXMgc2hvdWxkIG5vdCBiZSBkb25lIGluIHByb2QpXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnMgfHwgKGF0dHJzID0gY3JlYXRlQXR0cnNQcm94eShpbnN0YW5jZSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBzbG90cygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnNsb3RzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgZW1pdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiBpbnN0YW5jZS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHBvc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycyB8fCAoYXR0cnMgPSBjcmVhdGVBdHRyc1Byb3h5KGluc3RhbmNlKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2xvdHM6IGluc3RhbmNlLnNsb3RzLFxuICAgICAgICAgICAgZW1pdDogaW5zdGFuY2UuZW1pdCxcbiAgICAgICAgICAgIGV4cG9zZVxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEV4cG9zZVByb3h5KGluc3RhbmNlKSB7XG4gICAgaWYgKGluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIChpbnN0YW5jZS5leHBvc2VQcm94eSB8fFxuICAgICAgICAgICAgKGluc3RhbmNlLmV4cG9zZVByb3h5ID0gbmV3IFByb3h5KHByb3h5UmVmcyhtYXJrUmF3KGluc3RhbmNlLmV4cG9zZWQpKSwge1xuICAgICAgICAgICAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSBpbiBwdWJsaWNQcm9wZXJ0aWVzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSk7XG4gICAgfVxufVxuY29uc3QgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbmNvbnN0IGNsYXNzaWZ5ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoY2xhc3NpZnlSRSwgYyA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgJycpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQsIGluY2x1ZGVJbmZlcnJlZCA9IHRydWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihDb21wb25lbnQpXG4gICAgICAgID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lXG4gICAgICAgIDogQ29tcG9uZW50Lm5hbWUgfHwgKGluY2x1ZGVJbmZlcnJlZCAmJiBDb21wb25lbnQuX19uYW1lKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XG4gICAgbGV0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCk7XG4gICAgaWYgKCFuYW1lICYmIENvbXBvbmVudC5fX2ZpbGUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBDb21wb25lbnQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmFtZSAmJiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wYXJlbnQpIHtcbiAgICAgICAgLy8gdHJ5IHRvIGluZmVyIHRoZSBuYW1lIGJhc2VkIG9uIHJldmVyc2UgcmVzb2x1dGlvblxuICAgICAgICBjb25zdCBpbmZlckZyb21SZWdpc3RyeSA9IChyZWdpc3RyeSkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cnlba2V5XSA9PT0gQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBuYW1lID1cbiAgICAgICAgICAgIGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmNvbXBvbmVudHMgfHxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQudHlwZS5jb21wb25lbnRzKSB8fCBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5hcHBDb250ZXh0LmNvbXBvbmVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZSA/IGNsYXNzaWZ5KG5hbWUpIDogaXNSb290ID8gYEFwcGAgOiBgQW5vbnltb3VzYDtcbn1cbmZ1bmN0aW9uIGlzQ2xhc3NDb21wb25lbnQodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgJiYgJ19fdmNjT3B0cycgaW4gdmFsdWU7XG59XG5cbmNvbnN0IGNvbXB1dGVkID0gKChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucykgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcbn0pO1xuXG4vLyBkZXYgb25seVxuY29uc3Qgd2FyblJ1bnRpbWVVc2FnZSA9IChtZXRob2QpID0+IHdhcm4oYCR7bWV0aG9kfSgpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgYCArXG4gICAgYDxzY3JpcHQgc2V0dXA+IG9mIGEgc2luZ2xlIGZpbGUgY29tcG9uZW50LiBJdHMgYXJndW1lbnRzIHNob3VsZCBiZSBgICtcbiAgICBgY29tcGlsZWQgYXdheSBhbmQgcGFzc2luZyBpdCBhdCBydW50aW1lIGhhcyBubyBlZmZlY3QuYCk7XG4vLyBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gZGVmaW5lUHJvcHMoKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVQcm9wc2ApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiBkZWZpbmVFbWl0cygpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBWdWUgYDxzY3JpcHQgc2V0dXA+YCBjb21waWxlciBtYWNybyBmb3IgZGVjbGFyaW5nIGEgY29tcG9uZW50J3MgZXhwb3NlZFxuICogaW5zdGFuY2UgcHJvcGVydGllcyB3aGVuIGl0IGlzIGFjY2Vzc2VkIGJ5IGEgcGFyZW50IGNvbXBvbmVudCB2aWEgdGVtcGxhdGVcbiAqIHJlZnMuXG4gKlxuICogYDxzY3JpcHQgc2V0dXA+YCBjb21wb25lbnRzIGFyZSBjbG9zZWQgYnkgZGVmYXVsdCAtIGkuZS4gdmFyaWFibGVzIGluc2lkZVxuICogdGhlIGA8c2NyaXB0IHNldHVwPmAgc2NvcGUgaXMgbm90IGV4cG9zZWQgdG8gcGFyZW50IHVubGVzcyBleHBsaWNpdGx5IGV4cG9zZWRcbiAqIHZpYSBgZGVmaW5lRXhwb3NlYC5cbiAqXG4gKiBUaGlzIGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgPHNjcmlwdCBzZXR1cD5gLCBpcyBjb21waWxlZCBhd2F5IGluIHRoZVxuICogb3V0cHV0IGFuZCBzaG91bGQgKipub3QqKiBiZSBhY3R1YWxseSBjYWxsZWQgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lRXhwb3NlKGV4cG9zZWQpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUV4cG9zZWApO1xuICAgIH1cbn1cbi8qKlxuICogVnVlIGA8c2NyaXB0IHNldHVwPmAgY29tcGlsZXIgbWFjcm8gZm9yIHByb3ZpZGluZyBwcm9wcyBkZWZhdWx0IHZhbHVlcyB3aGVuXG4gKiB1c2luZyB0eXBlLWJhc2VkIGBkZWZpbmVQcm9wc2AgZGVjbGFyYXRpb24uXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqIGBgYHRzXG4gKiB3aXRoRGVmYXVsdHMoZGVmaW5lUHJvcHM8e1xuICogICBzaXplPzogbnVtYmVyXG4gKiAgIGxhYmVscz86IHN0cmluZ1tdXG4gKiB9PigpLCB7XG4gKiAgIHNpemU6IDMsXG4gKiAgIGxhYmVsczogKCkgPT4gWydkZWZhdWx0IGxhYmVsJ11cbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBUaGlzIGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgPHNjcmlwdCBzZXR1cD5gLCBpcyBjb21waWxlZCBhd2F5IGluIHRoZSBvdXRwdXRcbiAqIGFuZCBzaG91bGQgKipub3QqKiBiZSBhY3R1YWxseSBjYWxsZWQgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHByb3BzLCBkZWZhdWx0cykge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FyblJ1bnRpbWVVc2FnZShgd2l0aERlZmF1bHRzYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXNlU2xvdHMoKSB7XG4gICAgcmV0dXJuIGdldENvbnRleHQoKS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xuICAgIHJldHVybiBnZXRDb250ZXh0KCkuYXR0cnM7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICAgIGNvbnN0IGkgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpKSB7XG4gICAgICAgIHdhcm4oYHVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gICAgfVxuICAgIHJldHVybiBpLnNldHVwQ29udGV4dCB8fCAoaS5zZXR1cENvbnRleHQgPSBjcmVhdGVTZXR1cENvbnRleHQoaSkpO1xufVxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyBkZWZhdWx0IGRlY2xhcmF0aW9ucy4gSW1wb3J0ZWQgYnkgY29tcGlsZWQgY29kZVxuICogb25seS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRzKHJhdywgZGVmYXVsdHMpIHtcbiAgICBjb25zdCBwcm9wcyA9IGlzQXJyYXkocmF3KVxuICAgICAgICA/IHJhdy5yZWR1Y2UoKG5vcm1hbGl6ZWQsIHApID0+ICgobm9ybWFsaXplZFtwXSA9IHt9KSwgbm9ybWFsaXplZCksIHt9KVxuICAgICAgICA6IHJhdztcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWZhdWx0cykge1xuICAgICAgICBjb25zdCBvcHQgPSBwcm9wc1trZXldO1xuICAgICAgICBpZiAob3B0KSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShvcHQpIHx8IGlzRnVuY3Rpb24ob3B0KSkge1xuICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSB7IHR5cGU6IG9wdCwgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0LmRlZmF1bHQgPSBkZWZhdWx0c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHsgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgcHJvcHMgZGVmYXVsdCBrZXkgXCIke2tleX1cIiBoYXMgbm8gY29ycmVzcG9uZGluZyBkZWNsYXJhdGlvbi5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG59XG4vKipcbiAqIFVzZWQgdG8gY3JlYXRlIGEgcHJveHkgZm9yIHRoZSByZXN0IGVsZW1lbnQgd2hlbiBkZXN0cnVjdHVyaW5nIHByb3BzIHdpdGhcbiAqIGRlZmluZVByb3BzKCkuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUHJvcHNSZXN0UHJveHkocHJvcHMsIGV4Y2x1ZGVkS2V5cykge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmICghZXhjbHVkZWRLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsIGtleSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwcm9wc1trZXldXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBgPHNjcmlwdCBzZXR1cD5gIGhlbHBlciBmb3IgcGVyc2lzdGluZyB0aGUgY3VycmVudCBpbnN0YW5jZSBjb250ZXh0IG92ZXJcbiAqIGFzeW5jL2F3YWl0IGZsb3dzLlxuICpcbiAqIGBAdnVlL2NvbXBpbGVyLXNmY2AgY29udmVydHMgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgeCA9IGF3YWl0IGZvbygpXG4gKiBgYGBcbiAqXG4gKiBpbnRvOlxuICpcbiAqIGBgYHRzXG4gKiBsZXQgX190ZW1wLCBfX3Jlc3RvcmVcbiAqIGNvbnN0IHggPSAoKFtfX3RlbXAsIF9fcmVzdG9yZV0gPSB3aXRoQXN5bmNDb250ZXh0KCgpID0+IGZvbygpKSksX190ZW1wPWF3YWl0IF9fdGVtcCxfX3Jlc3RvcmUoKSxfX3RlbXApXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB3aXRoQXN5bmNDb250ZXh0KGdldEF3YWl0YWJsZSkge1xuICAgIGNvbnN0IGN0eCA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWN0eCkge1xuICAgICAgICB3YXJuKGB3aXRoQXN5bmNDb250ZXh0IGNhbGxlZCB3aXRob3V0IGFjdGl2ZSBjdXJyZW50IGluc3RhbmNlLiBgICtcbiAgICAgICAgICAgIGBUaGlzIGlzIGxpa2VseSBhIGJ1Zy5gKTtcbiAgICB9XG4gICAgbGV0IGF3YWl0YWJsZSA9IGdldEF3YWl0YWJsZSgpO1xuICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKGlzUHJvbWlzZShhd2FpdGFibGUpKSB7XG4gICAgICAgIGF3YWl0YWJsZSA9IGF3YWl0YWJsZS5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShjdHgpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBbYXdhaXRhYmxlLCAoKSA9PiBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KV07XG59XG5cbi8vIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gaCh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKSB7XG4gICAgY29uc3QgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGwgPT09IDIpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHByb3BzT3JDaGlsZHJlbikgJiYgIWlzQXJyYXkocHJvcHNPckNoaWxkcmVuKSkge1xuICAgICAgICAgICAgLy8gc2luZ2xlIHZub2RlIHdpdGhvdXQgcHJvcHNcbiAgICAgICAgICAgIGlmIChpc1ZOb2RlKHByb3BzT3JDaGlsZHJlbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgW3Byb3BzT3JDaGlsZHJlbl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcHJvcHMgd2l0aG91dCBjaGlsZHJlblxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBvbWl0IHByb3BzXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGwgPiAzKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKTtcbiAgICB9XG59XG5cbmNvbnN0IHNzckNvbnRleHRLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHNzckNvbnRleHRgIDogYGApO1xuY29uc3QgdXNlU1NSQ29udGV4dCA9ICgpID0+IHtcbiAgICB7XG4gICAgICAgIGNvbnN0IGN0eCA9IGluamVjdChzc3JDb250ZXh0S2V5KTtcbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgIHdhcm4oYFNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgYCArXG4gICAgICAgICAgICAgICAgYHVzZVNTUkNvbnRleHQoKSBjb25kaXRpb25hbGx5IGluIHRoZSBzZXJ2ZXIgYnVpbGQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN0eDtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBpc1NoYWxsb3codmFsdWUpIHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNTaGFsbG93XCIgLyogUmVhY3RpdmVGbGFncy5JU19TSEFMTE9XICovXSk7XG59XG5cbmZ1bmN0aW9uIGluaXRDdXN0b21Gb3JtYXR0ZXIoKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4gICAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2dWVTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojM2JhNzc2JyB9O1xuICAgIGNvbnN0IG51bWJlclN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMwYjFiYzknIH07XG4gICAgY29uc3Qgc3RyaW5nU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6I2I2MmUyNCcgfTtcbiAgICBjb25zdCBrZXl3b3JkU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzlkMjg4YycgfTtcbiAgICAvLyBjdXN0b20gZm9ybWF0dGVyIGZvciBDaHJvbWVcbiAgICAvLyBodHRwczovL3d3dy5tYXR0emV1bmVydC5jb20vMjAxNi8wMi8xOS9jdXN0b20tY2hyb21lLWRldnRvb2xzLW9iamVjdC1mb3JtYXR0ZXJzLmh0bWxcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSB7XG4gICAgICAgIGhlYWRlcihvYmopIHtcbiAgICAgICAgICAgIC8vIFRPRE8gYWxzbyBmb3JtYXQgQ29tcG9uZW50UHVibGljSW5zdGFuY2UgJiBjdHguc2xvdHMvYXR0cnMgaW4gc2V0dXBcbiAgICAgICAgICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9iai5fX2lzVnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGl2JywgdnVlU3R5bGUsIGBWdWVJbnN0YW5jZWBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWYob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsIGdlblJlZkZsYWcob2JqKV0sXG4gICAgICAgICAgICAgICAgICAgICc8JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqLnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgYD5gXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gJ1NoYWxsb3dSZWFjdGl2ZScgOiAnUmVhY3RpdmUnXSxcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxuICAgICAgICAgICAgICAgICAgICBgPiR7aXNSZWFkb25seShvYmopID8gYCAocmVhZG9ubHkpYCA6IGBgfWBcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFkb25seShvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgaXNTaGFsbG93KG9iaikgPyAnU2hhbGxvd1JlYWRvbmx5JyA6ICdSZWFkb25seSddLFxuICAgICAgICAgICAgICAgICAgICAnPCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXG4gICAgICAgICAgICAgICAgICAgICc+J1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzQm9keShvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9faXNWdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGJvZHkob2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqICYmIG9iai5fX2lzVnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICAuLi5mb3JtYXRJbnN0YW5jZShvYmouJClcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBmb3JtYXRJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgICAgICBjb25zdCBibG9ja3MgPSBbXTtcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ3Byb3BzJywgdG9SYXcoaW5zdGFuY2UucHJvcHMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnc2V0dXAnLCBpbnN0YW5jZS5zZXR1cFN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnZGF0YScsIHRvUmF3KGluc3RhbmNlLmRhdGEpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2NvbXB1dGVkJyk7XG4gICAgICAgIGlmIChjb21wdXRlZCkge1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnY29tcHV0ZWQnLCBjb21wdXRlZCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluamVjdGVkID0gZXh0cmFjdEtleXMoaW5zdGFuY2UsICdpbmplY3QnKTtcbiAgICAgICAgaWYgKGluamVjdGVkKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdpbmplY3RlZCcsIGluamVjdGVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgYmxvY2tzLnB1c2goW1xuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToga2V5d29yZFN0eWxlLnN0eWxlICsgJztvcGFjaXR5OjAuNjYnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnJCAoaW50ZXJuYWwpOiAnXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgWydvYmplY3QnLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBibG9ja3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlQmxvY2sodHlwZSwgdGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldCA9IGV4dGVuZCh7fSwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHt9XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiAnbGluZS1oZWlnaHQ6MS4yNWVtO21hcmdpbi1ib3R0b206MC42ZW0nIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2NvbG9yOiM0NzY1ODInXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdwYWRkaW5nLWxlZnQ6MS4yNWVtJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmtleXModGFyZ2V0KS5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCBrZXl3b3JkU3R5bGUsIGtleSArICc6ICddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUodGFyZ2V0W2tleV0sIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHYsIGFzUmF3ID0gdHJ1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgbnVtYmVyU3R5bGUsIHZdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBKU09OLnN0cmluZ2lmeSh2KV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIGtleXdvcmRTdHlsZSwgdl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ29iamVjdCcsIHsgb2JqZWN0OiBhc1JhdyA/IHRvUmF3KHYpIDogdiB9XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBzdHJpbmdTdHlsZSwgU3RyaW5nKHYpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBleHRyYWN0S2V5cyhpbnN0YW5jZSwgdHlwZSkge1xuICAgICAgICBjb25zdCBDb21wID0gaW5zdGFuY2UudHlwZTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oQ29tcCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHRyYWN0ZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5zdGFuY2UuY3R4KSB7XG4gICAgICAgICAgICBpZiAoaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSkge1xuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFtrZXldID0gaW5zdGFuY2UuY3R4W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBDb21wW3R5cGVdO1xuICAgICAgICBpZiAoKGlzQXJyYXkob3B0cykgJiYgb3B0cy5pbmNsdWRlcyhrZXkpKSB8fFxuICAgICAgICAgICAgKGlzT2JqZWN0KG9wdHMpICYmIGtleSBpbiBvcHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXAuZXh0ZW5kcyAmJiBpc0tleU9mVHlwZShDb21wLmV4dGVuZHMsIGtleSwgdHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wLm1peGlucyAmJiBDb21wLm1peGlucy5zb21lKG0gPT4gaXNLZXlPZlR5cGUobSwga2V5LCB0eXBlKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xuICAgICAgICBpZiAoaXNTaGFsbG93KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gYFNoYWxsb3dSZWZgO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2LmVmZmVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGBDb21wdXRlZFJlZmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBSZWZgO1xuICAgIH1cbiAgICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xuICAgICAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMgPSBbZm9ybWF0dGVyXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHdpdGhNZW1vKG1lbW8sIHJlbmRlciwgY2FjaGUsIGluZGV4KSB7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGVbaW5kZXhdO1xuICAgIGlmIChjYWNoZWQgJiYgaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IHJlbmRlcigpO1xuICAgIC8vIHNoYWxsb3cgY2xvbmVcbiAgICByZXQubWVtbyA9IG1lbW8uc2xpY2UoKTtcbiAgICByZXR1cm4gKGNhY2hlW2luZGV4XSA9IHJldCk7XG59XG5mdW5jdGlvbiBpc01lbW9TYW1lKGNhY2hlZCwgbWVtbykge1xuICAgIGNvbnN0IHByZXYgPSBjYWNoZWQubWVtbztcbiAgICBpZiAocHJldi5sZW5ndGggIT0gbWVtby5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQocHJldltpXSwgbWVtb1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBtYWtlIHN1cmUgdG8gbGV0IHBhcmVudCBibG9jayB0cmFjayBpdCB3aGVuIHJldHVybmluZyBjYWNoZWRcbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2goY2FjaGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8vIENvcmUgQVBJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY29uc3QgdmVyc2lvbiA9IFwiMy4yLjQxXCI7XG5jb25zdCBfc3NyVXRpbHMgPSB7XG4gICAgY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UsXG4gICAgc2V0dXBDb21wb25lbnQsXG4gICAgcmVuZGVyQ29tcG9uZW50Um9vdCxcbiAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsXG4gICAgaXNWTm9kZSxcbiAgICBub3JtYWxpemVWTm9kZVxufTtcbi8qKlxuICogU1NSIHV0aWxzIGZvciBcXEB2dWUvc2VydmVyLXJlbmRlcmVyLiBPbmx5IGV4cG9zZWQgaW4gc3NyLXBvc3NpYmxlIGJ1aWxkcy5cbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBzc3JVdGlscyA9IChfc3NyVXRpbHMgKTtcbi8qKlxuICogQGludGVybmFsIG9ubHkgZXhwb3NlZCBpbiBjb21wYXQgYnVpbGRzXG4gKi9cbmNvbnN0IHJlc29sdmVGaWx0ZXIgPSBudWxsO1xuLyoqXG4gKiBAaW50ZXJuYWwgb25seSBleHBvc2VkIGluIGNvbXBhdCBidWlsZHMuXG4gKi9cbmNvbnN0IGNvbXBhdFV0aWxzID0gKG51bGwpO1xuXG5leHBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgQ29tbWVudCwgRnJhZ21lbnQsIEtlZXBBbGl2ZSwgU3RhdGljLCBTdXNwZW5zZSwgVGVsZXBvcnQsIFRleHQsIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBjYWxsV2l0aEVycm9ySGFuZGxpbmcsIGNsb25lVk5vZGUsIGNvbXBhdFV0aWxzLCBjb21wdXRlZCwgY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudEJsb2NrLCBjcmVhdGVCYXNlVk5vZGUgYXMgY3JlYXRlRWxlbWVudFZOb2RlLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciwgY3JlYXRlUHJvcHNSZXN0UHJveHksIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVTbG90cywgY3JlYXRlU3RhdGljVk5vZGUsIGNyZWF0ZVRleHRWTm9kZSwgY3JlYXRlVk5vZGUsIGRlZmluZUFzeW5jQ29tcG9uZW50LCBkZWZpbmVDb21wb25lbnQsIGRlZmluZUVtaXRzLCBkZWZpbmVFeHBvc2UsIGRlZmluZVByb3BzLCBkZXZ0b29scywgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIGd1YXJkUmVhY3RpdmVQcm9wcywgaCwgaGFuZGxlRXJyb3IsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluamVjdCwgaXNNZW1vU2FtZSwgaXNSdW50aW1lT25seSwgaXNWTm9kZSwgbWVyZ2VEZWZhdWx0cywgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIG9uQWN0aXZhdGVkLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uQmVmb3JlVXBkYXRlLCBvbkRlYWN0aXZhdGVkLCBvbkVycm9yQ2FwdHVyZWQsIG9uTW91bnRlZCwgb25SZW5kZXJUcmFja2VkLCBvblJlbmRlclRyaWdnZXJlZCwgb25TZXJ2ZXJQcmVmZXRjaCwgb25Vbm1vdW50ZWQsIG9uVXBkYXRlZCwgb3BlbkJsb2NrLCBwb3BTY29wZUlkLCBwcm92aWRlLCBwdXNoU2NvcGVJZCwgcXVldWVQb3N0Rmx1c2hDYiwgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsIHJlbmRlckxpc3QsIHJlbmRlclNsb3QsIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCByZXNvbHZlRmlsdGVyLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBzZXRCbG9ja1RyYWNraW5nLCBzZXREZXZ0b29sc0hvb2ssIHNldFRyYW5zaXRpb25Ib29rcywgc3NyQ29udGV4dEtleSwgc3NyVXRpbHMsIHRvSGFuZGxlcnMsIHRyYW5zZm9ybVZOb2RlQXJncywgdXNlQXR0cnMsIHVzZVNTUkNvbnRleHQsIHVzZVNsb3RzLCB1c2VUcmFuc2l0aW9uU3RhdGUsIHZlcnNpb24sIHdhcm4sIHdhdGNoLCB3YXRjaEVmZmVjdCwgd2F0Y2hQb3N0RWZmZWN0LCB3YXRjaFN5bmNFZmZlY3QsIHdpdGhBc3luY0NvbnRleHQsIHdpdGhDdHgsIHdpdGhEZWZhdWx0cywgd2l0aERpcmVjdGl2ZXMsIHdpdGhNZW1vLCB3aXRoU2NvcGVJZCB9O1xuIiwiaW1wb3J0IHsgY2FtZWxpemUsIHdhcm4sIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBkZWZpbmVDb21wb25lbnQsIG5leHRUaWNrLCBjcmVhdGVWTm9kZSwgZ2V0Q3VycmVudEluc3RhbmNlLCB3YXRjaFBvc3RFZmZlY3QsIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIEZyYWdtZW50LCBTdGF0aWMsIGgsIEJhc2VUcmFuc2l0aW9uLCB1c2VUcmFuc2l0aW9uU3RhdGUsIG9uVXBkYXRlZCwgdG9SYXcsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgc2V0VHJhbnNpdGlvbkhvb2tzLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBjcmVhdGVSZW5kZXJlciwgaXNSdW50aW1lT25seSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIgfSBmcm9tICdAdnVlL3J1bnRpbWUtY29yZSc7XG5leHBvcnQgKiBmcm9tICdAdnVlL3J1bnRpbWUtY29yZSc7XG5pbXBvcnQgeyBpc1N0cmluZywgaXNBcnJheSwgaHlwaGVuYXRlLCBjYXBpdGFsaXplLCBpc1NwZWNpYWxCb29sZWFuQXR0ciwgaW5jbHVkZUJvb2xlYW5BdHRyLCBpc09uLCBpc01vZGVsTGlzdGVuZXIsIGlzRnVuY3Rpb24sIHRvTnVtYmVyLCBjYW1lbGl6ZSBhcyBjYW1lbGl6ZSQxLCBleHRlbmQsIEVNUFRZX09CSiwgaXNPYmplY3QsIGludm9rZUFycmF5Rm5zLCBsb29zZUluZGV4T2YsIGlzU2V0LCBsb29zZUVxdWFsLCBpc0hUTUxUYWcsIGlzU1ZHVGFnIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdmdOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5jb25zdCBkb2MgPSAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogbnVsbCk7XG5jb25zdCB0ZW1wbGF0ZUNvbnRhaW5lciA9IGRvYyAmJiAvKiNfX1BVUkVfXyovIGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuY29uc3Qgbm9kZU9wcyA9IHtcbiAgICBpbnNlcnQ6IChjaGlsZCwgcGFyZW50LCBhbmNob3IpID0+IHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yIHx8IG51bGwpO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBjaGlsZCA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQ6ICh0YWcsIGlzU1ZHLCBpcywgcHJvcHMpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSBpc1NWR1xuICAgICAgICAgICAgPyBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCB0YWcpXG4gICAgICAgICAgICA6IGRvYy5jcmVhdGVFbGVtZW50KHRhZywgaXMgPyB7IGlzIH0gOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAodGFnID09PSAnc2VsZWN0JyAmJiBwcm9wcyAmJiBwcm9wcy5tdWx0aXBsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgcHJvcHMubXVsdGlwbGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9LFxuICAgIGNyZWF0ZVRleHQ6IHRleHQgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpLFxuICAgIGNyZWF0ZUNvbW1lbnQ6IHRleHQgPT4gZG9jLmNyZWF0ZUNvbW1lbnQodGV4dCksXG4gICAgc2V0VGV4dDogKG5vZGUsIHRleHQpID0+IHtcbiAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSB0ZXh0O1xuICAgIH0sXG4gICAgc2V0RWxlbWVudFRleHQ6IChlbCwgdGV4dCkgPT4ge1xuICAgICAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgfSxcbiAgICBwYXJlbnROb2RlOiBub2RlID0+IG5vZGUucGFyZW50Tm9kZSxcbiAgICBuZXh0U2libGluZzogbm9kZSA9PiBub2RlLm5leHRTaWJsaW5nLFxuICAgIHF1ZXJ5U2VsZWN0b3I6IHNlbGVjdG9yID0+IGRvYy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSxcbiAgICBzZXRTY29wZUlkKGVsLCBpZCkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoaWQsICcnKTtcbiAgICB9LFxuICAgIC8vIF9fVU5TQUZFX19cbiAgICAvLyBSZWFzb246IGlubmVySFRNTC5cbiAgICAvLyBTdGF0aWMgY29udGVudCBoZXJlIGNhbiBvbmx5IGNvbWUgZnJvbSBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgLy8gQXMgbG9uZyBhcyB0aGUgdXNlciBvbmx5IHVzZXMgdHJ1c3RlZCB0ZW1wbGF0ZXMsIHRoaXMgaXMgc2FmZS5cbiAgICBpbnNlcnRTdGF0aWNDb250ZW50KGNvbnRlbnQsIHBhcmVudCwgYW5jaG9yLCBpc1NWRywgc3RhcnQsIGVuZCkge1xuICAgICAgICAvLyA8cGFyZW50PiBiZWZvcmUgfCBmaXJzdCAuLi4gbGFzdCB8IGFuY2hvciA8L3BhcmVudD5cbiAgICAgICAgY29uc3QgYmVmb3JlID0gYW5jaG9yID8gYW5jaG9yLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGQ7XG4gICAgICAgIC8vICM1MzA4IGNhbiBvbmx5IHRha2UgY2FjaGVkIHBhdGggaWY6XG4gICAgICAgIC8vIC0gaGFzIGEgc2luZ2xlIHJvb3Qgbm9kZVxuICAgICAgICAvLyAtIG5leHRTaWJsaW5nIGluZm8gaXMgc3RpbGwgYXZhaWxhYmxlXG4gICAgICAgIGlmIChzdGFydCAmJiAoc3RhcnQgPT09IGVuZCB8fCBzdGFydC5uZXh0U2libGluZykpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlZFxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHN0YXJ0LmNsb25lTm9kZSh0cnVlKSwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCB8fCAhKHN0YXJ0ID0gc3RhcnQubmV4dFNpYmxpbmcpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZyZXNoIGluc2VydFxuICAgICAgICAgICAgdGVtcGxhdGVDb250YWluZXIuaW5uZXJIVE1MID0gaXNTVkcgPyBgPHN2Zz4ke2NvbnRlbnR9PC9zdmc+YCA6IGNvbnRlbnQ7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ29udGFpbmVyLmNvbnRlbnQ7XG4gICAgICAgICAgICBpZiAoaXNTVkcpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgb3V0ZXIgc3ZnIHdyYXBwZXJcbiAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gdGVtcGxhdGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmFwcGVuZENoaWxkKHdyYXBwZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnJlbW92ZUNoaWxkKHdyYXBwZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSh0ZW1wbGF0ZSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLy8gZmlyc3RcbiAgICAgICAgICAgIGJlZm9yZSA/IGJlZm9yZS5uZXh0U2libGluZyA6IHBhcmVudC5maXJzdENoaWxkLFxuICAgICAgICAgICAgLy8gbGFzdFxuICAgICAgICAgICAgYW5jaG9yID8gYW5jaG9yLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGRcbiAgICAgICAgXTtcbiAgICB9XG59O1xuXG4vLyBjb21waWxlciBzaG91bGQgbm9ybWFsaXplIGNsYXNzICsgOmNsYXNzIGJpbmRpbmdzIG9uIHRoZSBzYW1lIGVsZW1lbnRcbi8vIGludG8gYSBzaW5nbGUgYmluZGluZyBbJ3N0YXRpY0NsYXNzJywgZHluYW1pY11cbmZ1bmN0aW9uIHBhdGNoQ2xhc3MoZWwsIHZhbHVlLCBpc1NWRykge1xuICAgIC8vIGRpcmVjdGx5IHNldHRpbmcgY2xhc3NOYW1lIHNob3VsZCBiZSBmYXN0ZXIgdGhhbiBzZXRBdHRyaWJ1dGUgaW4gdGhlb3J5XG4gICAgLy8gaWYgdGhpcyBpcyBhbiBlbGVtZW50IGR1cmluZyBhIHRyYW5zaXRpb24sIHRha2UgdGhlIHRlbXBvcmFyeSB0cmFuc2l0aW9uXG4gICAgLy8gY2xhc3NlcyBpbnRvIGFjY291bnQuXG4gICAgY29uc3QgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdnRjO1xuICAgIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA/IFt2YWx1ZSwgLi4udHJhbnNpdGlvbkNsYXNzZXNdIDogWy4uLnRyYW5zaXRpb25DbGFzc2VzXSkuam9pbignICcpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU1ZHKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbC5jbGFzc05hbWUgPSB2YWx1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcbiAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgIGNvbnN0IGlzQ3NzU3RyaW5nID0gaXNTdHJpbmcobmV4dCk7XG4gICAgaWYgKG5leHQgJiYgIWlzQ3NzU3RyaW5nKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIG5leHRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXYgJiYgIWlzU3RyaW5nKHByZXYpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcbiAgICAgICAgaWYgKGlzQ3NzU3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xuICAgICAgICAgICAgICAgIHN0eWxlLmNzc1RleHQgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbmRpY2F0ZXMgdGhhdCB0aGUgYGRpc3BsYXlgIG9mIHRoZSBlbGVtZW50IGlzIGNvbnRyb2xsZWQgYnkgYHYtc2hvd2AsXG4gICAgICAgIC8vIHNvIHdlIGFsd2F5cyBrZWVwIHRoZSBjdXJyZW50IGBkaXNwbGF5YCB2YWx1ZSByZWdhcmRsZXNzIG9mIHRoZSBgc3R5bGVgXG4gICAgICAgIC8vIHZhbHVlLCB0aHVzIGhhbmRpbmcgb3ZlciBjb250cm9sIHRvIGB2LXNob3dgLlxuICAgICAgICBpZiAoJ192b2QnIGluIGVsKSB7XG4gICAgICAgICAgICBzdHlsZS5kaXNwbGF5ID0gY3VycmVudERpc3BsYXk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xuZnVuY3Rpb24gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHZhbCkge1xuICAgIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFsLmZvckVhY2godiA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsKVxuICAgICAgICAgICAgdmFsID0gJyc7XG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJy0tJykpIHtcbiAgICAgICAgICAgIC8vIGN1c3RvbSBwcm9wZXJ0eSBkZWZpbml0aW9uXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcbiAgICAgICAgICAgIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICAgICAgICAgICAgICAvLyAhaW1wb3J0YW50XG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKHByZWZpeGVkKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcbmNvbnN0IHByZWZpeENhY2hlID0ge307XG5mdW5jdGlvbiBhdXRvUHJlZml4KHN0eWxlLCByYXdOYW1lKSB7XG4gICAgY29uc3QgY2FjaGVkID0gcHJlZml4Q2FjaGVbcmF3TmFtZV07XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xuICAgIGlmIChuYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiAocHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBuYW1lKTtcbiAgICB9XG4gICAgbmFtZSA9IGNhcGl0YWxpemUobmFtZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgbmFtZTtcbiAgICAgICAgaWYgKHByZWZpeGVkIGluIHN0eWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gKHByZWZpeENhY2hlW3Jhd05hbWVdID0gcHJlZml4ZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYXdOYW1lO1xufVxuXG5jb25zdCB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuZnVuY3Rpb24gcGF0Y2hBdHRyKGVsLCBrZXksIHZhbHVlLCBpc1NWRywgaW5zdGFuY2UpIHtcbiAgICBpZiAoaXNTVkcgJiYga2V5LnN0YXJ0c1dpdGgoJ3hsaW5rOicpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXkuc2xpY2UoNiwga2V5Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIG5vdGUgd2UgYXJlIG9ubHkgY2hlY2tpbmcgYm9vbGVhbiBhdHRyaWJ1dGVzIHRoYXQgZG9uJ3QgaGF2ZSBhXG4gICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgZG9tIHByb3Agb2YgdGhlIHNhbWUgbmFtZSBoZXJlLlxuICAgICAgICBjb25zdCBpc0Jvb2xlYW4gPSBpc1NwZWNpYWxCb29sZWFuQXR0cihrZXkpO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoaXNCb29sZWFuICYmICFpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0Jvb2xlYW4gPyAnJyA6IHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gX19VTlNBRkVfX1xuLy8gZnVuY3Rpb25zLiBUaGUgdXNlciBpcyByZXNwb25zaWJsZSBmb3IgdXNpbmcgdGhlbSB3aXRoIG9ubHkgdHJ1c3RlZCBjb250ZW50LlxuZnVuY3Rpb24gcGF0Y2hET01Qcm9wKGVsLCBrZXksIHZhbHVlLCBcbi8vIHRoZSBmb2xsb3dpbmcgYXJncyBhcmUgcGFzc2VkIG9ubHkgZHVlIHRvIHBvdGVudGlhbCBpbm5lckhUTUwvdGV4dENvbnRlbnRcbi8vIG92ZXJyaWRpbmcgZXhpc3RpbmcgVk5vZGVzLCBpbiB3aGljaCBjYXNlIHRoZSBvbGQgdHJlZSBtdXN0IGJlIHByb3Blcmx5XG4vLyB1bm1vdW50ZWQuXG5wcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbikge1xuICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbFtrZXldID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJlxuICAgICAgICBlbC50YWdOYW1lICE9PSAnUFJPR1JFU1MnICYmXG4gICAgICAgIC8vIGN1c3RvbSBlbGVtZW50cyBtYXkgdXNlIF92YWx1ZSBpbnRlcm5hbGx5XG4gICAgICAgICFlbC50YWdOYW1lLmluY2x1ZGVzKCctJykpIHtcbiAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZC5cbiAgICAgICAgZWwuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUgfHxcbiAgICAgICAgICAgIC8vICM0OTU2OiBhbHdheXMgc2V0IGZvciBPUFRJT04gZWxlbWVudHMgYmVjYXVzZSBpdHMgdmFsdWUgZmFsbHMgYmFjayB0b1xuICAgICAgICAgICAgLy8gdGV4dENvbnRlbnQgaWYgbm8gdmFsdWUgYXR0cmlidXRlIGlzIHByZXNlbnQuIEFuZCBzZXR0aW5nIC52YWx1ZSBmb3JcbiAgICAgICAgICAgIC8vIE9QVElPTiBoYXMgbm8gc2lkZSBlZmZlY3RcbiAgICAgICAgICAgIGVsLnRhZ05hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgICAgICAgICBlbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBuZWVkUmVtb3ZlID0gZmFsc2U7XG4gICAgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgZWxba2V5XTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgLy8gZS5nLiA8c2VsZWN0IG11bHRpcGxlPiBjb21waWxlcyB0byB7IG11bHRpcGxlOiAnJyB9XG4gICAgICAgICAgICB2YWx1ZSA9IGluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gbnVsbCAmJiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gZS5nLiA8ZGl2IDppZD1cIm51bGxcIj5cbiAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgICBuZWVkUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgLy8gZS5nLiA8aW1nIDp3aWR0aD1cIm51bGxcIj5cbiAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHNvbWUgcHJvcGVydGllcyBwZXJmb3JtIHZhbHVlIHZhbGlkYXRpb24gYW5kIHRocm93LFxuICAgIC8vIHNvbWUgcHJvcGVydGllcyBoYXMgZ2V0dGVyLCBubyBzZXR0ZXIsIHdpbGwgZXJyb3IgaW4gJ3VzZSBzdHJpY3QnXG4gICAgLy8gZWcuIDxzZWxlY3QgOnR5cGU9XCJudWxsXCI+PC9zZWxlY3Q+IDxzZWxlY3QgOndpbGxWYWxpZGF0ZT1cIm51bGxcIj48L3NlbGVjdD5cbiAgICB0cnkge1xuICAgICAgICBlbFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdCB3YXJuIGlmIHZhbHVlIGlzIGF1dG8tY29lcmNlZCBmcm9tIG51bGxpc2ggdmFsdWVzXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIW5lZWRSZW1vdmUpIHtcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCBzZXR0aW5nIHByb3AgXCIke2tleX1cIiBvbiA8JHtlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PjogYCArXG4gICAgICAgICAgICAgICAgYHZhbHVlICR7dmFsdWV9IGlzIGludmFsaWQuYCwgZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmVlZFJlbW92ZSAmJiBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XG4gICAgLy8gdmVpID0gdnVlIGV2ZW50IGludm9rZXJzXG4gICAgY29uc3QgaW52b2tlcnMgPSBlbC5fdmVpIHx8IChlbC5fdmVpID0ge30pO1xuICAgIGNvbnN0IGV4aXN0aW5nSW52b2tlciA9IGludm9rZXJzW3Jhd05hbWVdO1xuICAgIGlmIChuZXh0VmFsdWUgJiYgZXhpc3RpbmdJbnZva2VyKSB7XG4gICAgICAgIC8vIHBhdGNoXG4gICAgICAgIGV4aXN0aW5nSW52b2tlci52YWx1ZSA9IG5leHRWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcbiAgICAgICAgaWYgKG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gYWRkXG4gICAgICAgICAgICBjb25zdCBpbnZva2VyID0gKGludm9rZXJzW3Jhd05hbWVdID0gY3JlYXRlSW52b2tlcihuZXh0VmFsdWUsIGluc3RhbmNlKSk7XG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBuYW1lLCBpbnZva2VyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZVxuICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgZXhpc3RpbmdJbnZva2VyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGludm9rZXJzW3Jhd05hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3Qgb3B0aW9uc01vZGlmaWVyUkUgPSAvKD86T25jZXxQYXNzaXZlfENhcHR1cmUpJC87XG5mdW5jdGlvbiBwYXJzZU5hbWUobmFtZSkge1xuICAgIGxldCBvcHRpb25zO1xuICAgIGlmIChvcHRpb25zTW9kaWZpZXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIHdoaWxlICgobSA9IG5hbWUubWF0Y2gob3B0aW9uc01vZGlmaWVyUkUpKSkge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgbmFtZS5sZW5ndGggLSBtWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICBvcHRpb25zW21bMF0udG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50ID0gbmFtZVsyXSA9PT0gJzonID8gbmFtZS5zbGljZSgzKSA6IGh5cGhlbmF0ZShuYW1lLnNsaWNlKDIpKTtcbiAgICByZXR1cm4gW2V2ZW50LCBvcHRpb25zXTtcbn1cbi8vIFRvIGF2b2lkIHRoZSBvdmVyaGVhZCBvZiByZXBlYXRlZGx5IGNhbGxpbmcgRGF0ZS5ub3coKSwgd2UgY2FjaGVcbi8vIGFuZCB1c2UgdGhlIHNhbWUgdGltZXN0YW1wIGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzIGF0dGFjaGVkIGluIHRoZSBzYW1lIHRpY2suXG5sZXQgY2FjaGVkTm93ID0gMDtcbmNvbnN0IHAgPSAvKiNfX1BVUkVfXyovIFByb21pc2UucmVzb2x2ZSgpO1xuY29uc3QgZ2V0Tm93ID0gKCkgPT4gY2FjaGVkTm93IHx8IChwLnRoZW4oKCkgPT4gKGNhY2hlZE5vdyA9IDApKSwgKGNhY2hlZE5vdyA9IERhdGUubm93KCkpKTtcbmZ1bmN0aW9uIGNyZWF0ZUludm9rZXIoaW5pdGlhbFZhbHVlLCBpbnN0YW5jZSkge1xuICAgIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xuICAgICAgICAvLyBhc3luYyBlZGdlIGNhc2UgdnVlanMvdnVlIzY1NjZcbiAgICAgICAgLy8gaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgICAgICAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gICAgICAgIC8vIHRoaXMgbm8gbG9uZ2VyIGhhcHBlbnMgZm9yIHRlbXBsYXRlcyBpbiBWdWUgMywgYnV0IGNvdWxkIHN0aWxsIGJlXG4gICAgICAgIC8vIHRoZW9yZXRpY2FsbHkgcG9zc2libGUgZm9yIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICAgICAgICAvLyB0aGUgc29sdXRpb246IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgICAgICAgLy8gYW5kIGFsc28gYXR0YWNoIHRoZSB0aW1lc3RhbXAgdG8gYW55IGV2ZW50IHRoYXQgd2FzIGhhbmRsZWQgYnkgdnVlXG4gICAgICAgIC8vIGZvciB0aGUgZmlyc3QgdGltZSAodG8gYXZvaWQgaW5jb25zaXN0ZW50IGV2ZW50IHRpbWVzdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gb3IgZXZlbnRzIGZpcmVkIGZyb20gaWZyYW1lcywgZS5nLiAjMjUxMylcbiAgICAgICAgLy8gVGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gICAgICAgIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgICAgICAgaWYgKCFlLl92dHMpIHtcbiAgICAgICAgICAgIGUuX3Z0cyA9IERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS5fdnRzIDw9IGludm9rZXIuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCBpbnZva2VyLnZhbHVlKSwgaW5zdGFuY2UsIDUgLyogRXJyb3JDb2Rlcy5OQVRJVkVfRVZFTlRfSEFORExFUiAqLywgW2VdKTtcbiAgICB9O1xuICAgIGludm9rZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgaW52b2tlci5hdHRhY2hlZCA9IGdldE5vdygpO1xuICAgIHJldHVybiBpbnZva2VyO1xufVxuZnVuY3Rpb24gcGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxTdG9wID0gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgb3JpZ2luYWxTdG9wLmNhbGwoZSk7XG4gICAgICAgICAgICBlLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmbiA9PiAoZSkgPT4gIWUuX3N0b3BwZWQgJiYgZm4gJiYgZm4oZSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuY29uc3QgbmF0aXZlT25SRSA9IC9eb25bYS16XS87XG5jb25zdCBwYXRjaFByb3AgPSAoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIGlzU1ZHID0gZmFsc2UsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSA9PiB7XG4gICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xuICAgICAgICBwYXRjaENsYXNzKGVsLCBuZXh0VmFsdWUsIGlzU1ZHKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICAgIHBhdGNoU3R5bGUoZWwsIHByZXZWYWx1ZSwgbmV4dFZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPbihrZXkpKSB7XG4gICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGxpc3RlbmVyc1xuICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XG4gICAgICAgICAgICBwYXRjaEV2ZW50KGVsLCBrZXksIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleVswXSA9PT0gJy4nXG4gICAgICAgID8gKChrZXkgPSBrZXkuc2xpY2UoMSkpLCB0cnVlKVxuICAgICAgICA6IGtleVswXSA9PT0gJ14nXG4gICAgICAgICAgICA/ICgoa2V5ID0ga2V5LnNsaWNlKDEpKSwgZmFsc2UpXG4gICAgICAgICAgICA6IHNob3VsZFNldEFzUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHKSkge1xuICAgICAgICBwYXRjaERPTVByb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDxpbnB1dCB2LW1vZGVsIHR5cGU9XCJjaGVja2JveFwiPiB3aXRoXG4gICAgICAgIC8vIDp0cnVlLXZhbHVlICYgOmZhbHNlLXZhbHVlXG4gICAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIGRvbSBwcm9wZXJ0aWVzIHNpbmNlIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmVcbiAgICAgICAgLy8gc3RyaW5naWZpZWQuXG4gICAgICAgIGlmIChrZXkgPT09ICd0cnVlLXZhbHVlJykge1xuICAgICAgICAgICAgZWwuX3RydWVWYWx1ZSA9IG5leHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdmYWxzZS12YWx1ZScpIHtcbiAgICAgICAgICAgIGVsLl9mYWxzZVZhbHVlID0gbmV4dFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHBhdGNoQXR0cihlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xuICAgIGlmIChpc1NWRykge1xuICAgICAgICAvLyBtb3N0IGtleXMgbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlIG9uIHN2ZyBlbGVtZW50cyB0byB3b3JrXG4gICAgICAgIC8vIC4uLmV4Y2VwdCBpbm5lckhUTUwgJiB0ZXh0Q29udGVudFxuICAgICAgICBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyB8fCBrZXkgPT09ICd0ZXh0Q29udGVudCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9yIG5hdGl2ZSBvbmNsaWNrIHdpdGggZnVuY3Rpb24gdmFsdWVzXG4gICAgICAgIGlmIChrZXkgaW4gZWwgJiYgbmF0aXZlT25SRS50ZXN0KGtleSkgJiYgaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gdGhlc2UgYXJlIGVudW1lcmF0ZWQgYXR0cnMsIGhvd2V2ZXIgdGhlaXIgY29ycmVzcG9uZGluZyBET00gcHJvcGVydGllc1xuICAgIC8vIGFyZSBhY3R1YWxseSBib29sZWFucyAtIHRoaXMgbGVhZHMgdG8gc2V0dGluZyBpdCB3aXRoIGEgc3RyaW5nIFwiZmFsc2VcIlxuICAgIC8vIHZhbHVlIGxlYWRpbmcgaXQgdG8gYmUgY29lcmNlZCB0byBgdHJ1ZWAsIHNvIHdlIG5lZWQgdG8gYWx3YXlzIHRyZWF0XG4gICAgLy8gdGhlbSBhcyBhdHRyaWJ1dGVzLlxuICAgIC8vIE5vdGUgdGhhdCBgY29udGVudEVkaXRhYmxlYCBkb2Vzbid0IGhhdmUgdGhpcyBwcm9ibGVtOiBpdHMgRE9NXG4gICAgLy8gcHJvcGVydHkgaXMgYWxzbyBlbnVtZXJhdGVkIHN0cmluZyB2YWx1ZXMuXG4gICAgaWYgKGtleSA9PT0gJ3NwZWxsY2hlY2snIHx8IGtleSA9PT0gJ2RyYWdnYWJsZScgfHwga2V5ID09PSAndHJhbnNsYXRlJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vICMxNzg3LCAjMjg0MCBmb3JtIHByb3BlcnR5IG9uIGZvcm0gZWxlbWVudHMgaXMgcmVhZG9ubHkgYW5kIG11c3QgYmUgc2V0IGFzXG4gICAgLy8gYXR0cmlidXRlLlxuICAgIGlmIChrZXkgPT09ICdmb3JtJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vICMxNTI2IDxpbnB1dCBsaXN0PiBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcbiAgICBpZiAoa2V5ID09PSAnbGlzdCcgJiYgZWwudGFnTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vICMyNzY2IDx0ZXh0YXJlYSB0eXBlPiBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcbiAgICBpZiAoa2V5ID09PSAndHlwZScgJiYgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIG5hdGl2ZSBvbmNsaWNrIHdpdGggc3RyaW5nIHZhbHVlLCBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcbiAgICBpZiAobmF0aXZlT25SRS50ZXN0KGtleSkgJiYgaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleSBpbiBlbDtcbn1cblxuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRWxlbWVudChvcHRpb25zLCBoeWRyYXRlKSB7XG4gICAgY29uc3QgQ29tcCA9IGRlZmluZUNvbXBvbmVudChvcHRpb25zKTtcbiAgICBjbGFzcyBWdWVDdXN0b21FbGVtZW50IGV4dGVuZHMgVnVlRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGluaXRpYWxQcm9wcykge1xuICAgICAgICAgICAgc3VwZXIoQ29tcCwgaW5pdGlhbFByb3BzLCBoeWRyYXRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBWdWVDdXN0b21FbGVtZW50LmRlZiA9IENvbXA7XG4gICAgcmV0dXJuIFZ1ZUN1c3RvbUVsZW1lbnQ7XG59XG5jb25zdCBkZWZpbmVTU1JDdXN0b21FbGVtZW50ID0gKChvcHRpb25zKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUpO1xufSk7XG5jb25zdCBCYXNlQ2xhc3MgPSAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IEhUTUxFbGVtZW50IDogY2xhc3Mge1xufSk7XG5jbGFzcyBWdWVFbGVtZW50IGV4dGVuZHMgQmFzZUNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihfZGVmLCBfcHJvcHMgPSB7fSwgaHlkcmF0ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9kZWYgPSBfZGVmO1xuICAgICAgICB0aGlzLl9wcm9wcyA9IF9wcm9wcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5zaGFkb3dSb290ICYmIGh5ZHJhdGUpIHtcbiAgICAgICAgICAgIGh5ZHJhdGUodGhpcy5fY3JlYXRlVk5vZGUoKSwgdGhpcy5zaGFkb3dSb290KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICAgICAgd2FybihgQ3VzdG9tIGVsZW1lbnQgaGFzIHByZS1yZW5kZXJlZCBkZWNsYXJhdGl2ZSBzaGFkb3cgcm9vdCBidXQgaXMgbm90IGAgK1xuICAgICAgICAgICAgICAgICAgICBgZGVmaW5lZCBhcyBoeWRyYXRhYmxlLiBVc2UgXFxgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudFxcYC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlRGVmKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJlc29sdmUgaW5uZXIgY29tcG9uZW50IGRlZmluaXRpb24gKGhhbmRsZSBwb3NzaWJsZSBhc3luYyBjb21wb25lbnQpXG4gICAgICovXG4gICAgX3Jlc29sdmVEZWYoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXNvbHZlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgLy8gc2V0IGluaXRpYWwgYXR0cnNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIodGhpcy5hdHRyaWJ1dGVzW2ldLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdhdGNoIGZ1dHVyZSBhdHRyIGNoYW5nZXNcbiAgICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25zID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbSBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBdHRyKG0uYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCByZXNvbHZlID0gKGRlZikgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwcm9wcywgc3R5bGVzIH0gPSBkZWY7XG4gICAgICAgICAgICBjb25zdCBoYXNPcHRpb25zID0gIWlzQXJyYXkocHJvcHMpO1xuICAgICAgICAgICAgY29uc3QgcmF3S2V5cyA9IHByb3BzID8gKGhhc09wdGlvbnMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcykgOiBbXTtcbiAgICAgICAgICAgIC8vIGNhc3QgTnVtYmVyLXR5cGUgcHJvcHMgc2V0IGJlZm9yZSByZXNvbHZlXG4gICAgICAgICAgICBsZXQgbnVtYmVyUHJvcHM7XG4gICAgICAgICAgICBpZiAoaGFzT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3Byb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQgPT09IE51bWJlciB8fCAob3B0ICYmIG9wdC50eXBlID09PSBOdW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wc1trZXldID0gdG9OdW1iZXIodGhpcy5fcHJvcHNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAobnVtYmVyUHJvcHMgfHwgKG51bWJlclByb3BzID0gT2JqZWN0LmNyZWF0ZShudWxsKSkpW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudW1iZXJQcm9wcztcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBwcm9wcyBzZXQgcHJlLXVwZ3JhZGUgb3IgY29ubmVjdFxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcykpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5WzBdICE9PSAnXycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHRoaXNba2V5XSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlZmluaW5nIGdldHRlci9zZXR0ZXJzIG9uIHByb3RvdHlwZVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgcmF3S2V5cy5tYXAoY2FtZWxpemUkMSkpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRQcm9wKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFByb3Aoa2V5LCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcHBseSBDU1NcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5U3R5bGVzKHN0eWxlcyk7XG4gICAgICAgICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFzeW5jRGVmID0gdGhpcy5fZGVmLl9fYXN5bmNMb2FkZXI7XG4gICAgICAgIGlmIChhc3luY0RlZikge1xuICAgICAgICAgICAgYXN5bmNEZWYoKS50aGVuKHJlc29sdmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLl9kZWYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zZXRBdHRyKGtleSkge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBpZiAodGhpcy5fbnVtYmVyUHJvcHMgJiYgdGhpcy5fbnVtYmVyUHJvcHNba2V5XSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0UHJvcChjYW1lbGl6ZSQxKGtleSksIHZhbHVlLCBmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9nZXRQcm9wKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcHNba2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3NldFByb3Aoa2V5LCB2YWwsIHNob3VsZFJlZmxlY3QgPSB0cnVlLCBzaG91bGRVcGRhdGUgPSB0cnVlKSB7XG4gICAgICAgIGlmICh2YWwgIT09IHRoaXMuX3Byb3BzW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3BzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlICYmIHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZWZsZWN0XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVmbGVjdCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIHZhbCArICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF91cGRhdGUoKSB7XG4gICAgICAgIHJlbmRlcih0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgIH1cbiAgICBfY3JlYXRlVk5vZGUoKSB7XG4gICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodGhpcy5fZGVmLCBleHRlbmQoe30sIHRoaXMuX3Byb3BzKSk7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZub2RlLmNlID0gaW5zdGFuY2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNDRSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gSE1SXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZCA9IG5ld1N0eWxlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgcmVzZXQgc3R5bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmZvckVhY2gocyA9PiB0aGlzLnNoYWRvd1Jvb3QucmVtb3ZlQ2hpbGQocykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMobmV3U3R5bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gYXN5bmMgY29tcG9uZW50LCBjZVJlbG9hZCBpcyBjYWxsZWQgZnJvbSB0aGUgaW5uZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBzbyBubyBuZWVkIHRvIHJlbG9hZCB0aGUgYXN5bmMgd3JhcHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kZWYuX19hc3luY0xvYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaW50ZXJjZXB0IGVtaXRcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5lbWl0ID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDogYXJnc1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBsb2NhdGUgbmVhcmVzdCBWdWUgY3VzdG9tIGVsZW1lbnQgcGFyZW50IGZvciBwcm92aWRlL2luamVjdFxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHdoaWxlICgocGFyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ICYmIChwYXJlbnQucGFyZW50Tm9kZSB8fCBwYXJlbnQuaG9zdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBWdWVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQgPSBwYXJlbnQuX2luc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICB9XG4gICAgX2FwcGx5U3R5bGVzKHN0eWxlcykge1xuICAgICAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgICAgICBzdHlsZXMuZm9yRWFjaChjc3MgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIHMudGV4dENvbnRlbnQgPSBjc3M7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHMpO1xuICAgICAgICAgICAgICAgIC8vIHJlY29yZCBmb3IgSE1SXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3R5bGVzIHx8ICh0aGlzLl9zdHlsZXMgPSBbXSkpLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVzZUNzc01vZHVsZShuYW1lID0gJyRzdHlsZScpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHVzZUNzc01vZHVsZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgc2V0dXAoKWApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XG4gICAgICAgIGlmICghbW9kdWxlcykge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlcyBpbmplY3RlZC5gKTtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kID0gbW9kdWxlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFtb2QpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlIG5hbWVkIFwiJHtuYW1lfVwiLmApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgU0ZDJ3MgQ1NTIHZhcmlhYmxlIGluamVjdGlvbiBmZWF0dXJlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXNlQ3NzVmFycyhnZXR0ZXIpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIHdhcm4oYHVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNldFZhcnMgPSAoKSA9PiBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCBnZXR0ZXIoaW5zdGFuY2UucHJveHkpKTtcbiAgICB3YXRjaFBvc3RFZmZlY3Qoc2V0VmFycyk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgICAgY29uc3Qgb2IgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihzZXRWYXJzKTtcbiAgICAgICAgb2Iub2JzZXJ2ZShpbnN0YW5jZS5zdWJUcmVlLmVsLnBhcmVudE5vZGUsIHsgY2hpbGRMaXN0OiB0cnVlIH0pO1xuICAgICAgICBvblVubW91bnRlZCgoKSA9PiBvYi5kaXNjb25uZWN0KCkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0VmFyc09uVk5vZGUodm5vZGUsIHZhcnMpIHtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZTtcbiAgICAgICAgdm5vZGUgPSBzdXNwZW5zZS5hY3RpdmVCcmFuY2g7XG4gICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmICFzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRWYXJzT25WTm9kZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHZhcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZHJpbGwgZG93biBIT0NzIHVudGlsIGl0J3MgYSBub24tY29tcG9uZW50IHZub2RlXG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudCkge1xuICAgICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudC5zdWJUcmVlO1xuICAgIH1cbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gJiYgdm5vZGUuZWwpIHtcbiAgICAgICAgc2V0VmFyc09uTm9kZSh2bm9kZS5lbCwgdmFycyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goYyA9PiBzZXRWYXJzT25WTm9kZShjLCB2YXJzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IFN0YXRpYykge1xuICAgICAgICBsZXQgeyBlbCwgYW5jaG9yIH0gPSB2bm9kZTtcbiAgICAgICAgd2hpbGUgKGVsKSB7XG4gICAgICAgICAgICBzZXRWYXJzT25Ob2RlKGVsLCB2YXJzKTtcbiAgICAgICAgICAgIGlmIChlbCA9PT0gYW5jaG9yKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZWwgPSBlbC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpIHtcbiAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xuICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoYC0tJHtrZXl9YCwgdmFyc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbmNvbnN0IEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuLy8gRE9NIFRyYW5zaXRpb24gaXMgYSBoaWdoZXItb3JkZXItY29tcG9uZW50IGJhc2VkIG9uIHRoZSBwbGF0Zm9ybS1hZ25vc3RpY1xuLy8gYmFzZSBUcmFuc2l0aW9uIGNvbXBvbmVudCwgd2l0aCBET00tc3BlY2lmaWMgbG9naWMuXG5jb25zdCBUcmFuc2l0aW9uID0gKHByb3BzLCB7IHNsb3RzIH0pID0+IGgoQmFzZVRyYW5zaXRpb24sIHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocHJvcHMpLCBzbG90cyk7XG5UcmFuc2l0aW9uLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb24nO1xuY29uc3QgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IHtcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGNzczoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBkdXJhdGlvbjogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxuICAgIGVudGVyRnJvbUNsYXNzOiBTdHJpbmcsXG4gICAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICAgIGFwcGVhckZyb21DbGFzczogU3RyaW5nLFxuICAgIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICAgIGxlYXZlRnJvbUNsYXNzOiBTdHJpbmcsXG4gICAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGxlYXZlVG9DbGFzczogU3RyaW5nXG59O1xuY29uc3QgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IChUcmFuc2l0aW9uLnByb3BzID1cbiAgICAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgQmFzZVRyYW5zaXRpb24ucHJvcHMsIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKTtcbi8qKlxuICogIzMyMjcgSW5jb21pbmcgaG9va3MgbWF5IGJlIG1lcmdlZCBpbnRvIGFycmF5cyB3aGVuIHdyYXBwaW5nIFRyYW5zaXRpb25cbiAqIHdpdGggY3VzdG9tIEhPQ3MuXG4gKi9cbmNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MgPSBbXSkgPT4ge1xuICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICAgIGhvb2suZm9yRWFjaChoID0+IGgoLi4uYXJncykpO1xuICAgIH1cbiAgICBlbHNlIGlmIChob29rKSB7XG4gICAgICAgIGhvb2soLi4uYXJncyk7XG4gICAgfVxufTtcbi8qKlxuICogQ2hlY2sgaWYgYSBob29rIGV4cGVjdHMgYSBjYWxsYmFjayAoMm5kIGFyZyksIHdoaWNoIG1lYW5zIHRoZSB1c2VyXG4gKiBpbnRlbmRzIHRvIGV4cGxpY2l0bHkgY29udHJvbCB0aGUgZW5kIG9mIHRoZSB0cmFuc2l0aW9uLlxuICovXG5jb25zdCBoYXNFeHBsaWNpdENhbGxiYWNrID0gKGhvb2spID0+IHtcbiAgICByZXR1cm4gaG9va1xuICAgICAgICA/IGlzQXJyYXkoaG9vaylcbiAgICAgICAgICAgID8gaG9vay5zb21lKGggPT4gaC5sZW5ndGggPiAxKVxuICAgICAgICAgICAgOiBob29rLmxlbmd0aCA+IDFcbiAgICAgICAgOiBmYWxzZTtcbn07XG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKSB7XG4gICAgY29uc3QgYmFzZVByb3BzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3UHJvcHMpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKSB7XG4gICAgICAgICAgICBiYXNlUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJhd1Byb3BzLmNzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VQcm9wcztcbiAgICB9XG4gICAgY29uc3QgeyBuYW1lID0gJ3YnLCB0eXBlLCBkdXJhdGlvbiwgZW50ZXJGcm9tQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1mcm9tYCwgZW50ZXJBY3RpdmVDbGFzcyA9IGAke25hbWV9LWVudGVyLWFjdGl2ZWAsIGVudGVyVG9DbGFzcyA9IGAke25hbWV9LWVudGVyLXRvYCwgYXBwZWFyRnJvbUNsYXNzID0gZW50ZXJGcm9tQ2xhc3MsIGFwcGVhckFjdGl2ZUNsYXNzID0gZW50ZXJBY3RpdmVDbGFzcywgYXBwZWFyVG9DbGFzcyA9IGVudGVyVG9DbGFzcywgbGVhdmVGcm9tQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1mcm9tYCwgbGVhdmVBY3RpdmVDbGFzcyA9IGAke25hbWV9LWxlYXZlLWFjdGl2ZWAsIGxlYXZlVG9DbGFzcyA9IGAke25hbWV9LWxlYXZlLXRvYCB9ID0gcmF3UHJvcHM7XG4gICAgY29uc3QgZHVyYXRpb25zID0gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pO1xuICAgIGNvbnN0IGVudGVyRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzBdO1xuICAgIGNvbnN0IGxlYXZlRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzFdO1xuICAgIGNvbnN0IHsgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25FbnRlckNhbmNlbGxlZCwgb25MZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIgPSBvbkJlZm9yZUVudGVyLCBvbkFwcGVhciA9IG9uRW50ZXIsIG9uQXBwZWFyQ2FuY2VsbGVkID0gb25FbnRlckNhbmNlbGxlZCB9ID0gYmFzZVByb3BzO1xuICAgIGNvbnN0IGZpbmlzaEVudGVyID0gKGVsLCBpc0FwcGVhciwgZG9uZSkgPT4ge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3MpO1xuICAgICAgICBkb25lICYmIGRvbmUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGZpbmlzaExlYXZlID0gKGVsLCBkb25lKSA9PiB7XG4gICAgICAgIGVsLl9pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XG4gICAgfTtcbiAgICBjb25zdCBtYWtlRW50ZXJIb29rID0gKGlzQXBwZWFyKSA9PiB7XG4gICAgICAgIHJldHVybiAoZWwsIGRvbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhvb2sgPSBpc0FwcGVhciA/IG9uQXBwZWFyIDogb25FbnRlcjtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xuICAgICAgICAgICAgY2FsbEhvb2soaG9vaywgW2VsLCByZXNvbHZlXSk7XG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJGcm9tQ2xhc3MgOiBlbnRlckZyb21DbGFzcyk7XG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhob29rKSkge1xuICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGVudGVyRHVyYXRpb24sIHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGV4dGVuZChiYXNlUHJvcHMsIHtcbiAgICAgICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVFbnRlciwgW2VsXSk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyRnJvbUNsYXNzKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyKGVsKSB7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkJlZm9yZUFwcGVhciwgW2VsXSk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckZyb21DbGFzcyk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FbnRlcjogbWFrZUVudGVySG9vayhmYWxzZSksXG4gICAgICAgIG9uQXBwZWFyOiBtYWtlRW50ZXJIb29rKHRydWUpLFxuICAgICAgICBvbkxlYXZlKGVsLCBkb25lKSB7XG4gICAgICAgICAgICBlbC5faXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hMZWF2ZShlbCwgZG9uZSk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgICAgICAgIC8vIGZvcmNlIHJlZmxvdyBzbyAqLWxlYXZlLWZyb20gY2xhc3NlcyBpbW1lZGlhdGVseSB0YWtlIGVmZmVjdCAoIzI1OTMpXG4gICAgICAgICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgIG5leHRGcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbC5faXNMZWF2aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbGxlZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0Q2FsbGJhY2sob25MZWF2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBsZWF2ZUR1cmF0aW9uLCByZXNvbHZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmUsIFtlbCwgcmVzb2x2ZV0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkVudGVyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICAgICAgICBmaW5pc2hFbnRlcihlbCwgZmFsc2UpO1xuICAgICAgICAgICAgY2FsbEhvb2sob25FbnRlckNhbmNlbGxlZCwgW2VsXSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICAgICAgICBmaW5pc2hFbnRlcihlbCwgdHJ1ZSk7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkFwcGVhckNhbmNlbGxlZCwgW2VsXSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQoZWwpIHtcbiAgICAgICAgICAgIGZpbmlzaExlYXZlKGVsKTtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbikge1xuICAgIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdChkdXJhdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIFtOdW1iZXJPZihkdXJhdGlvbi5lbnRlciksIE51bWJlck9mKGR1cmF0aW9uLmxlYXZlKV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBuID0gTnVtYmVyT2YoZHVyYXRpb24pO1xuICAgICAgICByZXR1cm4gW24sIG5dO1xuICAgIH1cbn1cbmZ1bmN0aW9uIE51bWJlck9mKHZhbCkge1xuICAgIGNvbnN0IHJlcyA9IHRvTnVtYmVyKHZhbCk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcbiAgICAgICAgdmFsaWRhdGVEdXJhdGlvbihyZXMpO1xuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUR1cmF0aW9uKHZhbCkge1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgICAgICB3YXJuKGA8dHJhbnNpdGlvbj4gZXhwbGljaXQgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gYCArXG4gICAgICAgICAgICBgZ290ICR7SlNPTi5zdHJpbmdpZnkodmFsKX0uYCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgICAgd2FybihgPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uIGlzIE5hTiAtIGAgK1xuICAgICAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xuICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGVsLmNsYXNzTGlzdC5hZGQoYykpO1xuICAgIChlbC5fdnRjIHx8XG4gICAgICAgIChlbC5fdnRjID0gbmV3IFNldCgpKSkuYWRkKGNscyk7XG59XG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xuICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGVsLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xuICAgIGNvbnN0IHsgX3Z0YyB9ID0gZWw7XG4gICAgaWYgKF92dGMpIHtcbiAgICAgICAgX3Z0Yy5kZWxldGUoY2xzKTtcbiAgICAgICAgaWYgKCFfdnRjLnNpemUpIHtcbiAgICAgICAgICAgIGVsLl92dGMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBuZXh0RnJhbWUoY2IpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgIH0pO1xufVxubGV0IGVuZElkID0gMDtcbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgZXhwZWN0ZWRUeXBlLCBleHBsaWNpdFRpbWVvdXQsIHJlc29sdmUpIHtcbiAgICBjb25zdCBpZCA9IChlbC5fZW5kSWQgPSArK2VuZElkKTtcbiAgICBjb25zdCByZXNvbHZlSWZOb3RTdGFsZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGlkID09PSBlbC5fZW5kSWQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKGV4cGxpY2l0VGltZW91dCkge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlSWZOb3RTdGFsZSwgZXhwbGljaXRUaW1lb3V0KTtcbiAgICB9XG4gICAgY29uc3QgeyB0eXBlLCB0aW1lb3V0LCBwcm9wQ291bnQgfSA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICAgIGlmICghdHlwZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgIH1cbiAgICBjb25zdCBlbmRFdmVudCA9IHR5cGUgKyAnZW5kJztcbiAgICBsZXQgZW5kZWQgPSAwO1xuICAgIGNvbnN0IGVuZCA9ICgpID0+IHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xuICAgICAgICByZXNvbHZlSWZOb3RTdGFsZSgpO1xuICAgIH07XG4gICAgY29uc3Qgb25FbmQgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGVsICYmICsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgIH1cbiAgICB9LCB0aW1lb3V0ICsgMSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSkge1xuICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICAgY29uc3QgZ2V0U3R5bGVQcm9wZXJ0aWVzID0gKGtleSkgPT4gKHN0eWxlc1trZXldIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCB0cmFuc2l0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKFRSQU5TSVRJT04gKyAnRGVsYXknKTtcbiAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKFRSQU5TSVRJT04gKyAnRHVyYXRpb24nKTtcbiAgICBjb25zdCB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gICAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEZWxheScpO1xuICAgIGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhBTklNQVRJT04gKyAnRHVyYXRpb24nKTtcbiAgICBjb25zdCBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG4gICAgbGV0IHR5cGUgPSBudWxsO1xuICAgIGxldCB0aW1lb3V0ID0gMDtcbiAgICBsZXQgcHJvcENvdW50ID0gMDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICAgICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgICAgICB0eXBlID1cbiAgICAgICAgICAgIHRpbWVvdXQgPiAwXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgICAgICAgICAgICAgIDogQU5JTUFUSU9OXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICAgICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgICAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgICAgICA6IDA7XG4gICAgfVxuICAgIGNvbnN0IGhhc1RyYW5zZm9ybSA9IHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICAgICAgL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KHN0eWxlc1tUUkFOU0lUSU9OICsgJ1Byb3BlcnR5J10pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRpbWVvdXQsXG4gICAgICAgIHByb3BDb3VudCxcbiAgICAgICAgaGFzVHJhbnNmb3JtXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xufVxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXJcbi8vIG51bWJlcnMgaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93blxuLy8gKGkuZS4gYWN0aW5nIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMocykge1xuICAgIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMDtcbn1cbi8vIHN5bmNocm9ub3VzbHkgZm9yY2UgbGF5b3V0IHRvIHB1dCBlbGVtZW50cyBpbnRvIGEgY2VydGFpbiBzdGF0ZVxuZnVuY3Rpb24gZm9yY2VSZWZsb3coKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xufVxuXG5jb25zdCBwb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBuZXdQb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0ge1xuICAgIG5hbWU6ICdUcmFuc2l0aW9uR3JvdXAnLFxuICAgIHByb3BzOiAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycywge1xuICAgICAgICB0YWc6IFN0cmluZyxcbiAgICAgICAgbW92ZUNsYXNzOiBTdHJpbmdcbiAgICB9KSxcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgICAgIGxldCBwcmV2Q2hpbGRyZW47XG4gICAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgICAgb25VcGRhdGVkKCgpID0+IHtcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vdmVDbGFzcyA9IHByb3BzLm1vdmVDbGFzcyB8fCBgJHtwcm9wcy5uYW1lIHx8ICd2J30tbW92ZWA7XG4gICAgICAgICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShwcmV2Q2hpbGRyZW5bMF0uZWwsIGluc3RhbmNlLnZub2RlLmVsLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgICAgICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gYy5lbDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IChlbC5fbW92ZUNiID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgICAgICAgY29uc3QgY3NzVHJhbnNpdGlvblByb3BzID0gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcyk7XG4gICAgICAgICAgICBsZXQgdGFnID0gcmF3UHJvcHMudGFnIHx8IEZyYWdtZW50O1xuICAgICAgICAgICAgcHJldkNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgICAgICBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgPyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpKSA6IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYDxUcmFuc2l0aW9uR3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJldkNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uTWFwLnNldChjaGlsZCwgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0YWcsIG51bGwsIGNoaWxkcmVuKTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgVHJhbnNpdGlvbkdyb3VwID0gVHJhbnNpdGlvbkdyb3VwSW1wbDtcbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHtcbiAgICBjb25zdCBlbCA9IGMuZWw7XG4gICAgaWYgKGVsLl9tb3ZlQ2IpIHtcbiAgICAgICAgZWwuX21vdmVDYigpO1xuICAgIH1cbiAgICBpZiAoZWwuX2VudGVyQ2IpIHtcbiAgICAgICAgZWwuX2VudGVyQ2IoKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbihjKSB7XG4gICAgbmV3UG9zaXRpb25NYXAuc2V0KGMsIGMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xufVxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKSB7XG4gICAgY29uc3Qgb2xkUG9zID0gcG9zaXRpb25NYXAuZ2V0KGMpO1xuICAgIGNvbnN0IG5ld1BvcyA9IG5ld1Bvc2l0aW9uTWFwLmdldChjKTtcbiAgICBjb25zdCBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gICAgY29uc3QgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgICBpZiAoZHggfHwgZHkpIHtcbiAgICAgICAgY29uc3QgcyA9IGMuZWwuc3R5bGU7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZHh9cHgsJHtkeX1weClgO1xuICAgICAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhc0NTU1RyYW5zZm9ybShlbCwgcm9vdCwgbW92ZUNsYXNzKSB7XG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICBpZiAoZWwuX3Z0Yykge1xuICAgICAgICBlbC5fdnRjLmZvckVhY2goY2xzID0+IHtcbiAgICAgICAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbW92ZUNsYXNzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XG4gICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBjb25zdCBjb250YWluZXIgPSAocm9vdC5ub2RlVHlwZSA9PT0gMSA/IHJvb3QgOiByb290LnBhcmVudE5vZGUpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgIHJldHVybiBoYXNUcmFuc2Zvcm07XG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcbiAgICBjb25zdCBmbiA9IHZub2RlLnByb3BzWydvblVwZGF0ZTptb2RlbFZhbHVlJ10gfHxcbiAgICAgICAgKGZhbHNlICk7XG4gICAgcmV0dXJuIGlzQXJyYXkoZm4pID8gdmFsdWUgPT4gaW52b2tlQXJyYXlGbnMoZm4sIHZhbHVlKSA6IGZuO1xufTtcbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKSB7XG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQoZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgIHRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTtcbiAgICB9XG59XG4vLyBXZSBhcmUgZXhwb3J0aW5nIHRoZSB2LW1vZGVsIHJ1bnRpbWUgZGlyZWN0bHkgYXMgdm5vZGUgaG9va3Mgc28gdGhhdCBpdCBjYW5cbi8vIGJlIHRyZWUtc2hha2VuIGluIGNhc2Ugdi1tb2RlbCBpcyBuZXZlciB1c2VkLlxuY29uc3Qgdk1vZGVsVGV4dCA9IHtcbiAgICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGNvbnN0IGNhc3RUb051bWJlciA9IG51bWJlciB8fCAodm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSA9PT0gJ251bWJlcicpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBsYXp5ID8gJ2NoYW5nZScgOiAnaW5wdXQnLCBlID0+IHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jb21wb3NpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGRvbVZhbHVlID0gZWwudmFsdWU7XG4gICAgICAgICAgICBpZiAodHJpbSkge1xuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gZG9tVmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhc3RUb051bWJlcikge1xuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gdG9OdW1iZXIoZG9tVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuX2Fzc2lnbihkb21WYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHJpbSkge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IGVsLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbGF6eSkge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgICAgICBlbC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICAvLyBhdm9pZCBjbGVhcmluZyB1bnJlc29sdmVkIHRleHQuICMyMzAyXG4gICAgICAgIGlmIChlbC5jb21wb3NpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCAmJiBlbC50eXBlICE9PSAncmFuZ2UnKSB7XG4gICAgICAgICAgICBpZiAobGF6eSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmltICYmIGVsLnZhbHVlLnRyaW0oKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG51bWJlciB8fCBlbC50eXBlID09PSAnbnVtYmVyJykgJiYgdG9OdW1iZXIoZWwudmFsdWUpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBlbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IHZNb2RlbENoZWNrYm94ID0ge1xuICAgIC8vICM0MDk2IGFycmF5IGNoZWNrYm94ZXMgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxuICAgIGRlZXA6IHRydWUsXG4gICAgY3JlYXRlZChlbCwgXywgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kZWxWYWx1ZSA9IGVsLl9tb2RlbFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFZhbHVlID0gZ2V0VmFsdWUoZWwpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IGVsLmNoZWNrZWQ7XG4gICAgICAgICAgICBjb25zdCBhc3NpZ24gPSBlbC5fYXNzaWduO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGxvb3NlSW5kZXhPZihtb2RlbFZhbHVlLCBlbGVtZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gaW5kZXggIT09IC0xO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkICYmICFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24obW9kZWxWYWx1ZS5jb25jYXQoZWxlbWVudFZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gWy4uLm1vZGVsVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmVkID0gbmV3IFNldChtb2RlbFZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuZGVsZXRlKGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFzc2lnbihjbG9uZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXNzaWduKGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBzZXQgaW5pdGlhbCBjaGVja2VkIG9uIG1vdW50IHRvIHdhaXQgZm9yIHRydWUtdmFsdWUvZmFsc2UtdmFsdWVcbiAgICBtb3VudGVkOiBzZXRDaGVja2VkLFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBzZXRDaGVja2VkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHNldENoZWNrZWQoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gICAgZWwuX21vZGVsVmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpID4gLTE7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICBlbC5jaGVja2VkID0gdmFsdWUuaGFzKHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCBnZXRDaGVja2JveFZhbHVlKGVsLCB0cnVlKSk7XG4gICAgfVxufVxuY29uc3Qgdk1vZGVsUmFkaW8gPSB7XG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbC5fYXNzaWduKGdldFZhbHVlKGVsKSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3Qgdk1vZGVsU2VsZWN0ID0ge1xuICAgIC8vIDxzZWxlY3QgbXVsdGlwbGU+IHZhbHVlIG5lZWQgdG8gYmUgZGVlcCB0cmF2ZXJzZWRcbiAgICBkZWVwOiB0cnVlLFxuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgICAgICBjb25zdCBpc1NldE1vZGVsID0gaXNTZXQodmFsdWUpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gICAgICAgICAgICAgICAgLmNhbGwoZWwub3B0aW9ucywgKG8pID0+IG8uc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgLm1hcCgobykgPT4gbnVtYmVyID8gdG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobykpO1xuICAgICAgICAgICAgZWwuX2Fzc2lnbihlbC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gaXNTZXRNb2RlbFxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBTZXQoc2VsZWN0ZWRWYWwpXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxcbiAgICAgICAgICAgICAgICA6IHNlbGVjdGVkVmFsWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICB9LFxuICAgIC8vIHNldCB2YWx1ZSBpbiBtb3VudGVkICYgdXBkYXRlZCBiZWNhdXNlIDxzZWxlY3Q+IHJlbGllcyBvbiBpdHMgY2hpbGRyZW5cbiAgICAvLyA8b3B0aW9uPnMuXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUoZWwsIF9iaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKSB7XG4gICAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICAgIGlmIChpc011bHRpcGxlICYmICFpc0FycmF5KHZhbHVlKSAmJiAhaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgd2FybihgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPiBleHBlY3RzIGFuIEFycmF5IG9yIFNldCB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGAgK1xuICAgICAgICAgICAgICAgIGBidXQgZ290ICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSl9LmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xuICAgICAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSlcbiAgICAgICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNNdWx0aXBsZSAmJiBlbC5zZWxlY3RlZEluZGV4ICE9PSAtMSkge1xuICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgfVxufVxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIHNldCB2aWEgOnZhbHVlIGJpbmRpbmdzXG5mdW5jdGlvbiBnZXRWYWx1ZShlbCkge1xuICAgIHJldHVybiAnX3ZhbHVlJyBpbiBlbCA/IGVsLl92YWx1ZSA6IGVsLnZhbHVlO1xufVxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIGZvciB0cnVlLXZhbHVlIGFuZCBmYWxzZS12YWx1ZSBzZXQgdmlhIDp0cnVlLXZhbHVlIG9yIDpmYWxzZS12YWx1ZSBiaW5kaW5nc1xuZnVuY3Rpb24gZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkge1xuICAgIGNvbnN0IGtleSA9IGNoZWNrZWQgPyAnX3RydWVWYWx1ZScgOiAnX2ZhbHNlVmFsdWUnO1xuICAgIHJldHVybiBrZXkgaW4gZWwgPyBlbFtrZXldIDogY2hlY2tlZDtcbn1cbmNvbnN0IHZNb2RlbER5bmFtaWMgPSB7XG4gICAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdjcmVhdGVkJyk7XG4gICAgfSxcbiAgICBtb3VudGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ21vdW50ZWQnKTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICd1cGRhdGVkJyk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljTW9kZWwodGFnTmFtZSwgdHlwZSkge1xuICAgIHN3aXRjaCAodGFnTmFtZSkge1xuICAgICAgICBjYXNlICdTRUxFQ1QnOlxuICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFNlbGVjdDtcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxuICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFRleHQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxDaGVja2JveDtcbiAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxSYWRpbztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdk1vZGVsVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XG4gICAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoZWwudGFnTmFtZSwgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSk7XG4gICAgY29uc3QgZm4gPSBtb2RlbFRvVXNlW2hvb2tdO1xuICAgIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcbn1cbi8vIFNTUiB2bm9kZSB0cmFuc2Zvcm1zLCBvbmx5IHVzZWQgd2hlbiB1c2VyIGluY2x1ZGVzIGNsaWVudC1vcmllbnRlZCByZW5kZXJcbi8vIGZ1bmN0aW9uIGluIFNTUlxuZnVuY3Rpb24gaW5pdFZNb2RlbEZvclNTUigpIHtcbiAgICB2TW9kZWxUZXh0LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSkgPT4gKHsgdmFsdWUgfSk7XG4gICAgdk1vZGVsUmFkaW8uZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgICAgICBpZiAodm5vZGUucHJvcHMgJiYgbG9vc2VFcXVhbCh2bm9kZS5wcm9wcy52YWx1ZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZNb2RlbENoZWNrYm94LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSwgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodm5vZGUucHJvcHMgJiYgbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZNb2RlbER5bmFtaWMuZ2V0U1NSUHJvcHMgPSAoYmluZGluZywgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2bm9kZS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsVG9Vc2UgPSByZXNvbHZlRHluYW1pY01vZGVsKFxuICAgICAgICAvLyByZXNvbHZlRHluYW1pY01vZGVsIGV4cGVjdHMgYW4gdXBwZXJjYXNlIHRhZyBuYW1lLCBidXQgdm5vZGUudHlwZSBpcyBsb3dlcmNhc2VcbiAgICAgICAgdm5vZGUudHlwZS50b1VwcGVyQ2FzZSgpLCB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlKTtcbiAgICAgICAgaWYgKG1vZGVsVG9Vc2UuZ2V0U1NSUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbFRvVXNlLmdldFNTUlByb3BzKGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmNvbnN0IHN5c3RlbU1vZGlmaWVycyA9IFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddO1xuY29uc3QgbW9kaWZpZXJHdWFyZHMgPSB7XG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxuICAgIHByZXZlbnQ6IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICAgIHNlbGY6IGUgPT4gZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCxcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXG4gICAgc2hpZnQ6IGUgPT4gIWUuc2hpZnRLZXksXG4gICAgYWx0OiBlID0+ICFlLmFsdEtleSxcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXG4gICAgbGVmdDogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAwLFxuICAgIG1pZGRsZTogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAxLFxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXG4gICAgZXhhY3Q6IChlLCBtb2RpZmllcnMpID0+IHN5c3RlbU1vZGlmaWVycy5zb21lKG0gPT4gZVtgJHttfUtleWBdICYmICFtb2RpZmllcnMuaW5jbHVkZXMobSkpXG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XG4gICAgICAgICAgICBpZiAoZ3VhcmQgJiYgZ3VhcmQoZXZlbnQsIG1vZGlmaWVycykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbihldmVudCwgLi4uYXJncyk7XG4gICAgfTtcbn07XG4vLyBLZXB0IGZvciAyLnggY29tcGF0LlxuLy8gTm90ZTogSUUxMSBjb21wYXQgZm9yIGBzcGFjZWJhcmAgYW5kIGBkZWxgIGlzIHJlbW92ZWQgZm9yIG5vdy5cbmNvbnN0IGtleU5hbWVzID0ge1xuICAgIGVzYzogJ2VzY2FwZScsXG4gICAgc3BhY2U6ICcgJyxcbiAgICB1cDogJ2Fycm93LXVwJyxcbiAgICBsZWZ0OiAnYXJyb3ctbGVmdCcsXG4gICAgcmlnaHQ6ICdhcnJvdy1yaWdodCcsXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxuICAgIGRlbGV0ZTogJ2JhY2tzcGFjZSdcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghKCdrZXknIGluIGV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50S2V5ID0gaHlwaGVuYXRlKGV2ZW50LmtleSk7XG4gICAgICAgIGlmIChtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuY29uc3QgdlNob3cgPSB7XG4gICAgYmVmb3JlTW91bnQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVW5tb3VudChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fdm9kIDogJ25vbmUnO1xufVxuLy8gU1NSIHZub2RlIHRyYW5zZm9ybXMsIG9ubHkgdXNlZCB3aGVuIHVzZXIgaW5jbHVkZXMgY2xpZW50LW9yaWVudGVkIHJlbmRlclxuLy8gZnVuY3Rpb24gaW4gU1NSXG5mdW5jdGlvbiBpbml0VlNob3dGb3JTU1IoKSB7XG4gICAgdlNob3cuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0eWxlOiB7IGRpc3BsYXk6ICdub25lJyB9IH07XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5jb25zdCByZW5kZXJlck9wdGlvbnMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7IHBhdGNoUHJvcCB9LCBub2RlT3BzKTtcbi8vIGxhenkgY3JlYXRlIHRoZSByZW5kZXJlciAtIHRoaXMgbWFrZXMgY29yZSByZW5kZXJlciBsb2dpYyB0cmVlLXNoYWthYmxlXG4vLyBpbiBjYXNlIHRoZSB1c2VyIG9ubHkgaW1wb3J0cyByZWFjdGl2aXR5IHV0aWxpdGllcyBmcm9tIFZ1ZS5cbmxldCByZW5kZXJlcjtcbmxldCBlbmFibGVkSHlkcmF0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcbiAgICByZXR1cm4gKHJlbmRlcmVyIHx8XG4gICAgICAgIChyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucykpKTtcbn1cbmZ1bmN0aW9uIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkge1xuICAgIHJlbmRlcmVyID0gZW5hYmxlZEh5ZHJhdGlvblxuICAgICAgICA/IHJlbmRlcmVyXG4gICAgICAgIDogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKTtcbiAgICBlbmFibGVkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVuZGVyZXI7XG59XG4vLyB1c2UgZXhwbGljaXQgdHlwZSBjYXN0cyBoZXJlIHRvIGF2b2lkIGltcG9ydCgpIGNhbGxzIGluIHJvbGxlZC11cCBkLnRzXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBlbnN1cmVSZW5kZXJlcigpLnJlbmRlciguLi5hcmdzKTtcbn0pO1xuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xuICAgIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuaHlkcmF0ZSguLi5hcmdzKTtcbn0pO1xuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgYXBwID0gZW5zdXJlUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgICAgICBpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayhhcHApO1xuICAgIH1cbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XG4gICAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gYXBwLl9jb21wb25lbnQ7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIC8vIF9fVU5TQUZFX19cbiAgICAgICAgICAgIC8vIFJlYXNvbjogcG90ZW50aWFsIGV4ZWN1dGlvbiBvZiBKUyBleHByZXNzaW9ucyBpbiBpbi1ET00gdGVtcGxhdGUuXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0aGUgaW4tRE9NIHRlbXBsYXRlIGlzIHRydXN0ZWQuIElmIGl0J3NcbiAgICAgICAgICAgIC8vIHJlbmRlcmVkIGJ5IHRoZSBzZXJ2ZXIsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgbm90IGNvbnRhaW4gYW55IHVzZXIgZGF0YS5cbiAgICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZSA9IGNvbnRhaW5lci5pbm5lckhUTUw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xlYXIgY29udGVudCBiZWZvcmUgbW91bnRpbmdcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgICAgICBpZiAoY29udGFpbmVyIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgndi1jbG9haycpO1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufSk7XG5jb25zdCBjcmVhdGVTU1JBcHAgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XG4gICAgICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gICAgfVxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XG4gICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBtb3VudChjb250YWluZXIsIHRydWUsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufSk7XG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcbiAgICAvLyBJbmplY3QgYGlzTmF0aXZlVGFnYFxuICAgIC8vIHRoaXMgaXMgdXNlZCBmb3IgY29tcG9uZW50IG5hbWUgdmFsaWRhdGlvbiAoZGV2IG9ubHkpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcbiAgICAgICAgdmFsdWU6ICh0YWcpID0+IGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHVGFnKHRhZyksXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xufVxuLy8gZGV2IG9ubHlcbmZ1bmN0aW9uIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCkge1xuICAgIGlmIChpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gYXBwLmNvbmZpZy5pc0N1c3RvbUVsZW1lbnQ7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnaXNDdXN0b21FbGVtZW50Jywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0N1c3RvbUVsZW1lbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFRoZSBcXGBpc0N1c3RvbUVsZW1lbnRcXGAgY29uZmlnIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBVc2UgYCArXG4gICAgICAgICAgICAgICAgICAgIGBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgY29uc3QgbXNnID0gYFRoZSBcXGBjb21waWxlck9wdGlvbnNcXGAgY29uZmlnIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIGAgK1xuICAgICAgICAgICAgYGEgYnVpbGQgb2YgVnVlLmpzIHRoYXQgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIgKGFrYSBcImZ1bGwgYnVpbGRcIikuIGAgK1xuICAgICAgICAgICAgYFNpbmNlIHlvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCwgXFxgY29tcGlsZXJPcHRpb25zXFxgIGAgK1xuICAgICAgICAgICAgYG11c3QgYmUgcGFzc2VkIHRvIFxcYEB2dWUvY29tcGlsZXItZG9tXFxgIGluIHRoZSBidWlsZCBzZXR1cCBpbnN0ZWFkLlxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZ1ZS1sb2FkZXI6IHBhc3MgaXQgdmlhIHZ1ZS1sb2FkZXIncyBcXGBjb21waWxlck9wdGlvbnNcXGAgbG9hZGVyIG9wdGlvbi5cXG5gICtcbiAgICAgICAgICAgIGAtIEZvciB2dWUtY2xpOiBzZWUgaHR0cHM6Ly9jbGkudnVlanMub3JnL2d1aWRlL3dlYnBhY2suaHRtbCNtb2RpZnlpbmctb3B0aW9ucy1vZi1hLWxvYWRlclxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZpdGU6IHBhc3MgaXQgdmlhIEB2aXRlanMvcGx1Z2luLXZ1ZSBvcHRpb25zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL3RyZWUvbWFpbi9wYWNrYWdlcy9wbHVnaW4tdnVlI2V4YW1wbGUtZm9yLXBhc3Npbmctb3B0aW9ucy10by12dWVjb21waWxlci1kb21gO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgJ2NvbXBpbGVyT3B0aW9ucycsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFyZXMpIHtcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byBtb3VudCBhcHA6IG1vdW50IHRhcmdldCBzZWxlY3RvciBcIiR7Y29udGFpbmVyfVwiIHJldHVybmVkIG51bGwuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICB3aW5kb3cuU2hhZG93Um9vdCAmJlxuICAgICAgICBjb250YWluZXIgaW5zdGFuY2VvZiB3aW5kb3cuU2hhZG93Um9vdCAmJlxuICAgICAgICBjb250YWluZXIubW9kZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgd2FybihgbW91bnRpbmcgb24gYSBTaGFkb3dSb290IHdpdGggXFxge21vZGU6IFwiY2xvc2VkXCJ9XFxgIG1heSBsZWFkIHRvIHVucHJlZGljdGFibGUgYnVnc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGFpbmVyO1xufVxubGV0IHNzckRpcmVjdGl2ZUluaXRpYWxpemVkID0gZmFsc2U7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBpbml0RGlyZWN0aXZlc0ZvclNTUiA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzc3JEaXJlY3RpdmVJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaW5pdFZNb2RlbEZvclNTUigpO1xuICAgICAgICAgICAgaW5pdFZTaG93Rm9yU1NSKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgO1xuXG5leHBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAsIFZ1ZUVsZW1lbnQsIGNyZWF0ZUFwcCwgY3JlYXRlU1NSQXBwLCBkZWZpbmVDdXN0b21FbGVtZW50LCBkZWZpbmVTU1JDdXN0b21FbGVtZW50LCBoeWRyYXRlLCBpbml0RGlyZWN0aXZlc0ZvclNTUiwgcmVuZGVyLCB1c2VDc3NNb2R1bGUsIHVzZUNzc1ZhcnMsIHZNb2RlbENoZWNrYm94LCB2TW9kZWxEeW5hbWljLCB2TW9kZWxSYWRpbywgdk1vZGVsU2VsZWN0LCB2TW9kZWxUZXh0LCB2U2hvdywgd2l0aEtleXMsIHdpdGhNb2RpZmllcnMgfTtcbiIsIi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqIElNUE9SVEFOVDogYWxsIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBwcmVmaXhlZCB3aXRoXG4gKiBcXC9cXCojXFxfXFxfUFVSRVxcX1xcX1xcKlxcL1xuICogU28gdGhhdCByb2xsdXAgY2FuIHRyZWUtc2hha2UgdGhlbSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAoc3RyLCBleHBlY3RzTG93ZXJDYXNlKSB7XG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RzTG93ZXJDYXNlID8gdmFsID0+ICEhbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXSA6IHZhbCA9PiAhIW1hcFt2YWxdO1xufVxuXG4vKipcbiAqIGRldiBvbmx5IGZsYWcgLT4gbmFtZSBtYXBwaW5nXG4gKi9cbmNvbnN0IFBhdGNoRmxhZ05hbWVzID0ge1xuICAgIFsxIC8qIFBhdGNoRmxhZ3MuVEVYVCAqL106IGBURVhUYCxcbiAgICBbMiAvKiBQYXRjaEZsYWdzLkNMQVNTICovXTogYENMQVNTYCxcbiAgICBbNCAvKiBQYXRjaEZsYWdzLlNUWUxFICovXTogYFNUWUxFYCxcbiAgICBbOCAvKiBQYXRjaEZsYWdzLlBST1BTICovXTogYFBST1BTYCxcbiAgICBbMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovXTogYEZVTExfUFJPUFNgLFxuICAgIFszMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovXTogYEhZRFJBVEVfRVZFTlRTYCxcbiAgICBbNjQgLyogUGF0Y2hGbGFncy5TVEFCTEVfRlJBR01FTlQgKi9dOiBgU1RBQkxFX0ZSQUdNRU5UYCxcbiAgICBbMTI4IC8qIFBhdGNoRmxhZ3MuS0VZRURfRlJBR01FTlQgKi9dOiBgS0VZRURfRlJBR01FTlRgLFxuICAgIFsyNTYgLyogUGF0Y2hGbGFncy5VTktFWUVEX0ZSQUdNRU5UICovXTogYFVOS0VZRURfRlJBR01FTlRgLFxuICAgIFs1MTIgLyogUGF0Y2hGbGFncy5ORUVEX1BBVENIICovXTogYE5FRURfUEFUQ0hgLFxuICAgIFsxMDI0IC8qIFBhdGNoRmxhZ3MuRFlOQU1JQ19TTE9UUyAqL106IGBEWU5BTUlDX1NMT1RTYCxcbiAgICBbMjA0OCAvKiBQYXRjaEZsYWdzLkRFVl9ST09UX0ZSQUdNRU5UICovXTogYERFVl9ST09UX0ZSQUdNRU5UYCxcbiAgICBbLTEgLyogUGF0Y2hGbGFncy5IT0lTVEVEICovXTogYEhPSVNURURgLFxuICAgIFstMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi9dOiBgQkFJTGBcbn07XG5cbi8qKlxuICogRGV2IG9ubHlcbiAqL1xuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcbiAgICBbMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovXTogJ1NUQUJMRScsXG4gICAgWzIgLyogU2xvdEZsYWdzLkRZTkFNSUMgKi9dOiAnRFlOQU1JQycsXG4gICAgWzMgLyogU2xvdEZsYWdzLkZPUldBUkRFRCAqL106ICdGT1JXQVJERUQnXG59O1xuXG5jb25zdCBHTE9CQUxTX1dISVRFX0xJU1RFRCA9ICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLHBhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLCcgK1xuICAgICdkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LCcgK1xuICAgICdPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCc7XG5jb25zdCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoR0xPQkFMU19XSElURV9MSVNURUQpO1xuXG5jb25zdCByYW5nZSA9IDI7XG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xuICAgIC8vIFNwbGl0IHRoZSBjb250ZW50IGludG8gaW5kaXZpZHVhbCBsaW5lcyBidXQgY2FwdHVyZSB0aGUgbmV3bGluZSBzZXF1ZW5jZVxuICAgIC8vIHRoYXQgc2VwYXJhdGVkIGVhY2ggbGluZS4gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSB0aGUgYWN0dWFsIHNlcXVlbmNlIGlzXG4gICAgLy8gbmVlZGVkIHRvIHByb3Blcmx5IHRha2UgaW50byBhY2NvdW50IHRoZSBmdWxsIGxpbmUgbGVuZ3RoIGZvciBvZmZzZXRcbiAgICAvLyBjb21wYXJpc29uXG4gICAgbGV0IGxpbmVzID0gc291cmNlLnNwbGl0KC8oXFxyP1xcbikvKTtcbiAgICAvLyBTZXBhcmF0ZSB0aGUgbGluZXMgYW5kIG5ld2xpbmUgc2VxdWVuY2VzIGludG8gc2VwYXJhdGUgYXJyYXlzIGZvciBlYXNpZXIgcmVmZXJlbmNpbmdcbiAgICBjb25zdCBuZXdsaW5lU2VxdWVuY2VzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDEpO1xuICAgIGxpbmVzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDApO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb3VudCArPVxuICAgICAgICAgICAgbGluZXNbaV0ubGVuZ3RoICtcbiAgICAgICAgICAgICAgICAoKG5ld2xpbmVTZXF1ZW5jZXNbaV0gJiYgbmV3bGluZVNlcXVlbmNlc1tpXS5sZW5ndGgpIHx8IDApO1xuICAgICAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBqICsgMTtcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHtsaW5lfSR7JyAnLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW5lU2VxTGVuZ3RoID0gKG5ld2xpbmVTZXF1ZW5jZXNbal0gJiYgbmV3bGluZVNlcXVlbmNlc1tqXS5sZW5ndGgpIHx8IDA7XG4gICAgICAgICAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkID0gc3RhcnQgLSAoY291bnQgLSAobGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoMSwgZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICcgJy5yZXBlYXQocGFkKSArICdeJy5yZXBlYXQobGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogPiBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgJ14nLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpO1xufVxuXG4vKipcbiAqIE9uIHRoZSBjbGllbnQgd2Ugb25seSBuZWVkIHRvIG9mZmVyIHNwZWNpYWwgY2FzZXMgZm9yIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0XG4gKiBoYXZlIGRpZmZlcmVudCBuYW1lcyBmcm9tIHRoZWlyIGNvcnJlc3BvbmRpbmcgZG9tIHByb3BlcnRpZXM6XG4gKiAtIGl0ZW1zY29wZSAtPiBOL0FcbiAqIC0gYWxsb3dmdWxsc2NyZWVuIC0+IGFsbG93RnVsbHNjcmVlblxuICogLSBmb3Jtbm92YWxpZGF0ZSAtPiBmb3JtTm9WYWxpZGF0ZVxuICogLSBpc21hcCAtPiBpc01hcFxuICogLSBub21vZHVsZSAtPiBub01vZHVsZVxuICogLSBub3ZhbGlkYXRlIC0+IG5vVmFsaWRhdGVcbiAqIC0gcmVhZG9ubHkgLT4gcmVhZE9ubHlcbiAqL1xuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xuY29uc3QgaXNTcGVjaWFsQm9vbGVhbkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyk7XG4vKipcbiAqIFRoZSBmdWxsIGxpc3QgaXMgbmVlZGVkIGR1cmluZyBTU1IgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBpbml0aWFsIG1hcmt1cC5cbiAqL1xuY29uc3QgaXNCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzICtcbiAgICBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixgICtcbiAgICBgbG9vcCxvcGVuLHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxgICtcbiAgICBgY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGApO1xuLyoqXG4gKiBCb29sZWFuIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgb3IgJycuXG4gKiBlLmcuIGA8c2VsZWN0IG11bHRpcGxlPmAgY29tcGlsZXMgdG8gYHsgbXVsdGlwbGU6ICcnIH1gXG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlIHx8IHZhbHVlID09PSAnJztcbn1cbmNvbnN0IHVuc2FmZUF0dHJDaGFyUkUgPSAvWz4vPVwiJ1xcdTAwMDlcXHUwMDBhXFx1MDAwY1xcdTAwMjBdLztcbmNvbnN0IGF0dHJWYWxpZGF0aW9uQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGlzU1NSU2FmZUF0dHJOYW1lKG5hbWUpIHtcbiAgICBpZiAoYXR0clZhbGlkYXRpb25DYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXTtcbiAgICB9XG4gICAgY29uc3QgaXNVbnNhZmUgPSB1bnNhZmVBdHRyQ2hhclJFLnRlc3QobmFtZSk7XG4gICAgaWYgKGlzVW5zYWZlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYHVuc2FmZSBhdHRyaWJ1dGUgbmFtZTogJHtuYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gKGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV0gPSAhaXNVbnNhZmUpO1xufVxuY29uc3QgcHJvcHNUb0F0dHJNYXAgPSB7XG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcbn07XG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHRoYXQgYWNjZXB0IHBsYWluIG51bWJlcnNcbiAqL1xuY29uc3QgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGJvcmRlci1pbWFnZS1vdXRzZXQsYm9yZGVyLWltYWdlLXNsaWNlLGAgK1xuICAgIGBib3JkZXItaW1hZ2Utd2lkdGgsYm94LWZsZXgsYm94LWZsZXgtZ3JvdXAsYm94LW9yZGluYWwtZ3JvdXAsY29sdW1uLWNvdW50LGAgK1xuICAgIGBjb2x1bW5zLGZsZXgsZmxleC1ncm93LGZsZXgtcG9zaXRpdmUsZmxleC1zaHJpbmssZmxleC1uZWdhdGl2ZSxmbGV4LW9yZGVyLGAgK1xuICAgIGBncmlkLXJvdyxncmlkLXJvdy1lbmQsZ3JpZC1yb3ctc3BhbixncmlkLXJvdy1zdGFydCxncmlkLWNvbHVtbixgICtcbiAgICBgZ3JpZC1jb2x1bW4tZW5kLGdyaWQtY29sdW1uLXNwYW4sZ3JpZC1jb2x1bW4tc3RhcnQsZm9udC13ZWlnaHQsbGluZS1jbGFtcCxgICtcbiAgICBgbGluZS1oZWlnaHQsb3BhY2l0eSxvcmRlcixvcnBoYW5zLHRhYi1zaXplLHdpZG93cyx6LWluZGV4LHpvb20sYCArXG4gICAgLy8gU1ZHXG4gICAgYGZpbGwtb3BhY2l0eSxmbG9vZC1vcGFjaXR5LHN0b3Atb3BhY2l0eSxzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LGAgK1xuICAgIGBzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGhgKTtcbi8qKlxuICogS25vd24gYXR0cmlidXRlcywgdGhpcyBpcyB1c2VkIGZvciBzdHJpbmdpZmljYXRpb24gb2YgcnVudGltZSBzdGF0aWMgbm9kZXNcbiAqIHNvIHRoYXQgd2UgZG9uJ3Qgc3RyaW5naWZ5IGJpbmRpbmdzIHRoYXQgY2Fubm90IGJlIHNldCBmcm9tIEhUTUwuXG4gKiBEb24ndCBhbHNvIGZvcmdldCB0byBhbGxvdyBgZGF0YS0qYCBhbmQgYGFyaWEtKmAhXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0F0dHJpYnV0ZXNcbiAqL1xuY29uc3QgaXNLbm93bkh0bWxBdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYCArXG4gICAgYGF1dG9jYXBpdGFsaXplLGF1dG9jb21wbGV0ZSxhdXRvZm9jdXMsYXV0b3BsYXksYmFja2dyb3VuZCxiZ2NvbG9yLGAgK1xuICAgIGBib3JkZXIsYnVmZmVyZWQsY2FwdHVyZSxjaGFsbGVuZ2UsY2hhcnNldCxjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxgICtcbiAgICBgY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGAgK1xuICAgIGBjb29yZHMsY3Jvc3NvcmlnaW4sY3NwLGRhdGEsZGF0ZXRpbWUsZGVjb2RpbmcsZGVmYXVsdCxkZWZlcixkaXIsZGlybmFtZSxgICtcbiAgICBgZGlzYWJsZWQsZG93bmxvYWQsZHJhZ2dhYmxlLGRyb3B6b25lLGVuY3R5cGUsZW50ZXJrZXloaW50LGZvcixmb3JtLGAgK1xuICAgIGBmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGAgK1xuICAgIGBoZWlnaHQsaGlkZGVuLGhpZ2gsaHJlZixocmVmbGFuZyxodHRwLWVxdWl2LGljb24saWQsaW1wb3J0YW5jZSxpbnRlZ3JpdHksYCArXG4gICAgYGlzbWFwLGl0ZW1wcm9wLGtleXR5cGUsa2luZCxsYWJlbCxsYW5nLGxhbmd1YWdlLGxvYWRpbmcsbGlzdCxsb29wLGxvdyxgICtcbiAgICBgbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxgICtcbiAgICBgb3BlbixvcHRpbXVtLHBhdHRlcm4scGluZyxwbGFjZWhvbGRlcixwb3N0ZXIscHJlbG9hZCxyYWRpb2dyb3VwLHJlYWRvbmx5LGAgK1xuICAgIGByZWZlcnJlcnBvbGljeSxyZWwscmVxdWlyZWQscmV2ZXJzZWQscm93cyxyb3dzcGFuLHNhbmRib3gsc2NvcGUsc2NvcGVkLGAgK1xuICAgIGBzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsYCArXG4gICAgYHN0YXJ0LHN0ZXAsc3R5bGUsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHJhbnNsYXRlLHR5cGUsdXNlbWFwLGAgK1xuICAgIGB2YWx1ZSx3aWR0aCx3cmFwYCk7XG4vKipcbiAqIEdlbmVyYXRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGVcbiAqL1xuY29uc3QgaXNLbm93blN2Z0F0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYHhtbG5zLGFjY2VudC1oZWlnaHQsYWNjdW11bGF0ZSxhZGRpdGl2ZSxhbGlnbm1lbnQtYmFzZWxpbmUsYWxwaGFiZXRpYyxhbXBsaXR1ZGUsYCArXG4gICAgYGFyYWJpYy1mb3JtLGFzY2VudCxhdHRyaWJ1dGVOYW1lLGF0dHJpYnV0ZVR5cGUsYXppbXV0aCxiYXNlRnJlcXVlbmN5LGAgK1xuICAgIGBiYXNlbGluZS1zaGlmdCxiYXNlUHJvZmlsZSxiYm94LGJlZ2luLGJpYXMsYnksY2FsY01vZGUsY2FwLWhlaWdodCxjbGFzcyxgICtcbiAgICBgY2xpcCxjbGlwUGF0aFVuaXRzLGNsaXAtcGF0aCxjbGlwLXJ1bGUsY29sb3IsY29sb3ItaW50ZXJwb2xhdGlvbixgICtcbiAgICBgY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzLGNvbG9yLXByb2ZpbGUsY29sb3ItcmVuZGVyaW5nLGAgK1xuICAgIGBjb250ZW50U2NyaXB0VHlwZSxjb250ZW50U3R5bGVUeXBlLGNyb3Nzb3JpZ2luLGN1cnNvcixjeCxjeSxkLGRlY2VsZXJhdGUsYCArXG4gICAgYGRlc2NlbnQsZGlmZnVzZUNvbnN0YW50LGRpcmVjdGlvbixkaXNwbGF5LGRpdmlzb3IsZG9taW5hbnQtYmFzZWxpbmUsZHVyLGR4LGAgK1xuICAgIGBkeSxlZGdlTW9kZSxlbGV2YXRpb24sZW5hYmxlLWJhY2tncm91bmQsZW5kLGV4cG9uZW50LGZpbGwsZmlsbC1vcGFjaXR5LGAgK1xuICAgIGBmaWxsLXJ1bGUsZmlsdGVyLGZpbHRlclJlcyxmaWx0ZXJVbml0cyxmbG9vZC1jb2xvcixmbG9vZC1vcGFjaXR5LGAgK1xuICAgIGBmb250LWZhbWlseSxmb250LXNpemUsZm9udC1zaXplLWFkanVzdCxmb250LXN0cmV0Y2gsZm9udC1zdHlsZSxgICtcbiAgICBgZm9udC12YXJpYW50LGZvbnQtd2VpZ2h0LGZvcm1hdCxmcm9tLGZyLGZ4LGZ5LGcxLGcyLGdseXBoLW5hbWUsYCArXG4gICAgYGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwsZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwsZ2x5cGhSZWYsYCArXG4gICAgYGdyYWRpZW50VHJhbnNmb3JtLGdyYWRpZW50VW5pdHMsaGFuZ2luZyxoZWlnaHQsaHJlZixocmVmbGFuZyxob3Jpei1hZHYteCxgICtcbiAgICBgaG9yaXotb3JpZ2luLXgsaWQsaWRlb2dyYXBoaWMsaW1hZ2UtcmVuZGVyaW5nLGluLGluMixpbnRlcmNlcHQsayxrMSxrMixrMyxgICtcbiAgICBgazQsa2VybmVsTWF0cml4LGtlcm5lbFVuaXRMZW5ndGgsa2VybmluZyxrZXlQb2ludHMsa2V5U3BsaW5lcyxrZXlUaW1lcyxgICtcbiAgICBgbGFuZyxsZW5ndGhBZGp1c3QsbGV0dGVyLXNwYWNpbmcsbGlnaHRpbmctY29sb3IsbGltaXRpbmdDb25lQW5nbGUsbG9jYWwsYCArXG4gICAgYG1hcmtlci1lbmQsbWFya2VyLW1pZCxtYXJrZXItc3RhcnQsbWFya2VySGVpZ2h0LG1hcmtlclVuaXRzLG1hcmtlcldpZHRoLGAgK1xuICAgIGBtYXNrLG1hc2tDb250ZW50VW5pdHMsbWFza1VuaXRzLG1hdGhlbWF0aWNhbCxtYXgsbWVkaWEsbWV0aG9kLG1pbixtb2RlLGAgK1xuICAgIGBuYW1lLG51bU9jdGF2ZXMsb2Zmc2V0LG9wYWNpdHksb3BlcmF0b3Isb3JkZXIsb3JpZW50LG9yaWVudGF0aW9uLG9yaWdpbixgICtcbiAgICBgb3ZlcmZsb3csb3ZlcmxpbmUtcG9zaXRpb24sb3ZlcmxpbmUtdGhpY2tuZXNzLHBhbm9zZS0xLHBhaW50LW9yZGVyLHBhdGgsYCArXG4gICAgYHBhdGhMZW5ndGgscGF0dGVybkNvbnRlbnRVbml0cyxwYXR0ZXJuVHJhbnNmb3JtLHBhdHRlcm5Vbml0cyxwaW5nLGAgK1xuICAgIGBwb2ludGVyLWV2ZW50cyxwb2ludHMscG9pbnRzQXRYLHBvaW50c0F0WSxwb2ludHNBdFoscHJlc2VydmVBbHBoYSxgICtcbiAgICBgcHJlc2VydmVBc3BlY3RSYXRpbyxwcmltaXRpdmVVbml0cyxyLHJhZGl1cyxyZWZlcnJlclBvbGljeSxyZWZYLHJlZlkscmVsLGAgK1xuICAgIGByZW5kZXJpbmctaW50ZW50LHJlcGVhdENvdW50LHJlcGVhdER1cixyZXF1aXJlZEV4dGVuc2lvbnMscmVxdWlyZWRGZWF0dXJlcyxgICtcbiAgICBgcmVzdGFydCxyZXN1bHQscm90YXRlLHJ4LHJ5LHNjYWxlLHNlZWQsc2hhcGUtcmVuZGVyaW5nLHNsb3BlLHNwYWNpbmcsYCArXG4gICAgYHNwZWN1bGFyQ29uc3RhbnQsc3BlY3VsYXJFeHBvbmVudCxzcGVlZCxzcHJlYWRNZXRob2Qsc3RhcnRPZmZzZXQsYCArXG4gICAgYHN0ZERldmlhdGlvbixzdGVtaCxzdGVtdixzdGl0Y2hUaWxlcyxzdG9wLWNvbG9yLHN0b3Atb3BhY2l0eSxgICtcbiAgICBgc3RyaWtldGhyb3VnaC1wb3NpdGlvbixzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyxzdHJpbmcsc3Ryb2tlLGAgK1xuICAgIGBzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LHN0cm9rZS1saW5lY2FwLHN0cm9rZS1saW5lam9pbixgICtcbiAgICBgc3Ryb2tlLW1pdGVybGltaXQsc3Ryb2tlLW9wYWNpdHksc3Ryb2tlLXdpZHRoLHN0eWxlLHN1cmZhY2VTY2FsZSxgICtcbiAgICBgc3lzdGVtTGFuZ3VhZ2UsdGFiaW5kZXgsdGFibGVWYWx1ZXMsdGFyZ2V0LHRhcmdldFgsdGFyZ2V0WSx0ZXh0LWFuY2hvcixgICtcbiAgICBgdGV4dC1kZWNvcmF0aW9uLHRleHQtcmVuZGVyaW5nLHRleHRMZW5ndGgsdG8sdHJhbnNmb3JtLHRyYW5zZm9ybS1vcmlnaW4sYCArXG4gICAgYHR5cGUsdTEsdTIsdW5kZXJsaW5lLXBvc2l0aW9uLHVuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLWJpZGksYCArXG4gICAgYHVuaWNvZGUtcmFuZ2UsdW5pdHMtcGVyLWVtLHYtYWxwaGFiZXRpYyx2LWhhbmdpbmcsdi1pZGVvZ3JhcGhpYyxgICtcbiAgICBgdi1tYXRoZW1hdGljYWwsdmFsdWVzLHZlY3Rvci1lZmZlY3QsdmVyc2lvbix2ZXJ0LWFkdi15LHZlcnQtb3JpZ2luLXgsYCArXG4gICAgYHZlcnQtb3JpZ2luLXksdmlld0JveCx2aWV3VGFyZ2V0LHZpc2liaWxpdHksd2lkdGgsd2lkdGhzLHdvcmQtc3BhY2luZyxgICtcbiAgICBgd3JpdGluZy1tb2RlLHgseC1oZWlnaHQseDEseDIseENoYW5uZWxTZWxlY3Rvcix4bGluazphY3R1YXRlLHhsaW5rOmFyY3JvbGUsYCArXG4gICAgYHhsaW5rOmhyZWYseGxpbms6cm9sZSx4bGluazpzaG93LHhsaW5rOnRpdGxlLHhsaW5rOnR5cGUseG1sOmJhc2UseG1sOmxhbmcsYCArXG4gICAgYHhtbDpzcGFjZSx5LHkxLHkyLHlDaGFubmVsU2VsZWN0b3Iseix6b29tQW5kUGFuYCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlKHZhbHVlKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdmFsdWVbaV07XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gaXNTdHJpbmcoaXRlbSlcbiAgICAgICAgICAgICAgICA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSlcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVN0eWxlKGl0ZW0pO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBub3JtYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1trZXldID0gbm9ybWFsaXplZFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbmNvbnN0IGxpc3REZWxpbWl0ZXJSRSA9IC87KD8hW14oXSpcXCkpL2c7XG5jb25zdCBwcm9wZXJ0eURlbGltaXRlclJFID0gLzooLispLztcbmZ1bmN0aW9uIHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCkge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlclJFKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgY29uc3QgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlclJFKTtcbiAgICAgICAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXRbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlTdHlsZShzdHlsZXMpIHtcbiAgICBsZXQgcmV0ID0gJyc7XG4gICAgaWYgKCFzdHlsZXMgfHwgaXNTdHJpbmcoc3R5bGVzKSkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdHlsZXNba2V5XTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGtleS5zdGFydHNXaXRoKGAtLWApID8ga2V5IDogaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgfHxcbiAgICAgICAgICAgICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcChub3JtYWxpemVkS2V5KSkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIHZhbGlkIHZhbHVlc1xuICAgICAgICAgICAgcmV0ICs9IGAke25vcm1hbGl6ZWRLZXl9OiR7dmFsdWV9O2A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmVzID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVDbGFzcyh2YWx1ZVtpXSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHJlcyArPSBub3JtYWxpemVkICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZVtuYW1lXSkge1xuICAgICAgICAgICAgICAgIHJlcyArPSBuYW1lICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMudHJpbSgpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMocHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcbiAgICB9XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG59XG5cbi8vIFRoZXNlIHRhZyBjb25maWdzIGFyZSBzaGFyZWQgYmV0d2VlbiBjb21waWxlci1kb20gYW5kIHJ1bnRpbWUtZG9tLCBzbyB0aGV5XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnRcbmNvbnN0IEhUTUxfVEFHUyA9ICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLCcgK1xuICAgICdoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sJyArXG4gICAgJ2ZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLCcgK1xuICAgICdkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCwnICtcbiAgICAndGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSwnICtcbiAgICAnY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLCcgK1xuICAgICd0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsJyArXG4gICAgJ29wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsJyArXG4gICAgJ3N1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnO1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0VsZW1lbnRcbmNvbnN0IFNWR19UQUdTID0gJ3N2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSwnICtcbiAgICAnZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlciwnICtcbiAgICAnZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCwnICtcbiAgICAnZmVEaXN0YW5jZUxpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsJyArXG4gICAgJ2ZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsJyArXG4gICAgJ2ZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsJyArXG4gICAgJ2ZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzaywnICtcbiAgICAnbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLCcgK1xuICAgICdwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLCcgK1xuICAgICd0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXcnO1xuY29uc3QgVk9JRF9UQUdTID0gJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJztcbi8qKlxuICogQ29tcGlsZXIgb25seS5cbiAqIERvIE5PVCB1c2UgaW4gcnVudGltZSBjb2RlIHBhdGhzIHVubGVzcyBiZWhpbmQgYChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKWAgZmxhZy5cbiAqL1xuY29uc3QgaXNIVE1MVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEhUTUxfVEFHUyk7XG4vKipcbiAqIENvbXBpbGVyIG9ubHkuXG4gKiBEbyBOT1QgdXNlIGluIHJ1bnRpbWUgY29kZSBwYXRocyB1bmxlc3MgYmVoaW5kIGAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylgIGZsYWcuXG4gKi9cbmNvbnN0IGlzU1ZHVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFNWR19UQUdTKTtcbi8qKlxuICogQ29tcGlsZXIgb25seS5cbiAqIERvIE5PVCB1c2UgaW4gcnVudGltZSBjb2RlIHBhdGhzIHVubGVzcyBiZWhpbmQgYChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKWAgZmxhZy5cbiAqL1xuY29uc3QgaXNWb2lkVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFZPSURfVEFHUyk7XG5cbmNvbnN0IGVzY2FwZVJFID0gL1tcIicmPD5dLztcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RyID0gJycgKyBzdHJpbmc7XG4gICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVSRS5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBsZXQgaHRtbCA9ICcnO1xuICAgIGxldCBlc2NhcGVkO1xuICAgIGxldCBpbmRleDtcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xuICAgICAgICAgICAgY2FzZSAzNDogLy8gXCJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZxdW90Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM4OiAvLyAmXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmYW1wOyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM5OiAvLyAnXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmIzM5Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDYwOiAvLyA8XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmbHQ7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjI6IC8vID5cbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZndDsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICAgICAgaHRtbCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICBodG1sICs9IGVzY2FwZWQ7XG4gICAgfVxuICAgIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zbGljZShsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XG59XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUyL3N5bnRheC5odG1sI2NvbW1lbnRzXG5jb25zdCBjb21tZW50U3RyaXBSRSA9IC9eLT8+fDwhLS18LS0+fC0tIT58PCEtJC9nO1xuZnVuY3Rpb24gZXNjYXBlSHRtbENvbW1lbnQoc3JjKSB7XG4gICAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRTdHJpcFJFLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBlcXVhbCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVxdWFsID0gbG9vc2VFcXVhbChhW2ldLCBiW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGVxdWFsO1xufVxuZnVuY3Rpb24gbG9vc2VFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xuICAgIGxldCBiVmFsaWRUeXBlID0gaXNEYXRlKGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKSA6IGZhbHNlO1xuICAgIH1cbiAgICBhVmFsaWRUeXBlID0gaXNTeW1ib2woYSk7XG4gICAgYlZhbGlkVHlwZSA9IGlzU3ltYm9sKGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgfVxuICAgIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xuICAgIGJWYWxpZFR5cGUgPSBpc0FycmF5KGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSA6IGZhbHNlO1xuICAgIH1cbiAgICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XG4gICAgYlZhbGlkVHlwZSA9IGlzT2JqZWN0KGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmOiB0aGlzIGlmIHdpbGwgcHJvYmFibHkgbmV2ZXIgYmUgY2FsbGVkICovXG4gICAgICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XG4gICAgICAgIGlmIChhS2V5c0NvdW50ICE9PSBiS2V5c0NvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICAgICAgICBpZiAoKGFIYXNLZXkgJiYgIWJIYXNLZXkpIHx8XG4gICAgICAgICAgICAgICAgKCFhSGFzS2V5ICYmIGJIYXNLZXkpIHx8XG4gICAgICAgICAgICAgICAgIWxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGl0ZW0gPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcbn1cblxuLyoqXG4gKiBGb3IgY29udmVydGluZyB7eyBpbnRlcnBvbGF0aW9uIH19IHZhbHVlcyB0byBkaXNwbGF5ZWQgc3RyaW5ncy5cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHRvRGlzcGxheVN0cmluZyA9ICh2YWwpID0+IHtcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHZhbCA9PSBudWxsXG4gICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICA6IGlzQXJyYXkodmFsKSB8fFxuICAgICAgICAgICAgICAgIChpc09iamVjdCh2YWwpICYmXG4gICAgICAgICAgICAgICAgICAgICh2YWwudG9TdHJpbmcgPT09IG9iamVjdFRvU3RyaW5nIHx8ICFpc0Z1bmN0aW9uKHZhbC50b1N0cmluZykpKVxuICAgICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgMilcbiAgICAgICAgICAgICAgICA6IFN0cmluZyh2YWwpO1xufTtcbmNvbnN0IHJlcGxhY2VyID0gKF9rZXksIHZhbCkgPT4ge1xuICAgIC8vIGNhbid0IHVzZSBpc1JlZiBoZXJlIHNpbmNlIEB2dWUvc2hhcmVkIGhhcyBubyBkZXBzXG4gICAgaWYgKHZhbCAmJiB2YWwuX192X2lzUmVmKSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlcihfa2V5LCB2YWwudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc01hcCh2YWwpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbYE1hcCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC5lbnRyaWVzKCldLnJlZHVjZSgoZW50cmllcywgW2tleSwgdmFsXSkgPT4ge1xuICAgICAgICAgICAgICAgIGVudHJpZXNbYCR7a2V5fSA9PmBdID0gdmFsO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgICAgICAgICAgfSwge30pXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmICFpc0FycmF5KHZhbCkgJiYgIWlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59O1xuXG5jb25zdCBFTVBUWV9PQkogPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICA/IE9iamVjdC5mcmVlemUoe30pXG4gICAgOiB7fTtcbmNvbnN0IEVNUFRZX0FSUiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XG5jb25zdCBOT09QID0gKCkgPT4geyB9O1xuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG5jb25zdCBOTyA9ICgpID0+IGZhbHNlO1xuY29uc3Qgb25SRSA9IC9eb25bXmEtel0vO1xuY29uc3QgaXNPbiA9IChrZXkpID0+IG9uUkUudGVzdChrZXkpO1xuY29uc3QgaXNNb2RlbExpc3RlbmVyID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ29uVXBkYXRlOicpO1xuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XG4gICAgY29uc3QgaSA9IGFyci5pbmRleE9mKGVsKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgIGFyci5zcGxpY2UoaSwgMSk7XG4gICAgfVxufTtcbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmNvbnN0IGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSk7XG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmNvbnN0IGlzTWFwID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE1hcF0nO1xuY29uc3QgaXNTZXQgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgU2V0XSc7XG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xuY29uc3QgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJztcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuY29uc3QgaXNQcm9taXNlID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gICAgLy8gZXh0cmFjdCBcIlJhd1R5cGVcIiBmcm9tIHN0cmluZ3MgbGlrZSBcIltvYmplY3QgUmF3VHlwZV1cIlxuICAgIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuY29uc3QgaXNJbnRlZ2VyS2V5ID0gKGtleSkgPT4gaXNTdHJpbmcoa2V5KSAmJlxuICAgIGtleSAhPT0gJ05hTicgJiZcbiAgICBrZXlbMF0gIT09ICctJyAmJlxuICAgICcnICsgcGFyc2VJbnQoa2V5LCAxMCkgPT09IGtleTtcbmNvbnN0IGlzUmVzZXJ2ZWRQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFxuLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuJyxrZXkscmVmLHJlZl9mb3IscmVmX2tleSwnICtcbiAgICAnb25Wbm9kZUJlZm9yZU1vdW50LG9uVm5vZGVNb3VudGVkLCcgK1xuICAgICdvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLCcgK1xuICAgICdvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkJyk7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ2JpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0LG1lbW8nKTtcbmNvbnN0IGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcbiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XG4gICAgICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XG4gICAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgICB9KTtcbn07XG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJykpO1xufSk7XG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGApO1xuLy8gY29tcGFyZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQsIGFjY291bnRpbmcgZm9yIE5hTi5cbmNvbnN0IGhhc0NoYW5nZWQgPSAodmFsdWUsIG9sZFZhbHVlKSA9PiAhT2JqZWN0LmlzKHZhbHVlLCBvbGRWYWx1ZSk7XG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIGFyZykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuc1tpXShhcmcpO1xuICAgIH1cbn07XG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlXG4gICAgfSk7XG59O1xuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XG4gICAgY29uc3QgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xufTtcbmxldCBfZ2xvYmFsVGhpcztcbmNvbnN0IGdldEdsb2JhbFRoaXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChfZ2xvYmFsVGhpcyB8fFxuICAgICAgICAoX2dsb2JhbFRoaXMgPVxuICAgICAgICAgICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBnbG9iYWxUaGlzXG4gICAgICAgICAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gd2luZG93XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9KSk7XG59O1xuY29uc3QgaWRlbnRSRSA9IC9eW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSokLztcbmZ1bmN0aW9uIGdlblByb3BzQWNjZXNzRXhwKG5hbWUpIHtcbiAgICByZXR1cm4gaWRlbnRSRS50ZXN0KG5hbWUpXG4gICAgICAgID8gYF9fcHJvcHMuJHtuYW1lfWBcbiAgICAgICAgOiBgX19wcm9wc1ske0pTT04uc3RyaW5naWZ5KG5hbWUpfV1gO1xufVxuXG5leHBvcnQgeyBFTVBUWV9BUlIsIEVNUFRZX09CSiwgTk8sIE5PT1AsIFBhdGNoRmxhZ05hbWVzLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5Qcm9wc0FjY2Vzc0V4cCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEdsb2JhbFRoaXMsIGhhc0NoYW5nZWQsIGhhc093biwgaHlwaGVuYXRlLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGludm9rZUFycmF5Rm5zLCBpc0FycmF5LCBpc0Jvb2xlYW5BdHRyLCBpc0J1aWx0SW5EaXJlY3RpdmUsIGlzRGF0ZSwgaXNGdW5jdGlvbiwgaXNHbG9iYWxseVdoaXRlbGlzdGVkLCBpc0hUTUxUYWcsIGlzSW50ZWdlcktleSwgaXNLbm93bkh0bWxBdHRyLCBpc0tub3duU3ZnQXR0ciwgaXNNYXAsIGlzTW9kZWxMaXN0ZW5lciwgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wLCBpc09iamVjdCwgaXNPbiwgaXNQbGFpbk9iamVjdCwgaXNQcm9taXNlLCBpc1Jlc2VydmVkUHJvcCwgaXNTU1JTYWZlQXR0ck5hbWUsIGlzU1ZHVGFnLCBpc1NldCwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNWb2lkVGFnLCBsb29zZUVxdWFsLCBsb29zZUluZGV4T2YsIG1ha2VNYXAsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVQcm9wcywgbm9ybWFsaXplU3R5bGUsIG9iamVjdFRvU3RyaW5nLCBwYXJzZVN0cmluZ1N0eWxlLCBwcm9wc1RvQXR0ck1hcCwgcmVtb3ZlLCBzbG90RmxhZ3NUZXh0LCBzdHJpbmdpZnlTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXksIHRvTnVtYmVyLCB0b1Jhd1R5cGUsIHRvVHlwZVN0cmluZyB9O1xuIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHZhbGlkYXRlTmFtZXNwYWNlIGZyb20gJy4vdmFsaWRhdGVOYW1lc3BhY2UuanMnO1xuaW1wb3J0IHZhbGlkYXRlSG9va05hbWUgZnJvbSAnLi92YWxpZGF0ZUhvb2tOYW1lLmpzJztcbi8qKlxuICogQGNhbGxiYWNrIEFkZEhvb2tcbiAqXG4gKiBBZGRzIHRoZSBob29rIHRvIHRoZSBhcHByb3ByaWF0ZSBob29rcyBjb250YWluZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICAgICAgaG9va05hbWUgICAgICBOYW1lIG9mIGhvb2sgdG8gYWRkXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgICAgICBuYW1lc3BhY2UgICAgIFRoZSB1bmlxdWUgbmFtZXNwYWNlIGlkZW50aWZ5aW5nIHRoZSBjYWxsYmFjayBpbiB0aGUgZm9ybSBgdmVuZG9yL3BsdWdpbi9mdW5jdGlvbmAuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkNhbGxiYWNrfSBjYWxsYmFjayAgICAgIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgaG9vayBpcyBydW5cbiAqIEBwYXJhbSB7bnVtYmVyfSAgICAgICAgICAgICAgIFtwcmlvcml0eT0xMF0gUHJpb3JpdHkgb2YgdGhpcyBob29rXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCBhZGQgYSBob29rLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqXG4gKiBAcmV0dXJuIHtBZGRIb29rfSBGdW5jdGlvbiB0aGF0IGFkZHMgYSBuZXcgaG9vay5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBZGRIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gYWRkSG9vayhob29rTmFtZSwgbmFtZXNwYWNlLCBjYWxsYmFjaykge1xuICAgIGxldCBwcmlvcml0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMTA7XG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTtcblxuICAgIGlmICghdmFsaWRhdGVIb29rTmFtZShob29rTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXZhbGlkYXRlTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGNhbGxiYWNrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcignVGhlIGhvb2sgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVmFsaWRhdGUgbnVtZXJpYyBwcmlvcml0eVxuXG5cbiAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiBwcmlvcml0eSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0lmIHNwZWNpZmllZCwgdGhlIGhvb2sgcHJpb3JpdHkgbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyID0ge1xuICAgICAgY2FsbGJhY2ssXG4gICAgICBwcmlvcml0eSxcbiAgICAgIG5hbWVzcGFjZVxuICAgIH07XG5cbiAgICBpZiAoaG9va3NTdG9yZVtob29rTmFtZV0pIHtcbiAgICAgIC8vIEZpbmQgdGhlIGNvcnJlY3QgaW5zZXJ0IGluZGV4IG9mIHRoZSBuZXcgaG9vay5cbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gaG9va3NTdG9yZVtob29rTmFtZV0uaGFuZGxlcnM7XG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICAgICAgbGV0IGk7XG5cbiAgICAgIGZvciAoaSA9IGhhbmRsZXJzLmxlbmd0aDsgaSA+IDA7IGktLSkge1xuICAgICAgICBpZiAocHJpb3JpdHkgPj0gaGFuZGxlcnNbaSAtIDFdLnByaW9yaXR5KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGkgPT09IGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiBhcHBlbmQsIG9wZXJhdGUgdmlhIGRpcmVjdCBhc3NpZ25tZW50LlxuICAgICAgICBoYW5kbGVyc1tpXSA9IGhhbmRsZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIGluc2VydCBiZWZvcmUgaW5kZXggdmlhIHNwbGljZS5cbiAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGksIDAsIGhhbmRsZXIpO1xuICAgICAgfSAvLyBXZSBtYXkgYWxzbyBiZSBjdXJyZW50bHkgZXhlY3V0aW5nIHRoaXMgaG9vay4gIElmIHRoZSBjYWxsYmFja1xuICAgICAgLy8gd2UncmUgYWRkaW5nIHdvdWxkIGNvbWUgYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbGJhY2ssIHRoZXJlJ3Mgbm9cbiAgICAgIC8vIHByb2JsZW07IG90aGVyd2lzZSB3ZSBuZWVkIHRvIGluY3JlYXNlIHRoZSBleGVjdXRpb24gaW5kZXggb2ZcbiAgICAgIC8vIGFueSBvdGhlciBydW5zIGJ5IDEgdG8gYWNjb3VudCBmb3IgdGhlIGFkZGVkIGVsZW1lbnQuXG5cblxuICAgICAgaG9va3NTdG9yZS5fX2N1cnJlbnQuZm9yRWFjaChob29rSW5mbyA9PiB7XG4gICAgICAgIGlmIChob29rSW5mby5uYW1lID09PSBob29rTmFtZSAmJiBob29rSW5mby5jdXJyZW50SW5kZXggPj0gaSkge1xuICAgICAgICAgIGhvb2tJbmZvLmN1cnJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgaG9vayBvZiBpdHMgdHlwZS5cbiAgICAgIGhvb2tzU3RvcmVbaG9va05hbWVdID0ge1xuICAgICAgICBoYW5kbGVyczogW2hhbmRsZXJdLFxuICAgICAgICBydW5zOiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChob29rTmFtZSAhPT0gJ2hvb2tBZGRlZCcpIHtcbiAgICAgIGhvb2tzLmRvQWN0aW9uKCdob29rQWRkZWQnLCBob29rTmFtZSwgbmFtZXNwYWNlLCBjYWxsYmFjaywgcHJpb3JpdHkpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQWRkSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUFkZEhvb2suanMubWFwIiwiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCByZXR1cm4gdGhlIG5hbWUgb2YgdGhlXG4gKiBjdXJyZW50bHkgcnVubmluZyBob29rLCBvciBgbnVsbGAgaWYgbm8gaG9vayBvZiB0aGUgZ2l2ZW4gdHlwZSBpcyBjdXJyZW50bHlcbiAqIHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5Ib29rc30gICAgaG9va3MgICAgSG9va3MgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLlN0b3JlS2V5fSBzdG9yZUtleVxuICpcbiAqIEByZXR1cm4geygpID0+IHN0cmluZyB8IG51bGx9IEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBob29rIG5hbWUgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ3VycmVudEhvb2soaG9va3MsIHN0b3JlS2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjdXJyZW50SG9vaygpIHtcbiAgICB2YXIgX2hvb2tzU3RvcmUkX19jdXJyZW50LCBfaG9va3NTdG9yZSRfX2N1cnJlbnQyO1xuXG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTtcbiAgICByZXR1cm4gKF9ob29rc1N0b3JlJF9fY3VycmVudCA9IChfaG9va3NTdG9yZSRfX2N1cnJlbnQyID0gaG9va3NTdG9yZS5fX2N1cnJlbnRbaG9va3NTdG9yZS5fX2N1cnJlbnQubGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9ob29rc1N0b3JlJF9fY3VycmVudDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ob29rc1N0b3JlJF9fY3VycmVudDIubmFtZSkgIT09IG51bGwgJiYgX2hvb2tzU3RvcmUkX19jdXJyZW50ICE9PSB2b2lkIDAgPyBfaG9va3NTdG9yZSRfX2N1cnJlbnQgOiBudWxsO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDdXJyZW50SG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUN1cnJlbnRIb29rLmpzLm1hcCIsIi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB2YWxpZGF0ZUhvb2tOYW1lIGZyb20gJy4vdmFsaWRhdGVIb29rTmFtZS5qcyc7XG4vKipcbiAqIEBjYWxsYmFjayBEaWRIb29rXG4gKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRpbWVzIGFuIGFjdGlvbiBoYXMgYmVlbiBmaXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgVGhlIGhvb2sgbmFtZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXIgfCB1bmRlZmluZWR9IFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGhvb2sgaGFzIHJ1bi5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIHJldHVybiB0aGUgbnVtYmVyIG9mIHRpbWVzIGFcbiAqIGhvb2sgaGFzIGJlZW4gY2FsbGVkLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqXG4gKiBAcmV0dXJuIHtEaWRIb29rfSBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBob29rJ3MgY2FsbCBjb3VudC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEaWRIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGlkSG9vayhob29rTmFtZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07XG5cbiAgICBpZiAoIXZhbGlkYXRlSG9va05hbWUoaG9va05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvb2tzU3RvcmVbaG9va05hbWVdICYmIGhvb2tzU3RvcmVbaG9va05hbWVdLnJ1bnMgPyBob29rc1N0b3JlW2hvb2tOYW1lXS5ydW5zIDogMDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGlkSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZURpZEhvb2suanMubWFwIiwiLyoqXG4gKiBAY2FsbGJhY2sgRG9pbmdIb29rXG4gKiBSZXR1cm5zIHdoZXRoZXIgYSBob29rIGlzIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2hvb2tOYW1lXSBUaGUgbmFtZSBvZiB0aGUgaG9vayB0byBjaGVjayBmb3IuICBJZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgb21pdHRlZCwgd2lsbCBjaGVjayBmb3IgYW55IGhvb2sgYmVpbmcgZXhlY3V0ZWQuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaG9vayBpcyBiZWluZyBleGVjdXRlZC5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIHJldHVybiB3aGV0aGVyIGEgaG9vayBpc1xuICogY3VycmVudGx5IGJlaW5nIGV4ZWN1dGVkLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqXG4gKiBAcmV0dXJuIHtEb2luZ0hvb2t9IEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB3aGV0aGVyIGEgaG9vayBpcyBjdXJyZW50bHlcbiAqICAgICAgICAgICAgICAgICAgICAgYmVpbmcgZXhlY3V0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURvaW5nSG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRvaW5nSG9vayhob29rTmFtZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07IC8vIElmIHRoZSBob29rTmFtZSB3YXMgbm90IHBhc3NlZCwgY2hlY2sgZm9yIGFueSBjdXJyZW50IGhvb2suXG5cbiAgICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBob29rTmFtZSkge1xuICAgICAgcmV0dXJuICd1bmRlZmluZWQnICE9PSB0eXBlb2YgaG9va3NTdG9yZS5fX2N1cnJlbnRbMF07XG4gICAgfSAvLyBSZXR1cm4gdGhlIF9fY3VycmVudCBob29rLlxuXG5cbiAgICByZXR1cm4gaG9va3NTdG9yZS5fX2N1cnJlbnRbMF0gPyBob29rTmFtZSA9PT0gaG9va3NTdG9yZS5fX2N1cnJlbnRbMF0ubmFtZSA6IGZhbHNlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVEb2luZ0hvb2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVEb2luZ0hvb2suanMubWFwIiwiLyoqXG4gKiBAY2FsbGJhY2sgSGFzSG9va1xuICpcbiAqIFJldHVybnMgd2hldGhlciBhbnkgaGFuZGxlcnMgYXJlIGF0dGFjaGVkIGZvciB0aGUgZ2l2ZW4gaG9va05hbWUgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgICAgVGhlIG5hbWUgb2YgdGhlIGhvb2sgdG8gY2hlY2sgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VdIE9wdGlvbmFsLiBUaGUgdW5pcXVlIG5hbWVzcGFjZSBpZGVudGlmeWluZyB0aGUgY2FsbGJhY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZm9ybSBgdmVuZG9yL3BsdWdpbi9mdW5jdGlvbmAuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGVyZSBhcmUgaGFuZGxlcnMgdGhhdCBhcmUgYXR0YWNoZWQgdG8gdGhlIGdpdmVuIGhvb2suXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCByZXR1cm4gd2hldGhlciBhbnkgaGFuZGxlcnMgYXJlXG4gKiBhdHRhY2hlZCB0byBhIHBhcnRpY3VsYXIgaG9vay5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKlxuICogQHJldHVybiB7SGFzSG9va30gRnVuY3Rpb24gdGhhdCByZXR1cm5zIHdoZXRoZXIgYW55IGhhbmRsZXJzIGFyZVxuICogICAgICAgICAgICAgICAgICAgYXR0YWNoZWQgdG8gYSBwYXJ0aWN1bGFyIGhvb2sgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGFzSG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhc0hvb2soaG9va05hbWUsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07IC8vIFVzZSB0aGUgbmFtZXNwYWNlIGlmIHByb3ZpZGVkLlxuXG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbmFtZXNwYWNlKSB7XG4gICAgICByZXR1cm4gaG9va05hbWUgaW4gaG9va3NTdG9yZSAmJiBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVycy5zb21lKGhvb2sgPT4gaG9vay5uYW1lc3BhY2UgPT09IG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvb2tOYW1lIGluIGhvb2tzU3RvcmU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc0hvb2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIYXNIb29rLmpzLm1hcCIsIi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBjcmVhdGVBZGRIb29rIGZyb20gJy4vY3JlYXRlQWRkSG9vayc7XG5pbXBvcnQgY3JlYXRlUmVtb3ZlSG9vayBmcm9tICcuL2NyZWF0ZVJlbW92ZUhvb2snO1xuaW1wb3J0IGNyZWF0ZUhhc0hvb2sgZnJvbSAnLi9jcmVhdGVIYXNIb29rJztcbmltcG9ydCBjcmVhdGVSdW5Ib29rIGZyb20gJy4vY3JlYXRlUnVuSG9vayc7XG5pbXBvcnQgY3JlYXRlQ3VycmVudEhvb2sgZnJvbSAnLi9jcmVhdGVDdXJyZW50SG9vayc7XG5pbXBvcnQgY3JlYXRlRG9pbmdIb29rIGZyb20gJy4vY3JlYXRlRG9pbmdIb29rJztcbmltcG9ydCBjcmVhdGVEaWRIb29rIGZyb20gJy4vY3JlYXRlRGlkSG9vayc7XG4vKipcbiAqIEludGVybmFsIGNsYXNzIGZvciBjb25zdHJ1Y3RpbmcgaG9va3MuIFVzZSBgY3JlYXRlSG9va3MoKWAgZnVuY3Rpb25cbiAqXG4gKiBOb3RlLCBpdCBpcyBuZWNlc3NhcnkgdG8gZXhwb3NlIHRoaXMgY2xhc3MgdG8gbWFrZSBpdHMgdHlwZSBwdWJsaWMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnQgY2xhc3MgX0hvb2tzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5TdG9yZX0gYWN0aW9ucyAqL1xuICAgIHRoaXMuYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5hY3Rpb25zLl9fY3VycmVudCA9IFtdO1xuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuJykuU3RvcmV9IGZpbHRlcnMgKi9cblxuICAgIHRoaXMuZmlsdGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5maWx0ZXJzLl9fY3VycmVudCA9IFtdO1xuICAgIHRoaXMuYWRkQWN0aW9uID0gY3JlYXRlQWRkSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuYWRkRmlsdGVyID0gY3JlYXRlQWRkSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICAgIHRoaXMucmVtb3ZlQWN0aW9uID0gY3JlYXRlUmVtb3ZlSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMucmVtb3ZlRmlsdGVyID0gY3JlYXRlUmVtb3ZlSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICAgIHRoaXMuaGFzQWN0aW9uID0gY3JlYXRlSGFzSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuaGFzRmlsdGVyID0gY3JlYXRlSGFzSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICAgIHRoaXMucmVtb3ZlQWxsQWN0aW9ucyA9IGNyZWF0ZVJlbW92ZUhvb2sodGhpcywgJ2FjdGlvbnMnLCB0cnVlKTtcbiAgICB0aGlzLnJlbW92ZUFsbEZpbHRlcnMgPSBjcmVhdGVSZW1vdmVIb29rKHRoaXMsICdmaWx0ZXJzJywgdHJ1ZSk7XG4gICAgdGhpcy5kb0FjdGlvbiA9IGNyZWF0ZVJ1bkhvb2sodGhpcywgJ2FjdGlvbnMnKTtcbiAgICB0aGlzLmFwcGx5RmlsdGVycyA9IGNyZWF0ZVJ1bkhvb2sodGhpcywgJ2ZpbHRlcnMnLCB0cnVlKTtcbiAgICB0aGlzLmN1cnJlbnRBY3Rpb24gPSBjcmVhdGVDdXJyZW50SG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuY3VycmVudEZpbHRlciA9IGNyZWF0ZUN1cnJlbnRIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5kb2luZ0FjdGlvbiA9IGNyZWF0ZURvaW5nSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuZG9pbmdGaWx0ZXIgPSBjcmVhdGVEb2luZ0hvb2sodGhpcywgJ2ZpbHRlcnMnKTtcbiAgICB0aGlzLmRpZEFjdGlvbiA9IGNyZWF0ZURpZEhvb2sodGhpcywgJ2FjdGlvbnMnKTtcbiAgICB0aGlzLmRpZEZpbHRlciA9IGNyZWF0ZURpZEhvb2sodGhpcywgJ2ZpbHRlcnMnKTtcbiAgfVxuXG59XG4vKiogQHR5cGVkZWYge19Ib29rc30gSG9va3MgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSBob29rcyBvYmplY3QuXG4gKlxuICogQHJldHVybiB7SG9va3N9IEEgSG9va3MgaW5zdGFuY2UuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSG9va3MoKSB7XG4gIHJldHVybiBuZXcgX0hvb2tzKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhvb2tzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlSG9va3MuanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHZhbGlkYXRlTmFtZXNwYWNlIGZyb20gJy4vdmFsaWRhdGVOYW1lc3BhY2UuanMnO1xuaW1wb3J0IHZhbGlkYXRlSG9va05hbWUgZnJvbSAnLi92YWxpZGF0ZUhvb2tOYW1lLmpzJztcbi8qKlxuICogQGNhbGxiYWNrIFJlbW92ZUhvb2tcbiAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBjYWxsYmFjayAob3IgYWxsIGNhbGxiYWNrcykgZnJvbSB0aGUgaG9vayB3aXRoIGEgZ2l2ZW4gaG9va05hbWVcbiAqIGFuZCBuYW1lc3BhY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhvb2tOYW1lICBUaGUgbmFtZSBvZiB0aGUgaG9vayB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIFRoZSB1bmlxdWUgbmFtZXNwYWNlIGlkZW50aWZ5aW5nIHRoZSBjYWxsYmFjayBpbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSBgdmVuZG9yL3BsdWdpbi9mdW5jdGlvbmAuXG4gKlxuICogQHJldHVybiB7bnVtYmVyIHwgdW5kZWZpbmVkfSBUaGUgbnVtYmVyIG9mIGNhbGxiYWNrcyByZW1vdmVkLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGludm9rZWQsIHdpbGwgcmVtb3ZlIGEgc3BlY2lmaWVkIGhvb2sgb3IgYWxsXG4gKiBob29rcyBieSB0aGUgZ2l2ZW4gbmFtZS5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICAgICAgICAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgICBbcmVtb3ZlQWxsPWZhbHNlXSBXaGV0aGVyIHRvIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciBhIGhvb2tOYW1lLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aG91dCByZWdhcmQgdG8gbmFtZXNwYWNlLiBVc2VkIHRvIGNyZWF0ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHJlbW92ZUFsbCpgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcmV0dXJuIHtSZW1vdmVIb29rfSBGdW5jdGlvbiB0aGF0IHJlbW92ZXMgaG9va3MuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUmVtb3ZlSG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgbGV0IHJlbW92ZUFsbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmVIb29rKGhvb2tOYW1lLCBuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBob29rc1N0b3JlID0gaG9va3Nbc3RvcmVLZXldO1xuXG4gICAgaWYgKCF2YWxpZGF0ZUhvb2tOYW1lKGhvb2tOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcmVtb3ZlQWxsICYmICF2YWxpZGF0ZU5hbWVzcGFjZShuYW1lc3BhY2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBCYWlsIGlmIG5vIGhvb2tzIGV4aXN0IGJ5IHRoaXMgbmFtZS5cblxuXG4gICAgaWYgKCFob29rc1N0b3JlW2hvb2tOYW1lXSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IGhhbmRsZXJzUmVtb3ZlZCA9IDA7XG5cbiAgICBpZiAocmVtb3ZlQWxsKSB7XG4gICAgICBoYW5kbGVyc1JlbW92ZWQgPSBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVycy5sZW5ndGg7XG4gICAgICBob29rc1N0b3JlW2hvb2tOYW1lXSA9IHtcbiAgICAgICAgcnVuczogaG9va3NTdG9yZVtob29rTmFtZV0ucnVucyxcbiAgICAgICAgaGFuZGxlcnM6IFtdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcnkgdG8gZmluZCB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIHRvIHJlbW92ZS5cbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gaG9va3NTdG9yZVtob29rTmFtZV0uaGFuZGxlcnM7XG5cbiAgICAgIGZvciAobGV0IGkgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoaGFuZGxlcnNbaV0ubmFtZXNwYWNlID09PSBuYW1lc3BhY2UpIHtcbiAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaGFuZGxlcnNSZW1vdmVkKys7IC8vIFRoaXMgY2FsbGJhY2sgbWF5IGFsc28gYmUgcGFydCBvZiBhIGhvb2sgdGhhdCBpc1xuICAgICAgICAgIC8vIGN1cnJlbnRseSBleGVjdXRpbmcuICBJZiB0aGUgY2FsbGJhY2sgd2UncmUgcmVtb3ZpbmdcbiAgICAgICAgICAvLyBjb21lcyBhZnRlciB0aGUgY3VycmVudCBjYWxsYmFjaywgdGhlcmUncyBubyBwcm9ibGVtO1xuICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBuZWVkIHRvIGRlY3JlYXNlIHRoZSBleGVjdXRpb24gaW5kZXggb2YgYW55XG4gICAgICAgICAgLy8gb3RoZXIgcnVucyBieSAxIHRvIGFjY291bnQgZm9yIHRoZSByZW1vdmVkIGVsZW1lbnQuXG5cbiAgICAgICAgICBob29rc1N0b3JlLl9fY3VycmVudC5mb3JFYWNoKGhvb2tJbmZvID0+IHtcbiAgICAgICAgICAgIGlmIChob29rSW5mby5uYW1lID09PSBob29rTmFtZSAmJiBob29rSW5mby5jdXJyZW50SW5kZXggPj0gaSkge1xuICAgICAgICAgICAgICBob29rSW5mby5jdXJyZW50SW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChob29rTmFtZSAhPT0gJ2hvb2tSZW1vdmVkJykge1xuICAgICAgaG9va3MuZG9BY3Rpb24oJ2hvb2tSZW1vdmVkJywgaG9va05hbWUsIG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhbmRsZXJzUmVtb3ZlZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVtb3ZlSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVJlbW92ZUhvb2suanMubWFwIiwiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCBleGVjdXRlIGFsbCBjYWxsYmFja3NcbiAqIHJlZ2lzdGVyZWQgdG8gYSBob29rIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSwgb3B0aW9uYWxseSByZXR1cm5pbmcgdGhlIGZpbmFsXG4gKiB2YWx1ZSBvZiB0aGUgY2FsbCBjaGFpbi5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICAgICAgICAgICAgICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgIFtyZXR1cm5GaXJzdEFyZz1mYWxzZV0gV2hldGhlciBlYWNoIGhvb2sgY2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0cyBmaXJzdCBhcmd1bWVudC5cbiAqXG4gKiBAcmV0dXJuIHsoaG9va05hbWU6c3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd259IEZ1bmN0aW9uIHRoYXQgcnVucyBob29rIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUnVuSG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgbGV0IHJldHVybkZpcnN0QXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJ1bkhvb2tzKGhvb2tOYW1lKSB7XG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTtcblxuICAgIGlmICghaG9va3NTdG9yZVtob29rTmFtZV0pIHtcbiAgICAgIGhvb2tzU3RvcmVbaG9va05hbWVdID0ge1xuICAgICAgICBoYW5kbGVyczogW10sXG4gICAgICAgIHJ1bnM6IDBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaG9va3NTdG9yZVtob29rTmFtZV0ucnVucysrO1xuICAgIGNvbnN0IGhhbmRsZXJzID0gaG9va3NTdG9yZVtob29rTmFtZV0uaGFuZGxlcnM7IC8vIFRoZSBmb2xsb3dpbmcgY29kZSBpcyBzdHJpcHBlZCBmcm9tIHByb2R1Y3Rpb24gYnVpbGRzLlxuXG4gICAgaWYgKCdwcm9kdWN0aW9uJyAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIEhhbmRsZSBhbnkgJ2FsbCcgaG9va3MgcmVnaXN0ZXJlZC5cbiAgICAgIGlmICgnaG9va0FkZGVkJyAhPT0gaG9va05hbWUgJiYgaG9va3NTdG9yZS5hbGwpIHtcbiAgICAgICAgaGFuZGxlcnMucHVzaCguLi5ob29rc1N0b3JlLmFsbC5oYW5kbGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKCFoYW5kbGVycyB8fCAhaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcmV0dXJuRmlyc3RBcmcgPyBhcmdzWzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGhvb2tJbmZvID0ge1xuICAgICAgbmFtZTogaG9va05hbWUsXG4gICAgICBjdXJyZW50SW5kZXg6IDBcbiAgICB9O1xuXG4gICAgaG9va3NTdG9yZS5fX2N1cnJlbnQucHVzaChob29rSW5mbyk7XG5cbiAgICB3aGlsZSAoaG9va0luZm8uY3VycmVudEluZGV4IDwgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbaG9va0luZm8uY3VycmVudEluZGV4XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZXIuY2FsbGJhY2suYXBwbHkobnVsbCwgYXJncyk7XG5cbiAgICAgIGlmIChyZXR1cm5GaXJzdEFyZykge1xuICAgICAgICBhcmdzWzBdID0gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBob29rSW5mby5jdXJyZW50SW5kZXgrKztcbiAgICB9XG5cbiAgICBob29rc1N0b3JlLl9fY3VycmVudC5wb3AoKTtcblxuICAgIGlmIChyZXR1cm5GaXJzdEFyZykge1xuICAgICAgcmV0dXJuIGFyZ3NbMF07XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSdW5Ib29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlUnVuSG9vay5qcy5tYXAiLCIvKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgY3JlYXRlSG9va3MgZnJvbSAnLi9jcmVhdGVIb29rcyc7XG4vKiogQHR5cGVkZWYgeyguLi5hcmdzOiBhbnlbXSk9PmFueX0gQ2FsbGJhY2sgKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBIYW5kbGVyXG4gKiBAcHJvcGVydHkge0NhbGxiYWNrfSBjYWxsYmFjayAgVGhlIGNhbGxiYWNrXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZVxuICogQHByb3BlcnR5IHtudW1iZXJ9ICAgcHJpb3JpdHkgIFRoZSBuYW1lc3BhY2VcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEhvb2tcbiAqIEBwcm9wZXJ0eSB7SGFuZGxlcltdfSBoYW5kbGVycyBBcnJheSBvZiBoYW5kbGVyc1xuICogQHByb3BlcnR5IHtudW1iZXJ9ICAgIHJ1bnMgICAgIFJ1biBjb3VudGVyXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBDdXJyZW50XG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSAgICAgICAgIEhvb2sgbmFtZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGN1cnJlbnRJbmRleCBUaGUgaW5kZXhcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCBIb29rPiAmIHtfX2N1cnJlbnQ6IEN1cnJlbnRbXX19IFN0b3JlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7J2FjdGlvbnMnIHwgJ2ZpbHRlcnMnfSBTdG9yZUtleVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jcmVhdGVIb29rcycpLkhvb2tzfSBIb29rc1xuICovXG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0SG9va3MgPSBjcmVhdGVIb29rcygpO1xuY29uc3Qge1xuICBhZGRBY3Rpb24sXG4gIGFkZEZpbHRlcixcbiAgcmVtb3ZlQWN0aW9uLFxuICByZW1vdmVGaWx0ZXIsXG4gIGhhc0FjdGlvbixcbiAgaGFzRmlsdGVyLFxuICByZW1vdmVBbGxBY3Rpb25zLFxuICByZW1vdmVBbGxGaWx0ZXJzLFxuICBkb0FjdGlvbixcbiAgYXBwbHlGaWx0ZXJzLFxuICBjdXJyZW50QWN0aW9uLFxuICBjdXJyZW50RmlsdGVyLFxuICBkb2luZ0FjdGlvbixcbiAgZG9pbmdGaWx0ZXIsXG4gIGRpZEFjdGlvbixcbiAgZGlkRmlsdGVyLFxuICBhY3Rpb25zLFxuICBmaWx0ZXJzXG59ID0gZGVmYXVsdEhvb2tzO1xuZXhwb3J0IHsgY3JlYXRlSG9va3MsIGFkZEFjdGlvbiwgYWRkRmlsdGVyLCByZW1vdmVBY3Rpb24sIHJlbW92ZUZpbHRlciwgaGFzQWN0aW9uLCBoYXNGaWx0ZXIsIHJlbW92ZUFsbEFjdGlvbnMsIHJlbW92ZUFsbEZpbHRlcnMsIGRvQWN0aW9uLCBhcHBseUZpbHRlcnMsIGN1cnJlbnRBY3Rpb24sIGN1cnJlbnRGaWx0ZXIsIGRvaW5nQWN0aW9uLCBkb2luZ0ZpbHRlciwgZGlkQWN0aW9uLCBkaWRGaWx0ZXIsIGFjdGlvbnMsIGZpbHRlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8qKlxuICogVmFsaWRhdGUgYSBob29rTmFtZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhvb2tOYW1lIFRoZSBob29rIG5hbWUgdG8gdmFsaWRhdGUuIFNob3VsZCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgY29udGFpbmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgbnVtYmVycywgbGV0dGVycywgZGFzaGVzLCBwZXJpb2RzIGFuZCB1bmRlcnNjb3Jlcy4gQWxzbyxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgaG9vayBuYW1lIGNhbm5vdCBiZWdpbiB3aXRoIGBfX2AuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaG9vayBuYW1lIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUhvb2tOYW1lKGhvb2tOYW1lKSB7XG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGhvb2tOYW1lIHx8ICcnID09PSBob29rTmFtZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIGhvb2sgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoL15fXy8udGVzdChob29rTmFtZSkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBob29rIG5hbWUgY2Fubm90IGJlZ2luIHdpdGggYF9fYC4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIS9eW2EtekEtWl1bYS16QS1aMC05Xy4tXSokLy50ZXN0KGhvb2tOYW1lKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIGhvb2sgbmFtZSBjYW4gb25seSBjb250YWluIG51bWJlcnMsIGxldHRlcnMsIGRhc2hlcywgcGVyaW9kcyBhbmQgdW5kZXJzY29yZXMuJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlSG9va05hbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZUhvb2tOYW1lLmpzLm1hcCIsIi8qKlxuICogVmFsaWRhdGUgYSBuYW1lc3BhY2Ugc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSB0byB2YWxpZGF0ZSAtIHNob3VsZCB0YWtlIHRoZSBmb3JtXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGB2ZW5kb3IvcGx1Z2luL2Z1bmN0aW9uYC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBuYW1lc3BhY2UgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZXNwYWNlKG5hbWVzcGFjZSkge1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBuYW1lc3BhY2UgfHwgJycgPT09IG5hbWVzcGFjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIG5hbWVzcGFjZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIS9eW2EtekEtWl1bYS16QS1aMC05Xy5cXC1cXC9dKiQvLnRlc3QobmFtZXNwYWNlKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIG5hbWVzcGFjZSBjYW4gb25seSBjb250YWluIG51bWJlcnMsIGxldHRlcnMsIGRhc2hlcywgcGVyaW9kcywgdW5kZXJzY29yZXMgYW5kIHNsYXNoZXMuJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlTmFtZXNwYWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVOYW1lc3BhY2UuanMubWFwIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IFRhbm5pbiBmcm9tICd0YW5uaW4nO1xuLyoqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZyxhbnk+fSBMb2NhbGVEYXRhXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IGxvY2FsZSBkYXRhIHRvIHVzZSBmb3IgVGFubmluIGRvbWFpbiB3aGVuIG5vdCBvdGhlcndpc2UgcHJvdmlkZWQuXG4gKiBBc3N1bWVzIGFuIEVuZ2xpc2ggcGx1cmFsIGZvcm1zIGV4cHJlc3Npb24uXG4gKlxuICogQHR5cGUge0xvY2FsZURhdGF9XG4gKi9cblxuY29uc3QgREVGQVVMVF9MT0NBTEVfREFUQSA9IHtcbiAgJyc6IHtcbiAgICAvKiogQHBhcmFtIHtudW1iZXJ9IG4gKi9cbiAgICBwbHVyYWxfZm9ybXMobikge1xuICAgICAgcmV0dXJuIG4gPT09IDEgPyAwIDogMTtcbiAgICB9XG5cbiAgfVxufTtcbi8qXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGkxOG4gaG9va3MgbGlrZSBgaTE4bi5nZXR0ZXh0YCwgYGkxOG4ubmdldHRleHRgLFxuICogYGkxOG4uZ2V0dGV4dF9kb21haW5gIG9yIGBpMThuLm5nZXR0ZXh0X3dpdGhfY29udGV4dGAgb3IgYGkxOG4uaGFzX3RyYW5zbGF0aW9uYC5cbiAqL1xuXG5jb25zdCBJMThOX0hPT0tfUkVHRVhQID0gL15pMThuXFwuKG4/Z2V0dGV4dHxoYXNfdHJhbnNsYXRpb24pKF98JCkvO1xuLyoqXG4gKiBAdHlwZWRlZiB7KGRvbWFpbj86IHN0cmluZykgPT4gTG9jYWxlRGF0YX0gR2V0TG9jYWxlRGF0YVxuICpcbiAqIFJldHVybnMgbG9jYWxlIGRhdGEgYnkgZG9tYWluIGluIGFcbiAqIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhkYXRhPzogTG9jYWxlRGF0YSwgZG9tYWluPzogc3RyaW5nKSA9PiB2b2lkfSBTZXRMb2NhbGVEYXRhXG4gKlxuICogTWVyZ2VzIGxvY2FsZSBkYXRhIGludG8gdGhlIFRhbm5pbiBpbnN0YW5jZSBieSBkb21haW4uIE5vdGUgdGhhdCB0aGlzXG4gKiBmdW5jdGlvbiB3aWxsIG92ZXJ3cml0ZSB0aGUgZG9tYWluIGNvbmZpZ3VyYXRpb24uIEFjY2VwdHMgZGF0YSBpbiBhXG4gKiBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICpcbiAqIEBzZWUgaHR0cDovL21lc3NhZ2Vmb3JtYXQuZ2l0aHViLmlvL0plZC9cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoZGF0YT86IExvY2FsZURhdGEsIGRvbWFpbj86IHN0cmluZykgPT4gdm9pZH0gQWRkTG9jYWxlRGF0YVxuICpcbiAqIE1lcmdlcyBsb2NhbGUgZGF0YSBpbnRvIHRoZSBUYW5uaW4gaW5zdGFuY2UgYnkgZG9tYWluLiBOb3RlIHRoYXQgdGhpc1xuICogZnVuY3Rpb24gd2lsbCBhbHNvIG1lcmdlIHRoZSBkb21haW4gY29uZmlndXJhdGlvbi4gQWNjZXB0cyBkYXRhIGluIGFcbiAqIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhkYXRhPzogTG9jYWxlRGF0YSwgZG9tYWluPzogc3RyaW5nKSA9PiB2b2lkfSBSZXNldExvY2FsZURhdGFcbiAqXG4gKiBSZXNldHMgYWxsIGN1cnJlbnQgVGFubmluIGluc3RhbmNlIGxvY2FsZSBkYXRhIGFuZCBzZXRzIHRoZSBzcGVjaWZpZWRcbiAqIGxvY2FsZSBkYXRhIGZvciB0aGUgZG9tYWluLiBBY2NlcHRzIGRhdGEgaW4gYSBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICpcbiAqIEBzZWUgaHR0cDovL21lc3NhZ2Vmb3JtYXQuZ2l0aHViLmlvL0plZC9cbiAqL1xuXG4vKiogQHR5cGVkZWYgeygpID0+IHZvaWR9IFN1YnNjcmliZUNhbGxiYWNrICovXG5cbi8qKiBAdHlwZWRlZiB7KCkgPT4gdm9pZH0gVW5zdWJzY3JpYmVDYWxsYmFjayAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoY2FsbGJhY2s6IFN1YnNjcmliZUNhbGxiYWNrKSA9PiBVbnN1YnNjcmliZUNhbGxiYWNrfSBTdWJzY3JpYmVcbiAqXG4gKiBTdWJzY3JpYmVzIHRvIGNoYW5nZXMgb2YgbG9jYWxlIGRhdGFcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoZG9tYWluPzogc3RyaW5nKSA9PiBzdHJpbmd9IEdldEZpbHRlckRvbWFpblxuICogUmV0cmlldmUgdGhlIGRvbWFpbiB0byB1c2Ugd2hlbiBjYWxsaW5nIGRvbWFpbi1zcGVjaWZpYyBmaWx0ZXJzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyh0ZXh0OiBzdHJpbmcsIGRvbWFpbj86IHN0cmluZykgPT4gc3RyaW5nfSBfX1xuICpcbiAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGlvbiBvZiB0ZXh0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZWZlcmVuY2UvZnVuY3Rpb25zL19fL1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyh0ZXh0OiBzdHJpbmcsIGNvbnRleHQ6IHN0cmluZywgZG9tYWluPzogc3RyaW5nKSA9PiBzdHJpbmd9IF94XG4gKlxuICogUmV0cmlldmUgdHJhbnNsYXRlZCBzdHJpbmcgd2l0aCBnZXR0ZXh0IGNvbnRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX3gvXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KHNpbmdsZTogc3RyaW5nLCBwbHVyYWw6IHN0cmluZywgbnVtYmVyOiBudW1iZXIsIGRvbWFpbj86IHN0cmluZykgPT4gc3RyaW5nfSBfblxuICpcbiAqIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX24vXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KHNpbmdsZTogc3RyaW5nLCBwbHVyYWw6IHN0cmluZywgbnVtYmVyOiBudW1iZXIsIGNvbnRleHQ6IHN0cmluZywgZG9tYWluPzogc3RyaW5nKSA9PiBzdHJpbmd9IF9ueFxuICpcbiAqIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiBudW1iZXIsIHdpdGggZ2V0dGV4dCBjb250ZXh0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZWZlcmVuY2UvZnVuY3Rpb25zL19ueC9cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoKSA9PiBib29sZWFufSBJc1J0bFxuICpcbiAqIENoZWNrIGlmIGN1cnJlbnQgbG9jYWxlIGlzIFJUTC5cbiAqXG4gKiAqKlJUTCAoUmlnaHQgVG8gTGVmdCkqKiBpcyBhIGxvY2FsZSBwcm9wZXJ0eSBpbmRpY2F0aW5nIHRoYXQgdGV4dCBpcyB3cml0dGVuIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEZvciBleGFtcGxlLCB0aGUgYGhlYCBsb2NhbGUgKGZvciBIZWJyZXcpIHNwZWNpZmllcyByaWdodC10by1sZWZ0LiBBcmFiaWMgKGFyKSBpcyBhbm90aGVyIGNvbW1vblxuICogbGFuZ3VhZ2Ugd3JpdHRlbiBSVEwuIFRoZSBvcHBvc2l0ZSBvZiBSVEwsIExUUiAoTGVmdCBUbyBSaWdodCkgaXMgdXNlZCBpbiBvdGhlciBsYW5ndWFnZXMsXG4gKiBpbmNsdWRpbmcgRW5nbGlzaCAoYGVuYCwgYGVuLVVTYCwgYGVuLUdCYCwgZXRjLiksIFNwYW5pc2ggKGBlc2ApLCBhbmQgRnJlbmNoIChgZnJgKS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoc2luZ2xlOiBzdHJpbmcsIGNvbnRleHQ/OiBzdHJpbmcsIGRvbWFpbj86IHN0cmluZykgPT4gYm9vbGVhbn0gSGFzVHJhbnNsYXRpb25cbiAqXG4gKiBDaGVjayBpZiB0aGVyZSBpcyBhIHRyYW5zbGF0aW9uIGZvciBhIGdpdmVuIHN0cmluZyBpbiBzaW5ndWxhciBmb3JtLlxuICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdAd29yZHByZXNzL2hvb2tzJykuSG9va3N9IEhvb2tzICovXG5cbi8qKlxuICogQW4gaTE4biBpbnN0YW5jZVxuICpcbiAqIEB0eXBlZGVmIEkxOG5cbiAqIEBwcm9wZXJ0eSB7R2V0TG9jYWxlRGF0YX0gICBnZXRMb2NhbGVEYXRhICAgUmV0dXJucyBsb2NhbGUgZGF0YSBieSBkb21haW4gaW4gYSBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICogQHByb3BlcnR5IHtTZXRMb2NhbGVEYXRhfSAgIHNldExvY2FsZURhdGEgICBNZXJnZXMgbG9jYWxlIGRhdGEgaW50byB0aGUgVGFubmluIGluc3RhbmNlIGJ5IGRvbWFpbi4gTm90ZSB0aGF0IHRoaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd2lsbCBvdmVyd3JpdGUgdGhlIGRvbWFpbiBjb25maWd1cmF0aW9uLiBBY2NlcHRzIGRhdGEgaW4gYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICogQHByb3BlcnR5IHtBZGRMb2NhbGVEYXRhfSAgIGFkZExvY2FsZURhdGEgICBNZXJnZXMgbG9jYWxlIGRhdGEgaW50byB0aGUgVGFubmluIGluc3RhbmNlIGJ5IGRvbWFpbi4gTm90ZSB0aGF0IHRoaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd2lsbCBhbHNvIG1lcmdlIHRoZSBkb21haW4gY29uZmlndXJhdGlvbi4gQWNjZXB0cyBkYXRhIGluIGFcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSmVkLWZvcm1hdHRlZCBKU09OIG9iamVjdCBzaGFwZS5cbiAqIEBwcm9wZXJ0eSB7UmVzZXRMb2NhbGVEYXRhfSByZXNldExvY2FsZURhdGEgUmVzZXRzIGFsbCBjdXJyZW50IFRhbm5pbiBpbnN0YW5jZSBsb2NhbGUgZGF0YSBhbmQgc2V0cyB0aGUgc3BlY2lmaWVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZSBkYXRhIGZvciB0aGUgZG9tYWluLiBBY2NlcHRzIGRhdGEgaW4gYSBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICogQHByb3BlcnR5IHtTdWJzY3JpYmV9ICAgICAgIHN1YnNjcmliZSAgICAgICBTdWJzY3JpYmVzIHRvIGNoYW5nZXMgb2YgVGFubmluIGxvY2FsZSBkYXRhLlxuICogQHByb3BlcnR5IHtfX30gICAgICAgICAgICAgIF9fICAgICAgICAgICAgICBSZXRyaWV2ZSB0aGUgdHJhbnNsYXRpb24gb2YgdGV4dC5cbiAqIEBwcm9wZXJ0eSB7X3h9ICAgICAgICAgICAgICBfeCAgICAgICAgICAgICAgUmV0cmlldmUgdHJhbnNsYXRlZCBzdHJpbmcgd2l0aCBnZXR0ZXh0IGNvbnRleHQuXG4gKiBAcHJvcGVydHkge19ufSAgICAgICAgICAgICAgX24gICAgICAgICAgICAgIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7X254fSAgICAgICAgICAgICBfbnggICAgICAgICAgICAgVHJhbnNsYXRlcyBhbmQgcmV0cmlldmVzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybSBiYXNlZCBvbiB0aGUgc3VwcGxpZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyLCB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqIEBwcm9wZXJ0eSB7SXNSdGx9ICAgICAgICAgICBpc1JUTCAgICAgICAgICAgQ2hlY2sgaWYgY3VycmVudCBsb2NhbGUgaXMgUlRMLlxuICogQHByb3BlcnR5IHtIYXNUcmFuc2xhdGlvbn0gIGhhc1RyYW5zbGF0aW9uICBDaGVjayBpZiB0aGVyZSBpcyBhIHRyYW5zbGF0aW9uIGZvciBhIGdpdmVuIHN0cmluZy5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpMThuIGluc3RhbmNlXG4gKlxuICogQHBhcmFtIHtMb2NhbGVEYXRhfSBbaW5pdGlhbERhdGFdICAgTG9jYWxlIGRhdGEgY29uZmlndXJhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgICAgW2luaXRpYWxEb21haW5dIERvbWFpbiBmb3Igd2hpY2ggY29uZmlndXJhdGlvbiBhcHBsaWVzLlxuICogQHBhcmFtIHtIb29rc30gICAgICBbaG9va3NdICAgICAgICAgSG9va3MgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHJldHVybiB7STE4bn0gSTE4biBpbnN0YW5jZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgY3JlYXRlSTE4biA9IChpbml0aWFsRGF0YSwgaW5pdGlhbERvbWFpbiwgaG9va3MpID0+IHtcbiAgLyoqXG4gICAqIFRoZSB1bmRlcmx5aW5nIGluc3RhbmNlIG9mIFRhbm5pbiB0byB3aGljaCBleHBvcnRlZCBmdW5jdGlvbnMgaW50ZXJmYWNlLlxuICAgKlxuICAgKiBAdHlwZSB7VGFubmlufVxuICAgKi9cbiAgY29uc3QgdGFubmluID0gbmV3IFRhbm5pbih7fSk7XG4gIGNvbnN0IGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcblxuICBjb25zdCBub3RpZnlMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSk7XG4gIH07XG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gY2hhbmdlcyBvZiBsb2NhbGUgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtTdWJzY3JpYmVDYWxsYmFja30gY2FsbGJhY2sgU3Vic2NyaXB0aW9uIGNhbGxiYWNrLlxuICAgKiBAcmV0dXJuIHtVbnN1YnNjcmliZUNhbGxiYWNrfSBVbnN1YnNjcmliZSBjYWxsYmFjay5cbiAgICovXG5cblxuICBjb25zdCBzdWJzY3JpYmUgPSBjYWxsYmFjayA9PiB7XG4gICAgbGlzdGVuZXJzLmFkZChjYWxsYmFjayk7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVycy5kZWxldGUoY2FsbGJhY2spO1xuICB9O1xuICAvKiogQHR5cGUge0dldExvY2FsZURhdGF9ICovXG5cblxuICBjb25zdCBnZXRMb2NhbGVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkZWZhdWx0JztcbiAgICByZXR1cm4gdGFubmluLmRhdGFbZG9tYWluXTtcbiAgfTtcbiAgLyoqXG4gICAqIEBwYXJhbSB7TG9jYWxlRGF0YX0gW2RhdGFdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgW2RvbWFpbl1cbiAgICovXG5cblxuICBjb25zdCBkb1NldExvY2FsZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBfdGFubmluJGRhdGEkZG9tYWluO1xuXG4gICAgbGV0IGRvbWFpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuICAgIHRhbm5pbi5kYXRhW2RvbWFpbl0gPSB7IC4uLnRhbm5pbi5kYXRhW2RvbWFpbl0sXG4gICAgICAuLi5kYXRhXG4gICAgfTsgLy8gUG9wdWxhdGUgZGVmYXVsdCBkb21haW4gY29uZmlndXJhdGlvbiAoc3VwcG9ydGVkIGxvY2FsZSBkYXRlIHdoaWNoIG9taXRzXG4gICAgLy8gYSBwbHVyYWwgZm9ybXMgZXhwcmVzc2lvbikuXG5cbiAgICB0YW5uaW4uZGF0YVtkb21haW5dWycnXSA9IHsgLi4uREVGQVVMVF9MT0NBTEVfREFUQVsnJ10sXG4gICAgICAuLi4oKF90YW5uaW4kZGF0YSRkb21haW4gPSB0YW5uaW4uZGF0YVtkb21haW5dKSA9PT0gbnVsbCB8fCBfdGFubmluJGRhdGEkZG9tYWluID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGFubmluJGRhdGEkZG9tYWluWycnXSlcbiAgICB9OyAvLyBDbGVhbiB1cCBjYWNoZWQgcGx1cmFsIGZvcm1zIGZ1bmN0aW9ucyBjYWNoZSBhcyBpdCBtaWdodCBiZSB1cGRhdGVkLlxuXG4gICAgZGVsZXRlIHRhbm5pbi5wbHVyYWxGb3Jtc1tkb21haW5dO1xuICB9O1xuICAvKiogQHR5cGUge1NldExvY2FsZURhdGF9ICovXG5cblxuICBjb25zdCBzZXRMb2NhbGVEYXRhID0gKGRhdGEsIGRvbWFpbikgPT4ge1xuICAgIGRvU2V0TG9jYWxlRGF0YShkYXRhLCBkb21haW4pO1xuICAgIG5vdGlmeUxpc3RlbmVycygpO1xuICB9O1xuICAvKiogQHR5cGUge0FkZExvY2FsZURhdGF9ICovXG5cblxuICBjb25zdCBhZGRMb2NhbGVEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgX3Rhbm5pbiRkYXRhJGRvbWFpbjI7XG5cbiAgICBsZXQgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZGVmYXVsdCc7XG4gICAgdGFubmluLmRhdGFbZG9tYWluXSA9IHsgLi4udGFubmluLmRhdGFbZG9tYWluXSxcbiAgICAgIC4uLmRhdGEsXG4gICAgICAvLyBQb3B1bGF0ZSBkZWZhdWx0IGRvbWFpbiBjb25maWd1cmF0aW9uIChzdXBwb3J0ZWQgbG9jYWxlIGRhdGUgd2hpY2ggb21pdHNcbiAgICAgIC8vIGEgcGx1cmFsIGZvcm1zIGV4cHJlc3Npb24pLlxuICAgICAgJyc6IHsgLi4uREVGQVVMVF9MT0NBTEVfREFUQVsnJ10sXG4gICAgICAgIC4uLigoX3Rhbm5pbiRkYXRhJGRvbWFpbjIgPSB0YW5uaW4uZGF0YVtkb21haW5dKSA9PT0gbnVsbCB8fCBfdGFubmluJGRhdGEkZG9tYWluMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Rhbm5pbiRkYXRhJGRvbWFpbjJbJyddKSxcbiAgICAgICAgLi4uKGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YVsnJ10pXG4gICAgICB9XG4gICAgfTsgLy8gQ2xlYW4gdXAgY2FjaGVkIHBsdXJhbCBmb3JtcyBmdW5jdGlvbnMgY2FjaGUgYXMgaXQgbWlnaHQgYmUgdXBkYXRlZC5cblxuICAgIGRlbGV0ZSB0YW5uaW4ucGx1cmFsRm9ybXNbZG9tYWluXTtcbiAgICBub3RpZnlMaXN0ZW5lcnMoKTtcbiAgfTtcbiAgLyoqIEB0eXBlIHtSZXNldExvY2FsZURhdGF9ICovXG5cblxuICBjb25zdCByZXNldExvY2FsZURhdGEgPSAoZGF0YSwgZG9tYWluKSA9PiB7XG4gICAgLy8gUmVzZXQgYWxsIGN1cnJlbnQgVGFubmluIGxvY2FsZSBkYXRhLlxuICAgIHRhbm5pbi5kYXRhID0ge307IC8vIFJlc2V0IGNhY2hlZCBwbHVyYWwgZm9ybXMgZnVuY3Rpb25zIGNhY2hlLlxuXG4gICAgdGFubmluLnBsdXJhbEZvcm1zID0ge307XG4gICAgc2V0TG9jYWxlRGF0YShkYXRhLCBkb21haW4pO1xuICB9O1xuICAvKipcbiAgICogV3JhcHBlciBmb3IgVGFubmluJ3MgYGRjbnBnZXR0ZXh0YC4gUG9wdWxhdGVzIGRlZmF1bHQgbG9jYWxlIGRhdGEgaWYgbm90XG4gICAqIG90aGVyd2lzZSBwcmV2aW91c2x5IGFzc2lnbmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IGRvbWFpbiAgIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICAgKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IGNvbnRleHQgIENvbnRleHQgaW5mb3JtYXRpb24gZm9yIHRoZSB0cmFuc2xhdG9ycy5cbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICBzaW5nbGUgICBUZXh0IHRvIHRyYW5zbGF0ZSBpZiBub24tcGx1cmFsLiBVc2VkIGFzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2sgcmV0dXJuIHZhbHVlIG9uIGEgY2F1Z2h0IGVycm9yLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgIFtwbHVyYWxdIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdXJhbC5cbiAgICogQHBhcmFtIHtudW1iZXJ9ICAgICAgICAgICBbbnVtYmVyXSBUaGUgbnVtYmVyIHRvIGNvbXBhcmUgYWdhaW5zdCB0byB1c2VcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cmFuc2xhdGVkIHN0cmluZy5cbiAgICovXG5cblxuICBjb25zdCBkY25wZ2V0dGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG4gICAgbGV0IGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgc2luZ2xlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IHBsdXJhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICAgIGxldCBudW1iZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcblxuICAgIGlmICghdGFubmluLmRhdGFbZG9tYWluXSkge1xuICAgICAgLy8gVXNlIGBkb1NldExvY2FsZURhdGFgIHRvIHNldCBzaWxlbnRseSwgd2l0aG91dCBub3RpZnlpbmcgbGlzdGVuZXJzLlxuICAgICAgZG9TZXRMb2NhbGVEYXRhKHVuZGVmaW5lZCwgZG9tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFubmluLmRjbnBnZXR0ZXh0KGRvbWFpbiwgY29udGV4dCwgc2luZ2xlLCBwbHVyYWwsIG51bWJlcik7XG4gIH07XG4gIC8qKiBAdHlwZSB7R2V0RmlsdGVyRG9tYWlufSAqL1xuXG5cbiAgY29uc3QgZ2V0RmlsdGVyRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkZWZhdWx0JztcbiAgICByZXR1cm4gZG9tYWluO1xuICB9O1xuICAvKiogQHR5cGUge19ffSAqL1xuXG5cbiAgY29uc3QgX18gPSAodGV4dCwgZG9tYWluKSA9PiB7XG4gICAgbGV0IHRyYW5zbGF0aW9uID0gZGNucGdldHRleHQoZG9tYWluLCB1bmRlZmluZWQsIHRleHQpO1xuXG4gICAgaWYgKCFob29rcykge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRleHQgd2l0aCBpdHMgdHJhbnNsYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb24gVHJhbnNsYXRlZCB0ZXh0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICAgICAgICBUZXh0IHRvIHRyYW5zbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluICAgICAgVGV4dCBkb21haW4uIFVuaXF1ZSBpZGVudGlmaWVyIGZvciByZXRyaWV2aW5nIHRyYW5zbGF0ZWQgc3RyaW5ncy5cbiAgICAgKi9cblxuXG4gICAgdHJhbnNsYXRpb24gPVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5nZXR0ZXh0JywgdHJhbnNsYXRpb24sIHRleHQsIGRvbWFpbik7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgICAvKiogQHR5cGUgeyp9ICovXG4gICAgICBob29rcy5hcHBseUZpbHRlcnMoJ2kxOG4uZ2V0dGV4dF8nICsgZ2V0RmlsdGVyRG9tYWluKGRvbWFpbiksIHRyYW5zbGF0aW9uLCB0ZXh0LCBkb21haW4pXG4gICAgKTtcbiAgfTtcbiAgLyoqIEB0eXBlIHtfeH0gKi9cblxuXG4gIGNvbnN0IF94ID0gKHRleHQsIGNvbnRleHQsIGRvbWFpbikgPT4ge1xuICAgIGxldCB0cmFuc2xhdGlvbiA9IGRjbnBnZXR0ZXh0KGRvbWFpbiwgY29udGV4dCwgdGV4dCk7XG5cbiAgICBpZiAoIWhvb2tzKSB7XG4gICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGV4dCB3aXRoIGl0cyB0cmFuc2xhdGlvbiBiYXNlZCBvbiBjb250ZXh0IGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zbGF0aW9uIFRyYW5zbGF0ZWQgdGV4dC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAgICAgICAgVGV4dCB0byB0cmFuc2xhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHQgICAgIENvbnRleHQgaW5mb3JtYXRpb24gZm9yIHRoZSB0cmFuc2xhdG9ycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluICAgICAgVGV4dCBkb21haW4uIFVuaXF1ZSBpZGVudGlmaWVyIGZvciByZXRyaWV2aW5nIHRyYW5zbGF0ZWQgc3RyaW5ncy5cbiAgICAgKi9cblxuXG4gICAgdHJhbnNsYXRpb24gPVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5nZXR0ZXh0X3dpdGhfY29udGV4dCcsIHRyYW5zbGF0aW9uLCB0ZXh0LCBjb250ZXh0LCBkb21haW4pO1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICAgICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgICAgaG9va3MuYXBwbHlGaWx0ZXJzKCdpMThuLmdldHRleHRfd2l0aF9jb250ZXh0XycgKyBnZXRGaWx0ZXJEb21haW4oZG9tYWluKSwgdHJhbnNsYXRpb24sIHRleHQsIGNvbnRleHQsIGRvbWFpbilcbiAgICApO1xuICB9O1xuICAvKiogQHR5cGUge19ufSAqL1xuXG5cbiAgY29uc3QgX24gPSAoc2luZ2xlLCBwbHVyYWwsIG51bWJlciwgZG9tYWluKSA9PiB7XG4gICAgbGV0IHRyYW5zbGF0aW9uID0gZGNucGdldHRleHQoZG9tYWluLCB1bmRlZmluZWQsIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIpO1xuXG4gICAgaWYgKCFob29rcykge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybSBvZiBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2xhdGlvbiBUcmFuc2xhdGVkIHRleHQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNpbmdsZSAgICAgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBzaW5ndWxhci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1cmFsICAgICAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbnVtYmVyICAgICAgVGhlIG51bWJlciB0byBjb21wYXJlIGFnYWluc3QgdG8gdXNlIGVpdGhlciB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRvbWFpbiAgICAgIFRleHQgZG9tYWluLiBVbmlxdWUgaWRlbnRpZmllciBmb3IgcmV0cmlldmluZyB0cmFuc2xhdGVkIHN0cmluZ3MuXG4gICAgICovXG5cblxuICAgIHRyYW5zbGF0aW9uID1cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICBob29rcy5hcHBseUZpbHRlcnMoJ2kxOG4ubmdldHRleHQnLCB0cmFuc2xhdGlvbiwgc2luZ2xlLCBwbHVyYWwsIG51bWJlciwgZG9tYWluKTtcbiAgICByZXR1cm4gKFxuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5uZ2V0dGV4dF8nICsgZ2V0RmlsdGVyRG9tYWluKGRvbWFpbiksIHRyYW5zbGF0aW9uLCBzaW5nbGUsIHBsdXJhbCwgbnVtYmVyLCBkb21haW4pXG4gICAgKTtcbiAgfTtcbiAgLyoqIEB0eXBlIHtfbnh9ICovXG5cblxuICBjb25zdCBfbnggPSAoc2luZ2xlLCBwbHVyYWwsIG51bWJlciwgY29udGV4dCwgZG9tYWluKSA9PiB7XG4gICAgbGV0IHRyYW5zbGF0aW9uID0gZGNucGdldHRleHQoZG9tYWluLCBjb250ZXh0LCBzaW5nbGUsIHBsdXJhbCwgbnVtYmVyKTtcblxuICAgIGlmICghaG9va3MpIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVycyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gb2YgYSBzdHJpbmcgd2l0aCBnZXR0ZXh0IGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb24gVHJhbnNsYXRlZCB0ZXh0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaW5nbGUgICAgICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgc2luZ3VsYXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBsdXJhbCAgICAgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBwbHVyYWwuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG51bWJlciAgICAgIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0ICAgICBDb250ZXh0IGluZm9ybWF0aW9uIGZvciB0aGUgdHJhbnNsYXRvcnMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRvbWFpbiAgICAgIFRleHQgZG9tYWluLiBVbmlxdWUgaWRlbnRpZmllciBmb3IgcmV0cmlldmluZyB0cmFuc2xhdGVkIHN0cmluZ3MuXG4gICAgICovXG5cblxuICAgIHRyYW5zbGF0aW9uID1cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICBob29rcy5hcHBseUZpbHRlcnMoJ2kxOG4ubmdldHRleHRfd2l0aF9jb250ZXh0JywgdHJhbnNsYXRpb24sIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIsIGNvbnRleHQsIGRvbWFpbik7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgICAvKiogQHR5cGUgeyp9ICovXG4gICAgICBob29rcy5hcHBseUZpbHRlcnMoJ2kxOG4ubmdldHRleHRfd2l0aF9jb250ZXh0XycgKyBnZXRGaWx0ZXJEb21haW4oZG9tYWluKSwgdHJhbnNsYXRpb24sIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIsIGNvbnRleHQsIGRvbWFpbilcbiAgICApO1xuICB9O1xuICAvKiogQHR5cGUge0lzUnRsfSAqL1xuXG5cbiAgY29uc3QgaXNSVEwgPSAoKSA9PiB7XG4gICAgcmV0dXJuICdydGwnID09PSBfeCgnbHRyJywgJ3RleHQgZGlyZWN0aW9uJyk7XG4gIH07XG4gIC8qKiBAdHlwZSB7SGFzVHJhbnNsYXRpb259ICovXG5cblxuICBjb25zdCBoYXNUcmFuc2xhdGlvbiA9IChzaW5nbGUsIGNvbnRleHQsIGRvbWFpbikgPT4ge1xuICAgIHZhciBfdGFubmluJGRhdGEsIF90YW5uaW4kZGF0YTI7XG5cbiAgICBjb25zdCBrZXkgPSBjb250ZXh0ID8gY29udGV4dCArICdcXHUwMDA0JyArIHNpbmdsZSA6IHNpbmdsZTtcbiAgICBsZXQgcmVzdWx0ID0gISEoKF90YW5uaW4kZGF0YSA9IHRhbm5pbi5kYXRhKSAhPT0gbnVsbCAmJiBfdGFubmluJGRhdGEgIT09IHZvaWQgMCAmJiAoX3Rhbm5pbiRkYXRhMiA9IF90YW5uaW4kZGF0YVtkb21haW4gIT09IG51bGwgJiYgZG9tYWluICE9PSB2b2lkIDAgPyBkb21haW4gOiAnZGVmYXVsdCddKSAhPT0gbnVsbCAmJiBfdGFubmluJGRhdGEyICE9PSB2b2lkIDAgJiYgX3Rhbm5pbiRkYXRhMltrZXldKTtcblxuICAgIGlmIChob29rcykge1xuICAgICAgLyoqXG4gICAgICAgKiBGaWx0ZXJzIHRoZSBwcmVzZW5jZSBvZiBhIHRyYW5zbGF0aW9uIGluIHRoZSBsb2NhbGUgZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1RyYW5zbGF0aW9uIFdoZXRoZXIgdGhlIHRyYW5zbGF0aW9uIGlzIHByZXNlbnQgb3Igbm90Li5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgc2luZ2xlICAgICAgICAgVGhlIHNpbmd1bGFyIGZvcm0gb2YgdGhlIHRyYW5zbGF0ZWQgdGV4dCAodXNlZCBhcyBrZXkgaW4gbG9jYWxlIGRhdGEpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gIGNvbnRleHQgICAgICAgIENvbnRleHQgaW5mb3JtYXRpb24gZm9yIHRoZSB0cmFuc2xhdG9ycy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgZG9tYWluICAgICAgICAgVGV4dCBkb21haW4uIFVuaXF1ZSBpZGVudGlmaWVyIGZvciByZXRyaWV2aW5nIHRyYW5zbGF0ZWQgc3RyaW5ncy5cbiAgICAgICAqL1xuICAgICAgcmVzdWx0ID1cbiAgICAgIC8qKiBAdHlwZSB7IGJvb2xlYW4gfSAqL1xuXG4gICAgICAvKiogQHR5cGUgeyp9ICovXG4gICAgICBob29rcy5hcHBseUZpbHRlcnMoJ2kxOG4uaGFzX3RyYW5zbGF0aW9uJywgcmVzdWx0LCBzaW5nbGUsIGNvbnRleHQsIGRvbWFpbik7XG4gICAgICByZXN1bHQgPVxuICAgICAgLyoqIEB0eXBlIHsgYm9vbGVhbiB9ICovXG5cbiAgICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5oYXNfdHJhbnNsYXRpb25fJyArIGdldEZpbHRlckRvbWFpbihkb21haW4pLCByZXN1bHQsIHNpbmdsZSwgY29udGV4dCwgZG9tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGlmIChpbml0aWFsRGF0YSkge1xuICAgIHNldExvY2FsZURhdGEoaW5pdGlhbERhdGEsIGluaXRpYWxEb21haW4pO1xuICB9XG5cbiAgaWYgKGhvb2tzKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhvb2tOYW1lXG4gICAgICovXG4gICAgY29uc3Qgb25Ib29rQWRkZWRPclJlbW92ZWQgPSBob29rTmFtZSA9PiB7XG4gICAgICBpZiAoSTE4Tl9IT09LX1JFR0VYUC50ZXN0KGhvb2tOYW1lKSkge1xuICAgICAgICBub3RpZnlMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaG9va3MuYWRkQWN0aW9uKCdob29rQWRkZWQnLCAnY29yZS9pMThuJywgb25Ib29rQWRkZWRPclJlbW92ZWQpO1xuICAgIGhvb2tzLmFkZEFjdGlvbignaG9va1JlbW92ZWQnLCAnY29yZS9pMThuJywgb25Ib29rQWRkZWRPclJlbW92ZWQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRMb2NhbGVEYXRhLFxuICAgIHNldExvY2FsZURhdGEsXG4gICAgYWRkTG9jYWxlRGF0YSxcbiAgICByZXNldExvY2FsZURhdGEsXG4gICAgc3Vic2NyaWJlLFxuICAgIF9fLFxuICAgIF94LFxuICAgIF9uLFxuICAgIF9ueCxcbiAgICBpc1JUTCxcbiAgICBoYXNUcmFuc2xhdGlvblxuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS1pMThuLmpzLm1hcCIsIi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNyZWF0ZUkxOG4gfSBmcm9tICcuL2NyZWF0ZS1pMThuJztcbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5cbmltcG9ydCB7IGRlZmF1bHRIb29rcyB9IGZyb20gJ0B3b3JkcHJlc3MvaG9va3MnO1xuY29uc3QgaTE4biA9IGNyZWF0ZUkxOG4odW5kZWZpbmVkLCB1bmRlZmluZWQsIGRlZmF1bHRIb29rcyk7XG4vKipcbiAqIERlZmF1bHQsIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBgSTE4bmAuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgaTE4bjtcbi8qXG4gKiBDb21tZW50cyBpbiB0aGlzIGZpbGUgYXJlIGR1cGxpY2F0ZWQgZnJvbSAuL2kxOG4gZHVlIHRvXG4gKiBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9wdWxsLzIwMzE4I2lzc3VlY29tbWVudC01OTA4Mzc3MjJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vY3JlYXRlLWkxOG4nKS5Mb2NhbGVEYXRhfSBMb2NhbGVEYXRhXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NyZWF0ZS1pMThuJykuU3Vic2NyaWJlQ2FsbGJhY2t9IFN1YnNjcmliZUNhbGxiYWNrXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NyZWF0ZS1pMThuJykuVW5zdWJzY3JpYmVDYWxsYmFja30gVW5zdWJzY3JpYmVDYWxsYmFja1xuICovXG5cbi8qKlxuICogUmV0dXJucyBsb2NhbGUgZGF0YSBieSBkb21haW4gaW4gYSBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICpcbiAqIEBzZWUgaHR0cDovL21lc3NhZ2Vmb3JtYXQuZ2l0aHViLmlvL0plZC9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gRG9tYWluIGZvciB3aGljaCB0byBnZXQgdGhlIGRhdGEuXG4gKiBAcmV0dXJuIHtMb2NhbGVEYXRhfSBMb2NhbGUgZGF0YS5cbiAqL1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYWxlRGF0YSA9IGkxOG4uZ2V0TG9jYWxlRGF0YS5iaW5kKGkxOG4pO1xuLyoqXG4gKiBNZXJnZXMgbG9jYWxlIGRhdGEgaW50byB0aGUgVGFubmluIGluc3RhbmNlIGJ5IGRvbWFpbi4gQWNjZXB0cyBkYXRhIGluIGFcbiAqIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICpcbiAqIEBwYXJhbSB7TG9jYWxlRGF0YX0gW2RhdGFdICAgTG9jYWxlIGRhdGEgY29uZmlndXJhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgICAgW2RvbWFpbl0gRG9tYWluIGZvciB3aGljaCBjb25maWd1cmF0aW9uIGFwcGxpZXMuXG4gKi9cblxuZXhwb3J0IGNvbnN0IHNldExvY2FsZURhdGEgPSBpMThuLnNldExvY2FsZURhdGEuYmluZChpMThuKTtcbi8qKlxuICogUmVzZXRzIGFsbCBjdXJyZW50IFRhbm5pbiBpbnN0YW5jZSBsb2NhbGUgZGF0YSBhbmQgc2V0cyB0aGUgc3BlY2lmaWVkXG4gKiBsb2NhbGUgZGF0YSBmb3IgdGhlIGRvbWFpbi4gQWNjZXB0cyBkYXRhIGluIGEgSmVkLWZvcm1hdHRlZCBKU09OIG9iamVjdCBzaGFwZS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9tZXNzYWdlZm9ybWF0LmdpdGh1Yi5pby9KZWQvXG4gKlxuICogQHBhcmFtIHtMb2NhbGVEYXRhfSBbZGF0YV0gICBMb2NhbGUgZGF0YSBjb25maWd1cmF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9ICAgICBbZG9tYWluXSBEb21haW4gZm9yIHdoaWNoIGNvbmZpZ3VyYXRpb24gYXBwbGllcy5cbiAqL1xuXG5leHBvcnQgY29uc3QgcmVzZXRMb2NhbGVEYXRhID0gaTE4bi5yZXNldExvY2FsZURhdGEuYmluZChpMThuKTtcbi8qKlxuICogU3Vic2NyaWJlcyB0byBjaGFuZ2VzIG9mIGxvY2FsZSBkYXRhXG4gKlxuICogQHBhcmFtIHtTdWJzY3JpYmVDYWxsYmFja30gY2FsbGJhY2sgU3Vic2NyaXB0aW9uIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtVbnN1YnNjcmliZUNhbGxiYWNrfSBVbnN1YnNjcmliZSBjYWxsYmFja1xuICovXG5cbmV4cG9ydCBjb25zdCBzdWJzY3JpYmUgPSBpMThuLnN1YnNjcmliZS5iaW5kKGkxOG4pO1xuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgdHJhbnNsYXRpb24gb2YgdGV4dC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9fXy9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAgICAgVGV4dCB0byB0cmFuc2xhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUcmFuc2xhdGVkIHRleHQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IF9fID0gaTE4bi5fXy5iaW5kKGkxOG4pO1xuLyoqXG4gKiBSZXRyaWV2ZSB0cmFuc2xhdGVkIHN0cmluZyB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9feC9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAgICAgVGV4dCB0byB0cmFuc2xhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dCAgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtkb21haW5dIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVHJhbnNsYXRlZCBjb250ZXh0IHN0cmluZyB3aXRob3V0IHBpcGUuXG4gKi9cblxuZXhwb3J0IGNvbnN0IF94ID0gaTE4bi5feC5iaW5kKGkxOG4pO1xuLyoqXG4gKiBUcmFuc2xhdGVzIGFuZCByZXRyaWV2ZXMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtIGJhc2VkIG9uIHRoZSBzdXBwbGllZFxuICogbnVtYmVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZWZlcmVuY2UvZnVuY3Rpb25zL19uL1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzaW5nbGUgICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgc2luZ3VsYXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGx1cmFsICAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgICBUaGUgbnVtYmVyIHRvIGNvbXBhcmUgYWdhaW5zdCB0byB1c2UgZWl0aGVyIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtLlxuICogQHBhcmFtIHtzdHJpbmd9IFtkb21haW5dIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKi9cblxuZXhwb3J0IGNvbnN0IF9uID0gaTE4bi5fbi5iaW5kKGkxOG4pO1xuLyoqXG4gKiBUcmFuc2xhdGVzIGFuZCByZXRyaWV2ZXMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtIGJhc2VkIG9uIHRoZSBzdXBwbGllZFxuICogbnVtYmVyLCB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9fbngvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNpbmdsZSAgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBzaW5ndWxhci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwbHVyYWwgICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgcGx1cmFsLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciAgIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dCAgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtkb21haW5dIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKi9cblxuZXhwb3J0IGNvbnN0IF9ueCA9IGkxOG4uX254LmJpbmQoaTE4bik7XG4vKipcbiAqIENoZWNrIGlmIGN1cnJlbnQgbG9jYWxlIGlzIFJUTC5cbiAqXG4gKiAqKlJUTCAoUmlnaHQgVG8gTGVmdCkqKiBpcyBhIGxvY2FsZSBwcm9wZXJ0eSBpbmRpY2F0aW5nIHRoYXQgdGV4dCBpcyB3cml0dGVuIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEZvciBleGFtcGxlLCB0aGUgYGhlYCBsb2NhbGUgKGZvciBIZWJyZXcpIHNwZWNpZmllcyByaWdodC10by1sZWZ0LiBBcmFiaWMgKGFyKSBpcyBhbm90aGVyIGNvbW1vblxuICogbGFuZ3VhZ2Ugd3JpdHRlbiBSVEwuIFRoZSBvcHBvc2l0ZSBvZiBSVEwsIExUUiAoTGVmdCBUbyBSaWdodCkgaXMgdXNlZCBpbiBvdGhlciBsYW5ndWFnZXMsXG4gKiBpbmNsdWRpbmcgRW5nbGlzaCAoYGVuYCwgYGVuLVVTYCwgYGVuLUdCYCwgZXRjLiksIFNwYW5pc2ggKGBlc2ApLCBhbmQgRnJlbmNoIChgZnJgKS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGxvY2FsZSBpcyBSVEwuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGlzUlRMID0gaTE4bi5pc1JUTC5iaW5kKGkxOG4pO1xuLyoqXG4gKiBDaGVjayBpZiB0aGVyZSBpcyBhIHRyYW5zbGF0aW9uIGZvciBhIGdpdmVuIHN0cmluZyAoaW4gc2luZ3VsYXIgZm9ybSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNpbmdsZSAgICBTaW5ndWxhciBmb3JtIG9mIHRoZSBzdHJpbmcgdG8gbG9vayB1cC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGV4dF0gQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtkb21haW5dICBEb21haW4gdG8gcmV0cmlldmUgdGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRyYW5zbGF0aW9uIGV4aXN0cyBvciBub3QuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGhhc1RyYW5zbGF0aW9uID0gaTE4bi5oYXNUcmFuc2xhdGlvbi5iaW5kKGkxOG4pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC1pMThuLmpzLm1hcCIsIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbWl6ZSc7XG5pbXBvcnQgc3ByaW50ZmpzIGZyb20gJ3NwcmludGYtanMnO1xuLyoqXG4gKiBMb2cgdG8gY29uc29sZSwgb25jZSBwZXIgbWVzc2FnZTsgb3IgbW9yZSBwcmVjaXNlbHksIHBlciByZWZlcmVudGlhbGx5IGVxdWFsXG4gKiBhcmd1bWVudCBzZXQuIEJlY2F1c2UgSmVkIHRocm93cyBlcnJvcnMsIHdlIGxvZyB0aGVzZSB0byB0aGUgY29uc29sZSBpbnN0ZWFkXG4gKiB0byBhdm9pZCBjcmFzaGluZyB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50cyB0byBwYXNzIHRvIGBjb25zb2xlLmVycm9yYFxuICovXG5cbmNvbnN0IGxvZ0Vycm9yT25jZSA9IG1lbW9pemUoY29uc29sZS5lcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXG4vKipcbiAqIFJldHVybnMgYSBmb3JtYXR0ZWQgc3RyaW5nLiBJZiBhbiBlcnJvciBvY2N1cnMgaW4gYXBwbHlpbmcgdGhlIGZvcm1hdCwgdGhlXG4gKiBvcmlnaW5hbCBmb3JtYXQgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgVGhlIGZvcm1hdCBvZiB0aGUgc3RyaW5nIHRvIGdlbmVyYXRlLlxuICogQHBhcmFtIHsuLi4qfSAgIGFyZ3MgICBBcmd1bWVudHMgdG8gYXBwbHkgdG8gdGhlIGZvcm1hdC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3NwcmludGYtanNcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgc3RyaW5nLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcHJpbnRmKGZvcm1hdCkge1xuICB0cnkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBzcHJpbnRmanMuc3ByaW50Zihmb3JtYXQsIC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBsb2dFcnJvck9uY2UoJ3NwcmludGYgZXJyb3I6IFxcblxcbicgKyBlcnJvci50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcHJpbnRmLmpzLm1hcCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGlkPVwid3AtdnVlLWtpdFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWFpbi1jb250ZW50XCI+XG4gICAgICAgICAgICA8aDIgcm9sZT1cIndwLXZ1ZS1raXQtbm90aWNlXCIgZGF0YS10ZXh0PVwiRG9uJ3QgcmVtb3ZlIG1lLCBJIGFtIHN1cGVyIGltcG9ydGFudCBmb3IgYWRtaW4gbm90aWNlXCI+PC9oMj5cbiAgICAgICAgICAgIDxoMz57eyBfXygnV1AgVnVlIEtpdCcsICd3cC12dWUta2l0JykgfX08L2gzPlxuICAgICAgICAgICAgPHRhYnMgLz5cbiAgICAgICAgICAgIDxyb3V0ZXItdmlldyAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVGFicyBmcm9tICcuL2NvbXBvbmVudHMvdGFicy9UYWJzLnZ1ZSc7XG5pbXBvcnQgeyBtZW51Rml4IH0gZnJvbSAnLi91dGlscy9tZW51LWZpeCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQXBwJyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFRhYnNcbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgICRyb3V0ZSgpIHtcbiAgICAgICAgICAgIG1lbnVGaXgoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG48L3NjcmlwdD4iLCI8dGVtcGxhdGU+XG4gICAgPGJ1dHRvbj5cbiAgICAgICAgPHNsb3Q+PC9zbG90PiA8IS0tIHNsb3QgYnV0dG9uIGNvbnRlbnQgLS0+XG4gICAgPC9idXR0b24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogJ0J1dHRvbicsXG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbiAgICBidXR0b24ge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMzg2OWZmO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgYm9yZGVyOiAwcHggc29saWQ7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGw7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcblxuICAgICAgICAmOmhvdmVye1xuICAgICAgICAgICAgb3BhY2l0eTogMC45O1xuICAgICAgICB9XG4gICAgfVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJ3cC12dWUta2l0LXRhYnNcIj5cbiAgICA8ZGl2IGNsYXNzPVwidGFiLWl0ZW1cIj5cbiAgICAgIDxyb3V0ZXItbGluayB0bz1cIi9cIj5TZXR0aW5nczwvcm91dGVyLWxpbms+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRhYi1pdGVtXCI+XG4gICAgICA8cm91dGVyLWxpbmsgdG89XCIvbGlzdFwiPkxpc3Q8L3JvdXRlci1saW5rPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWItaXRlbVwiPlxuICAgICAgPHJvdXRlci1saW5rIHRvPVwiL2dyYXBoXCI+R3JhcGg8L3JvdXRlci1saW5rPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcIlRhYnNcIixcbiAgY29tcG9uZW50czoge30sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxufTtcbjwvc2NyaXB0PiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImdyYXBoLXBhZ2VcIj5cbiAgICA8aDQ+R3JhcGggUGFnZTwvaDQ+XG4gICAgPHA+VGhpcyBpcyBHcmFwaCBwYWdlLjwvcD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcIkdyYXBoXCIsXG59O1xuPC9zY3JpcHQ+IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwibGlzdC1wYWdlXCI+XG4gICAgPGg0Pkxpc3QgUGFnZTwvaDQ+XG4gICAgPHA+VGhpcyBpcyBsaXN0IHBhZ2UuPC9wPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiTGlzdFwiLFxufTtcbjwvc2NyaXB0PiIsIjxzY3JpcHQgc2V0dXA+XG4gIGltcG9ydCBCdXR0b24gZnJvbSAnLi4vY29tcG9uZW50cy9idXR0b24vQnV0dG9uLnZ1ZSc7XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwic2V0dGluZ3MtcGFnZVwiPlxuICAgIDxoND5TZXR0aW5nczwvaDQ+XG4gICAgPHA+XG4gICAgICBEZW1vIHNldHRpbmdzIHVzaW5nIFZ1ZXguIFRoaXMgaXMgb2YgdnVleCB3b3JraW5nIHBlcmZlY3RseSBvciBub3QuXG4gICAgPC9wPlxuICAgIDxmb3JtIEBzdWJtaXQ9XCJvblN1Ym1pdFwiIG1ldGhvZD1cInBvc3RcIj5cbiAgICAgIDxsYWJlbCBmb3I9XCJudW1yb3dzXCI+IE51bWJlciBvZiByb3dzIDwvbGFiZWw+XG4gICAgICA8YnIgLz5cbiAgICAgIDxpbnB1dCB2LW1vZGVsPVwibnVtcm93c1wiIHR5cGU9XCJudW1iZXJcIiAvPlxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgPEJ1dHRvbiB0eXBlPVwic3VibWl0XCI+U2F2ZTwvQnV0dG9uPlxuICAgIDwvZm9ybT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgbWFwQWN0aW9ucywgbWFwR2V0dGVycyB9IGZyb20gXCJ2dWV4XCI7XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiU2V0dGluZ3NcIixcblxuICBjb21wb25lbnRzOiB7XG4gICAgQnV0dG9uXG4gIH0sXG5cbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtcm93czogNSxcbiAgICB9XG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHsgLi4ubWFwR2V0dGVycyhbXCJpc1NhdmluZ1wiLCBcInNldHRpbmdzXCJdKSB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICAuLi5tYXBBY3Rpb25zKFtcInN0b3JlU2V0dGluZ3NcIl0pLFxuICAgIG9uU3VibWl0KGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3Qgc2V0dGluZyA9IHtcbiAgICAgICAgbnVtcm93czogcGFyc2VJbnQodGhpcy5udW1yb3dzKVxuICAgICAgfTtcblxuICAgICAgdGhpcy5zdG9yZVNldHRpbmdzKHNldHRpbmcpO1xuICAgIH0sXG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBzZXR0aW5nczogZnVuY3Rpb24gKCkge1xuICAgICAgY29uc29sZS5sb2coJ1Z1ZXggc3RhdGUgc2V0dGluZ3M6OicsIHRoaXMuc2V0dGluZ3MpO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+IiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IF9fLCBzcHJpbnRmIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcblxud2luZG93Ll9fID0gX187XG53aW5kb3cuc3ByaW50ZiA9IHNwcmludGY7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIC8qIGdsb2JhbCBfXywgc3ByaW50ZiAqL1xuICBtZXRob2RzOiB7XG4gICAgX18odGV4dCwgZG9tYWluKSB7XG4gICAgICByZXR1cm4gX18odGV4dCwgZG9tYWluKTtcbiAgICB9LFxuXG4gICAgc3ByaW50ZihmbXQsIC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiBzcHJpbnRmKGZtdCwgLi4uYXJncyk7XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IGNyZWF0ZVJvdXRlciwgY3JlYXRlV2ViSGlzdG9yeSB9IGZyb20gXCJ2dWUtcm91dGVyXCI7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICovXG5pbXBvcnQgTGlzdCBmcm9tIFwiLi4vcGFnZXMvTGlzdC52dWVcIjtcbmltcG9ydCBTZXR0aW5ncyBmcm9tIFwiLi4vcGFnZXMvU2V0dGluZ3MudnVlXCI7XG5pbXBvcnQgR3JhcGggZnJvbSBcIi4uL3BhZ2VzL0dyYXBoLnZ1ZVwiO1xuXG5jb25zdCByb3V0ZXMgPSBbXG4gIHtcbiAgICBwYXRoOiBcIi9cIixcbiAgICBuYW1lOiBcIlNldHRpbmdzXCIsXG4gICAgY29tcG9uZW50OiBTZXR0aW5ncyxcbiAgICBhbGlhczogJy9zZXR0aW5ncydcbiAgfSxcbiAge1xuICAgIHBhdGg6IFwiL2xpc3RcIixcbiAgICBuYW1lOiBcIkxpc3RcIixcbiAgICBjb21wb25lbnQ6IExpc3QsXG4gIH0sXG4gIHtcbiAgICBwYXRoOiBcIi9ncmFwaFwiLFxuICAgIG5hbWU6IFwiR3JhcGhcIixcbiAgICBjb21wb25lbnQ6IEdyYXBoXG4gIH1cbl07XG5cbmNvbnN0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcih7XG4gICAgaGlzdG9yeTogY3JlYXRlV2ViSGlzdG9yeSh3cEVtYWlsZXIuc2l0ZS5iYXNlX3VybCksXG4gICAgcm91dGVzXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjcmVhdGVMb2dnZXIgfSBmcm9tIFwidnVleFwiO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gXCIuL21vZHVsZXMvc2V0dGluZ3NcIjtcblxuY29uc3QgZGVidWcgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCI7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoe1xuICBtb2R1bGVzOiB7XG4gICAgc2V0dGluZ3MsXG4gIH0sXG4gIHN0cmljdDogZGVidWcsXG4gIHBsdWdpbnM6IGRlYnVnID8gW2NyZWF0ZUxvZ2dlcigpXSA6IFtdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmU7XG4iLCIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llcy5cbiAqL1xuLy8gaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuLy8gaW5pdGlhbCBzdGF0ZVxuY29uc3Qgc3RhdGUgPSAoKSA9PiAoe1xuICBzZXR0aW5nczogbnVsbCxcbiAgaXNTYXZpbmc6IGZhbHNlLFxufSlcblxuLy8gZ2V0dGVyc1xuY29uc3QgZ2V0dGVycyA9IHtcbiAgICBzZXR0aW5nczogc3RhdGUgPT4gc3RhdGUuc2V0dGluZ3MsXG4gICAgaXNTYXZpbmc6IHN0YXRlID0+IHN0YXRlLmlzU2F2aW5nLFxufTtcblxuLy8gYWN0aW9uc1xuY29uc3QgYWN0aW9ucyA9IHtcbiAgYXN5bmMgc3RvcmVTZXR0aW5ncyh7IGNvbW1pdCB9LCBzZXR0aW5ncykge1xuICAgIGNvbW1pdCgnc2V0U2V0dGluZ3NTYXZpbmcnLCB0cnVlKTtcblxuICAgIC8vIEB0b2RvOiBUZXN0IGNoZWNraW5nIHdpdGggTGl2ZSBVUkwuXG4gICAgLy8gYXdhaXQgYXhpb3MucG9zdChgaHR0cHM6Ly9leGFtcGxlLmNvbWAsIHNldHRpbmdzKVxuICAgIC8vICAgLnRoZW4ocmVzID0+IHtcbiAgICAvLyAgICAgY29tbWl0KCdzdG9yZVNldHRpbmdzJywgcmVzLmRhdGEpO1xuICAgIC8vICAgICBjb21taXQoJ3NldFNldHRpbmdzU2F2aW5nJywgZmFsc2UpO1xuICAgIC8vICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ2Vycm9yJywgZXJyKTtcbiAgICAvLyAgICAgY29tbWl0KCdzZXRTZXR0aW5nc1NhdmluZycsIGZhbHNlKTtcbiAgICAvLyAgIH0pO1xuXG4gICAgY29tbWl0KCdzdG9yZVNldHRpbmdzJywgc2V0dGluZ3MpO1xuICAgIGNvbW1pdCgnc2V0U2V0dGluZ3NTYXZpbmcnLCBmYWxzZSk7XG4gIH0sXG59XG5cbi8vIG11dGF0aW9uc1xuY29uc3QgbXV0YXRpb25zID0ge1xuICBzdG9yZVNldHRpbmdzOiAoc3RhdGUsIHNldHRpbmdzKSA9PiB7XG4gICAgc3RhdGUuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgfSxcblxuICBzZXRTZXR0aW5nc1NhdmluZzogKHN0YXRlLCBpc1NhdmluZykgPT4ge1xuICAgIHN0YXRlLmlzU2F2aW5nID0gaXNTYXZpbmc7XG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3RhdGUsXG4gIGdldHRlcnMsXG4gIGFjdGlvbnMsXG4gIG11dGF0aW9uc1xufSIsImV4cG9ydCBjb25zdCBwbHVnaW5TbHVnID0gJ3dwLXZ1ZS1raXQnO1xuXG4vKipcbiAqIEFzIHdlIGFyZSB1c2luZyBoYXNoIGJhc2VkIG5hdmlnYXRpb24sIGhhY2sgZml4XG4gKiB0byBoaWdobGlnaHQgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgbWVudVxuICpcbiAqIFJlcXVpcmVzIGpRdWVyeVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVudUZpeCgpIHtcbiAgICBjb25zdCAkID0galF1ZXJ5O1xuXG4gICAgY29uc3QgbWVudVJvb3QgPSAkKCcjdG9wbGV2ZWxfcGFnZV8nICsgcGx1Z2luU2x1Zyk7XG4gICAgY29uc3QgY3VycmVudFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gY3VycmVudFVybC5zdWJzdHIoY3VycmVudFVybC5pbmRleE9mKCdhZG1pbi5waHAnKSk7XG5cbiAgICAkKCd1bC53cC1zdWJtZW51IGxpJywgbWVudVJvb3QpLnJlbW92ZUNsYXNzKCdjdXJyZW50Jyk7XG5cbiAgICBtZW51Um9vdC5vbignY2xpY2snLCAnYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9ICQodGhpcyk7XG5cbiAgICAgICAgJCgndWwud3Atc3VibWVudSBsaScsIG1lbnVSb290KS5yZW1vdmVDbGFzcygnY3VycmVudCcpO1xuXG4gICAgICAgIGlmIChzZWxmLmhhc0NsYXNzKCd3cC1oYXMtc3VibWVudScpKSB7XG4gICAgICAgICAgICAkKCdsaS53cC1maXJzdC1pdGVtJywgbWVudVJvb3QpLmFkZENsYXNzKCdjdXJyZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnBhcmVudHMoJ2xpJykuYWRkQ2xhc3MoJ2N1cnJlbnQnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJCgndWwud3Atc3VibWVudSBhJywgbWVudVJvb3QpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbCkge1xuICAgICAgICBsZXQgaHJlZlJvdXRlID0gJChlbCkuYXR0cignaHJlZicpLnN1YnN0cmluZygkKGVsKS5hdHRyKCdocmVmJykuaW5kZXhPZignL2FkbWluLnBocCcpICsgMSk7XG5cbiAgICAgICAgaWYgKGhyZWZSb3V0ZSA9PT0gY3VycmVudFBhdGgpIHtcbiAgICAgICAgICAgICQoZWwpLnBhcmVudCgpLmFkZENsYXNzKCdjdXJyZW50Jyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxubWVudUZpeCgpO1xuIiwiLyoqXG4gKiBNZW1pemUgb3B0aW9ucyBvYmplY3QuXG4gKlxuICogQHR5cGVkZWYgTWVtaXplT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4U2l6ZV0gTWF4aW11bSBzaXplIG9mIHRoZSBjYWNoZS5cbiAqL1xuXG4vKipcbiAqIEludGVybmFsIGNhY2hlIGVudHJ5LlxuICpcbiAqIEB0eXBlZGVmIE1lbWl6ZUNhY2hlTm9kZVxuICpcbiAqIEBwcm9wZXJ0eSB7P01lbWl6ZUNhY2hlTm9kZXx1bmRlZmluZWR9IFtwcmV2XSBQcmV2aW91cyBub2RlLlxuICogQHByb3BlcnR5IHs/TWVtaXplQ2FjaGVOb2RlfHVuZGVmaW5lZH0gW25leHRdIE5leHQgbm9kZS5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8Kj59ICAgICAgICAgICAgICAgICAgIGFyZ3MgICBGdW5jdGlvbiBhcmd1bWVudHMgZm9yIGNhY2hlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuXG4gKiBAcHJvcGVydHkgeyp9ICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgICAgRnVuY3Rpb24gcmVzdWx0LlxuICovXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiB0aGUgZW5oYW5jZWQgZnVuY3Rpb24gZm9yIGNvbnRyb2xsaW5nIGNhY2hlLlxuICpcbiAqIEB0eXBlZGVmIE1lbWl6ZU1lbW9pemVkRnVuY3Rpb25cbiAqXG4gKiBAcHJvcGVydHkgeygpPT52b2lkfSBjbGVhciBDbGVhciB0aGUgY2FjaGUuXG4gKi9cblxuLyoqXG4gKiBBY2NlcHRzIGEgZnVuY3Rpb24gdG8gYmUgbWVtb2l6ZWQsIGFuZCByZXR1cm5zIGEgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLCB3aXRoXG4gKiBvcHRpb25hbCBvcHRpb25zLlxuICpcbiAqIEB0ZW1wbGF0ZSB7RnVuY3Rpb259IEZcbiAqXG4gKiBAcGFyYW0ge0Z9ICAgICAgICAgICAgIGZuICAgICAgICBGdW5jdGlvbiB0byBtZW1vaXplLlxuICogQHBhcmFtIHtNZW1pemVPcHRpb25zfSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3QuXG4gKlxuICogQHJldHVybiB7RiAmIE1lbWl6ZU1lbW9pemVkRnVuY3Rpb259IE1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1pemUoIGZuLCBvcHRpb25zICkge1xuXHR2YXIgc2l6ZSA9IDA7XG5cblx0LyoqIEB0eXBlIHs/TWVtaXplQ2FjaGVOb2RlfHVuZGVmaW5lZH0gKi9cblx0dmFyIGhlYWQ7XG5cblx0LyoqIEB0eXBlIHs/TWVtaXplQ2FjaGVOb2RlfHVuZGVmaW5lZH0gKi9cblx0dmFyIHRhaWw7XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0ZnVuY3Rpb24gbWVtb2l6ZWQoIC8qIC4uLmFyZ3MgKi8gKSB7XG5cdFx0dmFyIG5vZGUgPSBoZWFkLFxuXHRcdFx0bGVuID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRcdGFyZ3MsIGk7XG5cblx0XHRzZWFyY2hDYWNoZTogd2hpbGUgKCBub2RlICkge1xuXHRcdFx0Ly8gUGVyZm9ybSBhIHNoYWxsb3cgZXF1YWxpdHkgdGVzdCB0byBjb25maXJtIHRoYXQgd2hldGhlciB0aGUgbm9kZVxuXHRcdFx0Ly8gdW5kZXIgdGVzdCBpcyBhIGNhbmRpZGF0ZSBmb3IgdGhlIGFyZ3VtZW50cyBwYXNzZWQuIFR3byBhcnJheXNcblx0XHRcdC8vIGFyZSBzaGFsbG93bHkgZXF1YWwgaWYgdGhlaXIgbGVuZ3RoIG1hdGNoZXMgYW5kIGVhY2ggZW50cnkgaXNcblx0XHRcdC8vIHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIHR3byBzZXRzLiBBdm9pZCBhYnN0cmFjdGluZyB0byBhXG5cdFx0XHQvLyBmdW5jdGlvbiB3aGljaCBjb3VsZCBpbmN1ciBhbiBhcmd1bWVudHMgbGVha2luZyBkZW9wdGltaXphdGlvbi5cblxuXHRcdFx0Ly8gQ2hlY2sgd2hldGhlciBub2RlIGFyZ3VtZW50cyBtYXRjaCBhcmd1bWVudHMgbGVuZ3RoXG5cdFx0XHRpZiAoIG5vZGUuYXJncy5sZW5ndGggIT09IGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdG5vZGUgPSBub2RlLm5leHQ7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDaGVjayB3aGV0aGVyIG5vZGUgYXJndW1lbnRzIG1hdGNoIGFyZ3VtZW50cyB2YWx1ZXNcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGlmICggbm9kZS5hcmdzWyBpIF0gIT09IGFyZ3VtZW50c1sgaSBdICkge1xuXHRcdFx0XHRcdG5vZGUgPSBub2RlLm5leHQ7XG5cdFx0XHRcdFx0Y29udGludWUgc2VhcmNoQ2FjaGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCB3ZSBjYW4gYXNzdW1lIHdlJ3ZlIGZvdW5kIGEgbWF0Y2hcblxuXHRcdFx0Ly8gU3VyZmFjZSBtYXRjaGVkIG5vZGUgdG8gaGVhZCBpZiBub3QgYWxyZWFkeVxuXHRcdFx0aWYgKCBub2RlICE9PSBoZWFkICkge1xuXHRcdFx0XHQvLyBBcyB0YWlsLCBzaGlmdCB0byBwcmV2aW91cy4gTXVzdCBvbmx5IHNoaWZ0IGlmIG5vdCBhbHNvXG5cdFx0XHRcdC8vIGhlYWQsIHNpbmNlIGlmIGJvdGggaGVhZCBhbmQgdGFpbCwgdGhlcmUgaXMgbm8gcHJldmlvdXMuXG5cdFx0XHRcdGlmICggbm9kZSA9PT0gdGFpbCApIHtcblx0XHRcdFx0XHR0YWlsID0gbm9kZS5wcmV2O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRqdXN0IHNpYmxpbmdzIHRvIHBvaW50IHRvIGVhY2ggb3RoZXIuIElmIG5vZGUgd2FzIHRhaWwsXG5cdFx0XHRcdC8vIHRoaXMgYWxzbyBoYW5kbGVzIG5ldyB0YWlsJ3MgZW1wdHkgYG5leHRgIGFzc2lnbm1lbnQuXG5cdFx0XHRcdC8qKiBAdHlwZSB7TWVtaXplQ2FjaGVOb2RlfSAqLyAoIG5vZGUucHJldiApLm5leHQgPSBub2RlLm5leHQ7XG5cdFx0XHRcdGlmICggbm9kZS5uZXh0ICkge1xuXHRcdFx0XHRcdG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bm9kZS5uZXh0ID0gaGVhZDtcblx0XHRcdFx0bm9kZS5wcmV2ID0gbnVsbDtcblx0XHRcdFx0LyoqIEB0eXBlIHtNZW1pemVDYWNoZU5vZGV9ICovICggaGVhZCApLnByZXYgPSBub2RlO1xuXHRcdFx0XHRoZWFkID0gbm9kZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIGltbWVkaWF0ZWx5XG5cdFx0XHRyZXR1cm4gbm9kZS52YWw7XG5cdFx0fVxuXG5cdFx0Ly8gTm8gY2FjaGVkIHZhbHVlIGZvdW5kLiBDb250aW51ZSB0byBpbnNlcnRpb24gcGhhc2U6XG5cblx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIGFyZ3VtZW50cyAoYXZvaWQgbGVha2luZyBkZW9wdGltaXphdGlvbilcblx0XHRhcmdzID0gbmV3IEFycmF5KCBsZW4gKTtcblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0bm9kZSA9IHtcblx0XHRcdGFyZ3M6IGFyZ3MsXG5cblx0XHRcdC8vIEdlbmVyYXRlIHRoZSByZXN1bHQgZnJvbSBvcmlnaW5hbCBmdW5jdGlvblxuXHRcdFx0dmFsOiBmbi5hcHBseSggbnVsbCwgYXJncyApLFxuXHRcdH07XG5cblx0XHQvLyBEb24ndCBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgbm9kZSBpcyBhbHJlYWR5IGhlYWQsIHNpbmNlIGl0IHdvdWxkXG5cdFx0Ly8gaGF2ZSBiZWVuIHJldHVybmVkIGFib3ZlIGFscmVhZHkgaWYgaXQgd2FzXG5cblx0XHQvLyBTaGlmdCBleGlzdGluZyBoZWFkIGRvd24gbGlzdFxuXHRcdGlmICggaGVhZCApIHtcblx0XHRcdGhlYWQucHJldiA9IG5vZGU7XG5cdFx0XHRub2RlLm5leHQgPSBoZWFkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBJZiBubyBoZWFkLCBmb2xsb3dzIHRoYXQgdGhlcmUncyBubyB0YWlsIChhdCBpbml0aWFsIG9yIHJlc2V0KVxuXHRcdFx0dGFpbCA9IG5vZGU7XG5cdFx0fVxuXG5cdFx0Ly8gVHJpbSB0YWlsIGlmIHdlJ3JlIHJlYWNoZWQgbWF4IHNpemUgYW5kIGFyZSBwZW5kaW5nIGNhY2hlIGluc2VydGlvblxuXHRcdGlmICggc2l6ZSA9PT0gLyoqIEB0eXBlIHtNZW1pemVPcHRpb25zfSAqLyAoIG9wdGlvbnMgKS5tYXhTaXplICkge1xuXHRcdFx0dGFpbCA9IC8qKiBAdHlwZSB7TWVtaXplQ2FjaGVOb2RlfSAqLyAoIHRhaWwgKS5wcmV2O1xuXHRcdFx0LyoqIEB0eXBlIHtNZW1pemVDYWNoZU5vZGV9ICovICggdGFpbCApLm5leHQgPSBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaXplKys7XG5cdFx0fVxuXG5cdFx0aGVhZCA9IG5vZGU7XG5cblx0XHRyZXR1cm4gbm9kZS52YWw7XG5cdH1cblxuXHRtZW1vaXplZC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuXHRcdGhlYWQgPSBudWxsO1xuXHRcdHRhaWwgPSBudWxsO1xuXHRcdHNpemUgPSAwO1xuXHR9O1xuXG5cdGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyApIHtcblx0XHQvLyBDYWNoZSBpcyBub3QgZXhwb3NlZCBpbiB0aGUgcHVibGljIEFQSSwgYnV0IHVzZWQgaW4gdGVzdHMgdG8gZW5zdXJlXG5cdFx0Ly8gZXhwZWN0ZWQgbGlzdCBwcm9ncmVzc2lvblxuXHRcdG1lbW9pemVkLmdldENhY2hlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyBoZWFkLCB0YWlsLCBzaXplIF07XG5cdFx0fTtcblx0fVxuXG5cdC8vIElnbm9yZSByZWFzb246IFRoZXJlJ3Mgbm90IGEgY2xlYXIgc29sdXRpb24gdG8gY3JlYXRlIGFuIGludGVyc2VjdGlvbiBvZlxuXHQvLyB0aGUgZnVuY3Rpb24gd2l0aCBhZGRpdGlvbmFsIHByb3BlcnRpZXMsIHdoZXJlIHRoZSBnb2FsIGlzIHRvIHJldGFpbiB0aGVcblx0Ly8gZnVuY3Rpb24gc2lnbmF0dXJlIG9mIHRoZSBpbmNvbWluZyBhcmd1bWVudCBhbmQgYWRkIGNvbnRyb2wgcHJvcGVydGllc1xuXHQvLyBvbiB0aGUgcmV0dXJuIHZhbHVlLlxuXG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIG1lbW9pemVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbWl6ZTtcbiIsIi8qIGdsb2JhbCB3aW5kb3csIGV4cG9ydHMsIGRlZmluZSAqL1xuXG4hZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICB2YXIgcmUgPSB7XG4gICAgICAgIG5vdF9zdHJpbmc6IC9bXnNdLyxcbiAgICAgICAgbm90X2Jvb2w6IC9bXnRdLyxcbiAgICAgICAgbm90X3R5cGU6IC9bXlRdLyxcbiAgICAgICAgbm90X3ByaW1pdGl2ZTogL1tedl0vLFxuICAgICAgICBudW1iZXI6IC9bZGllZmddLyxcbiAgICAgICAgbnVtZXJpY19hcmc6IC9bYmNkaWVmZ3V4WF0vLFxuICAgICAgICBqc29uOiAvW2pdLyxcbiAgICAgICAgbm90X2pzb246IC9bXmpdLyxcbiAgICAgICAgdGV4dDogL15bXlxceDI1XSsvLFxuICAgICAgICBtb2R1bG86IC9eXFx4MjV7Mn0vLFxuICAgICAgICBwbGFjZWhvbGRlcjogL15cXHgyNSg/OihbMS05XVxcZCopXFwkfFxcKChbXildKylcXCkpPyhcXCspPygwfCdbXiRdKT8oLSk/KFxcZCspPyg/OlxcLihcXGQrKSk/KFtiLWdpam9zdFR1dnhYXSkvLFxuICAgICAgICBrZXk6IC9eKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGtleV9hY2Nlc3M6IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGluZGV4X2FjY2VzczogL15cXFsoXFxkKylcXF0vLFxuICAgICAgICBzaWduOiAvXlsrLV0vXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50ZihrZXkpIHtcbiAgICAgICAgLy8gYGFyZ3VtZW50c2AgaXMgbm90IGFuIGFycmF5LCBidXQgc2hvdWxkIGJlIGZpbmUgZm9yIHRoaXMgY2FsbFxuICAgICAgICByZXR1cm4gc3ByaW50Zl9mb3JtYXQoc3ByaW50Zl9wYXJzZShrZXkpLCBhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdnNwcmludGYoZm10LCBhcmd2KSB7XG4gICAgICAgIHJldHVybiBzcHJpbnRmLmFwcGx5KG51bGwsIFtmbXRdLmNvbmNhdChhcmd2IHx8IFtdKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmX2Zvcm1hdChwYXJzZV90cmVlLCBhcmd2KSB7XG4gICAgICAgIHZhciBjdXJzb3IgPSAxLCB0cmVlX2xlbmd0aCA9IHBhcnNlX3RyZWUubGVuZ3RoLCBhcmcsIG91dHB1dCA9ICcnLCBpLCBrLCBwaCwgcGFkLCBwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoLCBpc19wb3NpdGl2ZSwgc2lnblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHJlZV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBwYXJzZV90cmVlW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGFyc2VfdHJlZVtpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBwaCA9IHBhcnNlX3RyZWVbaV0gLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seVxuICAgICAgICAgICAgICAgIGlmIChwaC5rZXlzKSB7IC8vIGtleXdvcmQgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3JdXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBwaC5rZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gQ2Fubm90IGFjY2VzcyBwcm9wZXJ0eSBcIiVzXCIgb2YgdW5kZWZpbmVkIHZhbHVlIFwiJXNcIicsIHBoLmtleXNba10sIHBoLmtleXNbay0xXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmdbcGgua2V5c1trXV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwaC5wYXJhbV9ubykgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChleHBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltwaC5wYXJhbV9ub11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5ub3RfdHlwZS50ZXN0KHBoLnR5cGUpICYmIHJlLm5vdF9wcmltaXRpdmUudGVzdChwaC50eXBlKSAmJiBhcmcgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1lcmljX2FyZy50ZXN0KHBoLnR5cGUpICYmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyAmJiBpc05hTihhcmcpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNwcmludGYoJ1tzcHJpbnRmXSBleHBlY3RpbmcgbnVtYmVyIGJ1dCBmb3VuZCAlVCcsIGFyZykpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3Bvc2l0aXZlID0gYXJnID49IDBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBoLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKS50b1N0cmluZygyKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGFyZywgMTApKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2knOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2onOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gSlNPTi5zdHJpbmdpZnkoYXJnLCBudWxsLCBwaC53aWR0aCA/IHBhcnNlSW50KHBoLndpZHRoKSA6IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0V4cG9uZW50aWFsKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKHBoLnByZWNpc2lvbikgOiBwYXJzZUZsb2F0KGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gU3RyaW5nKE51bWJlcihhcmcudG9QcmVjaXNpb24ocGgucHJlY2lzaW9uKSkpIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoOClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nKGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZyghIWFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKSA+Pj4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmUuanNvbi50ZXN0KHBoLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBhcmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChwaC50eXBlKSAmJiAoIWlzX3Bvc2l0aXZlIHx8IHBoLnNpZ24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gaXNfcG9zaXRpdmUgPyAnKycgOiAnLSdcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygpLnJlcGxhY2UocmUuc2lnbiwgJycpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gJydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcmFjdGVyID0gcGgucGFkX2NoYXIgPyBwaC5wYWRfY2hhciA9PT0gJzAnID8gJzAnIDogcGgucGFkX2NoYXIuY2hhckF0KDEpIDogJyAnXG4gICAgICAgICAgICAgICAgICAgIHBhZF9sZW5ndGggPSBwaC53aWR0aCAtIChzaWduICsgYXJnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgcGFkID0gcGgud2lkdGggPyAocGFkX2xlbmd0aCA+IDAgPyBwYWRfY2hhcmFjdGVyLnJlcGVhdChwYWRfbGVuZ3RoKSA6ICcnKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBwaC5hbGlnbiA/IHNpZ24gKyBhcmcgKyBwYWQgOiAocGFkX2NoYXJhY3RlciA9PT0gJzAnID8gc2lnbiArIHBhZCArIGFyZyA6IHBhZCArIHNpZ24gKyBhcmcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXRcbiAgICB9XG5cbiAgICB2YXIgc3ByaW50Zl9jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICAgIGZ1bmN0aW9uIHNwcmludGZfcGFyc2UoZm10KSB7XG4gICAgICAgIGlmIChzcHJpbnRmX2NhY2hlW2ZtdF0pIHtcbiAgICAgICAgICAgIHJldHVybiBzcHJpbnRmX2NhY2hlW2ZtdF1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZm10ID0gZm10LCBtYXRjaCwgcGFyc2VfdHJlZSA9IFtdLCBhcmdfbmFtZXMgPSAwXG4gICAgICAgIHdoaWxlIChfZm10KSB7XG4gICAgICAgICAgICBpZiAoKG1hdGNoID0gcmUudGV4dC5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaChtYXRjaFswXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHJlLm1vZHVsby5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaCgnJScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5wbGFjZWhvbGRlci5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMVxuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRfbGlzdCA9IFtdLCByZXBsYWNlbWVudF9maWVsZCA9IG1hdGNoWzJdLCBmaWVsZF9tYXRjaCA9IFtdXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXkuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXlfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmluZGV4X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gPSBmaWVsZF9saXN0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWF0Y2hbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbV9ubzogICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduOiAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcjogICAgbWF0Y2hbNF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogICAgICAgbWF0Y2hbNV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb246ICAgbWF0Y2hbN10sXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAgICAgICAgbWF0Y2hbOF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXInKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2ZtdCA9IF9mbXQuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdID0gcGFyc2VfdHJlZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGV4cG9ydCB0byBlaXRoZXIgYnJvd3NlciBvciBub2RlLmpzXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgcXVvdGUtcHJvcHMgKi9cbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGV4cG9ydHNbJ3NwcmludGYnXSA9IHNwcmludGZcbiAgICAgICAgZXhwb3J0c1sndnNwcmludGYnXSA9IHZzcHJpbnRmXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3dbJ3NwcmludGYnXSA9IHNwcmludGZcbiAgICAgICAgd2luZG93Wyd2c3ByaW50ZiddID0gdnNwcmludGZcblxuICAgICAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgJ3NwcmludGYnOiBzcHJpbnRmLFxuICAgICAgICAgICAgICAgICAgICAndnNwcmludGYnOiB2c3ByaW50ZlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBxdW90ZS1wcm9wcyAqL1xufSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4iLCJpbXBvcnQgcGx1cmFsRm9ybXMgZnJvbSAnQHRhbm5pbi9wbHVyYWwtZm9ybXMnO1xuXG4vKipcbiAqIFRhbm5pbiBjb25zdHJ1Y3RvciBvcHRpb25zLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRhbm5pbk9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICBbY29udGV4dERlbGltaXRlcl0gSm9pbmVyIGluIHN0cmluZyBsb29rdXAgd2l0aCBjb250ZXh0LlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW29uTWlzc2luZ0tleV0gICAgIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGtleSBtaXNzaW5nLlxuICovXG5cbi8qKlxuICogRG9tYWluIG1ldGFkYXRhLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRhbm5pbkRvbWFpbk1ldGFkYXRhXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICAgICAgICAgICAgW2RvbWFpbl0gICAgICAgRG9tYWluIG5hbWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICAgICBbbGFuZ10gICAgICAgICBMYW5ndWFnZSBjb2RlLlxuICogQHByb3BlcnR5IHsoc3RyaW5nfEZ1bmN0aW9uKX0gW3BsdXJhbF9mb3Jtc10gUGx1cmFsIGZvcm1zIGV4cHJlc3Npb24gb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV2YWx1YXRvci5cbiAqL1xuXG4vKipcbiAqIERvbWFpbiB0cmFuc2xhdGlvbiBwYWlyIHJlc3BlY3RpdmVseSByZXByZXNlbnRpbmcgdGhlIHNpbmd1bGFyIGFuZCBwbHVyYWxcbiAqIHRyYW5zbGF0aW9uLlxuICpcbiAqIEB0eXBlZGVmIHtbc3RyaW5nLHN0cmluZ119IFRhbm5pblRyYW5zbGF0aW9uXG4gKi9cblxuLyoqXG4gKiBMb2NhbGUgZGF0YSBkb21haW4uIFRoZSBrZXkgaXMgdXNlZCBhcyByZWZlcmVuY2UgZm9yIGxvb2t1cCwgdGhlIHZhbHVlIGFuXG4gKiBhcnJheSBvZiB0d28gc3RyaW5nIGVudHJpZXMgcmVzcGVjdGl2ZWx5IHJlcHJlc2VudGluZyB0aGUgc2luZ3VsYXIgYW5kIHBsdXJhbFxuICogdHJhbnNsYXRpb24uXG4gKlxuICogQHR5cGVkZWYge3tba2V5OnN0cmluZ106VGFubmluRG9tYWluTWV0YWRhdGF8VGFubmluVHJhbnNsYXRpb24sJyc6VGFubmluRG9tYWluTWV0YWRhdGF8VGFubmluVHJhbnNsYXRpb259fSBUYW5uaW5Mb2NhbGVEb21haW5cbiAqL1xuXG4vKipcbiAqIEplZC1mb3JtYXR0ZWQgbG9jYWxlIGRhdGEuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICpcbiAqIEB0eXBlZGVmIHt7W2RvbWFpbjpzdHJpbmddOlRhbm5pbkxvY2FsZURvbWFpbn19IFRhbm5pbkxvY2FsZURhdGFcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgVGFubmluIGNvbnN0cnVjdG9yIG9wdGlvbnMuXG4gKlxuICogQHR5cGUge1Rhbm5pbk9wdGlvbnN9XG4gKi9cbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG5cdGNvbnRleHREZWxpbWl0ZXI6ICdcXHUwMDA0Jyxcblx0b25NaXNzaW5nS2V5OiBudWxsLFxufTtcblxuLyoqXG4gKiBHaXZlbiBhIHNwZWNpZmljIGxvY2FsZSBkYXRhJ3MgY29uZmlnIGBwbHVyYWxfZm9ybXNgIHZhbHVlLCByZXR1cm5zIHRoZVxuICogZXhwcmVzc2lvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogZ2V0UGx1cmFsRXhwcmVzc2lvbiggJ25wbHVyYWxzPTI7IHBsdXJhbD0obiAhPSAxKTsnICkgPT09ICcobiAhPSAxKSdcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwZiBMb2NhbGUgZGF0YSBwbHVyYWwgZm9ybXMuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBQbHVyYWwgZm9ybXMgZXhwcmVzc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0UGx1cmFsRXhwcmVzc2lvbiggcGYgKSB7XG5cdHZhciBwYXJ0cywgaSwgcGFydDtcblxuXHRwYXJ0cyA9IHBmLnNwbGl0KCAnOycgKTtcblxuXHRmb3IgKCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdHBhcnQgPSBwYXJ0c1sgaSBdLnRyaW0oKTtcblx0XHRpZiAoIHBhcnQuaW5kZXhPZiggJ3BsdXJhbD0nICkgPT09IDAgKSB7XG5cdFx0XHRyZXR1cm4gcGFydC5zdWJzdHIoIDcgKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBUYW5uaW4gY29uc3RydWN0b3IuXG4gKlxuICogQGNsYXNzXG4gKlxuICogQHBhcmFtIHtUYW5uaW5Mb2NhbGVEYXRhfSBkYXRhICAgICAgSmVkLWZvcm1hdHRlZCBsb2NhbGUgZGF0YS5cbiAqIEBwYXJhbSB7VGFubmluT3B0aW9uc30gICAgW29wdGlvbnNdIFRhbm5pbiBvcHRpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUYW5uaW4oIGRhdGEsIG9wdGlvbnMgKSB7XG5cdHZhciBrZXk7XG5cblx0LyoqXG5cdCAqIEplZC1mb3JtYXR0ZWQgbG9jYWxlIGRhdGEuXG5cdCAqXG5cdCAqIEBuYW1lIFRhbm5pbiNkYXRhXG5cdCAqIEB0eXBlIHtUYW5uaW5Mb2NhbGVEYXRhfVxuXHQgKi9cblx0dGhpcy5kYXRhID0gZGF0YTtcblxuXHQvKipcblx0ICogUGx1cmFsIGZvcm1zIGZ1bmN0aW9uIGNhY2hlLCBrZXllZCBieSBwbHVyYWwgZm9ybXMgc3RyaW5nLlxuXHQgKlxuXHQgKiBAbmFtZSBUYW5uaW4jcGx1cmFsRm9ybXNcblx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsRnVuY3Rpb24+fVxuXHQgKi9cblx0dGhpcy5wbHVyYWxGb3JtcyA9IHt9O1xuXG5cdC8qKlxuXHQgKiBFZmZlY3RpdmUgb3B0aW9ucyBmb3IgaW5zdGFuY2UsIGluY2x1ZGluZyBkZWZhdWx0cy5cblx0ICpcblx0ICogQG5hbWUgVGFubmluI29wdGlvbnNcblx0ICogQHR5cGUge1Rhbm5pbk9wdGlvbnN9XG5cdCAqL1xuXHR0aGlzLm9wdGlvbnMgPSB7fTtcblxuXHRmb3IgKCBrZXkgaW4gREVGQVVMVF9PUFRJT05TICkge1xuXHRcdHRoaXMub3B0aW9uc1sga2V5IF0gPSBvcHRpb25zICE9PSB1bmRlZmluZWQgJiYga2V5IGluIG9wdGlvbnNcblx0XHRcdD8gb3B0aW9uc1sga2V5IF1cblx0XHRcdDogREVGQVVMVF9PUFRJT05TWyBrZXkgXTtcblx0fVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBsdXJhbCBmb3JtIGluZGV4IGZvciB0aGUgZ2l2ZW4gZG9tYWluIGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluIERvbWFpbiBvbiB3aGljaCB0byBjYWxjdWxhdGUgcGx1cmFsIGZvcm0uXG4gKiBAcGFyYW0ge251bWJlcn0gbiAgICAgIFZhbHVlIGZvciB3aGljaCBwbHVyYWwgZm9ybSBpcyB0byBiZSBjYWxjdWxhdGVkLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gUGx1cmFsIGZvcm0gaW5kZXguXG4gKi9cblRhbm5pbi5wcm90b3R5cGUuZ2V0UGx1cmFsRm9ybSA9IGZ1bmN0aW9uKCBkb21haW4sIG4gKSB7XG5cdHZhciBnZXRQbHVyYWxGb3JtID0gdGhpcy5wbHVyYWxGb3Jtc1sgZG9tYWluIF0sXG5cdFx0Y29uZmlnLCBwbHVyYWwsIHBmO1xuXG5cdGlmICggISBnZXRQbHVyYWxGb3JtICkge1xuXHRcdGNvbmZpZyA9IHRoaXMuZGF0YVsgZG9tYWluIF1bICcnIF07XG5cblx0XHRwZiA9IChcblx0XHRcdGNvbmZpZ1sgJ1BsdXJhbC1Gb3JtcycgXSB8fFxuXHRcdFx0Y29uZmlnWyAncGx1cmFsLWZvcm1zJyBdIHx8XG5cdFx0XHQvLyBJZ25vcmUgcmVhc29uOiBBcyBrbm93biwgdGhlcmUncyBubyB3YXkgdG8gZG9jdW1lbnQgdGhlIGVtcHR5XG5cdFx0XHQvLyBzdHJpbmcgcHJvcGVydHkgb24gYSBrZXkgdG8gZ3VhcmFudGVlIHRoaXMgYXMgbWV0YWRhdGEuXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRjb25maWcucGx1cmFsX2Zvcm1zXG5cdFx0KTtcblxuXHRcdGlmICggdHlwZW9mIHBmICE9PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0cGx1cmFsID0gZ2V0UGx1cmFsRXhwcmVzc2lvbihcblx0XHRcdFx0Y29uZmlnWyAnUGx1cmFsLUZvcm1zJyBdIHx8XG5cdFx0XHRcdGNvbmZpZ1sgJ3BsdXJhbC1mb3JtcycgXSB8fFxuXHRcdFx0XHQvLyBJZ25vcmUgcmVhc29uOiBBcyBrbm93biwgdGhlcmUncyBubyB3YXkgdG8gZG9jdW1lbnQgdGhlIGVtcHR5XG5cdFx0XHRcdC8vIHN0cmluZyBwcm9wZXJ0eSBvbiBhIGtleSB0byBndWFyYW50ZWUgdGhpcyBhcyBtZXRhZGF0YS5cblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRjb25maWcucGx1cmFsX2Zvcm1zXG5cdFx0XHQpO1xuXG5cdFx0XHRwZiA9IHBsdXJhbEZvcm1zKCBwbHVyYWwgKTtcblx0XHR9XG5cblx0XHRnZXRQbHVyYWxGb3JtID0gdGhpcy5wbHVyYWxGb3Jtc1sgZG9tYWluIF0gPSBwZjtcblx0fVxuXG5cdHJldHVybiBnZXRQbHVyYWxGb3JtKCBuICk7XG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICBkb21haW4gICBUcmFuc2xhdGlvbiBkb21haW4uXG4gKiBAcGFyYW0ge3N0cmluZ3x2b2lkfSBjb250ZXh0ICBDb250ZXh0IGRpc3Rpbmd1aXNoaW5nIHRlcm1zIG9mIHRoZSBzYW1lIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICBzaW5ndWxhciBQcmltYXJ5IGtleSBmb3IgdHJhbnNsYXRpb24gbG9va3VwLlxuICogQHBhcmFtIHtzdHJpbmc9fSAgICAgcGx1cmFsICAgRmFsbGJhY2sgdmFsdWUgdXNlZCBmb3Igbm9uLXplcm8gcGx1cmFsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtIGluZGV4LlxuICogQHBhcmFtIHtudW1iZXI9fSAgICAgbiAgICAgICAgVmFsdWUgdG8gdXNlIGluIGNhbGN1bGF0aW5nIHBsdXJhbCBmb3JtLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVHJhbnNsYXRlZCBzdHJpbmcuXG4gKi9cblRhbm5pbi5wcm90b3R5cGUuZGNucGdldHRleHQgPSBmdW5jdGlvbiggZG9tYWluLCBjb250ZXh0LCBzaW5ndWxhciwgcGx1cmFsLCBuICkge1xuXHR2YXIgaW5kZXgsIGtleSwgZW50cnk7XG5cblx0aWYgKCBuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0Ly8gRGVmYXVsdCB0byBzaW5ndWxhci5cblx0XHRpbmRleCA9IDA7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gRmluZCBpbmRleCBieSBldmFsdWF0aW5nIHBsdXJhbCBmb3JtIGZvciB2YWx1ZS5cblx0XHRpbmRleCA9IHRoaXMuZ2V0UGx1cmFsRm9ybSggZG9tYWluLCBuICk7XG5cdH1cblxuXHRrZXkgPSBzaW5ndWxhcjtcblxuXHQvLyBJZiBwcm92aWRlZCwgY29udGV4dCBpcyBwcmVwZW5kZWQgdG8ga2V5IHdpdGggZGVsaW1pdGVyLlxuXHRpZiAoIGNvbnRleHQgKSB7XG5cdFx0a2V5ID0gY29udGV4dCArIHRoaXMub3B0aW9ucy5jb250ZXh0RGVsaW1pdGVyICsgc2luZ3VsYXI7XG5cdH1cblxuXHRlbnRyeSA9IHRoaXMuZGF0YVsgZG9tYWluIF1bIGtleSBdO1xuXG5cdC8vIFZlcmlmeSBub3Qgb25seSB0aGF0IGVudHJ5IGV4aXN0cywgYnV0IHRoYXQgdGhlIGludGVuZGVkIGluZGV4IGlzIHdpdGhpblxuXHQvLyByYW5nZSBhbmQgbm9uLWVtcHR5LlxuXHRpZiAoIGVudHJ5ICYmIGVudHJ5WyBpbmRleCBdICkge1xuXHRcdHJldHVybiBlbnRyeVsgaW5kZXggXTtcblx0fVxuXG5cdGlmICggdGhpcy5vcHRpb25zLm9uTWlzc2luZ0tleSApIHtcblx0XHR0aGlzLm9wdGlvbnMub25NaXNzaW5nS2V5KCBzaW5ndWxhciwgZG9tYWluICk7XG5cdH1cblxuXHQvLyBJZiBlbnRyeSBub3QgZm91bmQsIGZhbGwgYmFjayB0byBzaW5ndWxhciB2cy4gcGx1cmFsIHdpdGggemVybyBpbmRleFxuXHQvLyByZXByZXNlbnRpbmcgdGhlIHNpbmd1bGFyIHZhbHVlLlxuXHRyZXR1cm4gaW5kZXggPT09IDAgPyBzaW5ndWxhciA6IHBsdXJhbDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHJ1bnRpbWUgaGVscGVyIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgb24gY29tcG9uZW50c1xuLy8gaW4gYSB0cmVlLXNoYWthYmxlIHdheVxuZXhwb3J0cy5kZWZhdWx0ID0gKHNmYywgcHJvcHMpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBzZmMuX192Y2NPcHRzIHx8IHNmYztcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgcHJvcHMpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YmE1YmQ5MFwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwLXZ1ZS1raXQvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9BcHAudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjdiYTViZDkwXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnN2JhNWJkOTAnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc3YmE1YmQ5MCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YmE1YmQ5MFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc3YmE1YmQ5MCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01OTc1NzU2ZiZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0J1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vQnV0dG9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTU5NzU3NTZmJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwLXZ1ZS1raXQvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi01OTc1NzU2ZlwiXSxbJ19fZmlsZScsXCJzcmMvY29tcG9uZW50cy9idXR0b24vQnV0dG9uLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI1OTc1NzU2ZlwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzU5NzU3NTZmJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnNTk3NTc1NmYnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0J1dHRvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTk3NTc1NmYmc2NvcGVkPXRydWVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignNTk3NTc1NmYnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1RhYnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY2M2JhYzJmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVGFicy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vVGFicy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cC12dWUta2l0L25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvY29tcG9uZW50cy90YWJzL1RhYnMudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjY2M2JhYzJmXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnNjYzYmFjMmYnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc2NjNiYWMyZicsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVGFicy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjYzYmFjMmZcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignNjYzYmFjMmYnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0dyYXBoLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNWY2ZDI1YVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0dyYXBoLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9HcmFwaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cC12dWUta2l0L25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvcGFnZXMvR3JhcGgudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjM1ZjZkMjVhXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnMzVmNmQyNWEnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCczNWY2ZDI1YScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vR3JhcGgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM1ZjZkMjVhXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzM1ZjZkMjVhJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9MaXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MDdlOWY3Y1wiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xpc3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0xpc3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cHZ1ZS93cC1jb250ZW50L3BsdWdpbnMvd3AtdnVlLWtpdC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwic3JjL3BhZ2VzL0xpc3QudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjcwN2U5ZjdjXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnNzA3ZTlmN2MnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc3MDdlOWY3YycsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTGlzdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzA3ZTlmN2NcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignNzA3ZTlmN2MnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1NldHRpbmdzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iNjZlZTk3MlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1NldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL1NldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cHZ1ZS93cC1jb250ZW50L3BsdWdpbnMvd3AtdnVlLWtpdC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwic3JjL3BhZ2VzL1NldHRpbmdzLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCJiNjZlZTk3MlwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2I2NmVlOTcyJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnYjY2ZWU5NzInLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NldHRpbmdzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iNjZlZTk3MlwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdiNjZlZTk3MicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgaW5pdEN1c3RvbUZvcm1hdHRlciwgd2FybiB9IGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWRvbSc7XG5cbmZ1bmN0aW9uIGluaXREZXYoKSB7XG4gICAge1xuICAgICAgICBpbml0Q3VzdG9tRm9ybWF0dGVyKCk7XG4gICAgfVxufVxuXG4vLyBUaGlzIGVudHJ5IGV4cG9ydHMgdGhlIHJ1bnRpbWUgb25seSwgYW5kIGlzIGJ1aWx0IGFzXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgaW5pdERldigpO1xufVxuY29uc3QgY29tcGlsZSA9ICgpID0+IHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYFJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICtcbiAgICAgICAgICAgIChgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmBcbiAgICAgICAgICAgICAgICApIC8qIHNob3VsZCBub3QgaGFwcGVuICovKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBjb21waWxlIH07XG4iLCIvKiFcbiAqIHZ1ZXggdjQuMC4yXG4gKiAoYykgMjAyMSBFdmFuIFlvdVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IGluamVjdCwgcmVhY3RpdmUsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHNldHVwRGV2dG9vbHNQbHVnaW4gfSBmcm9tICdAdnVlL2RldnRvb2xzLWFwaSc7XG5cbnZhciBzdG9yZUtleSA9ICdzdG9yZSc7XG5cbmZ1bmN0aW9uIHVzZVN0b3JlIChrZXkpIHtcbiAgaWYgKCBrZXkgPT09IHZvaWQgMCApIGtleSA9IG51bGw7XG5cbiAgcmV0dXJuIGluamVjdChrZXkgIT09IG51bGwgPyBrZXkgOiBzdG9yZUtleSlcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBmaW5kIChsaXN0LCBmKSB7XG4gIHJldHVybiBsaXN0LmZpbHRlcihmKVswXVxufVxuXG4vKipcbiAqIERlZXAgY29weSB0aGUgZ2l2ZW4gb2JqZWN0IGNvbnNpZGVyaW5nIGNpcmN1bGFyIHN0cnVjdHVyZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FjaGVzIGFsbCBuZXN0ZWQgb2JqZWN0cyBhbmQgaXRzIGNvcGllcy5cbiAqIElmIGl0IGRldGVjdHMgY2lyY3VsYXIgc3RydWN0dXJlLCB1c2UgY2FjaGVkIGNvcHkgdG8gYXZvaWQgaW5maW5pdGUgbG9vcC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBjYWNoZVxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gZGVlcENvcHkgKG9iaiwgY2FjaGUpIHtcbiAgaWYgKCBjYWNoZSA9PT0gdm9pZCAwICkgY2FjaGUgPSBbXTtcblxuICAvLyBqdXN0IHJldHVybiBpZiBvYmogaXMgaW1tdXRhYmxlIHZhbHVlXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqXG4gIH1cblxuICAvLyBpZiBvYmogaXMgaGl0LCBpdCBpcyBpbiBjaXJjdWxhciBzdHJ1Y3R1cmVcbiAgdmFyIGhpdCA9IGZpbmQoY2FjaGUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLm9yaWdpbmFsID09PSBvYmo7IH0pO1xuICBpZiAoaGl0KSB7XG4gICAgcmV0dXJuIGhpdC5jb3B5XG4gIH1cblxuICB2YXIgY29weSA9IEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge307XG4gIC8vIHB1dCB0aGUgY29weSBpbnRvIGNhY2hlIGF0IGZpcnN0XG4gIC8vIGJlY2F1c2Ugd2Ugd2FudCB0byByZWZlciBpdCBpbiByZWN1cnNpdmUgZGVlcENvcHlcbiAgY2FjaGUucHVzaCh7XG4gICAgb3JpZ2luYWw6IG9iaixcbiAgICBjb3B5OiBjb3B5XG4gIH0pO1xuXG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgY29weVtrZXldID0gZGVlcENvcHkob2JqW2tleV0sIGNhY2hlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvcHlcbn1cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbmZ1bmN0aW9uIHBhcnRpYWwgKGZuLCBhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4oYXJnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdWJzY3JpYmUgKGZuLCBzdWJzLCBvcHRpb25zKSB7XG4gIGlmIChzdWJzLmluZGV4T2YoZm4pIDwgMCkge1xuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5wcmVwZW5kXG4gICAgICA/IHN1YnMudW5zaGlmdChmbilcbiAgICAgIDogc3Vicy5wdXNoKGZuKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gc3Vicy5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBzdWJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZSAoc3RvcmUsIGhvdCkge1xuICBzdG9yZS5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzdGF0ZSA9IHN0b3JlLnN0YXRlO1xuICAvLyBpbml0IGFsbCBtb2R1bGVzXG4gIGluc3RhbGxNb2R1bGUoc3RvcmUsIHN0YXRlLCBbXSwgc3RvcmUuX21vZHVsZXMucm9vdCwgdHJ1ZSk7XG4gIC8vIHJlc2V0IHN0YXRlXG4gIHJlc2V0U3RvcmVTdGF0ZShzdG9yZSwgc3RhdGUsIGhvdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmVTdGF0ZSAoc3RvcmUsIHN0YXRlLCBob3QpIHtcbiAgdmFyIG9sZFN0YXRlID0gc3RvcmUuX3N0YXRlO1xuXG4gIC8vIGJpbmQgc3RvcmUgcHVibGljIGdldHRlcnNcbiAgc3RvcmUuZ2V0dGVycyA9IHt9O1xuICAvLyByZXNldCBsb2NhbCBnZXR0ZXJzIGNhY2hlXG4gIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgd3JhcHBlZEdldHRlcnMgPSBzdG9yZS5fd3JhcHBlZEdldHRlcnM7XG4gIHZhciBjb21wdXRlZE9iaiA9IHt9O1xuICBmb3JFYWNoVmFsdWUod3JhcHBlZEdldHRlcnMsIGZ1bmN0aW9uIChmbiwga2V5KSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHRvIGxldmVyYWdlIGl0cyBsYXp5LWNhY2hpbmcgbWVjaGFuaXNtXG4gICAgLy8gZGlyZWN0IGlubGluZSBmdW5jdGlvbiB1c2Ugd2lsbCBsZWFkIHRvIGNsb3N1cmUgcHJlc2VydmluZyBvbGRTdGF0ZS5cbiAgICAvLyB1c2luZyBwYXJ0aWFsIHRvIHJldHVybiBmdW5jdGlvbiB3aXRoIG9ubHkgYXJndW1lbnRzIHByZXNlcnZlZCBpbiBjbG9zdXJlIGVudmlyb25tZW50LlxuICAgIGNvbXB1dGVkT2JqW2tleV0gPSBwYXJ0aWFsKGZuLCBzdG9yZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsIGtleSwge1xuICAgICAgLy8gVE9ETzogdXNlIGBjb21wdXRlZGAgd2hlbiBpdCdzIHBvc3NpYmxlLiBhdCB0aGUgbW9tZW50IHdlIGNhbid0IGR1ZSB0b1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvcHVsbC8xODgzXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXB1dGVkT2JqW2tleV0oKTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgc3RvcmUuX3N0YXRlID0gcmVhY3RpdmUoe1xuICAgIGRhdGE6IHN0YXRlXG4gIH0pO1xuXG4gIC8vIGVuYWJsZSBzdHJpY3QgbW9kZSBmb3IgbmV3IHN0YXRlXG4gIGlmIChzdG9yZS5zdHJpY3QpIHtcbiAgICBlbmFibGVTdHJpY3RNb2RlKHN0b3JlKTtcbiAgfVxuXG4gIGlmIChvbGRTdGF0ZSkge1xuICAgIGlmIChob3QpIHtcbiAgICAgIC8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbiAgICAgIC8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRTdGF0ZS5kYXRhID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgaWYgKHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgbmFtZXNwYWNlIFwiICsgbmFtZXNwYWNlICsgXCIgZm9yIHRoZSBuYW1lc3BhY2VkIG1vZHVsZSBcIiArIChwYXRoLmpvaW4oJy8nKSkpKTtcbiAgICB9XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpZiAobW9kdWxlTmFtZSBpbiBwYXJlbnRTdGF0ZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIChcIlt2dWV4XSBzdGF0ZSBmaWVsZCBcXFwiXCIgKyBtb2R1bGVOYW1lICsgXCJcXFwiIHdhcyBvdmVycmlkZGVuIGJ5IGEgbW9kdWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhdCBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50U3RhdGVbbW9kdWxlTmFtZV0gPSBtb2R1bGUuc3RhdGU7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbG9jYWwgPSBtb2R1bGUuY29udGV4dCA9IG1ha2VMb2NhbENvbnRleHQoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCk7XG5cbiAgbW9kdWxlLmZvckVhY2hNdXRhdGlvbihmdW5jdGlvbiAobXV0YXRpb24sIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3Rlck11dGF0aW9uKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgbXV0YXRpb24sIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwga2V5KSB7XG4gICAgdmFyIHR5cGUgPSBhY3Rpb24ucm9vdCA/IGtleSA6IG5hbWVzcGFjZSArIGtleTtcbiAgICB2YXIgaGFuZGxlciA9IGFjdGlvbi5oYW5kbGVyIHx8IGFjdGlvbjtcbiAgICByZWdpc3RlckFjdGlvbihzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEdldHRlcihmdW5jdGlvbiAoZ2V0dGVyLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJHZXR0ZXIoc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBnZXR0ZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQsIGtleSkge1xuICAgIGluc3RhbGxNb2R1bGUoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aC5jb25jYXQoa2V5KSwgY2hpbGQsIGhvdCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIG1ha2UgbG9jYWxpemVkIGRpc3BhdGNoLCBjb21taXQsIGdldHRlcnMgYW5kIHN0YXRlXG4gKiBpZiB0aGVyZSBpcyBubyBuYW1lc3BhY2UsIGp1c3QgdXNlIHJvb3Qgb25lc1xuICovXG5mdW5jdGlvbiBtYWtlTG9jYWxDb250ZXh0IChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKSB7XG4gIHZhciBub05hbWVzcGFjZSA9IG5hbWVzcGFjZSA9PT0gJyc7XG5cbiAgdmFyIGxvY2FsID0ge1xuICAgIGRpc3BhdGNoOiBub05hbWVzcGFjZSA/IHN0b3JlLmRpc3BhdGNoIDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXN0b3JlLl9hY3Rpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBhY3Rpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHR5cGUsIHBheWxvYWQpXG4gICAgfSxcblxuICAgIGNvbW1pdDogbm9OYW1lc3BhY2UgPyBzdG9yZS5jb21taXQgOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhc3RvcmUuX211dGF0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgbXV0YXRpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RvcmUuY29tbWl0KHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBnZXR0ZXJzIGFuZCBzdGF0ZSBvYmplY3QgbXVzdCBiZSBnb3R0ZW4gbGF6aWx5XG4gIC8vIGJlY2F1c2UgdGhleSB3aWxsIGJlIGNoYW5nZWQgYnkgc3RhdGUgdXBkYXRlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxvY2FsLCB7XG4gICAgZ2V0dGVyczoge1xuICAgICAgZ2V0OiBub05hbWVzcGFjZVxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLCBuYW1lc3BhY2UpOyB9XG4gICAgfSxcbiAgICBzdGF0ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROZXN0ZWRTdGF0ZShzdG9yZS5zdGF0ZSwgcGF0aCk7IH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbFxufVxuXG5mdW5jdGlvbiBtYWtlTG9jYWxHZXR0ZXJzIChzdG9yZSwgbmFtZXNwYWNlKSB7XG4gIGlmICghc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdKSB7XG4gICAgdmFyIGdldHRlcnNQcm94eSA9IHt9O1xuICAgIHZhciBzcGxpdFBvcyA9IG5hbWVzcGFjZS5sZW5ndGg7XG4gICAgT2JqZWN0LmtleXMoc3RvcmUuZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgLy8gc2tpcCBpZiB0aGUgdGFyZ2V0IGdldHRlciBpcyBub3QgbWF0Y2ggdGhpcyBuYW1lc3BhY2VcbiAgICAgIGlmICh0eXBlLnNsaWNlKDAsIHNwbGl0UG9zKSAhPT0gbmFtZXNwYWNlKSB7IHJldHVybiB9XG5cbiAgICAgIC8vIGV4dHJhY3QgbG9jYWwgZ2V0dGVyIHR5cGVcbiAgICAgIHZhciBsb2NhbFR5cGUgPSB0eXBlLnNsaWNlKHNwbGl0UG9zKTtcblxuICAgICAgLy8gQWRkIGEgcG9ydCB0byB0aGUgZ2V0dGVycyBwcm94eS5cbiAgICAgIC8vIERlZmluZSBhcyBnZXR0ZXIgcHJvcGVydHkgYmVjYXVzZVxuICAgICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gZXZhbHVhdGUgdGhlIGdldHRlcnMgaW4gdGhpcyB0aW1lLlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdldHRlcnNQcm94eSwgbG9jYWxUeXBlLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyc1t0eXBlXTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZVtuYW1lc3BhY2VdID0gZ2V0dGVyc1Byb3h5O1xuICB9XG5cbiAgcmV0dXJuIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXVxufVxuXG5mdW5jdGlvbiByZWdpc3Rlck11dGF0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX211dGF0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX211dGF0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkTXV0YXRpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgaGFuZGxlci5jYWxsKHN0b3JlLCBsb2NhbC5zdGF0ZSwgcGF5bG9hZCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckFjdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9hY3Rpb25zW3R5cGVdIHx8IChzdG9yZS5fYWN0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkQWN0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmNhbGwoc3RvcmUsIHtcbiAgICAgIGRpc3BhdGNoOiBsb2NhbC5kaXNwYXRjaCxcbiAgICAgIGNvbW1pdDogbG9jYWwuY29tbWl0LFxuICAgICAgZ2V0dGVyczogbG9jYWwuZ2V0dGVycyxcbiAgICAgIHN0YXRlOiBsb2NhbC5zdGF0ZSxcbiAgICAgIHJvb3RHZXR0ZXJzOiBzdG9yZS5nZXR0ZXJzLFxuICAgICAgcm9vdFN0YXRlOiBzdG9yZS5zdGF0ZVxuICAgIH0sIHBheWxvYWQpO1xuICAgIGlmICghaXNQcm9taXNlKHJlcykpIHtcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgIH1cbiAgICBpZiAoc3RvcmUuX2RldnRvb2xIb29rKSB7XG4gICAgICByZXR1cm4gcmVzLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgc3RvcmUuX2RldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6ZXJyb3InLCBlcnIpO1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckdldHRlciAoc3RvcmUsIHR5cGUsIHJhd0dldHRlciwgbG9jYWwpIHtcbiAgaWYgKHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBnZXR0ZXIga2V5OiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdID0gZnVuY3Rpb24gd3JhcHBlZEdldHRlciAoc3RvcmUpIHtcbiAgICByZXR1cm4gcmF3R2V0dGVyKFxuICAgICAgbG9jYWwuc3RhdGUsIC8vIGxvY2FsIHN0YXRlXG4gICAgICBsb2NhbC5nZXR0ZXJzLCAvLyBsb2NhbCBnZXR0ZXJzXG4gICAgICBzdG9yZS5zdGF0ZSwgLy8gcm9vdCBzdGF0ZVxuICAgICAgc3RvcmUuZ2V0dGVycyAvLyByb290IGdldHRlcnNcbiAgICApXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuYWJsZVN0cmljdE1vZGUgKHN0b3JlKSB7XG4gIHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLl9zdGF0ZS5kYXRhOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgYXNzZXJ0KHN0b3JlLl9jb21taXR0aW5nLCBcImRvIG5vdCBtdXRhdGUgdnVleCBzdG9yZSBzdGF0ZSBvdXRzaWRlIG11dGF0aW9uIGhhbmRsZXJzLlwiKTtcbiAgICB9XG4gIH0sIHsgZGVlcDogdHJ1ZSwgZmx1c2g6ICdzeW5jJyB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmVzdGVkU3RhdGUgKHN0YXRlLCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG59XG5cbmZ1bmN0aW9uIHVuaWZ5T2JqZWN0U3R5bGUgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgaWYgKGlzT2JqZWN0KHR5cGUpICYmIHR5cGUudHlwZSkge1xuICAgIG9wdGlvbnMgPSBwYXlsb2FkO1xuICAgIHBheWxvYWQgPSB0eXBlO1xuICAgIHR5cGUgPSB0eXBlLnR5cGU7XG4gIH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgKFwiZXhwZWN0cyBzdHJpbmcgYXMgdGhlIHR5cGUsIGJ1dCBmb3VuZCBcIiArICh0eXBlb2YgdHlwZSkgKyBcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCwgb3B0aW9uczogb3B0aW9ucyB9XG59XG5cbnZhciBMQUJFTF9WVUVYX0JJTkRJTkdTID0gJ3Z1ZXggYmluZGluZ3MnO1xudmFyIE1VVEFUSU9OU19MQVlFUl9JRCA9ICd2dWV4Om11dGF0aW9ucyc7XG52YXIgQUNUSU9OU19MQVlFUl9JRCA9ICd2dWV4OmFjdGlvbnMnO1xudmFyIElOU1BFQ1RPUl9JRCA9ICd2dWV4JztcblxudmFyIGFjdGlvbklkID0gMDtcblxuZnVuY3Rpb24gYWRkRGV2dG9vbHMgKGFwcCwgc3RvcmUpIHtcbiAgc2V0dXBEZXZ0b29sc1BsdWdpbihcbiAgICB7XG4gICAgICBpZDogJ29yZy52dWVqcy52dWV4JyxcbiAgICAgIGFwcDogYXBwLFxuICAgICAgbGFiZWw6ICdWdWV4JyxcbiAgICAgIGhvbWVwYWdlOiAnaHR0cHM6Ly9uZXh0LnZ1ZXgudnVlanMub3JnLycsXG4gICAgICBsb2dvOiAnaHR0cHM6Ly92dWVqcy5vcmcvaW1hZ2VzL2ljb25zL2Zhdmljb24tOTZ4OTYucG5nJyxcbiAgICAgIHBhY2thZ2VOYW1lOiAndnVleCcsXG4gICAgICBjb21wb25lbnRTdGF0ZVR5cGVzOiBbTEFCRUxfVlVFWF9CSU5ESU5HU11cbiAgICB9LFxuICAgIGZ1bmN0aW9uIChhcGkpIHtcbiAgICAgIGFwaS5hZGRUaW1lbGluZUxheWVyKHtcbiAgICAgICAgaWQ6IE1VVEFUSU9OU19MQVlFUl9JRCxcbiAgICAgICAgbGFiZWw6ICdWdWV4IE11dGF0aW9ucycsXG4gICAgICAgIGNvbG9yOiBDT0xPUl9MSU1FXzUwMFxuICAgICAgfSk7XG5cbiAgICAgIGFwaS5hZGRUaW1lbGluZUxheWVyKHtcbiAgICAgICAgaWQ6IEFDVElPTlNfTEFZRVJfSUQsXG4gICAgICAgIGxhYmVsOiAnVnVleCBBY3Rpb25zJyxcbiAgICAgICAgY29sb3I6IENPTE9SX0xJTUVfNTAwXG4gICAgICB9KTtcblxuICAgICAgYXBpLmFkZEluc3BlY3Rvcih7XG4gICAgICAgIGlkOiBJTlNQRUNUT1JfSUQsXG4gICAgICAgIGxhYmVsOiAnVnVleCcsXG4gICAgICAgIGljb246ICdzdG9yYWdlJyxcbiAgICAgICAgdHJlZUZpbHRlclBsYWNlaG9sZGVyOiAnRmlsdGVyIHN0b3Jlcy4uLidcbiAgICAgIH0pO1xuXG4gICAgICBhcGkub24uZ2V0SW5zcGVjdG9yVHJlZShmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSBJTlNQRUNUT1JfSUQpIHtcbiAgICAgICAgICBpZiAocGF5bG9hZC5maWx0ZXIpIHtcbiAgICAgICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICAgICAgZmxhdHRlblN0b3JlRm9ySW5zcGVjdG9yVHJlZShub2Rlcywgc3RvcmUuX21vZHVsZXMucm9vdCwgcGF5bG9hZC5maWx0ZXIsICcnKTtcbiAgICAgICAgICAgIHBheWxvYWQucm9vdE5vZGVzID0gbm9kZXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBheWxvYWQucm9vdE5vZGVzID0gW1xuICAgICAgICAgICAgICBmb3JtYXRTdG9yZUZvckluc3BlY3RvclRyZWUoc3RvcmUuX21vZHVsZXMucm9vdCwgJycpXG4gICAgICAgICAgICBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JTdGF0ZShmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSBJTlNQRUNUT1JfSUQpIHtcbiAgICAgICAgICB2YXIgbW9kdWxlUGF0aCA9IHBheWxvYWQubm9kZUlkO1xuICAgICAgICAgIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsIG1vZHVsZVBhdGgpO1xuICAgICAgICAgIHBheWxvYWQuc3RhdGUgPSBmb3JtYXRTdG9yZUZvckluc3BlY3RvclN0YXRlKFxuICAgICAgICAgICAgZ2V0U3RvcmVNb2R1bGUoc3RvcmUuX21vZHVsZXMsIG1vZHVsZVBhdGgpLFxuICAgICAgICAgICAgbW9kdWxlUGF0aCA9PT0gJ3Jvb3QnID8gc3RvcmUuZ2V0dGVycyA6IHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUsXG4gICAgICAgICAgICBtb2R1bGVQYXRoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGFwaS5vbi5lZGl0SW5zcGVjdG9yU3RhdGUoZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgdmFyIG1vZHVsZVBhdGggPSBwYXlsb2FkLm5vZGVJZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IHBheWxvYWQucGF0aDtcbiAgICAgICAgICBpZiAobW9kdWxlUGF0aCAhPT0gJ3Jvb3QnKSB7XG4gICAgICAgICAgICBwYXRoID0gbW9kdWxlUGF0aC5zcGxpdCgnLycpLmZpbHRlcihCb29sZWFuKS5jb25jYXQoIHBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwYXlsb2FkLnNldChzdG9yZS5fc3RhdGUuZGF0YSwgcGF0aCwgcGF5bG9hZC5zdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgICAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgICAgIGlmIChtdXRhdGlvbi5wYXlsb2FkKSB7XG4gICAgICAgICAgZGF0YS5wYXlsb2FkID0gbXV0YXRpb24ucGF5bG9hZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuc3RhdGUgPSBzdGF0ZTtcblxuICAgICAgICBhcGkubm90aWZ5Q29tcG9uZW50VXBkYXRlKCk7XG4gICAgICAgIGFwaS5zZW5kSW5zcGVjdG9yVHJlZShJTlNQRUNUT1JfSUQpO1xuICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKElOU1BFQ1RPUl9JRCk7XG5cbiAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xuICAgICAgICAgIGxheWVySWQ6IE1VVEFUSU9OU19MQVlFUl9JRCxcbiAgICAgICAgICBldmVudDoge1xuICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIHRpdGxlOiBtdXRhdGlvbi50eXBlLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgc3RvcmUuc3Vic2NyaWJlQWN0aW9uKHtcbiAgICAgICAgYmVmb3JlOiBmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSkge1xuICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkKSB7XG4gICAgICAgICAgICBkYXRhLnBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWN0aW9uLl9pZCA9IGFjdGlvbklkKys7XG4gICAgICAgICAgYWN0aW9uLl90aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICBkYXRhLnN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XG4gICAgICAgICAgICBsYXllcklkOiBBQ1RJT05TX0xBWUVSX0lELFxuICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgdGltZTogYWN0aW9uLl90aW1lLFxuICAgICAgICAgICAgICB0aXRsZTogYWN0aW9uLnR5cGUsXG4gICAgICAgICAgICAgIGdyb3VwSWQ6IGFjdGlvbi5faWQsXG4gICAgICAgICAgICAgIHN1YnRpdGxlOiAnc3RhcnQnLFxuICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFmdGVyOiBmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSkge1xuICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIGFjdGlvbi5fdGltZTtcbiAgICAgICAgICBkYXRhLmR1cmF0aW9uID0ge1xuICAgICAgICAgICAgX2N1c3RvbToge1xuICAgICAgICAgICAgICB0eXBlOiAnZHVyYXRpb24nLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAoZHVyYXRpb24gKyBcIm1zXCIpLFxuICAgICAgICAgICAgICB0b29sdGlwOiAnQWN0aW9uIGR1cmF0aW9uJyxcbiAgICAgICAgICAgICAgdmFsdWU6IGR1cmF0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoYWN0aW9uLnBheWxvYWQpIHtcbiAgICAgICAgICAgIGRhdGEucGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhLnN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XG4gICAgICAgICAgICBsYXllcklkOiBBQ1RJT05TX0xBWUVSX0lELFxuICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgdGl0bGU6IGFjdGlvbi50eXBlLFxuICAgICAgICAgICAgICBncm91cElkOiBhY3Rpb24uX2lkLFxuICAgICAgICAgICAgICBzdWJ0aXRsZTogJ2VuZCcsXG4gICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICApO1xufVxuXG4vLyBleHRyYWN0ZWQgZnJvbSB0YWlsd2luZCBwYWxldHRlXG52YXIgQ09MT1JfTElNRV81MDAgPSAweDg0Y2MxNjtcbnZhciBDT0xPUl9EQVJLID0gMHg2NjY2NjY7XG52YXIgQ09MT1JfV0hJVEUgPSAweGZmZmZmZjtcblxudmFyIFRBR19OQU1FU1BBQ0VEID0ge1xuICBsYWJlbDogJ25hbWVzcGFjZWQnLFxuICB0ZXh0Q29sb3I6IENPTE9SX1dISVRFLFxuICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SX0RBUktcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdE5hbWVGcm9tUGF0aCAocGF0aCkge1xuICByZXR1cm4gcGF0aCAmJiBwYXRoICE9PSAncm9vdCcgPyBwYXRoLnNwbGl0KCcvJykuc2xpY2UoLTIsIC0xKVswXSA6ICdSb290J1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gbW9kdWxlXG4gKiBAcmV0dXJuIHtpbXBvcnQoJ0B2dWUvZGV2dG9vbHMtYXBpJykuQ3VzdG9tSW5zcGVjdG9yTm9kZX1cbiAqL1xuZnVuY3Rpb24gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JUcmVlIChtb2R1bGUsIHBhdGgpIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogcGF0aCB8fCAncm9vdCcsXG4gICAgLy8gYWxsIG1vZHVsZXMgZW5kIHdpdGggYSBgL2AsIHdlIHdhbnQgdGhlIGxhc3Qgc2VnbWVudCBvbmx5XG4gICAgLy8gY2FydC8gLT4gY2FydFxuICAgIC8vIG5lc3RlZC9jYXJ0LyAtPiBjYXJ0XG4gICAgbGFiZWw6IGV4dHJhY3ROYW1lRnJvbVBhdGgocGF0aCksXG4gICAgdGFnczogbW9kdWxlLm5hbWVzcGFjZWQgPyBbVEFHX05BTUVTUEFDRURdIDogW10sXG4gICAgY2hpbGRyZW46IE9iamVjdC5rZXlzKG1vZHVsZS5fY2hpbGRyZW4pLm1hcChmdW5jdGlvbiAobW9kdWxlTmFtZSkgeyByZXR1cm4gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JUcmVlKFxuICAgICAgICBtb2R1bGUuX2NoaWxkcmVuW21vZHVsZU5hbWVdLFxuICAgICAgICBwYXRoICsgbW9kdWxlTmFtZSArICcvJ1xuICAgICAgKTsgfVxuICAgIClcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCdAdnVlL2RldnRvb2xzLWFwaScpLkN1c3RvbUluc3BlY3Rvck5vZGVbXX0gcmVzdWx0XG4gKiBAcGFyYW0geyp9IG1vZHVsZVxuICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqL1xuZnVuY3Rpb24gZmxhdHRlblN0b3JlRm9ySW5zcGVjdG9yVHJlZSAocmVzdWx0LCBtb2R1bGUsIGZpbHRlciwgcGF0aCkge1xuICBpZiAocGF0aC5pbmNsdWRlcyhmaWx0ZXIpKSB7XG4gICAgcmVzdWx0LnB1c2goe1xuICAgICAgaWQ6IHBhdGggfHwgJ3Jvb3QnLFxuICAgICAgbGFiZWw6IHBhdGguZW5kc1dpdGgoJy8nKSA/IHBhdGguc2xpY2UoMCwgcGF0aC5sZW5ndGggLSAxKSA6IHBhdGggfHwgJ1Jvb3QnLFxuICAgICAgdGFnczogbW9kdWxlLm5hbWVzcGFjZWQgPyBbVEFHX05BTUVTUEFDRURdIDogW11cbiAgICB9KTtcbiAgfVxuICBPYmplY3Qua2V5cyhtb2R1bGUuX2NoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgZmxhdHRlblN0b3JlRm9ySW5zcGVjdG9yVHJlZShyZXN1bHQsIG1vZHVsZS5fY2hpbGRyZW5bbW9kdWxlTmFtZV0sIGZpbHRlciwgcGF0aCArIG1vZHVsZU5hbWUgKyAnLycpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IG1vZHVsZVxuICogQHJldHVybiB7aW1wb3J0KCdAdnVlL2RldnRvb2xzLWFwaScpLkN1c3RvbUluc3BlY3RvclN0YXRlfVxuICovXG5mdW5jdGlvbiBmb3JtYXRTdG9yZUZvckluc3BlY3RvclN0YXRlIChtb2R1bGUsIGdldHRlcnMsIHBhdGgpIHtcbiAgZ2V0dGVycyA9IHBhdGggPT09ICdyb290JyA/IGdldHRlcnMgOiBnZXR0ZXJzW3BhdGhdO1xuICB2YXIgZ2V0dGVyc0tleXMgPSBPYmplY3Qua2V5cyhnZXR0ZXJzKTtcbiAgdmFyIHN0b3JlU3RhdGUgPSB7XG4gICAgc3RhdGU6IE9iamVjdC5rZXlzKG1vZHVsZS5zdGF0ZSkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1vZHVsZS5zdGF0ZVtrZXldXG4gICAgfSk7IH0pXG4gIH07XG5cbiAgaWYgKGdldHRlcnNLZXlzLmxlbmd0aCkge1xuICAgIHZhciB0cmVlID0gdHJhbnNmb3JtUGF0aHNUb09iamVjdFRyZWUoZ2V0dGVycyk7XG4gICAgc3RvcmVTdGF0ZS5nZXR0ZXJzID0gT2JqZWN0LmtleXModHJlZSkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7XG4gICAgICBrZXk6IGtleS5lbmRzV2l0aCgnLycpID8gZXh0cmFjdE5hbWVGcm9tUGF0aChrZXkpIDoga2V5LFxuICAgICAgZWRpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGNhblRocm93KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyZWVba2V5XTsgfSlcbiAgICB9KTsgfSk7XG4gIH1cblxuICByZXR1cm4gc3RvcmVTdGF0ZVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1QYXRoc1RvT2JqZWN0VHJlZSAoZ2V0dGVycykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKGdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwYXRoID0ga2V5LnNwbGl0KCcvJyk7XG4gICAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIHRhcmdldCA9IHJlc3VsdDtcbiAgICAgIHZhciBsZWFmS2V5ID0gcGF0aC5wb3AoKTtcbiAgICAgIHBhdGguZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICBpZiAoIXRhcmdldFtwXSkge1xuICAgICAgICAgIHRhcmdldFtwXSA9IHtcbiAgICAgICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgICAgdmFsdWU6IHt9LFxuICAgICAgICAgICAgICBkaXNwbGF5OiBwLFxuICAgICAgICAgICAgICB0b29sdGlwOiAnTW9kdWxlJyxcbiAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldCA9IHRhcmdldFtwXS5fY3VzdG9tLnZhbHVlO1xuICAgICAgfSk7XG4gICAgICB0YXJnZXRbbGVhZktleV0gPSBjYW5UaHJvdyhmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXJzW2tleV07IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IGNhblRocm93KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcnNba2V5XTsgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBnZXRTdG9yZU1vZHVsZSAobW9kdWxlTWFwLCBwYXRoKSB7XG4gIHZhciBuYW1lcyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG47IH0pO1xuICByZXR1cm4gbmFtZXMucmVkdWNlKFxuICAgIGZ1bmN0aW9uIChtb2R1bGUsIG1vZHVsZU5hbWUsIGkpIHtcbiAgICAgIHZhciBjaGlsZCA9IG1vZHVsZVttb2R1bGVOYW1lXTtcbiAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcIk1pc3NpbmcgbW9kdWxlIFxcXCJcIiArIG1vZHVsZU5hbWUgKyBcIlxcXCIgZm9yIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpXG4gICAgICB9XG4gICAgICByZXR1cm4gaSA9PT0gbmFtZXMubGVuZ3RoIC0gMSA/IGNoaWxkIDogY2hpbGQuX2NoaWxkcmVuXG4gICAgfSxcbiAgICBwYXRoID09PSAncm9vdCcgPyBtb2R1bGVNYXAgOiBtb2R1bGVNYXAucm9vdC5fY2hpbGRyZW5cbiAgKVxufVxuXG5mdW5jdGlvbiBjYW5UaHJvdyAoY2IpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY2IoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGVcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEubmFtZXNwYWNlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIXRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQgKGtleSwgbW9kdWxlKSB7XG4gIHRoaXMuX2NoaWxkcmVuW2tleV0gPSBtb2R1bGU7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKGtleSkge1xuICBkZWxldGUgdGhpcy5fY2hpbGRyZW5ba2V5XTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZCAoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9jaGlsZHJlbltrZXldXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmhhc0NoaWxkID0gZnVuY3Rpb24gaGFzQ2hpbGQgKGtleSkge1xuICByZXR1cm4ga2V5IGluIHRoaXMuX2NoaWxkcmVuXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAocmF3TW9kdWxlKSB7XG4gIHRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkID0gcmF3TW9kdWxlLm5hbWVzcGFjZWQ7XG4gIGlmIChyYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zID0gcmF3TW9kdWxlLmFjdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zID0gcmF3TW9kdWxlLm11dGF0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyA9IHJhd01vZHVsZS5nZXR0ZXJzO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIGZvckVhY2hDaGlsZCAoZm4pIHtcbiAgZm9yRWFjaFZhbHVlKHRoaXMuX2NoaWxkcmVuLCBmbik7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hHZXR0ZXIgPSBmdW5jdGlvbiBmb3JFYWNoR2V0dGVyIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQWN0aW9uID0gZnVuY3Rpb24gZm9yRWFjaEFjdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaE11dGF0aW9uID0gZnVuY3Rpb24gZm9yRWFjaE11dGF0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zLCBmbik7XG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNb2R1bGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcbiAgICBpZiAoIHJ1bnRpbWUgPT09IHZvaWQgMCApIHJ1bnRpbWUgPSB0cnVlO1xuXG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgcmF3TW9kdWxlKTtcbiAgfVxuXG4gIHZhciBuZXdNb2R1bGUgPSBuZXcgTW9kdWxlKHJhd01vZHVsZSwgcnVudGltZSk7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMucm9vdCA9IG5ld01vZHVsZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHBhcmVudC5hZGRDaGlsZChwYXRoW3BhdGgubGVuZ3RoIC0gMV0sIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyByZWdpc3RlciBuZXN0ZWQgbW9kdWxlc1xuICBpZiAocmF3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlLm1vZHVsZXMsIGZ1bmN0aW9uIChyYXdDaGlsZE1vZHVsZSwga2V5KSB7XG4gICAgICB0aGlzJDEkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIHZhciBjaGlsZCA9IHBhcmVudC5nZXRDaGlsZChrZXkpO1xuXG4gIGlmICghY2hpbGQpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiW3Z1ZXhdIHRyeWluZyB0byB1bnJlZ2lzdGVyIG1vZHVsZSAnXCIgKyBrZXkgKyBcIicsIHdoaWNoIGlzIFwiICtcbiAgICAgICAgXCJub3QgcmVnaXN0ZXJlZFwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICghY2hpbGQucnVudGltZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgcGFyZW50LnJlbW92ZUNoaWxkKGtleSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5pc1JlZ2lzdGVyZWQgPSBmdW5jdGlvbiBpc1JlZ2lzdGVyZWQgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgcmV0dXJuIHBhcmVudC5oYXNDaGlsZChrZXkpXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZSAocGF0aCwgdGFyZ2V0TW9kdWxlLCBuZXdNb2R1bGUpIHtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW3Z1ZXhdIHRyeWluZyB0byBhZGQgYSBuZXcgbW9kdWxlICdcIiArIGtleSArIFwiJyBvbiBob3QgcmVsb2FkaW5nLCBcIiArXG4gICAgICAgICAgICAnbWFudWFsIHJlbG9hZCBpcyBuZWVkZWQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShcbiAgICAgICAgcGF0aC5jb25jYXQoa2V5KSxcbiAgICAgICAgdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSksXG4gICAgICAgIG5ld01vZHVsZS5tb2R1bGVzW2tleV1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBmdW5jdGlvbkFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbidcbn07XG5cbnZhciBvYmplY3RBc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUuaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyk7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggXCJoYW5kbGVyXCIgZnVuY3Rpb24nXG59O1xuXG52YXIgYXNzZXJ0VHlwZXMgPSB7XG4gIGdldHRlcnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBtdXRhdGlvbnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBhY3Rpb25zOiBvYmplY3RBc3NlcnRcbn07XG5cbmZ1bmN0aW9uIGFzc2VydFJhd01vZHVsZSAocGF0aCwgcmF3TW9kdWxlKSB7XG4gIE9iamVjdC5rZXlzKGFzc2VydFR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXJhd01vZHVsZVtrZXldKSB7IHJldHVybiB9XG5cbiAgICB2YXIgYXNzZXJ0T3B0aW9ucyA9IGFzc2VydFR5cGVzW2tleV07XG5cbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlW2tleV0sIGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgYXNzZXJ0KFxuICAgICAgICBhc3NlcnRPcHRpb25zLmFzc2VydCh2YWx1ZSksXG4gICAgICAgIG1ha2VBc3NlcnRpb25NZXNzYWdlKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGFzc2VydE9wdGlvbnMuZXhwZWN0ZWQpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUFzc2VydGlvbk1lc3NhZ2UgKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGV4cGVjdGVkKSB7XG4gIHZhciBidWYgPSBrZXkgKyBcIiBzaG91bGQgYmUgXCIgKyBleHBlY3RlZCArIFwiIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIi5cIiArIHR5cGUgKyBcIlxcXCJcIjtcbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGJ1ZiArPSBcIiBpbiBtb2R1bGUgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiO1xuICB9XG4gIGJ1ZiArPSBcIiBpcyBcIiArIChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgXCIuXCI7XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTdG9yZShvcHRpb25zKVxufVxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG4gIHZhciBkZXZ0b29scyA9IG9wdGlvbnMuZGV2dG9vbHM7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9kZXZ0b29scyA9IGRldnRvb2xzO1xuXG4gIC8vIGJpbmQgY29tbWl0IGFuZCBkaXNwYXRjaCB0byBzZWxmXG4gIHZhciBzdG9yZSA9IHRoaXM7XG4gIHZhciByZWYgPSB0aGlzO1xuICB2YXIgZGlzcGF0Y2ggPSByZWYuZGlzcGF0Y2g7XG4gIHZhciBjb21taXQgPSByZWYuY29tbWl0O1xuICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gYm91bmREaXNwYXRjaCAodHlwZSwgcGF5bG9hZCkge1xuICAgIHJldHVybiBkaXNwYXRjaC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkKVxuICB9O1xuICB0aGlzLmNvbW1pdCA9IGZ1bmN0aW9uIGJvdW5kQ29tbWl0ICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbW1pdC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBvcHRpb25zKVxuICB9O1xuXG4gIC8vIHN0cmljdCBtb2RlXG4gIHRoaXMuc3RyaWN0ID0gc3RyaWN0O1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX21vZHVsZXMucm9vdC5zdGF0ZTtcblxuICAvLyBpbml0IHJvb3QgbW9kdWxlLlxuICAvLyB0aGlzIGFsc28gcmVjdXJzaXZlbHkgcmVnaXN0ZXJzIGFsbCBzdWItbW9kdWxlc1xuICAvLyBhbmQgY29sbGVjdHMgYWxsIG1vZHVsZSBnZXR0ZXJzIGluc2lkZSB0aGlzLl93cmFwcGVkR2V0dGVyc1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHN0YXRlLCBbXSwgdGhpcy5fbW9kdWxlcy5yb290KTtcblxuICAvLyBpbml0aWFsaXplIHRoZSBzdG9yZSBzdGF0ZSwgd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHRoZSByZWFjdGl2aXR5XG4gIC8vIChhbHNvIHJlZ2lzdGVycyBfd3JhcHBlZEdldHRlcnMgYXMgY29tcHV0ZWQgcHJvcGVydGllcylcbiAgcmVzZXRTdG9yZVN0YXRlKHRoaXMsIHN0YXRlKTtcblxuICAvLyBhcHBseSBwbHVnaW5zXG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7IHJldHVybiBwbHVnaW4odGhpcyQxJDEpOyB9KTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblN0b3JlLnByb3RvdHlwZS5pbnN0YWxsID0gZnVuY3Rpb24gaW5zdGFsbCAoYXBwLCBpbmplY3RLZXkpIHtcbiAgYXBwLnByb3ZpZGUoaW5qZWN0S2V5IHx8IHN0b3JlS2V5LCB0aGlzKTtcbiAgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRzdG9yZSA9IHRoaXM7XG5cbiAgdmFyIHVzZURldnRvb2xzID0gdGhpcy5fZGV2dG9vbHMgIT09IHVuZGVmaW5lZFxuICAgID8gdGhpcy5fZGV2dG9vbHNcbiAgICA6IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX187XG5cbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgYWRkRGV2dG9vbHMoYXBwLCB0aGlzKTtcbiAgfVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnN0YXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3N0YXRlLmRhdGFcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGNvbW1pdFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG4gICAgdmFyIG9wdGlvbnMgPSByZWYub3B0aW9ucztcblxuICB2YXIgbXV0YXRpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fbXV0YXRpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvciAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGhpcy5fc3Vic2NyaWJlcnNcbiAgICAuc2xpY2UoKSAvLyBzaGFsbG93IGNvcHkgdG8gcHJldmVudCBpdGVyYXRvciBpbnZhbGlkYXRpb24gaWYgc3Vic2NyaWJlciBzeW5jaHJvbm91c2x5IGNhbGxzIHVuc3Vic2NyaWJlXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKG11dGF0aW9uLCB0aGlzJDEkMS5zdGF0ZSk7IH0pO1xuXG4gIGlmIChcbiAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICBvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50XG4gICkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiW3Z1ZXhdIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSArIFwiLiBTaWxlbnQgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIFwiICtcbiAgICAgICdVc2UgdGhlIGZpbHRlciBmdW5jdGlvbmFsaXR5IGluIHRoZSB2dWUtZGV2dG9vbHMnXG4gICAgKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKF90eXBlLCBfcGF5bG9hZCkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5zbGljZSgpIC8vIHNoYWxsb3cgY29weSB0byBwcmV2ZW50IGl0ZXJhdG9yIGludmFsaWRhdGlvbiBpZiBzdWJzY3JpYmVyIHN5bmNocm9ub3VzbHkgY2FsbHMgdW5zdWJzY3JpYmVcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEkMS5zdGF0ZSk7IH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGJlZm9yZSBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGVudHJ5Lmxlbmd0aCA+IDFcbiAgICA/IFByb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcihwYXlsb2FkKTsgfSkpXG4gICAgOiBlbnRyeVswXShwYXlsb2FkKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMkMSQxLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyOyB9KVxuICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5hZnRlcihhY3Rpb24sIHRoaXMkMSQxLnN0YXRlKTsgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcyQxJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuZXJyb3I7IH0pXG4gICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmVycm9yKGFjdGlvbiwgdGhpcyQxJDEuc3RhdGUsIGVycm9yKTsgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gZXJyb3IgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfSlcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUgKGZuLCBvcHRpb25zKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9zdWJzY3JpYmVycywgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpb24gPSBmdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24gKGZuLCBvcHRpb25zKSB7XG4gIHZhciBzdWJzID0gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nID8geyBiZWZvcmU6IGZuIH0gOiBmbjtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoc3VicywgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCQxIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXIodGhpcyQxJDEuc3RhdGUsIHRoaXMkMSQxLmdldHRlcnMpOyB9LCBjYiwgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxJDEuX3N0YXRlLmRhdGEgPSBzdGF0ZTtcbiAgfSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZSAocGF0aCwgcmF3TW9kdWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlU3RhdGUodGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMudW5yZWdpc3RlcihwYXRoKTtcbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUodGhpcyQxJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBkZWxldGUgcGFyZW50U3RhdGVbcGF0aFtwYXRoLmxlbmd0aCAtIDFdXTtcbiAgfSk7XG4gIHJlc2V0U3RvcmUodGhpcyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuaGFzTW9kdWxlID0gZnVuY3Rpb24gaGFzTW9kdWxlIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9tb2R1bGVzLmlzUmVnaXN0ZXJlZChwYXRoKVxufTtcblxuU3RvcmUucHJvdG90eXBlLmhvdFVwZGF0ZSA9IGZ1bmN0aW9uIGhvdFVwZGF0ZSAobmV3T3B0aW9ucykge1xuICB0aGlzLl9tb2R1bGVzLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgcmVzZXRTdG9yZSh0aGlzLCB0cnVlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdCA9IGZ1bmN0aW9uIF93aXRoQ29tbWl0IChmbikge1xuICB2YXIgY29tbWl0dGluZyA9IHRoaXMuX2NvbW1pdHRpbmc7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSB0cnVlO1xuICBmbigpO1xuICB0aGlzLl9jb21taXR0aW5nID0gY29tbWl0dGluZztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdG9yZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgc3RhdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBzdGF0ZXMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBzdGF0ZSBhbmQgZ2V0dGVycyBmb3IgcGFyYW0sIHlvdSBjYW4gZG8gc29tZXRoaW5nIGZvciBzdGF0ZSBhbmQgZ2V0dGVycyBpbiBpdC5cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICovXG52YXIgbWFwU3RhdGUgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgc3RhdGVzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNWYWxpZE1hcChzdGF0ZXMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcFN0YXRlOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbXV0YXRpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGNvbW1pdGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFub3RoZXIgcGFyYW1zLiBZb3UgY2FuIGNvbW1pdCBtdXRhdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBNdXRhdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgbXV0YXRpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNWYWxpZE1hcChtdXRhdGlvbnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcE11dGF0aW9uczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIEdldCB0aGUgY29tbWl0IG1ldGhvZCBmcm9tIHN0b3JlXG4gICAgICB2YXIgY29tbWl0ID0gdGhpcy4kc3RvcmUuY29tbWl0O1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBNdXRhdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbW1pdCA9IG1vZHVsZS5jb250ZXh0LmNvbW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtjb21taXRdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBjb21taXQuYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBnZXR0ZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBnZXR0ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBHZXR0ZXJzID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGdldHRlcnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1ZhbGlkTWFwKGdldHRlcnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcEdldHRlcnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKGdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgLy8gVGhlIG5hbWVzcGFjZSBoYXMgYmVlbiBtdXRhdGVkIGJ5IG5vcm1hbGl6ZU5hbWVzcGFjZVxuICAgIHZhbCA9IG5hbWVzcGFjZSArIHZhbDtcbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEdldHRlciAoKSB7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEdldHRlcnMnLCBuYW1lc3BhY2UpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhKHZhbCBpbiB0aGlzLiRzdG9yZS5nZXR0ZXJzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGdldHRlcjogXCIgKyB2YWwpKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1t2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBkaXNwYXRjaCB0aGUgYWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBhY3Rpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGRpc3BhdGNoYCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW50aG9yIHBhcmFtcy4gWW91IGNhbiBkaXNwYXRjaCBhY3Rpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNWYWxpZE1hcChhY3Rpb25zKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBBY3Rpb25zOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkQWN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBnZXQgZGlzcGF0Y2ggZnVuY3Rpb24gZnJvbSBzdG9yZVxuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy4kc3RvcmUuZGlzcGF0Y2g7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEFjdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoID0gbW9kdWxlLmNvbnRleHQuZGlzcGF0Y2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbZGlzcGF0Y2hdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBkaXNwYXRjaC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWJpbmRpbmcgbmFtZXNwYWNlIHBhcmFtIGZvciBtYXBYWFggZnVuY3Rpb24gaW4gc3BlY2lhbCBzY29wZWQsIGFuZCByZXR1cm4gdGhlbSBieSBzaW1wbGUgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsgcmV0dXJuICh7XG4gIG1hcFN0YXRlOiBtYXBTdGF0ZS5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpXG59KTsgfTtcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIG1hcFxuICogbm9ybWFsaXplTWFwKFsxLCAyLCAzXSkgPT4gWyB7IGtleTogMSwgdmFsOiAxIH0sIHsga2V5OiAyLCB2YWw6IDIgfSwgeyBrZXk6IDMsIHZhbDogMyB9IF1cbiAqIG5vcm1hbGl6ZU1hcCh7YTogMSwgYjogMiwgYzogM30pID0+IFsgeyBrZXk6ICdhJywgdmFsOiAxIH0sIHsga2V5OiAnYicsIHZhbDogMiB9LCB7IGtleTogJ2MnLCB2YWw6IDMgfSBdXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gbWFwXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1hcCAobWFwKSB7XG4gIGlmICghaXNWYWxpZE1hcChtYXApKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB3aGV0aGVyIGdpdmVuIG1hcCBpcyB2YWxpZCBvciBub3RcbiAqIEBwYXJhbSB7Kn0gbWFwXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKSB8fCBpc09iamVjdChtYXApXG59XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gZXhwZWN0IHR3byBwYXJhbSBjb250YWlucyBuYW1lc3BhY2UgYW5kIG1hcC4gaXQgd2lsbCBub3JtYWxpemUgdGhlIG5hbWVzcGFjZSBhbmQgdGhlbiB0aGUgcGFyYW0ncyBmdW5jdGlvbiB3aWxsIGhhbmRsZSB0aGUgbmV3IG5hbWVzcGFjZSBhbmQgdGhlIG1hcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAgPSBuYW1lc3BhY2U7XG4gICAgICBuYW1lc3BhY2UgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZS5jaGFyQXQobmFtZXNwYWNlLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIG5hbWVzcGFjZSArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiBmbihuYW1lc3BhY2UsIG1hcClcbiAgfVxufVxuXG4vKipcbiAqIFNlYXJjaCBhIHNwZWNpYWwgbW9kdWxlIGZyb20gc3RvcmUgYnkgbmFtZXNwYWNlLiBpZiBtb2R1bGUgbm90IGV4aXN0LCBwcmludCBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IHN0b3JlXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVscGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZHVsZUJ5TmFtZXNwYWNlIChzdG9yZSwgaGVscGVyLCBuYW1lc3BhY2UpIHtcbiAgdmFyIG1vZHVsZSA9IHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV07XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIW1vZHVsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIG1vZHVsZSBuYW1lc3BhY2Ugbm90IGZvdW5kIGluIFwiICsgaGVscGVyICsgXCIoKTogXCIgKyBuYW1lc3BhY2UpKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlXG59XG5cbi8vIENyZWRpdHM6IGJvcnJvd2VkIGNvZGUgZnJvbSBmY29tYi9yZWR1eC1sb2dnZXJcblxuZnVuY3Rpb24gY3JlYXRlTG9nZ2VyIChyZWYpIHtcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgY29sbGFwc2VkID0gcmVmLmNvbGxhcHNlZDsgaWYgKCBjb2xsYXBzZWQgPT09IHZvaWQgMCApIGNvbGxhcHNlZCA9IHRydWU7XG4gIHZhciBmaWx0ZXIgPSByZWYuZmlsdGVyOyBpZiAoIGZpbHRlciA9PT0gdm9pZCAwICkgZmlsdGVyID0gZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZUJlZm9yZSwgc3RhdGVBZnRlcikgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdmFyIHRyYW5zZm9ybWVyID0gcmVmLnRyYW5zZm9ybWVyOyBpZiAoIHRyYW5zZm9ybWVyID09PSB2b2lkIDAgKSB0cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGU7IH07XG4gIHZhciBtdXRhdGlvblRyYW5zZm9ybWVyID0gcmVmLm11dGF0aW9uVHJhbnNmb3JtZXI7IGlmICggbXV0YXRpb25UcmFuc2Zvcm1lciA9PT0gdm9pZCAwICkgbXV0YXRpb25UcmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChtdXQpIHsgcmV0dXJuIG11dDsgfTtcbiAgdmFyIGFjdGlvbkZpbHRlciA9IHJlZi5hY3Rpb25GaWx0ZXI7IGlmICggYWN0aW9uRmlsdGVyID09PSB2b2lkIDAgKSBhY3Rpb25GaWx0ZXIgPSBmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdmFyIGFjdGlvblRyYW5zZm9ybWVyID0gcmVmLmFjdGlvblRyYW5zZm9ybWVyOyBpZiAoIGFjdGlvblRyYW5zZm9ybWVyID09PSB2b2lkIDAgKSBhY3Rpb25UcmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChhY3QpIHsgcmV0dXJuIGFjdDsgfTtcbiAgdmFyIGxvZ011dGF0aW9ucyA9IHJlZi5sb2dNdXRhdGlvbnM7IGlmICggbG9nTXV0YXRpb25zID09PSB2b2lkIDAgKSBsb2dNdXRhdGlvbnMgPSB0cnVlO1xuICB2YXIgbG9nQWN0aW9ucyA9IHJlZi5sb2dBY3Rpb25zOyBpZiAoIGxvZ0FjdGlvbnMgPT09IHZvaWQgMCApIGxvZ0FjdGlvbnMgPSB0cnVlO1xuICB2YXIgbG9nZ2VyID0gcmVmLmxvZ2dlcjsgaWYgKCBsb2dnZXIgPT09IHZvaWQgMCApIGxvZ2dlciA9IGNvbnNvbGU7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIHZhciBwcmV2U3RhdGUgPSBkZWVwQ29weShzdG9yZS5zdGF0ZSk7XG5cbiAgICBpZiAodHlwZW9mIGxvZ2dlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChsb2dNdXRhdGlvbnMpIHtcbiAgICAgIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSBkZWVwQ29weShzdGF0ZSk7XG5cbiAgICAgICAgaWYgKGZpbHRlcihtdXRhdGlvbiwgcHJldlN0YXRlLCBuZXh0U3RhdGUpKSB7XG4gICAgICAgICAgdmFyIGZvcm1hdHRlZFRpbWUgPSBnZXRGb3JtYXR0ZWRUaW1lKCk7XG4gICAgICAgICAgdmFyIGZvcm1hdHRlZE11dGF0aW9uID0gbXV0YXRpb25UcmFuc2Zvcm1lcihtdXRhdGlvbik7XG4gICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIm11dGF0aW9uIFwiICsgKG11dGF0aW9uLnR5cGUpICsgZm9ybWF0dGVkVGltZTtcblxuICAgICAgICAgIHN0YXJ0TWVzc2FnZShsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCk7XG4gICAgICAgICAgbG9nZ2VyLmxvZygnJWMgcHJldiBzdGF0ZScsICdjb2xvcjogIzlFOUU5RTsgZm9udC13ZWlnaHQ6IGJvbGQnLCB0cmFuc2Zvcm1lcihwcmV2U3RhdGUpKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBtdXRhdGlvbicsICdjb2xvcjogIzAzQTlGNDsgZm9udC13ZWlnaHQ6IGJvbGQnLCBmb3JtYXR0ZWRNdXRhdGlvbik7XG4gICAgICAgICAgbG9nZ2VyLmxvZygnJWMgbmV4dCBzdGF0ZScsICdjb2xvcjogIzRDQUY1MDsgZm9udC13ZWlnaHQ6IGJvbGQnLCB0cmFuc2Zvcm1lcihuZXh0U3RhdGUpKTtcbiAgICAgICAgICBlbmRNZXNzYWdlKGxvZ2dlcik7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2U3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobG9nQWN0aW9ucykge1xuICAgICAgc3RvcmUuc3Vic2NyaWJlQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIHN0YXRlKSB7XG4gICAgICAgIGlmIChhY3Rpb25GaWx0ZXIoYWN0aW9uLCBzdGF0ZSkpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkVGltZSA9IGdldEZvcm1hdHRlZFRpbWUoKTtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkQWN0aW9uID0gYWN0aW9uVHJhbnNmb3JtZXIoYWN0aW9uKTtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiYWN0aW9uIFwiICsgKGFjdGlvbi50eXBlKSArIGZvcm1hdHRlZFRpbWU7XG5cbiAgICAgICAgICBzdGFydE1lc3NhZ2UobG9nZ2VyLCBtZXNzYWdlLCBjb2xsYXBzZWQpO1xuICAgICAgICAgIGxvZ2dlci5sb2coJyVjIGFjdGlvbicsICdjb2xvcjogIzAzQTlGNDsgZm9udC13ZWlnaHQ6IGJvbGQnLCBmb3JtYXR0ZWRBY3Rpb24pO1xuICAgICAgICAgIGVuZE1lc3NhZ2UobG9nZ2VyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0TWVzc2FnZSAobG9nZ2VyLCBtZXNzYWdlLCBjb2xsYXBzZWQpIHtcbiAgdmFyIHN0YXJ0TWVzc2FnZSA9IGNvbGxhcHNlZFxuICAgID8gbG9nZ2VyLmdyb3VwQ29sbGFwc2VkXG4gICAgOiBsb2dnZXIuZ3JvdXA7XG5cbiAgLy8gcmVuZGVyXG4gIHRyeSB7XG4gICAgc3RhcnRNZXNzYWdlLmNhbGwobG9nZ2VyLCBtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5sb2cobWVzc2FnZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kTWVzc2FnZSAobG9nZ2VyKSB7XG4gIHRyeSB7XG4gICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIubG9nKCfigJTigJQgbG9nIGVuZCDigJTigJQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRGb3JtYXR0ZWRUaW1lICgpIHtcbiAgdmFyIHRpbWUgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4gKFwiIEAgXCIgKyAocGFkKHRpbWUuZ2V0SG91cnMoKSwgMikpICsgXCI6XCIgKyAocGFkKHRpbWUuZ2V0TWludXRlcygpLCAyKSkgKyBcIjpcIiArIChwYWQodGltZS5nZXRTZWNvbmRzKCksIDIpKSArIFwiLlwiICsgKHBhZCh0aW1lLmdldE1pbGxpc2Vjb25kcygpLCAzKSkpXG59XG5cbmZ1bmN0aW9uIHJlcGVhdCAoc3RyLCB0aW1lcykge1xuICByZXR1cm4gKG5ldyBBcnJheSh0aW1lcyArIDEpKS5qb2luKHN0cilcbn1cblxuZnVuY3Rpb24gcGFkIChudW0sIG1heExlbmd0aCkge1xuICByZXR1cm4gcmVwZWF0KCcwJywgbWF4TGVuZ3RoIC0gbnVtLnRvU3RyaW5nKCkubGVuZ3RoKSArIG51bVxufVxuXG52YXIgaW5kZXggPSB7XG4gIHZlcnNpb246ICc0LjAuMicsXG4gIFN0b3JlOiBTdG9yZSxcbiAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICBjcmVhdGVTdG9yZTogY3JlYXRlU3RvcmUsXG4gIHVzZVN0b3JlOiB1c2VTdG9yZSxcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucyxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycyxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucyxcbiAgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6IGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzLFxuICBjcmVhdGVMb2dnZXI6IGNyZWF0ZUxvZ2dlclxufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG5leHBvcnQgeyBTdG9yZSwgY3JlYXRlTG9nZ2VyLCBjcmVhdGVOYW1lc3BhY2VkSGVscGVycywgY3JlYXRlU3RvcmUsIG1hcEFjdGlvbnMsIG1hcEdldHRlcnMsIG1hcE11dGF0aW9ucywgbWFwU3RhdGUsIHN0b3JlS2V5LCB1c2VTdG9yZSB9O1xuIiwiLyohXG4gICogdnVlLXJvdXRlciB2NC4xLjVcbiAgKiAoYykgMjAyMiBFZHVhcmRvIFNhbiBNYXJ0aW4gTW9yb3RlXG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIGluamVjdCwgb25Vbm1vdW50ZWQsIG9uRGVhY3RpdmF0ZWQsIG9uQWN0aXZhdGVkLCBjb21wdXRlZCwgdW5yZWYsIHdhdGNoRWZmZWN0LCBkZWZpbmVDb21wb25lbnQsIHJlYWN0aXZlLCBoLCBwcm92aWRlLCByZWYsIHdhdGNoLCBzaGFsbG93UmVmLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBzZXR1cERldnRvb2xzUGx1Z2luIH0gZnJvbSAnQHZ1ZS9kZXZ0b29scy1hcGknO1xuXG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZShvYmopIHtcclxuICAgIHJldHVybiBvYmouX19lc01vZHVsZSB8fCBvYmpbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZSc7XHJcbn1cclxuY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxuZnVuY3Rpb24gYXBwbHlUb1BhcmFtcyhmbiwgcGFyYW1zKSB7XHJcbiAgICBjb25zdCBuZXdQYXJhbXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV07XHJcbiAgICAgICAgbmV3UGFyYW1zW2tleV0gPSBpc0FycmF5KHZhbHVlKVxyXG4gICAgICAgICAgICA/IHZhbHVlLm1hcChmbilcclxuICAgICAgICAgICAgOiBmbih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG59XHJcbmNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XHJcbi8qKlxyXG4gKiBUeXBlc2FmZSBhbHRlcm5hdGl2ZSB0byBBcnJheS5pc0FycmF5XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzQ4MjI4XHJcbiAqL1xyXG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZnVuY3Rpb24gd2Fybihtc2cpIHtcclxuICAgIC8vIGF2b2lkIHVzaW5nIC4uLmFyZ3MgYXMgaXQgYnJlYWtzIGluIG9sZGVyIEVkZ2UgYnVpbGRzXHJcbiAgICBjb25zdCBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLnNsaWNlKDEpO1xyXG4gICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIFsnW1Z1ZSBSb3V0ZXIgd2Fybl06ICcgKyBtc2ddLmNvbmNhdChhcmdzKSk7XHJcbn1cblxuY29uc3QgVFJBSUxJTkdfU0xBU0hfUkUgPSAvXFwvJC87XHJcbmNvbnN0IHJlbW92ZVRyYWlsaW5nU2xhc2ggPSAocGF0aCkgPT4gcGF0aC5yZXBsYWNlKFRSQUlMSU5HX1NMQVNIX1JFLCAnJyk7XHJcbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIGEgVVJJIGludG8gYSBub3JtYWxpemVkIGhpc3RvcnkgbG9jYXRpb25cclxuICpcclxuICogQHBhcmFtIHBhcnNlUXVlcnlcclxuICogQHBhcmFtIGxvY2F0aW9uIC0gVVJJIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcGFyYW0gY3VycmVudExvY2F0aW9uIC0gY3VycmVudCBhYnNvbHV0ZSBsb2NhdGlvbi4gQWxsb3dzIHJlc29sdmluZyByZWxhdGl2ZVxyXG4gKiBwYXRocy4gTXVzdCBzdGFydCB3aXRoIGAvYC4gRGVmYXVsdHMgdG8gYC9gXHJcbiAqIEByZXR1cm5zIGEgbm9ybWFsaXplZCBoaXN0b3J5IGxvY2F0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZVVSTChwYXJzZVF1ZXJ5LCBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uID0gJy8nKSB7XHJcbiAgICBsZXQgcGF0aCwgcXVlcnkgPSB7fSwgc2VhcmNoU3RyaW5nID0gJycsIGhhc2ggPSAnJztcclxuICAgIC8vIENvdWxkIHVzZSBVUkwgYW5kIFVSTFNlYXJjaFBhcmFtcyBidXQgSUUgMTEgZG9lc24ndCBzdXBwb3J0IGl0XHJcbiAgICAvLyBUT0RPOiBtb3ZlIHRvIG5ldyBVUkwoKVxyXG4gICAgY29uc3QgaGFzaFBvcyA9IGxvY2F0aW9uLmluZGV4T2YoJyMnKTtcclxuICAgIGxldCBzZWFyY2hQb3MgPSBsb2NhdGlvbi5pbmRleE9mKCc/Jyk7XHJcbiAgICAvLyB0aGUgaGFzaCBhcHBlYXJzIGJlZm9yZSB0aGUgc2VhcmNoLCBzbyBpdCdzIG5vdCBwYXJ0IG9mIHRoZSBzZWFyY2ggc3RyaW5nXHJcbiAgICBpZiAoaGFzaFBvcyA8IHNlYXJjaFBvcyAmJiBoYXNoUG9zID49IDApIHtcclxuICAgICAgICBzZWFyY2hQb3MgPSAtMTtcclxuICAgIH1cclxuICAgIGlmIChzZWFyY2hQb3MgPiAtMSkge1xyXG4gICAgICAgIHBhdGggPSBsb2NhdGlvbi5zbGljZSgwLCBzZWFyY2hQb3MpO1xyXG4gICAgICAgIHNlYXJjaFN0cmluZyA9IGxvY2F0aW9uLnNsaWNlKHNlYXJjaFBvcyArIDEsIGhhc2hQb3MgPiAtMSA/IGhhc2hQb3MgOiBsb2NhdGlvbi5sZW5ndGgpO1xyXG4gICAgICAgIHF1ZXJ5ID0gcGFyc2VRdWVyeShzZWFyY2hTdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGhhc2hQb3MgPiAtMSkge1xyXG4gICAgICAgIHBhdGggPSBwYXRoIHx8IGxvY2F0aW9uLnNsaWNlKDAsIGhhc2hQb3MpO1xyXG4gICAgICAgIC8vIGtlZXAgdGhlICMgY2hhcmFjdGVyXHJcbiAgICAgICAgaGFzaCA9IGxvY2F0aW9uLnNsaWNlKGhhc2hQb3MsIGxvY2F0aW9uLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICAvLyBubyBzZWFyY2ggYW5kIG5vIHF1ZXJ5XHJcbiAgICBwYXRoID0gcmVzb2x2ZVJlbGF0aXZlUGF0aChwYXRoICE9IG51bGwgPyBwYXRoIDogbG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAvLyBlbXB0eSBwYXRoIG1lYW5zIGEgcmVsYXRpdmUgcXVlcnkgb3IgaGFzaCBgP2Zvbz1mYCwgYCN0aGluZ2BcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZnVsbFBhdGg6IHBhdGggKyAoc2VhcmNoU3RyaW5nICYmICc/JykgKyBzZWFyY2hTdHJpbmcgKyBoYXNoLFxyXG4gICAgICAgIHBhdGgsXHJcbiAgICAgICAgcXVlcnksXHJcbiAgICAgICAgaGFzaCxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIGEgVVJMIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5naWZ5UXVlcnlcclxuICogQHBhcmFtIGxvY2F0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnlVUkwoc3RyaW5naWZ5UXVlcnksIGxvY2F0aW9uKSB7XHJcbiAgICBjb25zdCBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5ID8gc3RyaW5naWZ5UXVlcnkobG9jYXRpb24ucXVlcnkpIDogJyc7XHJcbiAgICByZXR1cm4gbG9jYXRpb24ucGF0aCArIChxdWVyeSAmJiAnPycpICsgcXVlcnkgKyAobG9jYXRpb24uaGFzaCB8fCAnJyk7XHJcbn1cclxuLyoqXHJcbiAqIFN0cmlwcyBvZmYgdGhlIGJhc2UgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIGEgbG9jYXRpb24ucGF0aG5hbWUgaW4gYSBub24tY2FzZS1zZW5zaXRpdmUgd2F5LlxyXG4gKlxyXG4gKiBAcGFyYW0gcGF0aG5hbWUgLSBsb2NhdGlvbi5wYXRobmFtZVxyXG4gKiBAcGFyYW0gYmFzZSAtIGJhc2UgdG8gc3RyaXAgb2ZmXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpcEJhc2UocGF0aG5hbWUsIGJhc2UpIHtcclxuICAgIC8vIG5vIGJhc2Ugb3IgYmFzZSBpcyBub3QgZm91bmQgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgaWYgKCFiYXNlIHx8ICFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZS50b0xvd2VyQ2FzZSgpKSlcclxuICAgICAgICByZXR1cm4gcGF0aG5hbWU7XHJcbiAgICByZXR1cm4gcGF0aG5hbWUuc2xpY2UoYmFzZS5sZW5ndGgpIHx8ICcvJztcclxufVxyXG4vKipcclxuICogQ2hlY2tzIGlmIHR3byBSb3V0ZUxvY2F0aW9uIGFyZSBlcXVhbC4gVGhpcyBtZWFucyB0aGF0IGJvdGggbG9jYXRpb25zIGFyZVxyXG4gKiBwb2ludGluZyB0b3dhcmRzIHRoZSBzYW1lIHtAbGluayBSb3V0ZVJlY29yZH0gYW5kIHRoYXQgYWxsIGBwYXJhbXNgLCBgcXVlcnlgXHJcbiAqIHBhcmFtZXRlcnMgYW5kIGBoYXNoYCBhcmUgdGhlIHNhbWVcclxuICpcclxuICogQHBhcmFtIGEgLSBmaXJzdCB7QGxpbmsgUm91dGVMb2NhdGlvbn1cclxuICogQHBhcmFtIGIgLSBzZWNvbmQge0BsaW5rIFJvdXRlTG9jYXRpb259XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZUxvY2F0aW9uKHN0cmluZ2lmeVF1ZXJ5LCBhLCBiKSB7XHJcbiAgICBjb25zdCBhTGFzdEluZGV4ID0gYS5tYXRjaGVkLmxlbmd0aCAtIDE7XHJcbiAgICBjb25zdCBiTGFzdEluZGV4ID0gYi5tYXRjaGVkLmxlbmd0aCAtIDE7XHJcbiAgICByZXR1cm4gKGFMYXN0SW5kZXggPiAtMSAmJlxyXG4gICAgICAgIGFMYXN0SW5kZXggPT09IGJMYXN0SW5kZXggJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZVJlY29yZChhLm1hdGNoZWRbYUxhc3RJbmRleF0sIGIubWF0Y2hlZFtiTGFzdEluZGV4XSkgJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEucGFyYW1zLCBiLnBhcmFtcykgJiZcclxuICAgICAgICBzdHJpbmdpZnlRdWVyeShhLnF1ZXJ5KSA9PT0gc3RyaW5naWZ5UXVlcnkoYi5xdWVyeSkgJiZcclxuICAgICAgICBhLmhhc2ggPT09IGIuaGFzaCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIHR3byBgUm91dGVSZWNvcmRzYCBhcmUgZXF1YWwuIFRha2VzIGludG8gYWNjb3VudCBhbGlhc2VzOiB0aGV5IGFyZVxyXG4gKiBjb25zaWRlcmVkIGVxdWFsIHRvIHRoZSBgUm91dGVSZWNvcmRgIHRoZXkgYXJlIGFsaWFzaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IHtAbGluayBSb3V0ZVJlY29yZH1cclxuICogQHBhcmFtIGIgLSBzZWNvbmQge0BsaW5rIFJvdXRlUmVjb3JkfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVSZWNvcmQoYSwgYikge1xyXG4gICAgLy8gc2luY2UgdGhlIG9yaWdpbmFsIHJlY29yZCBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGZvciBhbGlhc09mXHJcbiAgICAvLyBidXQgYWxsIGFsaWFzZXMgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIHJlY29yZCwgdGhpcyB3aWxsIGFsd2F5cyBjb21wYXJlXHJcbiAgICAvLyB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICByZXR1cm4gKGEuYWxpYXNPZiB8fCBhKSA9PT0gKGIuYWxpYXNPZiB8fCBiKTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEsIGIpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhKSB7XHJcbiAgICAgICAgaWYgKCFpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zVmFsdWUoYVtrZXldLCBiW2tleV0pKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zVmFsdWUoYSwgYikge1xyXG4gICAgcmV0dXJuIGlzQXJyYXkoYSlcclxuICAgICAgICA/IGlzRXF1aXZhbGVudEFycmF5KGEsIGIpXHJcbiAgICAgICAgOiBpc0FycmF5KGIpXHJcbiAgICAgICAgICAgID8gaXNFcXVpdmFsZW50QXJyYXkoYiwgYSlcclxuICAgICAgICAgICAgOiBhID09PSBiO1xyXG59XHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0d28gYXJyYXlzIGFyZSB0aGUgc2FtZSBvciBpZiBhbiBhcnJheSB3aXRoIG9uZSBzaW5nbGUgZW50cnkgaXMgdGhlXHJcbiAqIHNhbWUgYXMgYW5vdGhlciBwcmltaXRpdmUgdmFsdWUuIFVzZWQgdG8gY2hlY2sgcXVlcnkgYW5kIHBhcmFtZXRlcnNcclxuICpcclxuICogQHBhcmFtIGEgLSBhcnJheSBvZiB2YWx1ZXNcclxuICogQHBhcmFtIGIgLSBhcnJheSBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIGlzRXF1aXZhbGVudEFycmF5KGEsIGIpIHtcclxuICAgIHJldHVybiBpc0FycmF5KGIpXHJcbiAgICAgICAgPyBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeSgodmFsdWUsIGkpID0+IHZhbHVlID09PSBiW2ldKVxyXG4gICAgICAgIDogYS5sZW5ndGggPT09IDEgJiYgYVswXSA9PT0gYjtcclxufVxyXG4vKipcclxuICogUmVzb2x2ZXMgYSByZWxhdGl2ZSBwYXRoIHRoYXQgc3RhcnRzIHdpdGggYC5gLlxyXG4gKlxyXG4gKiBAcGFyYW0gdG8gLSBwYXRoIGxvY2F0aW9uIHdlIGFyZSByZXNvbHZpbmdcclxuICogQHBhcmFtIGZyb20gLSBjdXJyZW50TG9jYXRpb24ucGF0aCwgc2hvdWxkIHN0YXJ0IHdpdGggYC9gXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlUmVsYXRpdmVQYXRoKHRvLCBmcm9tKSB7XHJcbiAgICBpZiAodG8uc3RhcnRzV2l0aCgnLycpKVxyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZyb20uc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgd2FybihgQ2Fubm90IHJlc29sdmUgYSByZWxhdGl2ZSBsb2NhdGlvbiB3aXRob3V0IGFuIGFic29sdXRlIHBhdGguIFRyeWluZyB0byByZXNvbHZlIFwiJHt0b31cIiBmcm9tIFwiJHtmcm9tfVwiLiBJdCBzaG91bGQgbG9vayBsaWtlIFwiLyR7ZnJvbX1cIi5gKTtcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICB9XHJcbiAgICBpZiAoIXRvKVxyXG4gICAgICAgIHJldHVybiBmcm9tO1xyXG4gICAgY29uc3QgZnJvbVNlZ21lbnRzID0gZnJvbS5zcGxpdCgnLycpO1xyXG4gICAgY29uc3QgdG9TZWdtZW50cyA9IHRvLnNwbGl0KCcvJyk7XHJcbiAgICBsZXQgcG9zaXRpb24gPSBmcm9tU2VnbWVudHMubGVuZ3RoIC0gMTtcclxuICAgIGxldCB0b1Bvc2l0aW9uO1xyXG4gICAgbGV0IHNlZ21lbnQ7XHJcbiAgICBmb3IgKHRvUG9zaXRpb24gPSAwOyB0b1Bvc2l0aW9uIDwgdG9TZWdtZW50cy5sZW5ndGg7IHRvUG9zaXRpb24rKykge1xyXG4gICAgICAgIHNlZ21lbnQgPSB0b1NlZ21lbnRzW3RvUG9zaXRpb25dO1xyXG4gICAgICAgIC8vIHdlIHN0YXkgb24gdGhlIHNhbWUgcG9zaXRpb25cclxuICAgICAgICBpZiAoc2VnbWVudCA9PT0gJy4nKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAvLyBnbyB1cCBpbiB0aGUgZnJvbSBhcnJheVxyXG4gICAgICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7XHJcbiAgICAgICAgICAgIC8vIHdlIGNhbid0IGdvIGJlbG93IHplcm8sIGJ1dCB3ZSBzdGlsbCBuZWVkIHRvIGluY3JlbWVudCB0b1Bvc2l0aW9uXHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA+IDEpXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi0tO1xyXG4gICAgICAgICAgICAvLyBjb250aW51ZVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSByZWFjaGVkIGEgbm9uLXJlbGF0aXZlIHBhdGgsIHdlIHN0b3AgaGVyZVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGZyb21TZWdtZW50cy5zbGljZSgwLCBwb3NpdGlvbikuam9pbignLycpICtcclxuICAgICAgICAnLycgK1xyXG4gICAgICAgIHRvU2VnbWVudHNcclxuICAgICAgICAgICAgLy8gZW5zdXJlIHdlIHVzZSBhdCBsZWFzdCB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSB0b1NlZ21lbnRzXHJcbiAgICAgICAgICAgIC5zbGljZSh0b1Bvc2l0aW9uIC0gKHRvUG9zaXRpb24gPT09IHRvU2VnbWVudHMubGVuZ3RoID8gMSA6IDApKVxyXG4gICAgICAgICAgICAuam9pbignLycpKTtcclxufVxuXG52YXIgTmF2aWdhdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoTmF2aWdhdGlvblR5cGUpIHtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicG9wXCJdID0gXCJwb3BcIjtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicHVzaFwiXSA9IFwicHVzaFwiO1xyXG59KShOYXZpZ2F0aW9uVHlwZSB8fCAoTmF2aWdhdGlvblR5cGUgPSB7fSkpO1xyXG52YXIgTmF2aWdhdGlvbkRpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uRGlyZWN0aW9uKSB7XHJcbiAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uW1wiYmFja1wiXSA9IFwiYmFja1wiO1xyXG4gICAgTmF2aWdhdGlvbkRpcmVjdGlvbltcImZvcndhcmRcIl0gPSBcImZvcndhcmRcIjtcclxuICAgIE5hdmlnYXRpb25EaXJlY3Rpb25bXCJ1bmtub3duXCJdID0gXCJcIjtcclxufSkoTmF2aWdhdGlvbkRpcmVjdGlvbiB8fCAoTmF2aWdhdGlvbkRpcmVjdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBTdGFydGluZyBsb2NhdGlvbiBmb3IgSGlzdG9yaWVzXHJcbiAqL1xyXG5jb25zdCBTVEFSVCA9ICcnO1xyXG4vLyBHZW5lcmljIHV0aWxzXHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIGEgYmFzZSBieSByZW1vdmluZyBhbnkgdHJhaWxpbmcgc2xhc2ggYW5kIHJlYWRpbmcgdGhlIGJhc2UgdGFnIGlmXHJcbiAqIHByZXNlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gYmFzZSB0byBub3JtYWxpemVcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UoYmFzZSkge1xyXG4gICAgaWYgKCFiYXNlKSB7XHJcbiAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcclxuICAgICAgICAgICAgY29uc3QgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xyXG4gICAgICAgICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcclxuICAgICAgICAgICAgLy8gc3RyaXAgZnVsbCBVUkwgb3JpZ2luXHJcbiAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15cXHcrOlxcL1xcL1teXFwvXSsvLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBiYXNlID0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoIHdoZW4gaXQgd2FzIHJlbW92ZWQgYnkgdGhlIHJlZ2V4IGFib3ZlIGF2b2lkIGxlYWRpbmdcclxuICAgIC8vIHNsYXNoIHdpdGggaGFzaCBiZWNhdXNlIHRoZSBmaWxlIGNvdWxkIGJlIHJlYWQgZnJvbSB0aGUgZGlzayBsaWtlIGZpbGU6Ly9cclxuICAgIC8vIGFuZCB0aGUgbGVhZGluZyBzbGFzaCB3b3VsZCBjYXVzZSBwcm9ibGVtc1xyXG4gICAgaWYgKGJhc2VbMF0gIT09ICcvJyAmJiBiYXNlWzBdICE9PSAnIycpXHJcbiAgICAgICAgYmFzZSA9ICcvJyArIGJhc2U7XHJcbiAgICAvLyByZW1vdmUgdGhlIHRyYWlsaW5nIHNsYXNoIHNvIGFsbCBvdGhlciBtZXRob2QgY2FuIGp1c3QgZG8gYGJhc2UgKyBmdWxsUGF0aGBcclxuICAgIC8vIHRvIGJ1aWxkIGFuIGhyZWZcclxuICAgIHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKGJhc2UpO1xyXG59XHJcbi8vIHJlbW92ZSBhbnkgY2hhcmFjdGVyIGJlZm9yZSB0aGUgaGFzaFxyXG5jb25zdCBCRUZPUkVfSEFTSF9SRSA9IC9eW14jXSsjLztcclxuZnVuY3Rpb24gY3JlYXRlSHJlZihiYXNlLCBsb2NhdGlvbikge1xyXG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShCRUZPUkVfSEFTSF9SRSwgJyMnKSArIGxvY2F0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBkb2NSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJlaGF2aW9yOiBvZmZzZXQuYmVoYXZpb3IsXHJcbiAgICAgICAgbGVmdDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSAob2Zmc2V0LmxlZnQgfHwgMCksXHJcbiAgICAgICAgdG9wOiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSAob2Zmc2V0LnRvcCB8fCAwKSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgY29tcHV0ZVNjcm9sbFBvc2l0aW9uID0gKCkgPT4gKHtcclxuICAgIGxlZnQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcclxuICAgIHRvcDogd2luZG93LnBhZ2VZT2Zmc2V0LFxyXG59KTtcclxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbikge1xyXG4gICAgbGV0IHNjcm9sbFRvT3B0aW9ucztcclxuICAgIGlmICgnZWwnIGluIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25FbCA9IHBvc2l0aW9uLmVsO1xyXG4gICAgICAgIGNvbnN0IGlzSWRTZWxlY3RvciA9IHR5cGVvZiBwb3NpdGlvbkVsID09PSAnc3RyaW5nJyAmJiBwb3NpdGlvbkVsLnN0YXJ0c1dpdGgoJyMnKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBgaWRgcyBjYW4gYWNjZXB0IHByZXR0eSBtdWNoIGFueSBjaGFyYWN0ZXJzLCBpbmNsdWRpbmcgQ1NTIGNvbWJpbmF0b3JzXHJcbiAgICAgICAgICogbGlrZSBgPmAgb3IgYH5gLiBJdCdzIHN0aWxsIHBvc3NpYmxlIHRvIHJldHJpZXZlIGVsZW1lbnRzIHVzaW5nXHJcbiAgICAgICAgICogYGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd+JylgIGJ1dCBpdCBuZWVkcyB0byBiZSBlc2NhcGVkIHdoZW4gdXNpbmdcclxuICAgICAgICAgKiBgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI1xcXFx+JylgIGZvciBpdCB0byBiZSB2YWxpZC4gVGhlIG9ubHlcclxuICAgICAgICAgKiByZXF1aXJlbWVudHMgZm9yIGBpZGBzIGFyZSB0aGVtIHRvIGJlIHVuaXF1ZSBvbiB0aGUgcGFnZSBhbmQgdG8gbm90IGJlXHJcbiAgICAgICAgICogZW1wdHkgKGBpZD1cIlwiYCkuIEJlY2F1c2Ugb2YgdGhhdCwgd2hlbiBwYXNzaW5nIGFuIGlkIHNlbGVjdG9yLCBpdCBzaG91bGRcclxuICAgICAgICAgKiBiZSBwcm9wZXJseSBlc2NhcGVkIGZvciBpdCB0byB3b3JrIHdpdGggYHF1ZXJ5U2VsZWN0b3JgLiBXZSBjb3VsZCBjaGVja1xyXG4gICAgICAgICAqIGZvciB0aGUgaWQgc2VsZWN0b3IgdG8gYmUgc2ltcGxlIChubyBDU1MgY29tYmluYXRvcnMgYCsgPn5gKSBidXQgdGhhdFxyXG4gICAgICAgICAqIHdvdWxkIG1ha2UgdGhpbmdzIGluY29uc2lzdGVudCBzaW5jZSB0aGV5IGFyZSB2YWxpZCBjaGFyYWN0ZXJzIGZvciBhblxyXG4gICAgICAgICAqIGBpZGAgYnV0IHdvdWxkIG5lZWQgdG8gYmUgZXNjYXBlZCB3aGVuIHVzaW5nIGBxdWVyeVNlbGVjdG9yYCwgYnJlYWtpbmdcclxuICAgICAgICAgKiB0aGVpciB1c2FnZSBhbmQgZW5kaW5nIHVwIGluIG5vIHNlbGVjdG9yIHJldHVybmVkLiBTZWxlY3RvcnMgbmVlZCB0byBiZVxyXG4gICAgICAgICAqIGVzY2FwZWQ6XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAtIGAjMS10aGluZ2AgYmVjb21lcyBgI1xcMzEgLXRoaW5nYFxyXG4gICAgICAgICAqIC0gYCN3aXRofnN5bWJvbHNgIGJlY29tZXMgYCN3aXRoXFxcXH5zeW1ib2xzYFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogLSBNb3JlIGluZm9ybWF0aW9uIGFib3V0ICB0aGUgdG9waWMgY2FuIGJlIGZvdW5kIGF0XHJcbiAgICAgICAgICogICBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvaHRtbDUtaWQtY2xhc3MuXHJcbiAgICAgICAgICogLSBQcmFjdGljYWwgZXhhbXBsZTogaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL2RlbW8vaHRtbDUtaWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHR5cGVvZiBwb3NpdGlvbi5lbCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKCFpc0lkU2VsZWN0b3IgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvc2l0aW9uLmVsLnNsaWNlKDEpKSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3VuZEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3NpdGlvbi5lbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSWRTZWxlY3RvciAmJiBmb3VuZEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYFRoZSBzZWxlY3RvciBcIiR7cG9zaXRpb24uZWx9XCIgc2hvdWxkIGJlIHBhc3NlZCBhcyBcImVsOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcke3Bvc2l0aW9uLmVsfScpXCIgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBcIiNcIi5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRvIGF2b2lkIG90aGVyIHdhcm5pbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgVGhlIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiBpcyBpbnZhbGlkLiBJZiB5b3UgYXJlIHVzaW5nIGFuIGlkIHNlbGVjdG9yLCBtYWtlIHN1cmUgdG8gZXNjYXBlIGl0LiBZb3UgY2FuIGZpbmQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBlc2NhcGluZyBjaGFyYWN0ZXJzIGluIHNlbGVjdG9ycyBhdCBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvY3NzLWVzY2FwZXMgb3IgdXNlIENTUy5lc2NhcGUgKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DU1MvZXNjYXBlKS5gKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdG8gYXZvaWQgb3RoZXIgd2FybmluZ3NcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZWwgPSB0eXBlb2YgcG9zaXRpb25FbCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBpc0lkU2VsZWN0b3JcclxuICAgICAgICAgICAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9zaXRpb25FbC5zbGljZSgxKSlcclxuICAgICAgICAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3NpdGlvbkVsKVxyXG4gICAgICAgICAgICA6IHBvc2l0aW9uRWw7XHJcbiAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYENvdWxkbid0IGZpbmQgZWxlbWVudCB1c2luZyBzZWxlY3RvciBcIiR7cG9zaXRpb24uZWx9XCIgcmV0dXJuZWQgYnkgc2Nyb2xsQmVoYXZpb3IuYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2Nyb2xsVG9PcHRpb25zID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBwb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzY3JvbGxUb09wdGlvbnMgPSBwb3NpdGlvbjtcclxuICAgIH1cclxuICAgIGlmICgnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSlcclxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsVG9PcHRpb25zKTtcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxUb09wdGlvbnMubGVmdCAhPSBudWxsID8gc2Nyb2xsVG9PcHRpb25zLmxlZnQgOiB3aW5kb3cucGFnZVhPZmZzZXQsIHNjcm9sbFRvT3B0aW9ucy50b3AgIT0gbnVsbCA/IHNjcm9sbFRvT3B0aW9ucy50b3AgOiB3aW5kb3cucGFnZVlPZmZzZXQpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldFNjcm9sbEtleShwYXRoLCBkZWx0YSkge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSBoaXN0b3J5LnN0YXRlID8gaGlzdG9yeS5zdGF0ZS5wb3NpdGlvbiAtIGRlbHRhIDogLTE7XHJcbiAgICByZXR1cm4gcG9zaXRpb24gKyBwYXRoO1xyXG59XHJcbmNvbnN0IHNjcm9sbFBvc2l0aW9ucyA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGtleSwgc2Nyb2xsUG9zaXRpb24pIHtcclxuICAgIHNjcm9sbFBvc2l0aW9ucy5zZXQoa2V5LCBzY3JvbGxQb3NpdGlvbik7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihrZXkpIHtcclxuICAgIGNvbnN0IHNjcm9sbCA9IHNjcm9sbFBvc2l0aW9ucy5nZXQoa2V5KTtcclxuICAgIC8vIGNvbnN1bWUgaXQgc28gaXQncyBub3QgdXNlZCBhZ2FpblxyXG4gICAgc2Nyb2xsUG9zaXRpb25zLmRlbGV0ZShrZXkpO1xyXG4gICAgcmV0dXJuIHNjcm9sbDtcclxufVxyXG4vLyBUT0RPOiBSRkMgYWJvdXQgaG93IHRvIHNhdmUgc2Nyb2xsIHBvc2l0aW9uXHJcbi8qKlxyXG4gKiBTY3JvbGxCZWhhdmlvciBpbnN0YW5jZSB1c2VkIGJ5IHRoZSByb3V0ZXIgdG8gY29tcHV0ZSBhbmQgcmVzdG9yZSB0aGUgc2Nyb2xsXHJcbiAqIHBvc2l0aW9uIHdoZW4gbmF2aWdhdGluZy5cclxuICovXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgU2Nyb2xsSGFuZGxlcjxTY3JvbGxQb3NpdGlvbkVudHJ5IGV4dGVuZHMgSGlzdG9yeVN0YXRlVmFsdWUsIFNjcm9sbFBvc2l0aW9uIGV4dGVuZHMgU2Nyb2xsUG9zaXRpb25FbnRyeT4ge1xyXG4vLyAgIC8vIHJldHVybnMgYSBzY3JvbGwgcG9zaXRpb24gdGhhdCBjYW4gYmUgc2F2ZWQgaW4gaGlzdG9yeVxyXG4vLyAgIGNvbXB1dGUoKTogU2Nyb2xsUG9zaXRpb25FbnRyeVxyXG4vLyAgIC8vIGNhbiB0YWtlIGFuIGV4dGVuZGVkIFNjcm9sbFBvc2l0aW9uRW50cnlcclxuLy8gICBzY3JvbGwocG9zaXRpb246IFNjcm9sbFBvc2l0aW9uKTogdm9pZFxyXG4vLyB9XHJcbi8vIGV4cG9ydCBjb25zdCBzY3JvbGxIYW5kbGVyOiBTY3JvbGxIYW5kbGVyPFNjcm9sbFBvc2l0aW9uPiA9IHtcclxuLy8gICBjb21wdXRlOiBjb21wdXRlU2Nyb2xsLFxyXG4vLyAgIHNjcm9sbDogc2Nyb2xsVG9Qb3NpdGlvbixcclxuLy8gfVxuXG5sZXQgY3JlYXRlQmFzZUxvY2F0aW9uID0gKCkgPT4gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdDtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBub3JtYWxpemVkIGhpc3RvcnkgbG9jYXRpb24gZnJvbSBhIHdpbmRvdy5sb2NhdGlvbiBvYmplY3RcclxuICogQHBhcmFtIGxvY2F0aW9uIC1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUN1cnJlbnRMb2NhdGlvbihiYXNlLCBsb2NhdGlvbikge1xyXG4gICAgY29uc3QgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0gPSBsb2NhdGlvbjtcclxuICAgIC8vIGFsbG93cyBoYXNoIGJhc2VzIGxpa2UgIywgLyMsICMvLCAjISwgIyEvLCAvIyEvLCBvciBldmVuIC9mb2xkZXIjZW5kXHJcbiAgICBjb25zdCBoYXNoUG9zID0gYmFzZS5pbmRleE9mKCcjJyk7XHJcbiAgICBpZiAoaGFzaFBvcyA+IC0xKSB7XHJcbiAgICAgICAgbGV0IHNsaWNlUG9zID0gaGFzaC5pbmNsdWRlcyhiYXNlLnNsaWNlKGhhc2hQb3MpKVxyXG4gICAgICAgICAgICA/IGJhc2Uuc2xpY2UoaGFzaFBvcykubGVuZ3RoXHJcbiAgICAgICAgICAgIDogMTtcclxuICAgICAgICBsZXQgcGF0aEZyb21IYXNoID0gaGFzaC5zbGljZShzbGljZVBvcyk7XHJcbiAgICAgICAgLy8gcHJlcGVuZCB0aGUgc3RhcnRpbmcgc2xhc2ggdG8gaGFzaCBzbyB0aGUgdXJsIHN0YXJ0cyB3aXRoIC8jXHJcbiAgICAgICAgaWYgKHBhdGhGcm9tSGFzaFswXSAhPT0gJy8nKVxyXG4gICAgICAgICAgICBwYXRoRnJvbUhhc2ggPSAnLycgKyBwYXRoRnJvbUhhc2g7XHJcbiAgICAgICAgcmV0dXJuIHN0cmlwQmFzZShwYXRoRnJvbUhhc2gsICcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGggPSBzdHJpcEJhc2UocGF0aG5hbWUsIGJhc2UpO1xyXG4gICAgcmV0dXJuIHBhdGggKyBzZWFyY2ggKyBoYXNoO1xyXG59XHJcbmZ1bmN0aW9uIHVzZUhpc3RvcnlMaXN0ZW5lcnMoYmFzZSwgaGlzdG9yeVN0YXRlLCBjdXJyZW50TG9jYXRpb24sIHJlcGxhY2UpIHtcclxuICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcclxuICAgIGxldCB0ZWFyZG93bnMgPSBbXTtcclxuICAgIC8vIFRPRE86IHNob3VsZCBpdCBiZSBhIHN0YWNrPyBhIERpY3QuIENoZWNrIGlmIHRoZSBwb3BzdGF0ZSBsaXN0ZW5lclxyXG4gICAgLy8gY2FuIHRyaWdnZXIgdHdpY2VcclxuICAgIGxldCBwYXVzZVN0YXRlID0gbnVsbDtcclxuICAgIGNvbnN0IHBvcFN0YXRlSGFuZGxlciA9ICh7IHN0YXRlLCB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG8gPSBjcmVhdGVDdXJyZW50TG9jYXRpb24oYmFzZSwgbG9jYXRpb24pO1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50TG9jYXRpb24udmFsdWU7XHJcbiAgICAgICAgY29uc3QgZnJvbVN0YXRlID0gaGlzdG9yeVN0YXRlLnZhbHVlO1xyXG4gICAgICAgIGxldCBkZWx0YSA9IDA7XHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbi52YWx1ZSA9IHRvO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgLy8gaWdub3JlIHRoZSBwb3BzdGF0ZSBhbmQgcmVzZXQgdGhlIHBhdXNlU3RhdGVcclxuICAgICAgICAgICAgaWYgKHBhdXNlU3RhdGUgJiYgcGF1c2VTdGF0ZSA9PT0gZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgcGF1c2VTdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsdGEgPSBmcm9tU3RhdGUgPyBzdGF0ZS5wb3NpdGlvbiAtIGZyb21TdGF0ZS5wb3NpdGlvbiA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXBsYWNlKHRvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeyBkZWx0YUZyb21DdXJyZW50IH0pXHJcbiAgICAgICAgLy8gSGVyZSB3ZSBjb3VsZCBhbHNvIHJldmVydCB0aGUgbmF2aWdhdGlvbiBieSBjYWxsaW5nIGhpc3RvcnkuZ28oLWRlbHRhKVxyXG4gICAgICAgIC8vIHRoaXMgbGlzdGVuZXIgd2lsbCBoYXZlIHRvIGJlIGFkYXB0ZWQgdG8gbm90IHRyaWdnZXIgYWdhaW4gYW5kIHRvIHdhaXQgZm9yIHRoZSB1cmxcclxuICAgICAgICAvLyB0byBiZSB1cGRhdGVkIGJlZm9yZSB0cmlnZ2VyaW5nIHRoZSBsaXN0ZW5lcnMuIFNvbWUga2luZCBvZiB2YWxpZGF0aW9uIGZ1bmN0aW9uIHdvdWxkIGFsc29cclxuICAgICAgICAvLyBuZWVkIHRvIGJlIHBhc3NlZCB0byB0aGUgbGlzdGVuZXJzIHNvIHRoZSBuYXZpZ2F0aW9uIGNhbiBiZSBhY2NlcHRlZFxyXG4gICAgICAgIC8vIGNhbGwgYWxsIGxpc3RlbmVyc1xyXG4gICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcclxuICAgICAgICAgICAgbGlzdGVuZXIoY3VycmVudExvY2F0aW9uLnZhbHVlLCBmcm9tLCB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IE5hdmlnYXRpb25UeXBlLnBvcCxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogZGVsdGFcclxuICAgICAgICAgICAgICAgICAgICA/IGRlbHRhID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IE5hdmlnYXRpb25EaXJlY3Rpb24uZm9yd2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE5hdmlnYXRpb25EaXJlY3Rpb24uYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIDogTmF2aWdhdGlvbkRpcmVjdGlvbi51bmtub3duLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBwYXVzZUxpc3RlbmVycygpIHtcclxuICAgICAgICBwYXVzZVN0YXRlID0gY3VycmVudExvY2F0aW9uLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbGlzdGVuKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gc2V0IHVwIHRoZSBsaXN0ZW5lciBhbmQgcHJlcGFyZSB0ZWFyZG93biBjYWxsYmFja3NcclxuICAgICAgICBsaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgY29uc3QgdGVhcmRvd24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGVhcmRvd25zLnB1c2godGVhcmRvd24pO1xyXG4gICAgICAgIHJldHVybiB0ZWFyZG93bjtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGJlZm9yZVVubG9hZExpc3RlbmVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gd2luZG93O1xyXG4gICAgICAgIGlmICghaGlzdG9yeS5zdGF0ZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGFzc2lnbih7fSwgaGlzdG9yeS5zdGF0ZSwgeyBzY3JvbGw6IGNvbXB1dGVTY3JvbGxQb3NpdGlvbigpIH0pLCAnJyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgdGVhcmRvd24gb2YgdGVhcmRvd25zKVxyXG4gICAgICAgICAgICB0ZWFyZG93bigpO1xyXG4gICAgICAgIHRlYXJkb3ducyA9IFtdO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcFN0YXRlSGFuZGxlcik7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGJlZm9yZVVubG9hZExpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIC8vIHNldCB1cCB0aGUgbGlzdGVuZXJzIGFuZCBwcmVwYXJlIHRlYXJkb3duIGNhbGxiYWNrc1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgcG9wU3RhdGVIYW5kbGVyKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBiZWZvcmVVbmxvYWRMaXN0ZW5lcik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhdXNlTGlzdGVuZXJzLFxyXG4gICAgICAgIGxpc3RlbixcclxuICAgICAgICBkZXN0cm95LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBhIHN0YXRlIG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gYnVpbGRTdGF0ZShiYWNrLCBjdXJyZW50LCBmb3J3YXJkLCByZXBsYWNlZCA9IGZhbHNlLCBjb21wdXRlU2Nyb2xsID0gZmFsc2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmFjayxcclxuICAgICAgICBjdXJyZW50LFxyXG4gICAgICAgIGZvcndhcmQsXHJcbiAgICAgICAgcmVwbGFjZWQsXHJcbiAgICAgICAgcG9zaXRpb246IHdpbmRvdy5oaXN0b3J5Lmxlbmd0aCxcclxuICAgICAgICBzY3JvbGw6IGNvbXB1dGVTY3JvbGwgPyBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSA6IG51bGwsXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHVzZUhpc3RvcnlTdGF0ZU5hdmlnYXRpb24oYmFzZSkge1xyXG4gICAgY29uc3QgeyBoaXN0b3J5LCBsb2NhdGlvbiB9ID0gd2luZG93O1xyXG4gICAgLy8gcHJpdmF0ZSB2YXJpYWJsZXNcclxuICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IHtcclxuICAgICAgICB2YWx1ZTogY3JlYXRlQ3VycmVudExvY2F0aW9uKGJhc2UsIGxvY2F0aW9uKSxcclxuICAgIH07XHJcbiAgICBjb25zdCBoaXN0b3J5U3RhdGUgPSB7IHZhbHVlOiBoaXN0b3J5LnN0YXRlIH07XHJcbiAgICAvLyBidWlsZCBjdXJyZW50IGhpc3RvcnkgZW50cnkgYXMgdGhpcyBpcyBhIGZyZXNoIG5hdmlnYXRpb25cclxuICAgIGlmICghaGlzdG9yeVN0YXRlLnZhbHVlKSB7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24oY3VycmVudExvY2F0aW9uLnZhbHVlLCB7XHJcbiAgICAgICAgICAgIGJhY2s6IG51bGwsXHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRMb2NhdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgZm9yd2FyZDogbnVsbCxcclxuICAgICAgICAgICAgLy8gdGhlIGxlbmd0aCBpcyBvZmYgYnkgb25lLCB3ZSBuZWVkIHRvIGRlY3JlYXNlIGl0XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBoaXN0b3J5Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgIHJlcGxhY2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBkb24ndCBhZGQgYSBzY3JvbGwgYXMgdGhlIHVzZXIgbWF5IGhhdmUgYW4gYW5jaG9yLCBhbmQgd2Ugd2FudFxyXG4gICAgICAgICAgICAvLyBzY3JvbGxCZWhhdmlvciB0byBiZSB0cmlnZ2VyZWQgd2l0aG91dCBhIHNhdmVkIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHNjcm9sbDogbnVsbCxcclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoYW5nZUxvY2F0aW9uKHRvLCBzdGF0ZSwgcmVwbGFjZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGlmIGEgYmFzZSB0YWcgaXMgcHJvdmlkZWQsIGFuZCB3ZSBhcmUgb24gYSBub3JtYWwgZG9tYWluLCB3ZSBoYXZlIHRvXHJcbiAgICAgICAgICogcmVzcGVjdCB0aGUgcHJvdmlkZWQgYGJhc2VgIGF0dHJpYnV0ZSBiZWNhdXNlIHB1c2hTdGF0ZSgpIHdpbGwgdXNlIGl0IGFuZFxyXG4gICAgICAgICAqIHBvdGVudGlhbGx5IGVyYXNlIGFueXRoaW5nIGJlZm9yZSB0aGUgYCNgIGxpa2UgYXRcclxuICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvcm91dGVyL2lzc3Vlcy82ODUgd2hlcmUgYSBiYXNlIG9mXHJcbiAgICAgICAgICogYC9mb2xkZXIvI2AgYnV0IGEgYmFzZSBvZiBgL2Agd291bGQgZXJhc2UgdGhlIGAvZm9sZGVyL2Agc2VjdGlvbi4gSWZcclxuICAgICAgICAgKiB0aGVyZSBpcyBubyBob3N0LCB0aGUgYDxiYXNlPmAgdGFnIG1ha2VzIG5vIHNlbnNlIGFuZCBpZiB0aGVyZSBpc24ndCBhXHJcbiAgICAgICAgICogYmFzZSB0YWcgd2UgY2FuIGp1c3QgdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGAjYC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBoYXNoSW5kZXggPSBiYXNlLmluZGV4T2YoJyMnKTtcclxuICAgICAgICBjb25zdCB1cmwgPSBoYXNoSW5kZXggPiAtMVxyXG4gICAgICAgICAgICA/IChsb2NhdGlvbi5ob3N0ICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKVxyXG4gICAgICAgICAgICAgICAgPyBiYXNlXHJcbiAgICAgICAgICAgICAgICA6IGJhc2Uuc2xpY2UoaGFzaEluZGV4KSkgKyB0b1xyXG4gICAgICAgICAgICA6IGNyZWF0ZUJhc2VMb2NhdGlvbigpICsgYmFzZSArIHRvO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIEJST1dTRVIgUVVJUktcclxuICAgICAgICAgICAgLy8gTk9URTogU2FmYXJpIHRocm93cyBhIFNlY3VyaXR5RXJyb3Igd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gMTAwIHRpbWVzIGluIDMwIHNlY29uZHNcclxuICAgICAgICAgICAgaGlzdG9yeVtyZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oc3RhdGUsICcnLCB1cmwpO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUgPSBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKCdFcnJvciB3aXRoIHB1c2gvcmVwbGFjZSBTdGF0ZScsIGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRm9yY2UgdGhlIG5hdmlnYXRpb24sIHRoaXMgYWxzbyByZXNldHMgdGhlIGNhbGwgY291bnRcclxuICAgICAgICAgICAgbG9jYXRpb25bcmVwbGFjZSA/ICdyZXBsYWNlJyA6ICdhc3NpZ24nXSh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlcGxhY2UodG8sIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IGFzc2lnbih7fSwgaGlzdG9yeS5zdGF0ZSwgYnVpbGRTdGF0ZShoaXN0b3J5U3RhdGUudmFsdWUuYmFjaywgXHJcbiAgICAgICAgLy8ga2VlcCBiYWNrIGFuZCBmb3J3YXJkIGVudHJpZXMgYnV0IG92ZXJyaWRlIGN1cnJlbnQgcG9zaXRpb25cclxuICAgICAgICB0bywgaGlzdG9yeVN0YXRlLnZhbHVlLmZvcndhcmQsIHRydWUpLCBkYXRhLCB7IHBvc2l0aW9uOiBoaXN0b3J5U3RhdGUudmFsdWUucG9zaXRpb24gfSk7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24odG8sIHN0YXRlLCB0cnVlKTtcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24udmFsdWUgPSB0bztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2godG8sIGRhdGEpIHtcclxuICAgICAgICAvLyBBZGQgdG8gY3VycmVudCBlbnRyeSB0aGUgaW5mb3JtYXRpb24gb2Ygd2hlcmUgd2UgYXJlIGdvaW5nXHJcbiAgICAgICAgLy8gYXMgd2VsbCBhcyBzYXZpbmcgdGhlIGN1cnJlbnQgcG9zaXRpb25cclxuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBhc3NpZ24oe30sIFxyXG4gICAgICAgIC8vIHVzZSBjdXJyZW50IGhpc3Rvcnkgc3RhdGUgdG8gZ3JhY2VmdWxseSBoYW5kbGUgYSB3cm9uZyBjYWxsIHRvXHJcbiAgICAgICAgLy8gaGlzdG9yeS5yZXBsYWNlU3RhdGVcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvcm91dGVyL2lzc3Vlcy8zNjZcclxuICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUsIGhpc3Rvcnkuc3RhdGUsIHtcclxuICAgICAgICAgICAgZm9yd2FyZDogdG8sXHJcbiAgICAgICAgICAgIHNjcm9sbDogY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGlzdG9yeS5zdGF0ZSkge1xyXG4gICAgICAgICAgICB3YXJuKGBoaXN0b3J5LnN0YXRlIHNlZW1zIHRvIGhhdmUgYmVlbiBtYW51YWxseSByZXBsYWNlZCB3aXRob3V0IHByZXNlcnZpbmcgdGhlIG5lY2Vzc2FyeSB2YWx1ZXMuIE1ha2Ugc3VyZSB0byBwcmVzZXJ2ZSBleGlzdGluZyBoaXN0b3J5IHN0YXRlIGlmIHlvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBoaXN0b3J5LnJlcGxhY2VTdGF0ZTpcXG5cXG5gICtcclxuICAgICAgICAgICAgICAgIGBoaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5LnN0YXRlLCAnJywgdXJsKVxcblxcbmAgK1xyXG4gICAgICAgICAgICAgICAgYFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGF0IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jdXNhZ2Utb2YtaGlzdG9yeS1zdGF0ZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24oY3VycmVudFN0YXRlLmN1cnJlbnQsIGN1cnJlbnRTdGF0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhc3NpZ24oe30sIGJ1aWxkU3RhdGUoY3VycmVudExvY2F0aW9uLnZhbHVlLCB0bywgbnVsbCksIHsgcG9zaXRpb246IGN1cnJlbnRTdGF0ZS5wb3NpdGlvbiArIDEgfSwgZGF0YSk7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24odG8sIHN0YXRlLCBmYWxzZSk7XHJcbiAgICAgICAgY3VycmVudExvY2F0aW9uLnZhbHVlID0gdG87XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvY2F0aW9uOiBjdXJyZW50TG9jYXRpb24sXHJcbiAgICAgICAgc3RhdGU6IGhpc3RvcnlTdGF0ZSxcclxuICAgICAgICBwdXNoLFxyXG4gICAgICAgIHJlcGxhY2UsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIEhUTUw1IGhpc3RvcnkuIE1vc3QgY29tbW9uIGhpc3RvcnkgZm9yIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9ucy5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlV2ViSGlzdG9yeShiYXNlKSB7XHJcbiAgICBiYXNlID0gbm9ybWFsaXplQmFzZShiYXNlKTtcclxuICAgIGNvbnN0IGhpc3RvcnlOYXZpZ2F0aW9uID0gdXNlSGlzdG9yeVN0YXRlTmF2aWdhdGlvbihiYXNlKTtcclxuICAgIGNvbnN0IGhpc3RvcnlMaXN0ZW5lcnMgPSB1c2VIaXN0b3J5TGlzdGVuZXJzKGJhc2UsIGhpc3RvcnlOYXZpZ2F0aW9uLnN0YXRlLCBoaXN0b3J5TmF2aWdhdGlvbi5sb2NhdGlvbiwgaGlzdG9yeU5hdmlnYXRpb24ucmVwbGFjZSk7XHJcbiAgICBmdW5jdGlvbiBnbyhkZWx0YSwgdHJpZ2dlckxpc3RlbmVycyA9IHRydWUpIHtcclxuICAgICAgICBpZiAoIXRyaWdnZXJMaXN0ZW5lcnMpXHJcbiAgICAgICAgICAgIGhpc3RvcnlMaXN0ZW5lcnMucGF1c2VMaXN0ZW5lcnMoKTtcclxuICAgICAgICBoaXN0b3J5LmdvKGRlbHRhKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJvdXRlckhpc3RvcnkgPSBhc3NpZ24oe1xyXG4gICAgICAgIC8vIGl0J3Mgb3ZlcnJpZGRlbiByaWdodCBhZnRlclxyXG4gICAgICAgIGxvY2F0aW9uOiAnJyxcclxuICAgICAgICBiYXNlLFxyXG4gICAgICAgIGdvLFxyXG4gICAgICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYuYmluZChudWxsLCBiYXNlKSxcclxuICAgIH0sIGhpc3RvcnlOYXZpZ2F0aW9uLCBoaXN0b3J5TGlzdGVuZXJzKTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb3V0ZXJIaXN0b3J5LCAnbG9jYXRpb24nLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6ICgpID0+IGhpc3RvcnlOYXZpZ2F0aW9uLmxvY2F0aW9uLnZhbHVlLFxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ3N0YXRlJywge1xyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0OiAoKSA9PiBoaXN0b3J5TmF2aWdhdGlvbi5zdGF0ZS52YWx1ZSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJvdXRlckhpc3Rvcnk7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gaW4tbWVtb3J5IGJhc2VkIGhpc3RvcnkuIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBoaXN0b3J5IGlzIHRvIGhhbmRsZSBTU1IuIEl0IHN0YXJ0cyBpbiBhIHNwZWNpYWwgbG9jYXRpb24gdGhhdCBpcyBub3doZXJlLlxyXG4gKiBJdCdzIHVwIHRvIHRoZSB1c2VyIHRvIHJlcGxhY2UgdGhhdCBsb2NhdGlvbiB3aXRoIHRoZSBzdGFydGVyIGxvY2F0aW9uIGJ5IGVpdGhlciBjYWxsaW5nIGByb3V0ZXIucHVzaGAgb3IgYHJvdXRlci5yZXBsYWNlYC5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLSBCYXNlIGFwcGxpZWQgdG8gYWxsIHVybHMsIGRlZmF1bHRzIHRvICcvJ1xyXG4gKiBAcmV0dXJucyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgcm91dGVyIGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KGJhc2UgPSAnJykge1xyXG4gICAgbGV0IGxpc3RlbmVycyA9IFtdO1xyXG4gICAgbGV0IHF1ZXVlID0gW1NUQVJUXTtcclxuICAgIGxldCBwb3NpdGlvbiA9IDA7XHJcbiAgICBiYXNlID0gbm9ybWFsaXplQmFzZShiYXNlKTtcclxuICAgIGZ1bmN0aW9uIHNldExvY2F0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgcG9zaXRpb24rKztcclxuICAgICAgICBpZiAocG9zaXRpb24gPT09IHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgYXQgdGhlIGVuZCwgd2UgY2FuIHNpbXBseSBhcHBlbmQgYSBuZXcgZW50cnlcclxuICAgICAgICAgICAgcXVldWUucHVzaChsb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgaW4gdGhlIG1pZGRsZSwgd2UgcmVtb3ZlIGV2ZXJ5dGhpbmcgZnJvbSBoZXJlIGluIHRoZSBxdWV1ZVxyXG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UocG9zaXRpb24pO1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGxvY2F0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyTGlzdGVuZXJzKHRvLCBmcm9tLCB7IGRpcmVjdGlvbiwgZGVsdGEgfSkge1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbixcclxuICAgICAgICAgICAgZGVsdGEsXHJcbiAgICAgICAgICAgIHR5cGU6IE5hdmlnYXRpb25UeXBlLnBvcCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHRvLCBmcm9tLCBpbmZvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCByb3V0ZXJIaXN0b3J5ID0ge1xyXG4gICAgICAgIC8vIHJld3JpdHRlbiBieSBPYmplY3QuZGVmaW5lUHJvcGVydHlcclxuICAgICAgICBsb2NhdGlvbjogU1RBUlQsXHJcbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIGtlcHQgaW4gcXVldWVcclxuICAgICAgICBzdGF0ZToge30sXHJcbiAgICAgICAgYmFzZSxcclxuICAgICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLmJpbmQobnVsbCwgYmFzZSksXHJcbiAgICAgICAgcmVwbGFjZSh0bykge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgY3VycmVudCBlbnRyeSBhbmQgZGVjcmVtZW50IHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShwb3NpdGlvbi0tLCAxKTtcclxuICAgICAgICAgICAgc2V0TG9jYXRpb24odG8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHVzaCh0bywgZGF0YSkge1xyXG4gICAgICAgICAgICBzZXRMb2NhdGlvbih0byk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaXN0ZW4oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgICAgICBxdWV1ZSA9IFtTVEFSVF07XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdvKGRlbHRhLCBzaG91bGRUcmlnZ2VyID0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5sb2NhdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gXHJcbiAgICAgICAgICAgIC8vIHdlIGFyZSBjb25zaWRlcmluZyBkZWx0YSA9PT0gMCBnb2luZyBmb3J3YXJkLCBidXQgaW4gYWJzdHJhY3QgbW9kZVxyXG4gICAgICAgICAgICAvLyB1c2luZyAwIGZvciB0aGUgZGVsdGEgZG9lc24ndCBtYWtlIHNlbnNlIGxpa2UgaXQgZG9lcyBpbiBodG1sNSB3aGVyZVxyXG4gICAgICAgICAgICAvLyBpdCByZWxvYWRzIHRoZSBwYWdlXHJcbiAgICAgICAgICAgIGRlbHRhIDwgMCA/IE5hdmlnYXRpb25EaXJlY3Rpb24uYmFjayA6IE5hdmlnYXRpb25EaXJlY3Rpb24uZm9yd2FyZDtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihwb3NpdGlvbiArIGRlbHRhLCBxdWV1ZS5sZW5ndGggLSAxKSk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRUcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyTGlzdGVuZXJzKHRoaXMubG9jYXRpb24sIGZyb20sIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdXRlckhpc3RvcnksICdsb2NhdGlvbicsIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGdldDogKCkgPT4gcXVldWVbcG9zaXRpb25dLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcm91dGVySGlzdG9yeTtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIGhhc2ggaGlzdG9yeS4gVXNlZnVsIGZvciB3ZWIgYXBwbGljYXRpb25zIHdpdGggbm8gaG9zdCAoZS5nLiBgZmlsZTovL2ApIG9yIHdoZW4gY29uZmlndXJpbmcgYSBzZXJ2ZXIgdG9cclxuICogaGFuZGxlIGFueSBVUkwgaXMgbm90IHBvc3NpYmxlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYmFzZSAtIG9wdGlvbmFsIGJhc2UgdG8gcHJvdmlkZS4gRGVmYXVsdHMgdG8gYGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoYCBJZiB0aGVyZSBpcyBhIGA8YmFzZT5gIHRhZ1xyXG4gKiBpbiB0aGUgYGhlYWRgLCBpdHMgdmFsdWUgd2lsbCBiZSBpZ25vcmVkIGluIGZhdm9yIG9mIHRoaXMgcGFyYW1ldGVyICoqYnV0IG5vdGUgaXQgYWZmZWN0cyBhbGwgdGhlIGhpc3RvcnkucHVzaFN0YXRlKClcclxuICogY2FsbHMqKiwgbWVhbmluZyB0aGF0IGlmIHlvdSB1c2UgYSBgPGJhc2U+YCB0YWcsIGl0J3MgYGhyZWZgIHZhbHVlICoqaGFzIHRvIG1hdGNoIHRoaXMgcGFyYW1ldGVyKiogKGlnbm9yaW5nIGFueXRoaW5nXHJcbiAqIGFmdGVyIHRoZSBgI2ApLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqc1xyXG4gKiAvLyBhdCBodHRwczovL2V4YW1wbGUuY29tL2ZvbGRlclxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgpIC8vIGdpdmVzIGEgdXJsIG9mIGBodHRwczovL2V4YW1wbGUuY29tL2ZvbGRlciNgXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCcvZm9sZGVyLycpIC8vIGdpdmVzIGEgdXJsIG9mIGBodHRwczovL2V4YW1wbGUuY29tL2ZvbGRlci8jYFxyXG4gKiAvLyBpZiB0aGUgYCNgIGlzIHByb3ZpZGVkIGluIHRoZSBiYXNlLCBpdCB3b24ndCBiZSBhZGRlZCBieSBgY3JlYXRlV2ViSGFzaEhpc3RvcnlgXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCcvZm9sZGVyLyMvYXBwLycpIC8vIGdpdmVzIGEgdXJsIG9mIGBodHRwczovL2V4YW1wbGUuY29tL2ZvbGRlci8jL2FwcC9gXHJcbiAqIC8vIHlvdSBzaG91bGQgYXZvaWQgZG9pbmcgdGhpcyBiZWNhdXNlIGl0IGNoYW5nZXMgdGhlIG9yaWdpbmFsIHVybCBhbmQgYnJlYWtzIGNvcHlpbmcgdXJsc1xyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL290aGVyLWZvbGRlci8nKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9vdGhlci1mb2xkZXIvI2BcclxuICpcclxuICogLy8gYXQgZmlsZTovLy91c3IvZXRjL2ZvbGRlci9pbmRleC5odG1sXHJcbiAqIC8vIGZvciBsb2NhdGlvbnMgd2l0aCBubyBgaG9zdGAsIHRoZSBiYXNlIGlzIGlnbm9yZWRcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9pQW1JZ25vcmVkJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGZpbGU6Ly8vdXNyL2V0Yy9mb2xkZXIvaW5kZXguaHRtbCNgXHJcbiAqIGBgYFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlV2ViSGFzaEhpc3RvcnkoYmFzZSkge1xyXG4gICAgLy8gTWFrZSBzdXJlIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgZmluZSBpbiB0ZXJtcyBvZiBlbmNvZGluZywgc3BlY2lhbGx5IGZvciBJRTExXHJcbiAgICAvLyBmb3IgYGZpbGU6Ly9gLCBkaXJlY3RseSB1c2UgdGhlIHBhdGhuYW1lIGFuZCBpZ25vcmUgdGhlIGJhc2VcclxuICAgIC8vIGxvY2F0aW9uLnBhdGhuYW1lIGNvbnRhaW5zIGFuIGluaXRpYWwgYC9gIGV2ZW4gYXQgdGhlIHJvb3Q6IGBodHRwczovL2V4YW1wbGUuY29tYFxyXG4gICAgYmFzZSA9IGxvY2F0aW9uLmhvc3QgPyBiYXNlIHx8IGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoIDogJyc7XHJcbiAgICAvLyBhbGxvdyB0aGUgdXNlciB0byBwcm92aWRlIGEgYCNgIGluIHRoZSBtaWRkbGU6IGAvYmFzZS8jL2FwcGBcclxuICAgIGlmICghYmFzZS5pbmNsdWRlcygnIycpKVxyXG4gICAgICAgIGJhc2UgKz0gJyMnO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhYmFzZS5lbmRzV2l0aCgnIy8nKSAmJiAhYmFzZS5lbmRzV2l0aCgnIycpKSB7XHJcbiAgICAgICAgd2FybihgQSBoYXNoIGJhc2UgbXVzdCBlbmQgd2l0aCBhIFwiI1wiOlxcblwiJHtiYXNlfVwiIHNob3VsZCBiZSBcIiR7YmFzZS5yZXBsYWNlKC8jLiokLywgJyMnKX1cIi5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjcmVhdGVXZWJIaXN0b3J5KGJhc2UpO1xyXG59XG5cbmZ1bmN0aW9uIGlzUm91dGVMb2NhdGlvbihyb3V0ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiByb3V0ZSA9PT0gJ3N0cmluZycgfHwgKHJvdXRlICYmIHR5cGVvZiByb3V0ZSA9PT0gJ29iamVjdCcpO1xyXG59XHJcbmZ1bmN0aW9uIGlzUm91dGVOYW1lKG5hbWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5hbWUgPT09ICdzeW1ib2wnO1xyXG59XG5cbi8qKlxyXG4gKiBJbml0aWFsIHJvdXRlIGxvY2F0aW9uIHdoZXJlIHRoZSByb3V0ZXIgaXMuIENhbiBiZSB1c2VkIGluIG5hdmlnYXRpb24gZ3VhcmRzXHJcbiAqIHRvIGRpZmZlcmVudGlhdGUgdGhlIGluaXRpYWwgbmF2aWdhdGlvbi5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogaW1wb3J0IHsgU1RBUlRfTE9DQVRJT04gfSBmcm9tICd2dWUtcm91dGVyJ1xyXG4gKlxyXG4gKiByb3V0ZXIuYmVmb3JlRWFjaCgodG8sIGZyb20pID0+IHtcclxuICogICBpZiAoZnJvbSA9PT0gU1RBUlRfTE9DQVRJT04pIHtcclxuICogICAgIC8vIGluaXRpYWwgbmF2aWdhdGlvblxyXG4gKiAgIH1cclxuICogfSlcclxuICogYGBgXHJcbiAqL1xyXG5jb25zdCBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEID0ge1xyXG4gICAgcGF0aDogJy8nLFxyXG4gICAgbmFtZTogdW5kZWZpbmVkLFxyXG4gICAgcGFyYW1zOiB7fSxcclxuICAgIHF1ZXJ5OiB7fSxcclxuICAgIGhhc2g6ICcnLFxyXG4gICAgZnVsbFBhdGg6ICcvJyxcclxuICAgIG1hdGNoZWQ6IFtdLFxyXG4gICAgbWV0YToge30sXHJcbiAgICByZWRpcmVjdGVkRnJvbTogdW5kZWZpbmVkLFxyXG59O1xuXG5jb25zdCBOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnbmF2aWdhdGlvbiBmYWlsdXJlJyA6ICcnKTtcclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIHdpdGggYWxsIHBvc3NpYmxlIHR5cGVzIGZvciBuYXZpZ2F0aW9uIGZhaWx1cmVzLiBDYW4gYmUgcGFzc2VkIHRvXHJcbiAqIHtAbGluayBpc05hdmlnYXRpb25GYWlsdXJlfSB0byBjaGVjayBmb3Igc3BlY2lmaWMgZmFpbHVyZXMuXHJcbiAqL1xyXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xyXG4oZnVuY3Rpb24gKE5hdmlnYXRpb25GYWlsdXJlVHlwZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhYm9ydGVkIG5hdmlnYXRpb24gaXMgYSBuYXZpZ2F0aW9uIHRoYXQgZmFpbGVkIGJlY2F1c2UgYSBuYXZpZ2F0aW9uXHJcbiAgICAgKiBndWFyZCByZXR1cm5lZCBgZmFsc2VgIG9yIGNhbGxlZCBgbmV4dChmYWxzZSlgXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJhYm9ydGVkXCJdID0gNF0gPSBcImFib3J0ZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICogQSBjYW5jZWxsZWQgbmF2aWdhdGlvbiBpcyBhIG5hdmlnYXRpb24gdGhhdCBmYWlsZWQgYmVjYXVzZSBhIG1vcmUgcmVjZW50XHJcbiAgICAgKiBuYXZpZ2F0aW9uIGZpbmlzaGVkIHN0YXJ0ZWQgKG5vdCBuZWNlc3NhcmlseSBmaW5pc2hlZCkuXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJjYW5jZWxsZWRcIl0gPSA4XSA9IFwiY2FuY2VsbGVkXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgZHVwbGljYXRlZCBuYXZpZ2F0aW9uIGlzIGEgbmF2aWdhdGlvbiB0aGF0IGZhaWxlZCBiZWNhdXNlIGl0IHdhc1xyXG4gICAgICogaW5pdGlhdGVkIHdoaWxlIGFscmVhZHkgYmVpbmcgYXQgdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJkdXBsaWNhdGVkXCJdID0gMTZdID0gXCJkdXBsaWNhdGVkXCI7XHJcbn0pKE5hdmlnYXRpb25GYWlsdXJlVHlwZSB8fCAoTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge30pKTtcclxuLy8gREVWIG9ubHkgZGVidWcgbWVzc2FnZXNcclxuY29uc3QgRXJyb3JUeXBlTWVzc2FnZXMgPSB7XHJcbiAgICBbMSAvKiBFcnJvclR5cGVzLk1BVENIRVJfTk9UX0ZPVU5EICovXSh7IGxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24gfSkge1xyXG4gICAgICAgIHJldHVybiBgTm8gbWF0Y2ggZm9yXFxuICR7SlNPTi5zdHJpbmdpZnkobG9jYXRpb24pfSR7Y3VycmVudExvY2F0aW9uXHJcbiAgICAgICAgICAgID8gJ1xcbndoaWxlIGJlaW5nIGF0XFxuJyArIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRMb2NhdGlvbilcclxuICAgICAgICAgICAgOiAnJ31gO1xyXG4gICAgfSxcclxuICAgIFsyIC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9HVUFSRF9SRURJUkVDVCAqL10oeyBmcm9tLCB0bywgfSkge1xyXG4gICAgICAgIHJldHVybiBgUmVkaXJlY3RlZCBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHtzdHJpbmdpZnlSb3V0ZSh0byl9XCIgdmlhIGEgbmF2aWdhdGlvbiBndWFyZC5gO1xyXG4gICAgfSxcclxuICAgIFs0IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9BQk9SVEVEICovXSh7IGZyb20sIHRvIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5hdmlnYXRpb24gYWJvcnRlZCBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzggLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0NBTkNFTExFRCAqL10oeyBmcm9tLCB0byB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBOYXZpZ2F0aW9uIGNhbmNlbGxlZCBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIiB3aXRoIGEgbmV3IG5hdmlnYXRpb24uYDtcclxuICAgIH0sXHJcbiAgICBbMTYgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0RVUExJQ0FURUQgKi9dKHsgZnJvbSwgdG8gfSkge1xyXG4gICAgICAgIHJldHVybiBgQXZvaWRlZCByZWR1bmRhbnQgbmF2aWdhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uOiBcIiR7ZnJvbS5mdWxsUGF0aH1cIi5gO1xyXG4gICAgfSxcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlUm91dGVyRXJyb3IodHlwZSwgcGFyYW1zKSB7XHJcbiAgICAvLyBrZWVwIGZ1bGwgZXJyb3IgbWVzc2FnZXMgaW4gY2pzIHZlcnNpb25zXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8ICF0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFzc2lnbihuZXcgRXJyb3IoRXJyb3JUeXBlTWVzc2FnZXNbdHlwZV0ocGFyYW1zKSksIHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgW05hdmlnYXRpb25GYWlsdXJlU3ltYm9sXTogdHJ1ZSxcclxuICAgICAgICB9LCBwYXJhbXMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGFzc2lnbihuZXcgRXJyb3IoKSwge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBbTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2xdOiB0cnVlLFxyXG4gICAgICAgIH0sIHBhcmFtcyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvciwgdHlwZSkge1xyXG4gICAgcmV0dXJuIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmXHJcbiAgICAgICAgTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wgaW4gZXJyb3IgJiZcclxuICAgICAgICAodHlwZSA9PSBudWxsIHx8ICEhKGVycm9yLnR5cGUgJiB0eXBlKSkpO1xyXG59XHJcbmNvbnN0IHByb3BlcnRpZXNUb0xvZyA9IFsncGFyYW1zJywgJ3F1ZXJ5JywgJ2hhc2gnXTtcclxuZnVuY3Rpb24gc3RyaW5naWZ5Um91dGUodG8pIHtcclxuICAgIGlmICh0eXBlb2YgdG8gPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIGlmICgncGF0aCcgaW4gdG8pXHJcbiAgICAgICAgcmV0dXJuIHRvLnBhdGg7XHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgcHJvcGVydGllc1RvTG9nKSB7XHJcbiAgICAgICAgaWYgKGtleSBpbiB0bylcclxuICAgICAgICAgICAgbG9jYXRpb25ba2V5XSA9IHRvW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24sIG51bGwsIDIpO1xyXG59XG5cbi8vIGRlZmF1bHQgcGF0dGVybiBmb3IgYSBwYXJhbTogbm9uLWdyZWVkeSBldmVyeXRoaW5nIGJ1dCAvXHJcbmNvbnN0IEJBU0VfUEFSQU1fUEFUVEVSTiA9ICdbXi9dKz8nO1xyXG5jb25zdCBCQVNFX1BBVEhfUEFSU0VSX09QVElPTlMgPSB7XHJcbiAgICBzZW5zaXRpdmU6IGZhbHNlLFxyXG4gICAgc3RyaWN0OiBmYWxzZSxcclxuICAgIHN0YXJ0OiB0cnVlLFxyXG4gICAgZW5kOiB0cnVlLFxyXG59O1xyXG4vLyBTcGVjaWFsIFJlZ2V4IGNoYXJhY3RlcnMgdGhhdCBtdXN0IGJlIGVzY2FwZWQgaW4gc3RhdGljIHRva2Vuc1xyXG5jb25zdCBSRUdFWF9DSEFSU19SRSA9IC9bLisqP14ke30oKVtcXF0vXFxcXF0vZztcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBwYXRoIHBhcnNlciBmcm9tIGFuIGFycmF5IG9mIFNlZ21lbnRzIChhIHNlZ21lbnQgaXMgYW4gYXJyYXkgb2YgVG9rZW5zKVxyXG4gKlxyXG4gKiBAcGFyYW0gc2VnbWVudHMgLSBhcnJheSBvZiBzZWdtZW50cyByZXR1cm5lZCBieSB0b2tlbml6ZVBhdGhcclxuICogQHBhcmFtIGV4dHJhT3B0aW9ucyAtIG9wdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSByZWdleHBcclxuICogQHJldHVybnMgYSBQYXRoUGFyc2VyXHJcbiAqL1xyXG5mdW5jdGlvbiB0b2tlbnNUb1BhcnNlcihzZWdtZW50cywgZXh0cmFPcHRpb25zKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gYXNzaWduKHt9LCBCQVNFX1BBVEhfUEFSU0VSX09QVElPTlMsIGV4dHJhT3B0aW9ucyk7XHJcbiAgICAvLyB0aGUgYW1vdW50IG9mIHNjb3JlcyBpcyB0aGUgc2FtZSBhcyB0aGUgbGVuZ3RoIG9mIHNlZ21lbnRzIGV4Y2VwdCBmb3IgdGhlIHJvb3Qgc2VnbWVudCBcIi9cIlxyXG4gICAgY29uc3Qgc2NvcmUgPSBbXTtcclxuICAgIC8vIHRoZSByZWdleHAgYXMgYSBzdHJpbmdcclxuICAgIGxldCBwYXR0ZXJuID0gb3B0aW9ucy5zdGFydCA/ICdeJyA6ICcnO1xyXG4gICAgLy8gZXh0cmFjdGVkIGtleXNcclxuICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgIC8vIHRoZSByb290IHNlZ21lbnQgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnRcclxuICAgICAgICBjb25zdCBzZWdtZW50U2NvcmVzID0gc2VnbWVudC5sZW5ndGggPyBbXSA6IFs5MCAvKiBQYXRoU2NvcmUuUm9vdCAqL107XHJcbiAgICAgICAgLy8gYWxsb3cgdHJhaWxpbmcgc2xhc2hcclxuICAgICAgICBpZiAob3B0aW9ucy5zdHJpY3QgJiYgIXNlZ21lbnQubGVuZ3RoKVxyXG4gICAgICAgICAgICBwYXR0ZXJuICs9ICcvJztcclxuICAgICAgICBmb3IgKGxldCB0b2tlbkluZGV4ID0gMDsgdG9rZW5JbmRleCA8IHNlZ21lbnQubGVuZ3RoOyB0b2tlbkluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBzZWdtZW50W3Rva2VuSW5kZXhdO1xyXG4gICAgICAgICAgICAvLyByZXNldHMgdGhlIHNjb3JlIGlmIHdlIGFyZSBpbnNpZGUgYSBzdWItc2VnbWVudCAvOmEtb3RoZXItOmJcclxuICAgICAgICAgICAgbGV0IHN1YlNlZ21lbnRTY29yZSA9IDQwIC8qIFBhdGhTY29yZS5TZWdtZW50ICovICtcclxuICAgICAgICAgICAgICAgIChvcHRpb25zLnNlbnNpdGl2ZSA/IDAuMjUgLyogUGF0aFNjb3JlLkJvbnVzQ2FzZVNlbnNpdGl2ZSAqLyA6IDApO1xyXG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMCAvKiBUb2tlblR5cGUuU3RhdGljICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwcmVwZW5kIHRoZSBzbGFzaCBpZiB3ZSBhcmUgc3RhcnRpbmcgYSBuZXcgc2VnbWVudFxyXG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbkluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gJy8nO1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybiArPSB0b2tlbi52YWx1ZS5yZXBsYWNlKFJFR0VYX0NIQVJTX1JFLCAnXFxcXCQmJyk7XHJcbiAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gNDAgLyogUGF0aFNjb3JlLlN0YXRpYyAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAxIC8qIFRva2VuVHlwZS5QYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgcmVwZWF0YWJsZSwgb3B0aW9uYWwsIHJlZ2V4cCB9ID0gdG9rZW47XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gcmVnZXhwID8gcmVnZXhwIDogQkFTRV9QQVJBTV9QQVRURVJOO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgcHJvdmlkZWQgYSBjdXN0b20gcmVnZXhwIC86aWQoXFxcXGQrKVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlICE9PSBCQVNFX1BBUkFNX1BBVFRFUk4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMTAgLyogUGF0aFNjb3JlLkJvbnVzQ3VzdG9tUmVnRXhwICovO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgcmVnZXhwIGlzIHZhbGlkIGJlZm9yZSB1c2luZyBpdFxyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoYCgke3JlfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY3VzdG9tIFJlZ0V4cCBmb3IgcGFyYW0gXCIke3ZhbHVlfVwiICgke3JlfSk6IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gd2UgcmVwZWF0IHdlIG11c3QgdGFrZSBjYXJlIG9mIHRoZSByZXBlYXRpbmcgbGVhZGluZyBzbGFzaFxyXG4gICAgICAgICAgICAgICAgbGV0IHN1YlBhdHRlcm4gPSByZXBlYXRhYmxlID8gYCgoPzoke3JlfSkoPzovKD86JHtyZX0pKSopYCA6IGAoJHtyZX0pYDtcclxuICAgICAgICAgICAgICAgIC8vIHByZXBlbmQgdGhlIHNsYXNoIGlmIHdlIGFyZSBzdGFydGluZyBhIG5ldyBzZWdtZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViUGF0dGVybiA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIGFuIG9wdGlvbmFsIC8gaWYgdGhlcmUgYXJlIG1vcmUgc2VnbWVudHMgZS5nLiAvOnA/LXN0YXRpY1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvciAvOnA/LTpwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbCAmJiBzZWdtZW50Lmxlbmd0aCA8IDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYCg/Oi8ke3N1YlBhdHRlcm59KWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJy8nICsgc3ViUGF0dGVybjtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICBzdWJQYXR0ZXJuICs9ICc/JztcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gc3ViUGF0dGVybjtcclxuICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSAyMCAvKiBQYXRoU2NvcmUuRHluYW1pYyAqLztcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gLTggLyogUGF0aFNjb3JlLkJvbnVzT3B0aW9uYWwgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAocmVwZWF0YWJsZSlcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gLTIwIC8qIFBhdGhTY29yZS5Cb251c1JlcGVhdGFibGUgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAocmUgPT09ICcuKicpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IC01MCAvKiBQYXRoU2NvcmUuQm9udXNXaWxkY2FyZCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWdtZW50U2NvcmVzLnB1c2goc3ViU2VnbWVudFNjb3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYW4gZW1wdHkgYXJyYXkgbGlrZSAvaG9tZS8gLT4gW1t7aG9tZX1dLCBbXV1cclxuICAgICAgICAvLyBpZiAoIXNlZ21lbnQubGVuZ3RoKSBwYXR0ZXJuICs9ICcvJ1xyXG4gICAgICAgIHNjb3JlLnB1c2goc2VnbWVudFNjb3Jlcyk7XHJcbiAgICB9XHJcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzdHJpY3QgYm9udXMgdG8gdGhlIGxhc3Qgc2NvcmVcclxuICAgIGlmIChvcHRpb25zLnN0cmljdCAmJiBvcHRpb25zLmVuZCkge1xyXG4gICAgICAgIGNvbnN0IGkgPSBzY29yZS5sZW5ndGggLSAxO1xyXG4gICAgICAgIHNjb3JlW2ldW3Njb3JlW2ldLmxlbmd0aCAtIDFdICs9IDAuNzAwMDAwMDAwMDAwMDAwMSAvKiBQYXRoU2NvcmUuQm9udXNTdHJpY3QgKi87XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiBkZXYgb25seSB3YXJuIGRvdWJsZSB0cmFpbGluZyBzbGFzaFxyXG4gICAgaWYgKCFvcHRpb25zLnN0cmljdClcclxuICAgICAgICBwYXR0ZXJuICs9ICcvPyc7XHJcbiAgICBpZiAob3B0aW9ucy5lbmQpXHJcbiAgICAgICAgcGF0dGVybiArPSAnJCc7XHJcbiAgICAvLyBhbGxvdyBwYXRocyBsaWtlIC9keW5hbWljIHRvIG9ubHkgbWF0Y2ggZHluYW1pYyBvciBkeW5hbWljLy4uLiBidXQgbm90IGR5bmFtaWNfc29tZXRoaW5nX2Vsc2VcclxuICAgIGVsc2UgaWYgKG9wdGlvbnMuc3RyaWN0KVxyXG4gICAgICAgIHBhdHRlcm4gKz0gJyg/Oi98JCknO1xyXG4gICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKHBhdHRlcm4sIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaScpO1xyXG4gICAgZnVuY3Rpb24gcGFyc2UocGF0aCkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gcGF0aC5tYXRjaChyZSk7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge307XHJcbiAgICAgICAgaWYgKCFtYXRjaClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXRjaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1hdGNoW2ldIHx8ICcnO1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2kgLSAxXTtcclxuICAgICAgICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IHZhbHVlICYmIGtleS5yZXBlYXRhYmxlID8gdmFsdWUuc3BsaXQoJy8nKSA6IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyYW1zO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc3RyaW5naWZ5KHBhcmFtcykge1xyXG4gICAgICAgIGxldCBwYXRoID0gJyc7XHJcbiAgICAgICAgLy8gZm9yIG9wdGlvbmFsIHBhcmFtZXRlcnMgdG8gYWxsb3cgdG8gYmUgZW1wdHlcclxuICAgICAgICBsZXQgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKCFhdm9pZER1cGxpY2F0ZWRTbGFzaCB8fCAhcGF0aC5lbmRzV2l0aCgnLycpKVxyXG4gICAgICAgICAgICAgICAgcGF0aCArPSAnLyc7XHJcbiAgICAgICAgICAgIGF2b2lkRHVwbGljYXRlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2Ygc2VnbWVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDAgLyogVG9rZW5UeXBlLlN0YXRpYyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGggKz0gdG9rZW4udmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAxIC8qIFRva2VuVHlwZS5QYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIHJlcGVhdGFibGUsIG9wdGlvbmFsIH0gPSB0b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbSA9IHZhbHVlIGluIHBhcmFtcyA/IHBhcmFtc1t2YWx1ZV0gOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShwYXJhbSkgJiYgIXJlcGVhdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm92aWRlZCBwYXJhbSBcIiR7dmFsdWV9XCIgaXMgYW4gYXJyYXkgYnV0IGl0IGlzIG5vdCByZXBlYXRhYmxlICgqIG9yICsgbW9kaWZpZXJzKWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gaXNBcnJheShwYXJhbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJhbS5qb2luKCcvJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXJhbTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG1vcmUgdGhhbiBvbmUgb3B0aW9uYWwgcGFyYW0gbGlrZSAvOmE/LXN0YXRpYyB3ZSBkb24ndCBuZWVkIHRvIGNhcmUgYWJvdXQgdGhlIG9wdGlvbmFsIHBhcmFtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYXN0IHNsYXNoIGFzIHdlIGNvdWxkIGJlIGF0IHRoZSBlbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0aC5lbmRzV2l0aCgnLycpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IGFwcGVuZCBhIHNsYXNoIG9uIHRoZSBuZXh0IGl0ZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBwYXJhbSBcIiR7dmFsdWV9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCArPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGF2b2lkIGVtcHR5IHBhdGggd2hlbiB3ZSBoYXZlIG11bHRpcGxlIG9wdGlvbmFsIHBhcmFtc1xyXG4gICAgICAgIHJldHVybiBwYXRoIHx8ICcvJztcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmUsXHJcbiAgICAgICAgc2NvcmUsXHJcbiAgICAgICAga2V5cyxcclxuICAgICAgICBwYXJzZSxcclxuICAgICAgICBzdHJpbmdpZnksXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBDb21wYXJlcyBhbiBhcnJheSBvZiBudW1iZXJzIGFzIHVzZWQgaW4gUGF0aFBhcnNlci5zY29yZSBhbmQgcmV0dXJucyBhXHJcbiAqIG51bWJlci4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBgc29ydGAgYW4gYXJyYXlcclxuICpcclxuICogQHBhcmFtIGEgLSBmaXJzdCBhcnJheSBvZiBudW1iZXJzXHJcbiAqIEBwYXJhbSBiIC0gc2Vjb25kIGFycmF5IG9mIG51bWJlcnNcclxuICogQHJldHVybnMgMCBpZiBib3RoIGFyZSBlcXVhbCwgPCAwIGlmIGEgc2hvdWxkIGJlIHNvcnRlZCBmaXJzdCwgPiAwIGlmIGJcclxuICogc2hvdWxkIGJlIHNvcnRlZCBmaXJzdFxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGFyZVNjb3JlQXJyYXkoYSwgYikge1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBkaWZmID0gYltpXSAtIGFbaV07XHJcbiAgICAgICAgLy8gb25seSBrZWVwIGdvaW5nIGlmIGRpZmYgPT09IDBcclxuICAgICAgICBpZiAoZGlmZilcclxuICAgICAgICAgICAgcmV0dXJuIGRpZmY7XHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgdGhlIGxhc3Qgc3Vic2VnbWVudCB3YXMgU3RhdGljLCB0aGUgc2hvcnRlciBzZWdtZW50cyBzaG91bGQgYmUgc29ydGVkIGZpcnN0XHJcbiAgICAvLyBvdGhlcndpc2Ugc29ydCB0aGUgbG9uZ2VzdCBzZWdtZW50IGZpcnN0XHJcbiAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gMSAmJiBhWzBdID09PSA0MCAvKiBQYXRoU2NvcmUuU3RhdGljICovICsgNDAgLyogUGF0aFNjb3JlLlNlZ21lbnQgKi9cclxuICAgICAgICAgICAgPyAtMVxyXG4gICAgICAgICAgICA6IDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoID09PSAxICYmIGJbMF0gPT09IDQwIC8qIFBhdGhTY29yZS5TdGF0aWMgKi8gKyA0MCAvKiBQYXRoU2NvcmUuU2VnbWVudCAqL1xyXG4gICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgOiAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG59XHJcbi8qKlxyXG4gKiBDb21wYXJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBgc29ydGAgdG8gc29ydCBhbiBhcnJheSBvZiBQYXRoUGFyc2VyXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3QgUGF0aFBhcnNlclxyXG4gKiBAcGFyYW0gYiAtIHNlY29uZCBQYXRoUGFyc2VyXHJcbiAqIEByZXR1cm5zIDAgaWYgYm90aCBhcmUgZXF1YWwsIDwgMCBpZiBhIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3QsID4gMCBpZiBiXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wYXJlUGF0aFBhcnNlclNjb3JlKGEsIGIpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGNvbnN0IGFTY29yZSA9IGEuc2NvcmU7XHJcbiAgICBjb25zdCBiU2NvcmUgPSBiLnNjb3JlO1xyXG4gICAgd2hpbGUgKGkgPCBhU2NvcmUubGVuZ3RoICYmIGkgPCBiU2NvcmUubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgY29tcCA9IGNvbXBhcmVTY29yZUFycmF5KGFTY29yZVtpXSwgYlNjb3JlW2ldKTtcclxuICAgICAgICAvLyBkbyBub3QgcmV0dXJuIGlmIGJvdGggYXJlIGVxdWFsXHJcbiAgICAgICAgaWYgKGNvbXApXHJcbiAgICAgICAgICAgIHJldHVybiBjb21wO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIGlmIChNYXRoLmFicyhiU2NvcmUubGVuZ3RoIC0gYVNjb3JlLmxlbmd0aCkgPT09IDEpIHtcclxuICAgICAgICBpZiAoaXNMYXN0U2NvcmVOZWdhdGl2ZShhU2NvcmUpKVxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBpZiAoaXNMYXN0U2NvcmVOZWdhdGl2ZShiU2NvcmUpKVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBhIGFuZCBiIHNoYXJlIHRoZSBzYW1lIHNjb3JlIGVudHJpZXMgYnV0IGIgaGFzIG1vcmUsIHNvcnQgYiBmaXJzdFxyXG4gICAgcmV0dXJuIGJTY29yZS5sZW5ndGggLSBhU2NvcmUubGVuZ3RoO1xyXG4gICAgLy8gdGhpcyBpcyB0aGUgdGVybmFyeSB2ZXJzaW9uXHJcbiAgICAvLyByZXR1cm4gYVNjb3JlLmxlbmd0aCA8IGJTY29yZS5sZW5ndGhcclxuICAgIC8vICAgPyAxXHJcbiAgICAvLyAgIDogYVNjb3JlLmxlbmd0aCA+IGJTY29yZS5sZW5ndGhcclxuICAgIC8vICAgPyAtMVxyXG4gICAgLy8gICA6IDBcclxufVxyXG4vKipcclxuICogVGhpcyBhbGxvd3MgZGV0ZWN0aW5nIHNwbGF0cyBhdCB0aGUgZW5kIG9mIGEgcGF0aDogL2hvbWUvOmlkKC4qKSpcclxuICpcclxuICogQHBhcmFtIHNjb3JlIC0gc2NvcmUgdG8gY2hlY2tcclxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgbGFzdCBlbnRyeSBpcyBuZWdhdGl2ZVxyXG4gKi9cclxuZnVuY3Rpb24gaXNMYXN0U2NvcmVOZWdhdGl2ZShzY29yZSkge1xyXG4gICAgY29uc3QgbGFzdCA9IHNjb3JlW3Njb3JlLmxlbmd0aCAtIDFdO1xyXG4gICAgcmV0dXJuIHNjb3JlLmxlbmd0aCA+IDAgJiYgbGFzdFtsYXN0Lmxlbmd0aCAtIDFdIDwgMDtcclxufVxuXG5jb25zdCBST09UX1RPS0VOID0ge1xyXG4gICAgdHlwZTogMCAvKiBUb2tlblR5cGUuU3RhdGljICovLFxyXG4gICAgdmFsdWU6ICcnLFxyXG59O1xyXG5jb25zdCBWQUxJRF9QQVJBTV9SRSA9IC9bYS16QS1aMC05X10vO1xyXG4vLyBBZnRlciBzb21lIHByb2ZpbGluZywgdGhlIGNhY2hlIHNlZW1zIHRvIGJlIHVubmVjZXNzYXJ5IGJlY2F1c2UgdG9rZW5pemVQYXRoXHJcbi8vICh0aGUgc2xvd2VzdCBwYXJ0IG9mIGFkZGluZyBhIHJvdXRlKSBpcyB2ZXJ5IGZhc3RcclxuLy8gY29uc3QgdG9rZW5DYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBUb2tlbltdW10+KClcclxuZnVuY3Rpb24gdG9rZW5pemVQYXRoKHBhdGgpIHtcclxuICAgIGlmICghcGF0aClcclxuICAgICAgICByZXR1cm4gW1tdXTtcclxuICAgIGlmIChwYXRoID09PSAnLycpXHJcbiAgICAgICAgcmV0dXJuIFtbUk9PVF9UT0tFTl1dO1xyXG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgPyBgUm91dGUgcGF0aHMgc2hvdWxkIHN0YXJ0IHdpdGggYSBcIi9cIjogXCIke3BhdGh9XCIgc2hvdWxkIGJlIFwiLyR7cGF0aH1cIi5gXHJcbiAgICAgICAgICAgIDogYEludmFsaWQgcGF0aCBcIiR7cGF0aH1cImApO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgKHRva2VuQ2FjaGUuaGFzKHBhdGgpKSByZXR1cm4gdG9rZW5DYWNoZS5nZXQocGF0aCkhXHJcbiAgICBmdW5jdGlvbiBjcmFzaChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUlIgKCR7c3RhdGV9KS9cIiR7YnVmZmVyfVwiOiAke21lc3NhZ2V9YCk7XHJcbiAgICB9XHJcbiAgICBsZXQgc3RhdGUgPSAwIC8qIFRva2VuaXplclN0YXRlLlN0YXRpYyAqLztcclxuICAgIGxldCBwcmV2aW91c1N0YXRlID0gc3RhdGU7XHJcbiAgICBjb25zdCB0b2tlbnMgPSBbXTtcclxuICAgIC8vIHRoZSBzZWdtZW50IHdpbGwgYWx3YXlzIGJlIHZhbGlkIGJlY2F1c2Ugd2UgZ2V0IGludG8gdGhlIGluaXRpYWwgc3RhdGVcclxuICAgIC8vIHdpdGggdGhlIGxlYWRpbmcgL1xyXG4gICAgbGV0IHNlZ21lbnQ7XHJcbiAgICBmdW5jdGlvbiBmaW5hbGl6ZVNlZ21lbnQoKSB7XHJcbiAgICAgICAgaWYgKHNlZ21lbnQpXHJcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHNlZ21lbnQpO1xyXG4gICAgICAgIHNlZ21lbnQgPSBbXTtcclxuICAgIH1cclxuICAgIC8vIGluZGV4IG9uIHRoZSBwYXRoXHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICAvLyBjaGFyIGF0IGluZGV4XHJcbiAgICBsZXQgY2hhcjtcclxuICAgIC8vIGJ1ZmZlciBvZiB0aGUgdmFsdWUgcmVhZFxyXG4gICAgbGV0IGJ1ZmZlciA9ICcnO1xyXG4gICAgLy8gY3VzdG9tIHJlZ2V4cCBmb3IgYSBwYXJhbVxyXG4gICAgbGV0IGN1c3RvbVJlID0gJyc7XHJcbiAgICBmdW5jdGlvbiBjb25zdW1lQnVmZmVyKCkge1xyXG4gICAgICAgIGlmICghYnVmZmVyKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSAwIC8qIFRva2VuaXplclN0YXRlLlN0YXRpYyAqLykge1xyXG4gICAgICAgICAgICBzZWdtZW50LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogMCAvKiBUb2tlblR5cGUuU3RhdGljICovLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAxIC8qIFRva2VuaXplclN0YXRlLlBhcmFtICovIHx8XHJcbiAgICAgICAgICAgIHN0YXRlID09PSAyIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwICovIHx8XHJcbiAgICAgICAgICAgIHN0YXRlID09PSAzIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwRW5kICovKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDEgJiYgKGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnKycpKVxyXG4gICAgICAgICAgICAgICAgY3Jhc2goYEEgcmVwZWF0YWJsZSBwYXJhbSAoJHtidWZmZXJ9KSBtdXN0IGJlIGFsb25lIGluIGl0cyBzZWdtZW50LiBlZzogJy86aWRzKy5gKTtcclxuICAgICAgICAgICAgc2VnbWVudC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogVG9rZW5UeXBlLlBhcmFtICovLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcclxuICAgICAgICAgICAgICAgIHJlZ2V4cDogY3VzdG9tUmUsXHJcbiAgICAgICAgICAgICAgICByZXBlYXRhYmxlOiBjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJysnLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnPycsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3Jhc2goJ0ludmFsaWQgc3RhdGUgdG8gY29uc3VtZSBidWZmZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnVmZmVyID0gJyc7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRDaGFyVG9CdWZmZXIoKSB7XHJcbiAgICAgICAgYnVmZmVyICs9IGNoYXI7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoaSA8IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgY2hhciA9IHBhdGhbaSsrXTtcclxuICAgICAgICBpZiAoY2hhciA9PT0gJ1xcXFwnICYmIHN0YXRlICE9PSAyIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwICovKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgc3RhdGUgPSA0IC8qIFRva2VuaXplclN0YXRlLkVzY2FwZU5leHQgKi87XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMCAvKiBUb2tlbml6ZXJTdGF0ZS5TdGF0aWMgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJy8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsaXplU2VnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJzonKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMSAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbSAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNCAvKiBUb2tlbml6ZXJTdGF0ZS5Fc2NhcGVOZXh0ICovOlxyXG4gICAgICAgICAgICAgICAgYWRkQ2hhclRvQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxIC8qIFRva2VuaXplclN0YXRlLlBhcmFtICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICcoJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMiAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbVJlZ0V4cCAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFZBTElEX1BBUkFNX1JFLnRlc3QoY2hhcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRDaGFyVG9CdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN1bWVCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDAgLyogVG9rZW5pemVyU3RhdGUuU3RhdGljICovO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGdvIGJhY2sgb25lIGNoYXJhY3RlciBpZiB3ZSB3ZXJlIG5vdCBtb2RpZnlpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhciAhPT0gJyonICYmIGNoYXIgIT09ICc/JyAmJiBjaGFyICE9PSAnKycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDIgLyogVG9rZW5pemVyU3RhdGUuUGFyYW1SZWdFeHAgKi86XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBpcyBpdCB3b3J0aCBoYW5kbGluZyBuZXN0ZWQgcmVnZXhwPyBsaWtlIDpwKD86cHJlZml4XyhbXi9dKylfc3VmZml4KVxyXG4gICAgICAgICAgICAgICAgLy8gaXQgYWxyZWFkeSB3b3JrcyBieSBlc2NhcGluZyB0aGUgY2xvc2luZyApXHJcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3BhdGhzLmVzbS5kZXYvP3A9QUFNZUpiaUF3UUVjREtiQW9BQWtQNjBQRzJSNlFBdmdOYUE2QUZBQ00yQUJ1UUJCI1xyXG4gICAgICAgICAgICAgICAgLy8gaXMgdGhpcyByZWFsbHkgc29tZXRoaW5nIHBlb3BsZSBuZWVkIHNpbmNlIHlvdSBjYW4gYWxzbyB3cml0ZVxyXG4gICAgICAgICAgICAgICAgLy8gL3ByZWZpeF86cCgpX3N1ZmZpeFxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICcpJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgZXNjYXBlZCApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbVJlW2N1c3RvbVJlLmxlbmd0aCAtIDFdID09ICdcXFxcJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUmUgPSBjdXN0b21SZS5zbGljZSgwLCAtMSkgKyBjaGFyO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAzIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwRW5kICovO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tUmUgKz0gY2hhcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDMgLyogVG9rZW5pemVyU3RhdGUuUGFyYW1SZWdFeHBFbmQgKi86XHJcbiAgICAgICAgICAgICAgICAvLyBzYW1lIGFzIGZpbmFsaXppbmcgYSBwYXJhbVxyXG4gICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSAwIC8qIFRva2VuaXplclN0YXRlLlN0YXRpYyAqLztcclxuICAgICAgICAgICAgICAgIC8vIGdvIGJhY2sgb25lIGNoYXJhY3RlciBpZiB3ZSB3ZXJlIG5vdCBtb2RpZnlpbmdcclxuICAgICAgICAgICAgICAgIGlmIChjaGFyICE9PSAnKicgJiYgY2hhciAhPT0gJz8nICYmIGNoYXIgIT09ICcrJylcclxuICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICBjdXN0b21SZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjcmFzaCgnVW5rbm93biBzdGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHN0YXRlID09PSAyIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwICovKVxyXG4gICAgICAgIGNyYXNoKGBVbmZpbmlzaGVkIGN1c3RvbSBSZWdFeHAgZm9yIHBhcmFtIFwiJHtidWZmZXJ9XCJgKTtcclxuICAgIGNvbnN1bWVCdWZmZXIoKTtcclxuICAgIGZpbmFsaXplU2VnbWVudCgpO1xyXG4gICAgLy8gdG9rZW5DYWNoZS5zZXQocGF0aCwgdG9rZW5zKVxyXG4gICAgcmV0dXJuIHRva2VucztcclxufVxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZVJlY29yZE1hdGNoZXIocmVjb3JkLCBwYXJlbnQsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHBhcnNlciA9IHRva2Vuc1RvUGFyc2VyKHRva2VuaXplUGF0aChyZWNvcmQucGF0aCksIG9wdGlvbnMpO1xyXG4gICAgLy8gd2FybiBhZ2FpbnN0IHBhcmFtcyB3aXRoIHRoZSBzYW1lIG5hbWVcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0tleXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgcGFyc2VyLmtleXMpIHtcclxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nS2V5cy5oYXMoa2V5Lm5hbWUpKVxyXG4gICAgICAgICAgICAgICAgd2FybihgRm91bmQgZHVwbGljYXRlZCBwYXJhbXMgd2l0aCBuYW1lIFwiJHtrZXkubmFtZX1cIiBmb3IgcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIuIE9ubHkgdGhlIGxhc3Qgb25lIHdpbGwgYmUgYXZhaWxhYmxlIG9uIFwiJHJvdXRlLnBhcmFtc1wiLmApO1xyXG4gICAgICAgICAgICBleGlzdGluZ0tleXMuYWRkKGtleS5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYXRjaGVyID0gYXNzaWduKHBhcnNlciwge1xyXG4gICAgICAgIHJlY29yZCxcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgLy8gdGhlc2UgbmVlZHMgdG8gYmUgcG9wdWxhdGVkIGJ5IHRoZSBwYXJlbnRcclxuICAgICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgICAgYWxpYXM6IFtdLFxyXG4gICAgfSk7XHJcbiAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgLy8gYm90aCBhcmUgYWxpYXNlcyBvciBib3RoIGFyZSBub3QgYWxpYXNlc1xyXG4gICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gbWl4IHRoZW0gYmVjYXVzZSB0aGUgb3JkZXIgaXMgdXNlZCB3aGVuXHJcbiAgICAgICAgLy8gcGFzc2luZyBvcmlnaW5hbFJlY29yZCBpbiBNYXRjaGVyLmFkZFJvdXRlXHJcbiAgICAgICAgaWYgKCFtYXRjaGVyLnJlY29yZC5hbGlhc09mID09PSAhcGFyZW50LnJlY29yZC5hbGlhc09mKVxyXG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChtYXRjaGVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtYXRjaGVyO1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgUm91dGVyIE1hdGNoZXIuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiBAcGFyYW0gcm91dGVzIC0gYXJyYXkgb2YgaW5pdGlhbCByb3V0ZXNcclxuICogQHBhcmFtIGdsb2JhbE9wdGlvbnMgLSBnbG9iYWwgcm91dGUgb3B0aW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUm91dGVyTWF0Y2hlcihyb3V0ZXMsIGdsb2JhbE9wdGlvbnMpIHtcclxuICAgIC8vIG5vcm1hbGl6ZWQgb3JkZXJlZCBhcnJheSBvZiBtYXRjaGVyc1xyXG4gICAgY29uc3QgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGNvbnN0IG1hdGNoZXJNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICBnbG9iYWxPcHRpb25zID0gbWVyZ2VPcHRpb25zKHsgc3RyaWN0OiBmYWxzZSwgZW5kOiB0cnVlLCBzZW5zaXRpdmU6IGZhbHNlIH0sIGdsb2JhbE9wdGlvbnMpO1xyXG4gICAgZnVuY3Rpb24gZ2V0UmVjb3JkTWF0Y2hlcihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJNYXAuZ2V0KG5hbWUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkUm91dGUocmVjb3JkLCBwYXJlbnQsIG9yaWdpbmFsUmVjb3JkKSB7XHJcbiAgICAgICAgLy8gdXNlZCBsYXRlciBvbiB0byByZW1vdmUgYnkgbmFtZVxyXG4gICAgICAgIGNvbnN0IGlzUm9vdEFkZCA9ICFvcmlnaW5hbFJlY29yZDtcclxuICAgICAgICBjb25zdCBtYWluTm9ybWFsaXplZFJlY29yZCA9IG5vcm1hbGl6ZVJvdXRlUmVjb3JkKHJlY29yZCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjaGVja0NoaWxkTWlzc2luZ05hbWVXaXRoRW1wdHlQYXRoKG1haW5Ob3JtYWxpemVkUmVjb3JkLCBwYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBtaWdodCBiZSB0aGUgY2hpbGQgb2YgYW4gYWxpYXNcclxuICAgICAgICBtYWluTm9ybWFsaXplZFJlY29yZC5hbGlhc09mID0gb3JpZ2luYWxSZWNvcmQgJiYgb3JpZ2luYWxSZWNvcmQucmVjb3JkO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoZ2xvYmFsT3B0aW9ucywgcmVjb3JkKTtcclxuICAgICAgICAvLyBnZW5lcmF0ZSBhbiBhcnJheSBvZiByZWNvcmRzIHRvIGNvcnJlY3RseSBoYW5kbGUgYWxpYXNlc1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRSZWNvcmRzID0gW1xyXG4gICAgICAgICAgICBtYWluTm9ybWFsaXplZFJlY29yZCxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGlmICgnYWxpYXMnIGluIHJlY29yZCkge1xyXG4gICAgICAgICAgICBjb25zdCBhbGlhc2VzID0gdHlwZW9mIHJlY29yZC5hbGlhcyA9PT0gJ3N0cmluZycgPyBbcmVjb3JkLmFsaWFzXSA6IHJlY29yZC5hbGlhcztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUmVjb3Jkcy5wdXNoKGFzc2lnbih7fSwgbWFpbk5vcm1hbGl6ZWRSZWNvcmQsIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGFsbG93cyB1cyB0byBob2xkIGEgY29weSBvZiB0aGUgYGNvbXBvbmVudHNgIG9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgYXN5bmMgY29tcG9uZW50cyBjYWNoZSBpcyBob2xkIG9uIHRoZSBvcmlnaW5hbCByZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBvcmlnaW5hbFJlY29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG9yaWdpbmFsUmVjb3JkLnJlY29yZC5jb21wb25lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbWFpbk5vcm1hbGl6ZWRSZWNvcmQuY29tcG9uZW50cyxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhbGlhcyxcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBtaWdodCBiZSB0aGUgY2hpbGQgb2YgYW4gYWxpYXNcclxuICAgICAgICAgICAgICAgICAgICBhbGlhc09mOiBvcmlnaW5hbFJlY29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG9yaWdpbmFsUmVjb3JkLnJlY29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG1haW5Ob3JtYWxpemVkUmVjb3JkLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhbGlhc2VzIGFyZSBhbHdheXMgb2YgdGhlIHNhbWUga2luZCBhcyB0aGUgb3JpZ2luYWwgc2luY2UgdGhleVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFyZSBkZWZpbmVkIG9uIHRoZSBzYW1lIHJlY29yZFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtYXRjaGVyO1xyXG4gICAgICAgIGxldCBvcmlnaW5hbE1hdGNoZXI7XHJcbiAgICAgICAgZm9yIChjb25zdCBub3JtYWxpemVkUmVjb3JkIG9mIG5vcm1hbGl6ZWRSZWNvcmRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcGF0aCB9ID0gbm9ybWFsaXplZFJlY29yZDtcclxuICAgICAgICAgICAgLy8gQnVpbGQgdXAgdGhlIHBhdGggZm9yIG5lc3RlZCByb3V0ZXMgaWYgdGhlIGNoaWxkIGlzbid0IGFuIGFic29sdXRlXHJcbiAgICAgICAgICAgIC8vIHJvdXRlLiBPbmx5IGFkZCB0aGUgLyBkZWxpbWl0ZXIgaWYgdGhlIGNoaWxkIHBhdGggaXNuJ3QgZW1wdHkgYW5kIGlmIHRoZVxyXG4gICAgICAgICAgICAvLyBwYXJlbnQgcGF0aCBkb2Vzbid0IGhhdmUgYSB0cmFpbGluZyBzbGFzaFxyXG4gICAgICAgICAgICBpZiAocGFyZW50ICYmIHBhdGhbMF0gIT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50UGF0aCA9IHBhcmVudC5yZWNvcmQucGF0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbm5lY3RpbmdTbGFzaCA9IHBhcmVudFBhdGhbcGFyZW50UGF0aC5sZW5ndGggLSAxXSA9PT0gJy8nID8gJycgOiAnLyc7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUmVjb3JkLnBhdGggPVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZWNvcmQucGF0aCArIChwYXRoICYmIGNvbm5lY3RpbmdTbGFzaCArIHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbm9ybWFsaXplZFJlY29yZC5wYXRoID09PSAnKicpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2F0Y2ggYWxsIHJvdXRlcyAoXCIqXCIpIG11c3Qgbm93IGJlIGRlZmluZWQgdXNpbmcgYSBwYXJhbSB3aXRoIGEgY3VzdG9tIHJlZ2V4cC5cXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAnU2VlIG1vcmUgYXQgaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyNyZW1vdmVkLXN0YXItb3ItY2F0Y2gtYWxsLXJvdXRlcy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgdGhlIG9iamVjdCBiZWZvcmVoYW5kLCBzbyBpdCBjYW4gYmUgcGFzc2VkIHRvIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIG1hdGNoZXIgPSBjcmVhdGVSb3V0ZVJlY29yZE1hdGNoZXIobm9ybWFsaXplZFJlY29yZCwgcGFyZW50LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnQgJiYgcGF0aFswXSA9PT0gJy8nKVxyXG4gICAgICAgICAgICAgICAgY2hlY2tNaXNzaW5nUGFyYW1zSW5BYnNvbHV0ZVBhdGgobWF0Y2hlciwgcGFyZW50KTtcclxuICAgICAgICAgICAgLy8gaWYgd2UgYXJlIGFuIGFsaWFzIHdlIG11c3QgdGVsbCB0aGUgb3JpZ2luYWwgcmVjb3JkIHRoYXQgd2UgZXhpc3QsXHJcbiAgICAgICAgICAgIC8vIHNvIHdlIGNhbiBiZSByZW1vdmVkXHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxSZWNvcmQuYWxpYXMucHVzaChtYXRjaGVyKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja1NhbWVQYXJhbXMob3JpZ2luYWxSZWNvcmQsIG1hdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgZmlyc3QgcmVjb3JkIGlzIHRoZSBvcmlnaW5hbCBhbmQgb3RoZXJzIGFyZSBhbGlhc2VzXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbE1hdGNoZXIgPSBvcmlnaW5hbE1hdGNoZXIgfHwgbWF0Y2hlcjtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbE1hdGNoZXIgIT09IG1hdGNoZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxNYXRjaGVyLmFsaWFzLnB1c2gobWF0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIHJvdXRlIGlmIG5hbWVkIGFuZCBvbmx5IGZvciB0aGUgdG9wIHJlY29yZCAoYXZvaWQgaW4gbmVzdGVkIGNhbGxzKVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBvcmlnaW5hbCByZWNvcmQgaXMgdGhlIGZpcnN0IG9uZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUm9vdEFkZCAmJiByZWNvcmQubmFtZSAmJiAhaXNBbGlhc1JlY29yZChtYXRjaGVyKSlcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVSb3V0ZShyZWNvcmQubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1haW5Ob3JtYWxpemVkUmVjb3JkLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG1haW5Ob3JtYWxpemVkUmVjb3JkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFJvdXRlKGNoaWxkcmVuW2ldLCBtYXRjaGVyLCBvcmlnaW5hbFJlY29yZCAmJiBvcmlnaW5hbFJlY29yZC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgd2FzIG5vIG9yaWdpbmFsIHJlY29yZCwgdGhlbiB0aGUgZmlyc3Qgb25lIHdhcyBub3QgYW4gYWxpYXMgYW5kIGFsbFxyXG4gICAgICAgICAgICAvLyBvdGhlciBhbGlhc2VzIChpZiBhbnkpIG5lZWQgdG8gcmVmZXJlbmNlIHRoaXMgcmVjb3JkIHdoZW4gYWRkaW5nIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIG9yaWdpbmFsUmVjb3JkID0gb3JpZ2luYWxSZWNvcmQgfHwgbWF0Y2hlcjtcclxuICAgICAgICAgICAgLy8gVE9ETzogYWRkIG5vcm1hbGl6ZWQgcmVjb3JkcyBmb3IgbW9yZSBmbGV4aWJpbGl0eVxyXG4gICAgICAgICAgICAvLyBpZiAocGFyZW50ICYmIGlzQWxpYXNSZWNvcmQob3JpZ2luYWxSZWNvcmQpKSB7XHJcbiAgICAgICAgICAgIC8vICAgcGFyZW50LmNoaWxkcmVuLnB1c2gob3JpZ2luYWxSZWNvcmQpXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgaW5zZXJ0TWF0Y2hlcihtYXRjaGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWF0Y2hlclxyXG4gICAgICAgICAgICA/ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIG90aGVyIG1hdGNoZXJzIGFyZSBhbGlhc2VzLCB0aGV5IHNob3VsZCBiZSByZW1vdmVkIGJ5IHRoZSBvcmlnaW5hbCBtYXRjaGVyXHJcbiAgICAgICAgICAgICAgICByZW1vdmVSb3V0ZShvcmlnaW5hbE1hdGNoZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogbm9vcDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVJvdXRlKG1hdGNoZXJSZWYpIHtcclxuICAgICAgICBpZiAoaXNSb3V0ZU5hbWUobWF0Y2hlclJlZikpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IG1hdGNoZXJNYXAuZ2V0KG1hdGNoZXJSZWYpO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlck1hcC5kZWxldGUobWF0Y2hlclJlZik7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVycy5zcGxpY2UobWF0Y2hlcnMuaW5kZXhPZihtYXRjaGVyKSwgMSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyLmNoaWxkcmVuLmZvckVhY2gocmVtb3ZlUm91dGUpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlci5hbGlhcy5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBtYXRjaGVycy5pbmRleE9mKG1hdGNoZXJSZWYpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVyUmVmLnJlY29yZC5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXJNYXAuZGVsZXRlKG1hdGNoZXJSZWYucmVjb3JkLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlclJlZi5jaGlsZHJlbi5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJSZWYuYWxpYXMuZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRSb3V0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaW5zZXJ0TWF0Y2hlcihtYXRjaGVyKSB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgbWF0Y2hlcnMubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIGNvbXBhcmVQYXRoUGFyc2VyU2NvcmUobWF0Y2hlciwgbWF0Y2hlcnNbaV0pID49IDAgJiZcclxuICAgICAgICAgICAgLy8gQWRkaW5nIGNoaWxkcmVuIHdpdGggZW1wdHkgcGF0aCBzaG91bGQgc3RpbGwgYXBwZWFyIGJlZm9yZSB0aGUgcGFyZW50XHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9yb3V0ZXIvaXNzdWVzLzExMjRcclxuICAgICAgICAgICAgKG1hdGNoZXIucmVjb3JkLnBhdGggIT09IG1hdGNoZXJzW2ldLnJlY29yZC5wYXRoIHx8XHJcbiAgICAgICAgICAgICAgICAhaXNSZWNvcmRDaGlsZE9mKG1hdGNoZXIsIG1hdGNoZXJzW2ldKSkpXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICBtYXRjaGVycy5zcGxpY2UoaSwgMCwgbWF0Y2hlcik7XHJcbiAgICAgICAgLy8gb25seSBhZGQgdGhlIG9yaWdpbmFsIHJlY29yZCB0byB0aGUgbmFtZSBtYXBcclxuICAgICAgICBpZiAobWF0Y2hlci5yZWNvcmQubmFtZSAmJiAhaXNBbGlhc1JlY29yZChtYXRjaGVyKSlcclxuICAgICAgICAgICAgbWF0Y2hlck1hcC5zZXQobWF0Y2hlci5yZWNvcmQubmFtZSwgbWF0Y2hlcik7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvbHZlKGxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pIHtcclxuICAgICAgICBsZXQgbWF0Y2hlcjtcclxuICAgICAgICBsZXQgcGFyYW1zID0ge307XHJcbiAgICAgICAgbGV0IHBhdGg7XHJcbiAgICAgICAgbGV0IG5hbWU7XHJcbiAgICAgICAgaWYgKCduYW1lJyBpbiBsb2NhdGlvbiAmJiBsb2NhdGlvbi5uYW1lKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZXIgPSBtYXRjaGVyTWFwLmdldChsb2NhdGlvbi5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFtYXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3IoMSAvKiBFcnJvclR5cGVzLk1BVENIRVJfTk9UX0ZPVU5EICovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gd2FybiBpZiB0aGUgdXNlciBpcyBwYXNzaW5nIGludmFsaWQgcGFyYW1zIHNvIHRoZXkgY2FuIGRlYnVnIGl0IGJldHRlciB3aGVuIHRoZXkgZ2V0IHJlbW92ZWRcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZFBhcmFtcyA9IE9iamVjdC5rZXlzKGxvY2F0aW9uLnBhcmFtcyB8fCB7fSkuZmlsdGVyKHBhcmFtTmFtZSA9PiAhbWF0Y2hlci5rZXlzLmZpbmQoayA9PiBrLm5hbWUgPT09IHBhcmFtTmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGludmFsaWRQYXJhbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRGlzY2FyZGVkIGludmFsaWQgcGFyYW0ocykgXCIke2ludmFsaWRQYXJhbXMuam9pbignXCIsIFwiJyl9XCIgd2hlbiBuYXZpZ2F0aW5nLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlci9ibG9iL21haW4vcGFja2FnZXMvcm91dGVyL0NIQU5HRUxPRy5tZCM0MTQtMjAyMi0wOC0yMiBmb3IgbW9yZSBkZXRhaWxzLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaGVyLnJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICBwYXJhbXMgPSBhc3NpZ24oXHJcbiAgICAgICAgICAgIC8vIHBhcmFtc0Zyb21Mb2NhdGlvbiBpcyBhIG5ldyBvYmplY3RcclxuICAgICAgICAgICAgcGFyYW1zRnJvbUxvY2F0aW9uKGN1cnJlbnRMb2NhdGlvbi5wYXJhbXMsIFxyXG4gICAgICAgICAgICAvLyBvbmx5IGtlZXAgcGFyYW1zIHRoYXQgZXhpc3QgaW4gdGhlIHJlc29sdmVkIGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIFRPRE86IG9ubHkga2VlcCBvcHRpb25hbCBwYXJhbXMgY29taW5nIGZyb20gYSBwYXJlbnQgcmVjb3JkXHJcbiAgICAgICAgICAgIG1hdGNoZXIua2V5cy5maWx0ZXIoayA9PiAhay5vcHRpb25hbCkubWFwKGsgPT4gay5uYW1lKSksIFxyXG4gICAgICAgICAgICAvLyBkaXNjYXJkIGFueSBleGlzdGluZyBwYXJhbXMgaW4gdGhlIGN1cnJlbnQgbG9jYXRpb24gdGhhdCBkbyBub3QgZXhpc3QgaGVyZVxyXG4gICAgICAgICAgICAvLyAjMTQ5NyB0aGlzIGVuc3VyZXMgYmV0dGVyIGFjdGl2ZS9leGFjdCBtYXRjaGluZ1xyXG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXMgJiZcclxuICAgICAgICAgICAgICAgIHBhcmFtc0Zyb21Mb2NhdGlvbihsb2NhdGlvbi5wYXJhbXMsIG1hdGNoZXIua2V5cy5tYXAoayA9PiBrLm5hbWUpKSk7XHJcbiAgICAgICAgICAgIC8vIHRocm93cyBpZiBjYW5ub3QgYmUgc3RyaW5naWZpZWRcclxuICAgICAgICAgICAgcGF0aCA9IG1hdGNoZXIuc3RyaW5naWZ5KHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCdwYXRoJyBpbiBsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAvLyBubyBuZWVkIHRvIHJlc29sdmUgdGhlIHBhdGggd2l0aCB0aGUgbWF0Y2hlciBhcyBpdCB3YXMgcHJvdmlkZWRcclxuICAgICAgICAgICAgLy8gdGhpcyBhbHNvIGFsbG93cyB0aGUgdXNlciB0byBjb250cm9sIHRoZSBlbmNvZGluZ1xyXG4gICAgICAgICAgICBwYXRoID0gbG9jYXRpb24ucGF0aDtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFRoZSBNYXRjaGVyIGNhbm5vdCByZXNvbHZlIHJlbGF0aXZlIHBhdGhzIGJ1dCByZWNlaXZlZCBcIiR7cGF0aH1cIi4gVW5sZXNzIHlvdSBkaXJlY3RseSBjYWxsZWQgXFxgbWF0Y2hlci5yZXNvbHZlKFwiJHtwYXRofVwiKVxcYCwgdGhpcyBpcyBwcm9iYWJseSBhIGJ1ZyBpbiB2dWUtcm91dGVyLiBQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL25ldy1pc3N1ZS52dWVqcy5vcmcvP3JlcG89dnVlanMvcm91dGVyLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hdGNoZXIgPSBtYXRjaGVycy5maW5kKG0gPT4gbS5yZS50ZXN0KHBhdGgpKTtcclxuICAgICAgICAgICAgLy8gbWF0Y2hlciBzaG91bGQgaGF2ZSBhIHZhbHVlIGFmdGVyIHRoZSBsb29wXHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBrbm93IHRoZSBtYXRjaGVyIHdvcmtzIGJlY2F1c2Ugd2UgdGVzdGVkIHRoZSByZWdleHBcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IG1hdGNoZXIucGFyc2UocGF0aCk7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gbWF0Y2hlci5yZWNvcmQubmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBsb2NhdGlvbiBpcyBhIHJlbGF0aXZlIHBhdGhcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoIGJ5IG5hbWUgb3IgcGF0aCBvZiBjdXJyZW50IHJvdXRlXHJcbiAgICAgICAgICAgIG1hdGNoZXIgPSBjdXJyZW50TG9jYXRpb24ubmFtZVxyXG4gICAgICAgICAgICAgICAgPyBtYXRjaGVyTWFwLmdldChjdXJyZW50TG9jYXRpb24ubmFtZSlcclxuICAgICAgICAgICAgICAgIDogbWF0Y2hlcnMuZmluZChtID0+IG0ucmUudGVzdChjdXJyZW50TG9jYXRpb24ucGF0aCkpO1xyXG4gICAgICAgICAgICBpZiAoIW1hdGNoZXIpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVSb3V0ZXJFcnJvcigxIC8qIEVycm9yVHlwZXMuTUFUQ0hFUl9OT1RfRk9VTkQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmFtZSA9IG1hdGNoZXIucmVjb3JkLm5hbWU7XHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHdlIGFyZSBuYXZpZ2F0aW5nIHRvIHRoZSBzYW1lIGxvY2F0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHBpY2sgdGhlXHJcbiAgICAgICAgICAgIC8vIHBhcmFtcyBsaWtlIHdoZW4gYG5hbWVgIGlzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIHBhcmFtcyA9IGFzc2lnbih7fSwgY3VycmVudExvY2F0aW9uLnBhcmFtcywgbG9jYXRpb24ucGFyYW1zKTtcclxuICAgICAgICAgICAgcGF0aCA9IG1hdGNoZXIuc3RyaW5naWZ5KHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1hdGNoZWQgPSBbXTtcclxuICAgICAgICBsZXQgcGFyZW50TWF0Y2hlciA9IG1hdGNoZXI7XHJcbiAgICAgICAgd2hpbGUgKHBhcmVudE1hdGNoZXIpIHtcclxuICAgICAgICAgICAgLy8gcmV2ZXJzZWQgb3JkZXIgc28gcGFyZW50cyBhcmUgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgICAgICAgICBtYXRjaGVkLnVuc2hpZnQocGFyZW50TWF0Y2hlci5yZWNvcmQpO1xyXG4gICAgICAgICAgICBwYXJlbnRNYXRjaGVyID0gcGFyZW50TWF0Y2hlci5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHBhdGgsXHJcbiAgICAgICAgICAgIHBhcmFtcyxcclxuICAgICAgICAgICAgbWF0Y2hlZCxcclxuICAgICAgICAgICAgbWV0YTogbWVyZ2VNZXRhRmllbGRzKG1hdGNoZWQpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBhZGQgaW5pdGlhbCByb3V0ZXNcclxuICAgIHJvdXRlcy5mb3JFYWNoKHJvdXRlID0+IGFkZFJvdXRlKHJvdXRlKSk7XHJcbiAgICByZXR1cm4geyBhZGRSb3V0ZSwgcmVzb2x2ZSwgcmVtb3ZlUm91dGUsIGdldFJvdXRlcywgZ2V0UmVjb3JkTWF0Y2hlciB9O1xyXG59XHJcbmZ1bmN0aW9uIHBhcmFtc0Zyb21Mb2NhdGlvbihwYXJhbXMsIGtleXMpIHtcclxuICAgIGNvbnN0IG5ld1BhcmFtcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgIGlmIChrZXkgaW4gcGFyYW1zKVxyXG4gICAgICAgICAgICBuZXdQYXJhbXNba2V5XSA9IHBhcmFtc1trZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1BhcmFtcztcclxufVxyXG4vKipcclxuICogTm9ybWFsaXplcyBhIFJvdXRlUmVjb3JkUmF3LiBDcmVhdGVzIGEgY29weVxyXG4gKlxyXG4gKiBAcGFyYW0gcmVjb3JkXHJcbiAqIEByZXR1cm5zIHRoZSBub3JtYWxpemVkIHZlcnNpb25cclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJvdXRlUmVjb3JkKHJlY29yZCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwYXRoOiByZWNvcmQucGF0aCxcclxuICAgICAgICByZWRpcmVjdDogcmVjb3JkLnJlZGlyZWN0LFxyXG4gICAgICAgIG5hbWU6IHJlY29yZC5uYW1lLFxyXG4gICAgICAgIG1ldGE6IHJlY29yZC5tZXRhIHx8IHt9LFxyXG4gICAgICAgIGFsaWFzT2Y6IHVuZGVmaW5lZCxcclxuICAgICAgICBiZWZvcmVFbnRlcjogcmVjb3JkLmJlZm9yZUVudGVyLFxyXG4gICAgICAgIHByb3BzOiBub3JtYWxpemVSZWNvcmRQcm9wcyhyZWNvcmQpLFxyXG4gICAgICAgIGNoaWxkcmVuOiByZWNvcmQuY2hpbGRyZW4gfHwgW10sXHJcbiAgICAgICAgaW5zdGFuY2VzOiB7fSxcclxuICAgICAgICBsZWF2ZUd1YXJkczogbmV3IFNldCgpLFxyXG4gICAgICAgIHVwZGF0ZUd1YXJkczogbmV3IFNldCgpLFxyXG4gICAgICAgIGVudGVyQ2FsbGJhY2tzOiB7fSxcclxuICAgICAgICBjb21wb25lbnRzOiAnY29tcG9uZW50cycgaW4gcmVjb3JkXHJcbiAgICAgICAgICAgID8gcmVjb3JkLmNvbXBvbmVudHMgfHwgbnVsbFxyXG4gICAgICAgICAgICA6IHJlY29yZC5jb21wb25lbnQgJiYgeyBkZWZhdWx0OiByZWNvcmQuY29tcG9uZW50IH0sXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgdGhlIG9wdGlvbmFsIGBwcm9wc2AgaW4gYSByZWNvcmQgdG8gYWx3YXlzIGJlIGFuIG9iamVjdCBzaW1pbGFyIHRvXHJcbiAqIGNvbXBvbmVudHMuIEFsc28gYWNjZXB0IGEgYm9vbGVhbiBmb3IgY29tcG9uZW50cy5cclxuICogQHBhcmFtIHJlY29yZFxyXG4gKi9cclxuZnVuY3Rpb24gbm9ybWFsaXplUmVjb3JkUHJvcHMocmVjb3JkKSB7XHJcbiAgICBjb25zdCBwcm9wc09iamVjdCA9IHt9O1xyXG4gICAgLy8gcHJvcHMgZG9lcyBub3QgZXhpc3Qgb24gcmVkaXJlY3QgcmVjb3JkcywgYnV0IHdlIGNhbiBzZXQgZmFsc2UgZGlyZWN0bHlcclxuICAgIGNvbnN0IHByb3BzID0gcmVjb3JkLnByb3BzIHx8IGZhbHNlO1xyXG4gICAgaWYgKCdjb21wb25lbnQnIGluIHJlY29yZCkge1xyXG4gICAgICAgIHByb3BzT2JqZWN0LmRlZmF1bHQgPSBwcm9wcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE5PVEU6IHdlIGNvdWxkIGFsc28gYWxsb3cgYSBmdW5jdGlvbiB0byBiZSBhcHBsaWVkIHRvIGV2ZXJ5IGNvbXBvbmVudC5cclxuICAgICAgICAvLyBXb3VsZCBuZWVkIHVzZXIgZmVlZGJhY2sgZm9yIHVzZSBjYXNlc1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiByZWNvcmQuY29tcG9uZW50cylcclxuICAgICAgICAgICAgcHJvcHNPYmplY3RbbmFtZV0gPSB0eXBlb2YgcHJvcHMgPT09ICdib29sZWFuJyA/IHByb3BzIDogcHJvcHNbbmFtZV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvcHNPYmplY3Q7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIHJlY29yZCBvciBhbnkgb2YgaXRzIHBhcmVudCBpcyBhbiBhbGlhc1xyXG4gKiBAcGFyYW0gcmVjb3JkXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FsaWFzUmVjb3JkKHJlY29yZCkge1xyXG4gICAgd2hpbGUgKHJlY29yZCkge1xyXG4gICAgICAgIGlmIChyZWNvcmQucmVjb3JkLmFsaWFzT2YpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJlY29yZCA9IHJlY29yZC5wYXJlbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLyoqXHJcbiAqIE1lcmdlIG1ldGEgZmllbGRzIG9mIGFuIGFycmF5IG9mIHJlY29yZHNcclxuICpcclxuICogQHBhcmFtIG1hdGNoZWQgLSBhcnJheSBvZiBtYXRjaGVkIHJlY29yZHNcclxuICovXHJcbmZ1bmN0aW9uIG1lcmdlTWV0YUZpZWxkcyhtYXRjaGVkKSB7XHJcbiAgICByZXR1cm4gbWF0Y2hlZC5yZWR1Y2UoKG1ldGEsIHJlY29yZCkgPT4gYXNzaWduKG1ldGEsIHJlY29yZC5tZXRhKSwge30pO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgcGFydGlhbE9wdGlvbnMpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgb3B0aW9uc1trZXldID0ga2V5IGluIHBhcnRpYWxPcHRpb25zID8gcGFydGlhbE9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVQYXJhbShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGEubmFtZSA9PT0gYi5uYW1lICYmXHJcbiAgICAgICAgYS5vcHRpb25hbCA9PT0gYi5vcHRpb25hbCAmJlxyXG4gICAgICAgIGEucmVwZWF0YWJsZSA9PT0gYi5yZXBlYXRhYmxlKTtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgYSBwYXRoIGFuZCBpdHMgYWxpYXMgaGF2ZSB0aGUgc2FtZSByZXF1aXJlZCBwYXJhbXNcclxuICpcclxuICogQHBhcmFtIGEgLSBvcmlnaW5hbCByZWNvcmRcclxuICogQHBhcmFtIGIgLSBhbGlhcyByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrU2FtZVBhcmFtcyhhLCBiKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBhLmtleXMpIHtcclxuICAgICAgICBpZiAoIWtleS5vcHRpb25hbCAmJiAhYi5rZXlzLmZpbmQoaXNTYW1lUGFyYW0uYmluZChudWxsLCBrZXkpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHdhcm4oYEFsaWFzIFwiJHtiLnJlY29yZC5wYXRofVwiIGFuZCB0aGUgb3JpZ2luYWwgcmVjb3JkOiBcIiR7YS5yZWNvcmQucGF0aH1cIiBtdXN0IGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiYCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBiLmtleXMpIHtcclxuICAgICAgICBpZiAoIWtleS5vcHRpb25hbCAmJiAhYS5rZXlzLmZpbmQoaXNTYW1lUGFyYW0uYmluZChudWxsLCBrZXkpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHdhcm4oYEFsaWFzIFwiJHtiLnJlY29yZC5wYXRofVwiIGFuZCB0aGUgb3JpZ2luYWwgcmVjb3JkOiBcIiR7YS5yZWNvcmQucGF0aH1cIiBtdXN0IGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiYCk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgcm91dGUgd2l0aCBhIG5hbWUgYW5kIGEgY2hpbGQgd2l0aCBhbiBlbXB0eSBwYXRoIHdpdGhvdXQgYSBuYW1lIHNob3VsZCB3YXJuIHdoZW4gYWRkaW5nIHRoZSByb3V0ZVxyXG4gKlxyXG4gKiBAcGFyYW0gbWFpbk5vcm1hbGl6ZWRSZWNvcmQgLSBSb3V0ZVJlY29yZE5vcm1hbGl6ZWRcclxuICogQHBhcmFtIHBhcmVudCAtIFJvdXRlUmVjb3JkTWF0Y2hlclxyXG4gKi9cclxuZnVuY3Rpb24gY2hlY2tDaGlsZE1pc3NpbmdOYW1lV2l0aEVtcHR5UGF0aChtYWluTm9ybWFsaXplZFJlY29yZCwgcGFyZW50KSB7XHJcbiAgICBpZiAocGFyZW50ICYmXHJcbiAgICAgICAgcGFyZW50LnJlY29yZC5uYW1lICYmXHJcbiAgICAgICAgIW1haW5Ob3JtYWxpemVkUmVjb3JkLm5hbWUgJiZcclxuICAgICAgICAhbWFpbk5vcm1hbGl6ZWRSZWNvcmQucGF0aCkge1xyXG4gICAgICAgIHdhcm4oYFRoZSByb3V0ZSBuYW1lZCBcIiR7U3RyaW5nKHBhcmVudC5yZWNvcmQubmFtZSl9XCIgaGFzIGEgY2hpbGQgd2l0aG91dCBhIG5hbWUgYW5kIGFuIGVtcHR5IHBhdGguIFVzaW5nIHRoYXQgbmFtZSB3b24ndCByZW5kZXIgdGhlIGVtcHR5IHBhdGggY2hpbGQgc28geW91IHByb2JhYmx5IHdhbnQgdG8gbW92ZSB0aGUgbmFtZSB0byB0aGUgY2hpbGQgaW5zdGVhZC4gSWYgdGhpcyBpcyBpbnRlbnRpb25hbCwgYWRkIGEgbmFtZSB0byB0aGUgY2hpbGQgcm91dGUgdG8gcmVtb3ZlIHRoZSB3YXJuaW5nLmApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoZWNrTWlzc2luZ1BhcmFtc0luQWJzb2x1dGVQYXRoKHJlY29yZCwgcGFyZW50KSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwYXJlbnQua2V5cykge1xyXG4gICAgICAgIGlmICghcmVjb3JkLmtleXMuZmluZChpc1NhbWVQYXJhbS5iaW5kKG51bGwsIGtleSkpKVxyXG4gICAgICAgICAgICByZXR1cm4gd2FybihgQWJzb2x1dGUgcGF0aCBcIiR7cmVjb3JkLnJlY29yZC5wYXRofVwiIG11c3QgaGF2ZSB0aGUgZXhhY3Qgc2FtZSBwYXJhbSBuYW1lZCBcIiR7a2V5Lm5hbWV9XCIgYXMgaXRzIHBhcmVudCBcIiR7cGFyZW50LnJlY29yZC5wYXRofVwiLmApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzUmVjb3JkQ2hpbGRPZihyZWNvcmQsIHBhcmVudCkge1xyXG4gICAgcmV0dXJuIHBhcmVudC5jaGlsZHJlbi5zb21lKGNoaWxkID0+IGNoaWxkID09PSByZWNvcmQgfHwgaXNSZWNvcmRDaGlsZE9mKHJlY29yZCwgY2hpbGQpKTtcclxufVxuXG4vKipcclxuICogRW5jb2RpbmcgUnVsZXMg4pCjID0gU3BhY2UgUGF0aDog4pCjIFwiIDwgPiAjID8geyB9IFF1ZXJ5OiDikKMgXCIgPCA+ICMgJiA9IEhhc2g6IOKQoyBcIlxyXG4gKiA8ID4gYFxyXG4gKlxyXG4gKiBPbiB0b3Agb2YgdGhhdCwgdGhlIFJGQzM5ODYgKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMi4yKVxyXG4gKiBkZWZpbmVzIHNvbWUgZXh0cmEgY2hhcmFjdGVycyB0byBiZSBlbmNvZGVkLiBNb3N0IGJyb3dzZXJzIGRvIG5vdCBlbmNvZGUgdGhlbVxyXG4gKiBpbiBlbmNvZGVVUkkgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy91cmwvaXNzdWVzLzM2OSwgc28gaXQgbWF5IGJlIHNhZmVyIHRvXHJcbiAqIGFsc28gZW5jb2RlIGAhJygpKmAuIExlYXZpbmcgdW4tZW5jb2RlZCBvbmx5IEFTQ0lJIGFscGhhbnVtZXJpYyhgYS16QS1aMC05YClcclxuICogcGx1cyBgLS5ffmAuIFRoaXMgZXh0cmEgc2FmZXR5IHNob3VsZCBiZSBhcHBsaWVkIHRvIHF1ZXJ5IGJ5IHBhdGNoaW5nIHRoZVxyXG4gKiBzdHJpbmcgcmV0dXJuZWQgYnkgZW5jb2RlVVJJQ29tcG9uZW50IGVuY29kZVVSSSBhbHNvIGVuY29kZXMgYFtcXF1eYC4gYFxcYFxyXG4gKiBzaG91bGQgYmUgZW5jb2RlZCB0byBhdm9pZCBhbWJpZ3VpdHkuIEJyb3dzZXJzIChJRSwgRkYsIEMpIHRyYW5zZm9ybSBhIGBcXGBcclxuICogaW50byBhIGAvYCBpZiBkaXJlY3RseSB0eXBlZCBpbi4gVGhlIF9iYWNrdGlja18gKGBgYGBgKSBzaG91bGQgYWxzbyBiZVxyXG4gKiBlbmNvZGVkIGV2ZXJ5d2hlcmUgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGxpa2UgRkYgZW5jb2RlIGl0IHdoZW4gZGlyZWN0bHlcclxuICogd3JpdHRlbiB3aGlsZSBvdGhlcnMgZG9uJ3QuIFNhZmFyaSBhbmQgSUUgZG9uJ3QgZW5jb2RlIGBgXCI8Pnt9YGBgIGluIGhhc2guXHJcbiAqL1xyXG4vLyBjb25zdCBFWFRSQV9SRVNFUlZFRF9SRSA9IC9bIScoKSpdL2dcclxuLy8gY29uc3QgZW5jb2RlUmVzZXJ2ZWRSZXBsYWNlciA9IChjOiBzdHJpbmcpID0+ICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNilcclxuY29uc3QgSEFTSF9SRSA9IC8jL2c7IC8vICUyM1xyXG5jb25zdCBBTVBFUlNBTkRfUkUgPSAvJi9nOyAvLyAlMjZcclxuY29uc3QgU0xBU0hfUkUgPSAvXFwvL2c7IC8vICUyRlxyXG5jb25zdCBFUVVBTF9SRSA9IC89L2c7IC8vICUzRFxyXG5jb25zdCBJTV9SRSA9IC9cXD8vZzsgLy8gJTNGXHJcbmNvbnN0IFBMVVNfUkUgPSAvXFwrL2c7IC8vICUyQlxyXG4vKipcclxuICogTk9URTogSXQncyBub3QgY2xlYXIgdG8gbWUgaWYgd2Ugc2hvdWxkIGVuY29kZSB0aGUgKyBzeW1ib2wgaW4gcXVlcmllcywgaXRcclxuICogc2VlbXMgdG8gYmUgbGVzcyBmbGV4aWJsZSB0aGFuIG5vdCBkb2luZyBzbyBhbmQgSSBjYW4ndCBmaW5kIG91dCB0aGUgbGVnYWN5XHJcbiAqIHN5c3RlbXMgcmVxdWlyaW5nIHRoaXMgZm9yIHJlZ3VsYXIgcmVxdWVzdHMgbGlrZSB0ZXh0L2h0bWwuIEluIHRoZSBzdGFuZGFyZCxcclxuICogdGhlIGVuY29kaW5nIG9mIHRoZSBwbHVzIGNoYXJhY3RlciBpcyBvbmx5IG1lbnRpb25lZCBmb3JcclxuICogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXHJcbiAqIChodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybGVuY29kZWQtcGFyc2luZykgYW5kIG1vc3QgYnJvd3NlcnMgc2VlbXMgbG9cclxuICogbGVhdmUgdGhlIHBsdXMgY2hhcmFjdGVyIGFzIGlzIGluIHF1ZXJpZXMuIFRvIGJlIG1vcmUgZmxleGlibGUsIHdlIGFsbG93IHRoZVxyXG4gKiBwbHVzIGNoYXJhY3RlciBvbiB0aGUgcXVlcnksIGJ1dCBpdCBjYW4gYWxzbyBiZSBtYW51YWxseSBlbmNvZGVkIGJ5IHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBSZXNvdXJjZXM6XHJcbiAqIC0gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxlbmNvZGVkLXBhcnNpbmdcclxuICogLSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjM0MjcxL3VybC1lbmNvZGluZy10aGUtc3BhY2UtY2hhcmFjdGVyLW9yLTIwXHJcbiAqL1xyXG5jb25zdCBFTkNfQlJBQ0tFVF9PUEVOX1JFID0gLyU1Qi9nOyAvLyBbXHJcbmNvbnN0IEVOQ19CUkFDS0VUX0NMT1NFX1JFID0gLyU1RC9nOyAvLyBdXHJcbmNvbnN0IEVOQ19DQVJFVF9SRSA9IC8lNUUvZzsgLy8gXlxyXG5jb25zdCBFTkNfQkFDS1RJQ0tfUkUgPSAvJTYwL2c7IC8vIGBcclxuY29uc3QgRU5DX0NVUkxZX09QRU5fUkUgPSAvJTdCL2c7IC8vIHtcclxuY29uc3QgRU5DX1BJUEVfUkUgPSAvJTdDL2c7IC8vIHxcclxuY29uc3QgRU5DX0NVUkxZX0NMT1NFX1JFID0gLyU3RC9nOyAvLyB9XHJcbmNvbnN0IEVOQ19TUEFDRV9SRSA9IC8lMjAvZzsgLy8gfVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaFxyXG4gKiBzZWN0aW9ucyBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21tb25FbmNvZGUodGV4dCkge1xyXG4gICAgcmV0dXJuIGVuY29kZVVSSSgnJyArIHRleHQpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX1BJUEVfUkUsICd8JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQlJBQ0tFVF9PUEVOX1JFLCAnWycpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0JSQUNLRVRfQ0xPU0VfUkUsICddJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBoYXNoIHNlY3Rpb24gb2YgdGhlIFVSTC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVIYXNoKHRleHQpIHtcclxuICAgIHJldHVybiBjb21tb25FbmNvZGUodGV4dClcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfT1BFTl9SRSwgJ3snKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9DTE9TRV9SRSwgJ30nKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DQVJFVF9SRSwgJ14nKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgcXVlcnkgdmFsdWVzIG9uIHRoZSBxdWVyeVxyXG4gKiBzZWN0aW9uIG9mIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlUXVlcnlWYWx1ZSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gKGNvbW1vbkVuY29kZSh0ZXh0KVxyXG4gICAgICAgIC8vIEVuY29kZSB0aGUgc3BhY2UgYXMgKywgZW5jb2RlIHRoZSArIHRvIGRpZmZlcmVudGlhdGUgaXQgZnJvbSB0aGUgc3BhY2VcclxuICAgICAgICAucmVwbGFjZShQTFVTX1JFLCAnJTJCJylcclxuICAgICAgICAucmVwbGFjZShFTkNfU1BBQ0VfUkUsICcrJylcclxuICAgICAgICAucmVwbGFjZShIQVNIX1JFLCAnJTIzJylcclxuICAgICAgICAucmVwbGFjZShBTVBFUlNBTkRfUkUsICclMjYnKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19CQUNLVElDS19SRSwgJ2AnKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9PUEVOX1JFLCAneycpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NVUkxZX0NMT1NFX1JFLCAnfScpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NBUkVUX1JFLCAnXicpKTtcclxufVxyXG4vKipcclxuICogTGlrZSBgZW5jb2RlUXVlcnlWYWx1ZWAgYnV0IGFsc28gZW5jb2RlcyB0aGUgYD1gIGNoYXJhY3Rlci5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVRdWVyeUtleSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gZW5jb2RlUXVlcnlWYWx1ZSh0ZXh0KS5yZXBsYWNlKEVRVUFMX1JFLCAnJTNEJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBwYXRoIHNlY3Rpb24gb2YgdGhlIFVSTC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVQYXRoKHRleHQpIHtcclxuICAgIHJldHVybiBjb21tb25FbmNvZGUodGV4dCkucmVwbGFjZShIQVNIX1JFLCAnJTIzJykucmVwbGFjZShJTV9SRSwgJyUzRicpO1xyXG59XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBvbiB0aGUgcGF0aCBzZWN0aW9uIG9mIHRoZSBVUkwgYXMgYVxyXG4gKiBwYXJhbS4gVGhpcyBmdW5jdGlvbiBlbmNvZGVzIGV2ZXJ5dGhpbmcge0BsaW5rIGVuY29kZVBhdGh9IGRvZXMgcGx1cyB0aGVcclxuICogc2xhc2ggKGAvYCkgY2hhcmFjdGVyLiBJZiBgdGV4dGAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCByZXR1cm5zIGFuIGVtcHR5XHJcbiAqIHN0cmluZyBpbnN0ZWFkLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVBhcmFtKHRleHQpIHtcclxuICAgIHJldHVybiB0ZXh0ID09IG51bGwgPyAnJyA6IGVuY29kZVBhdGgodGV4dCkucmVwbGFjZShTTEFTSF9SRSwgJyUyRicpO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGUgdGV4dCB1c2luZyBgZGVjb2RlVVJJQ29tcG9uZW50YC4gUmV0dXJucyB0aGUgb3JpZ2luYWwgdGV4dCBpZiBpdFxyXG4gKiBmYWlscy5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZGVjb2RlXHJcbiAqIEByZXR1cm5zIGRlY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWNvZGUodGV4dCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCcnICsgdGV4dCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEVycm9yIGRlY29kaW5nIFwiJHt0ZXh0fVwiLiBVc2luZyBvcmlnaW5hbCB2YWx1ZWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnICsgdGV4dDtcclxufVxuXG4vKipcclxuICogVHJhbnNmb3JtcyBhIHF1ZXJ5U3RyaW5nIGludG8gYSB7QGxpbmsgTG9jYXRpb25RdWVyeX0gb2JqZWN0LiBBY2NlcHQgYm90aCwgYVxyXG4gKiB2ZXJzaW9uIHdpdGggdGhlIGxlYWRpbmcgYD9gIGFuZCB3aXRob3V0IFNob3VsZCB3b3JrIGFzIFVSTFNlYXJjaFBhcmFtc1xyXG5cbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gc2VhcmNoIC0gc2VhcmNoIHN0cmluZyB0byBwYXJzZVxyXG4gKiBAcmV0dXJucyBhIHF1ZXJ5IG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VRdWVyeShzZWFyY2gpIHtcclxuICAgIGNvbnN0IHF1ZXJ5ID0ge307XHJcbiAgICAvLyBhdm9pZCBjcmVhdGluZyBhbiBvYmplY3Qgd2l0aCBhbiBlbXB0eSBrZXkgYW5kIGVtcHR5IHZhbHVlXHJcbiAgICAvLyBiZWNhdXNlIG9mIHNwbGl0KCcmJylcclxuICAgIGlmIChzZWFyY2ggPT09ICcnIHx8IHNlYXJjaCA9PT0gJz8nKVxyXG4gICAgICAgIHJldHVybiBxdWVyeTtcclxuICAgIGNvbnN0IGhhc0xlYWRpbmdJTSA9IHNlYXJjaFswXSA9PT0gJz8nO1xyXG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gKGhhc0xlYWRpbmdJTSA/IHNlYXJjaC5zbGljZSgxKSA6IHNlYXJjaCkuc3BsaXQoJyYnKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgLy8gcHJlIGRlY29kZSB0aGUgKyBpbnRvIHNwYWNlXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW0gPSBzZWFyY2hQYXJhbXNbaV0ucmVwbGFjZShQTFVTX1JFLCAnICcpO1xyXG4gICAgICAgIC8vIGFsbG93IHRoZSA9IGNoYXJhY3RlclxyXG4gICAgICAgIGNvbnN0IGVxUG9zID0gc2VhcmNoUGFyYW0uaW5kZXhPZignPScpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGRlY29kZShlcVBvcyA8IDAgPyBzZWFyY2hQYXJhbSA6IHNlYXJjaFBhcmFtLnNsaWNlKDAsIGVxUG9zKSk7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlcVBvcyA8IDAgPyBudWxsIDogZGVjb2RlKHNlYXJjaFBhcmFtLnNsaWNlKGVxUG9zICsgMSkpO1xyXG4gICAgICAgIGlmIChrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICAgICAgLy8gYW4gZXh0cmEgdmFyaWFibGUgZm9yIHRzIHR5cGVzXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gcXVlcnlba2V5XSA9IFtjdXJyZW50VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcXVlcnk7XHJcbn1cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIGEge0BsaW5rIExvY2F0aW9uUXVlcnlSYXd9IG9iamVjdC4gTGlrZSBgVVJMU2VhcmNoUGFyYW1zYCwgaXRcclxuICogZG9lc24ndCBwcmVwZW5kIGEgYD9gXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gcXVlcnkgLSBxdWVyeSBvYmplY3QgdG8gc3RyaW5naWZ5XHJcbiAqIEByZXR1cm5zIHN0cmluZyB2ZXJzaW9uIG9mIHRoZSBxdWVyeSB3aXRob3V0IHRoZSBsZWFkaW5nIGA/YFxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkocXVlcnkpIHtcclxuICAgIGxldCBzZWFyY2ggPSAnJztcclxuICAgIGZvciAobGV0IGtleSBpbiBxdWVyeSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcclxuICAgICAgICBrZXkgPSBlbmNvZGVRdWVyeUtleShrZXkpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgbnVsbCBhZGRzIHRoZSB2YWx1ZVxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoICs9IChzZWFyY2gubGVuZ3RoID8gJyYnIDogJycpICsga2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBrZWVwIG51bGwgdmFsdWVzXHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0gaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgPyB2YWx1ZS5tYXAodiA9PiB2ICYmIGVuY29kZVF1ZXJ5VmFsdWUodikpXHJcbiAgICAgICAgICAgIDogW3ZhbHVlICYmIGVuY29kZVF1ZXJ5VmFsdWUodmFsdWUpXTtcclxuICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHNraXAgdW5kZWZpbmVkIHZhbHVlcyBpbiBhcnJheXMgYXMgaWYgdGhleSB3ZXJlIG5vdCBwcmVzZW50XHJcbiAgICAgICAgICAgIC8vIHNtYWxsZXIgY29kZSB0aGFuIHVzaW5nIGZpbHRlclxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gb25seSBhcHBlbmQgJiB3aXRoIG5vbi1lbXB0eSBzZWFyY2hcclxuICAgICAgICAgICAgICAgIHNlYXJjaCArPSAoc2VhcmNoLmxlbmd0aCA/ICcmJyA6ICcnKSArIGtleTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaCArPSAnPScgKyB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlYXJjaDtcclxufVxyXG4vKipcclxuICogVHJhbnNmb3JtcyBhIHtAbGluayBMb2NhdGlvblF1ZXJ5UmF3fSBpbnRvIGEge0BsaW5rIExvY2F0aW9uUXVlcnl9IGJ5IGNhc3RpbmdcclxuICogbnVtYmVycyBpbnRvIHN0cmluZ3MsIHJlbW92aW5nIGtleXMgd2l0aCBhbiB1bmRlZmluZWQgdmFsdWUgYW5kIHJlcGxhY2luZ1xyXG4gKiB1bmRlZmluZWQgd2l0aCBudWxsIGluIGFycmF5c1xyXG4gKlxyXG4gKiBAcGFyYW0gcXVlcnkgLSBxdWVyeSBvYmplY3QgdG8gbm9ybWFsaXplXHJcbiAqIEByZXR1cm5zIGEgbm9ybWFsaXplZCBxdWVyeSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICBjb25zdCBub3JtYWxpemVkUXVlcnkgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHF1ZXJ5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRRdWVyeVtrZXldID0gaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gKHYgPT0gbnVsbCA/IG51bGwgOiAnJyArIHYpKVxyXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIDogJycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZFF1ZXJ5O1xyXG59XG5cbi8qKlxyXG4gKiBSb3V0ZVJlY29yZCBiZWluZyByZW5kZXJlZCBieSB0aGUgY2xvc2VzdCBhbmNlc3RvciBSb3V0ZXIgVmlldy4gVXNlZCBmb3JcclxuICogYG9uQmVmb3JlUm91dGVVcGRhdGVgIGFuZCBgb25CZWZvcmVSb3V0ZUxlYXZlYC4gcnZsbSBzdGFuZHMgZm9yIFJvdXRlciBWaWV3XHJcbiAqIExvY2F0aW9uIE1hdGNoZWRcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBtYXRjaGVkUm91dGVLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlciB2aWV3IGxvY2F0aW9uIG1hdGNoZWQnIDogJycpO1xyXG4vKipcclxuICogQWxsb3dzIG92ZXJyaWRpbmcgdGhlIHJvdXRlciB2aWV3IGRlcHRoIHRvIGNvbnRyb2wgd2hpY2ggY29tcG9uZW50IGluXHJcbiAqIGBtYXRjaGVkYCBpcyByZW5kZXJlZC4gcnZkIHN0YW5kcyBmb3IgUm91dGVyIFZpZXcgRGVwdGhcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCB2aWV3RGVwdGhLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlciB2aWV3IGRlcHRoJyA6ICcnKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSByb3V0ZXIgaW5zdGFuY2UgcmV0dXJuZWQgYnkgYHVzZVJvdXRlcmAgaW4gdGVzdHMuIHJcclxuICogc3RhbmRzIGZvciByb3V0ZXJcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCByb3V0ZXJLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlcicgOiAnJyk7XHJcbi8qKlxyXG4gKiBBbGxvd3Mgb3ZlcnJpZGluZyB0aGUgY3VycmVudCByb3V0ZSByZXR1cm5lZCBieSBgdXNlUm91dGVgIGluIHRlc3RzLiBybFxyXG4gKiBzdGFuZHMgZm9yIHJvdXRlIGxvY2F0aW9uXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgcm91dGVMb2NhdGlvbktleSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAncm91dGUgbG9jYXRpb24nIDogJycpO1xyXG4vKipcclxuICogQWxsb3dzIG92ZXJyaWRpbmcgdGhlIGN1cnJlbnQgcm91dGUgdXNlZCBieSByb3V0ZXItdmlldy4gSW50ZXJuYWxseSB0aGlzIGlzXHJcbiAqIHVzZWQgd2hlbiB0aGUgYHJvdXRlYCBwcm9wIGlzIHBhc3NlZC5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCByb3V0ZXJWaWV3TG9jYXRpb25LZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlciB2aWV3IGxvY2F0aW9uJyA6ICcnKTtcblxuLyoqXHJcbiAqIENyZWF0ZSBhIGxpc3Qgb2YgY2FsbGJhY2tzIHRoYXQgY2FuIGJlIHJlc2V0LiBVc2VkIHRvIGNyZWF0ZSBiZWZvcmUgYW5kIGFmdGVyIG5hdmlnYXRpb24gZ3VhcmRzIGxpc3RcclxuICovXHJcbmZ1bmN0aW9uIHVzZUNhbGxiYWNrcygpIHtcclxuICAgIGxldCBoYW5kbGVycyA9IFtdO1xyXG4gICAgZnVuY3Rpb24gYWRkKGhhbmRsZXIpIHtcclxuICAgICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgICAgICBpZiAoaSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNldCgpIHtcclxuICAgICAgICBoYW5kbGVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhZGQsXHJcbiAgICAgICAgbGlzdDogKCkgPT4gaGFuZGxlcnMsXHJcbiAgICAgICAgcmVzZXQsXHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR3VhcmQocmVjb3JkLCBuYW1lLCBndWFyZCkge1xyXG4gICAgY29uc3QgcmVtb3ZlRnJvbUxpc3QgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVjb3JkW25hbWVdLmRlbGV0ZShndWFyZCk7XHJcbiAgICB9O1xyXG4gICAgb25Vbm1vdW50ZWQocmVtb3ZlRnJvbUxpc3QpO1xyXG4gICAgb25EZWFjdGl2YXRlZChyZW1vdmVGcm9tTGlzdCk7XHJcbiAgICBvbkFjdGl2YXRlZCgoKSA9PiB7XHJcbiAgICAgICAgcmVjb3JkW25hbWVdLmFkZChndWFyZCk7XHJcbiAgICB9KTtcclxuICAgIHJlY29yZFtuYW1lXS5hZGQoZ3VhcmQpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGQgYSBuYXZpZ2F0aW9uIGd1YXJkIHRoYXQgdHJpZ2dlcnMgd2hlbmV2ZXIgdGhlIGNvbXBvbmVudCBmb3IgdGhlIGN1cnJlbnRcclxuICogbG9jYXRpb24gaXMgYWJvdXQgdG8gYmUgbGVmdC4gU2ltaWxhciB0byB7QGxpbmsgYmVmb3JlUm91dGVMZWF2ZX0gYnV0IGNhbiBiZVxyXG4gKiB1c2VkIGluIGFueSBjb21wb25lbnQuIFRoZSBndWFyZCBpcyByZW1vdmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBsZWF2ZUd1YXJkIC0ge0BsaW5rIE5hdmlnYXRpb25HdWFyZH1cclxuICovXHJcbmZ1bmN0aW9uIG9uQmVmb3JlUm91dGVMZWF2ZShsZWF2ZUd1YXJkKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFnZXRDdXJyZW50SW5zdGFuY2UoKSkge1xyXG4gICAgICAgIHdhcm4oJ2dldEN1cnJlbnRJbnN0YW5jZSgpIHJldHVybmVkIG51bGwuIG9uQmVmb3JlUm91dGVMZWF2ZSgpIG11c3QgYmUgY2FsbGVkIGF0IHRoZSB0b3Agb2YgYSBzZXR1cCBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGFjdGl2ZVJlY29yZCA9IGluamVjdChtYXRjaGVkUm91dGVLZXksIFxyXG4gICAgLy8gdG8gYXZvaWQgd2FybmluZ1xyXG4gICAge30pLnZhbHVlO1xyXG4gICAgaWYgKCFhY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybignTm8gYWN0aXZlIHJvdXRlIHJlY29yZCB3YXMgZm91bmQgd2hlbiBjYWxsaW5nIGBvbkJlZm9yZVJvdXRlTGVhdmUoKWAuIE1ha2Ugc3VyZSB5b3UgY2FsbCB0aGlzIGZ1bmN0aW9uIGluc2lkZSBhIGNvbXBvbmVudCBjaGlsZCBvZiA8cm91dGVyLXZpZXc+LiBNYXliZSB5b3UgY2FsbGVkIGl0IGluc2lkZSBvZiBBcHAudnVlPycpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyR3VhcmQoYWN0aXZlUmVjb3JkLCAnbGVhdmVHdWFyZHMnLCBsZWF2ZUd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjdXJyZW50IGxvY2F0aW9uIGlzIGFib3V0XHJcbiAqIHRvIGJlIHVwZGF0ZWQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlVXBkYXRlfSBidXQgY2FuIGJlIHVzZWQgaW4gYW55XHJcbiAqIGNvbXBvbmVudC4gVGhlIGd1YXJkIGlzIHJlbW92ZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cclxuICpcclxuICogQHBhcmFtIHVwZGF0ZUd1YXJkIC0ge0BsaW5rIE5hdmlnYXRpb25HdWFyZH1cclxuICovXHJcbmZ1bmN0aW9uIG9uQmVmb3JlUm91dGVVcGRhdGUodXBkYXRlR3VhcmQpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWdldEN1cnJlbnRJbnN0YW5jZSgpKSB7XHJcbiAgICAgICAgd2FybignZ2V0Q3VycmVudEluc3RhbmNlKCkgcmV0dXJuZWQgbnVsbC4gb25CZWZvcmVSb3V0ZVVwZGF0ZSgpIG11c3QgYmUgY2FsbGVkIGF0IHRoZSB0b3Agb2YgYSBzZXR1cCBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGFjdGl2ZVJlY29yZCA9IGluamVjdChtYXRjaGVkUm91dGVLZXksIFxyXG4gICAgLy8gdG8gYXZvaWQgd2FybmluZ1xyXG4gICAge30pLnZhbHVlO1xyXG4gICAgaWYgKCFhY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybignTm8gYWN0aXZlIHJvdXRlIHJlY29yZCB3YXMgZm91bmQgd2hlbiBjYWxsaW5nIGBvbkJlZm9yZVJvdXRlVXBkYXRlKClgLiBNYWtlIHN1cmUgeW91IGNhbGwgdGhpcyBmdW5jdGlvbiBpbnNpZGUgYSBjb21wb25lbnQgY2hpbGQgb2YgPHJvdXRlci12aWV3Pi4gTWF5YmUgeW91IGNhbGxlZCBpdCBpbnNpZGUgb2YgQXBwLnZ1ZT8nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICByZWdpc3Rlckd1YXJkKGFjdGl2ZVJlY29yZCwgJ3VwZGF0ZUd1YXJkcycsIHVwZGF0ZUd1YXJkKTtcclxufVxyXG5mdW5jdGlvbiBndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSwgcmVjb3JkLCBuYW1lKSB7XHJcbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBlbnRlckNhbGxiYWNrQXJyYXkgdG8gcHJldmVudCBwdXNoaW5nIGNhbGxiYWNrcyBpZiBhIG5ldyBuYXZpZ2F0aW9uIHRvb2sgcGxhY2VcclxuICAgIGNvbnN0IGVudGVyQ2FsbGJhY2tBcnJheSA9IHJlY29yZCAmJlxyXG4gICAgICAgIC8vIG5hbWUgaXMgZGVmaW5lZCBpZiByZWNvcmQgaXMgYmVjYXVzZSBvZiB0aGUgZnVuY3Rpb24gb3ZlcmxvYWRcclxuICAgICAgICAocmVjb3JkLmVudGVyQ2FsbGJhY2tzW25hbWVdID0gcmVjb3JkLmVudGVyQ2FsbGJhY2tzW25hbWVdIHx8IFtdKTtcclxuICAgIHJldHVybiAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV4dCA9ICh2YWxpZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodmFsaWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoY3JlYXRlUm91dGVyRXJyb3IoNCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQUJPUlRFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsaWQgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KHZhbGlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JvdXRlTG9jYXRpb24odmFsaWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoY3JlYXRlUm91dGVyRXJyb3IoMiAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiB0byxcclxuICAgICAgICAgICAgICAgICAgICB0bzogdmFsaWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50ZXJDYWxsYmFja0FycmF5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgZW50ZXJDYWxsYmFja0FycmF5IGlzIHRydXRoeSwgYm90aCByZWNvcmQgYW5kIG5hbWUgYWxzbyBhcmVcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPT09IGVudGVyQ2FsbGJhY2tBcnJheSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWxpZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudGVyQ2FsbGJhY2tBcnJheS5wdXNoKHZhbGlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gd3JhcHBpbmcgd2l0aCBQcm9taXNlLnJlc29sdmUgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBib3RoIGFzeW5jIGFuZCBzeW5jIGd1YXJkc1xyXG4gICAgICAgIGNvbnN0IGd1YXJkUmV0dXJuID0gZ3VhcmQuY2FsbChyZWNvcmQgJiYgcmVjb3JkLmluc3RhbmNlc1tuYW1lXSwgdG8sIGZyb20sIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNhbk9ubHlCZUNhbGxlZE9uY2UobmV4dCwgdG8sIGZyb20pIDogbmV4dCk7XHJcbiAgICAgICAgbGV0IGd1YXJkQ2FsbCA9IFByb21pc2UucmVzb2x2ZShndWFyZFJldHVybik7XHJcbiAgICAgICAgaWYgKGd1YXJkLmxlbmd0aCA8IDMpXHJcbiAgICAgICAgICAgIGd1YXJkQ2FsbCA9IGd1YXJkQ2FsbC50aGVuKG5leHQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZ3VhcmQubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYFRoZSBcIm5leHRcIiBjYWxsYmFjayB3YXMgbmV2ZXIgY2FsbGVkIGluc2lkZSBvZiAke2d1YXJkLm5hbWUgPyAnXCInICsgZ3VhcmQubmFtZSArICdcIicgOiAnJ306XFxuJHtndWFyZC50b1N0cmluZygpfVxcbi4gSWYgeW91IGFyZSByZXR1cm5pbmcgYSB2YWx1ZSBpbnN0ZWFkIG9mIGNhbGxpbmcgXCJuZXh0XCIsIG1ha2Ugc3VyZSB0byByZW1vdmUgdGhlIFwibmV4dFwiIHBhcmFtZXRlciBmcm9tIHlvdXIgZnVuY3Rpb24uYDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBndWFyZFJldHVybiA9PT0gJ29iamVjdCcgJiYgJ3RoZW4nIGluIGd1YXJkUmV0dXJuKSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZENhbGwgPSBndWFyZENhbGwudGhlbihyZXNvbHZlZFZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBfY2FsbGVkIGlzIGFkZGVkIGF0IGNhbk9ubHlCZUNhbGxlZE9uY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHQuX2NhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIG5hdmlnYXRpb24gZ3VhcmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZ3VhcmRSZXR1cm4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogX2NhbGxlZCBpcyBhZGRlZCBhdCBjYW5Pbmx5QmVDYWxsZWRPbmNlXHJcbiAgICAgICAgICAgICAgICBpZiAoIW5leHQuX2NhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBuYXZpZ2F0aW9uIGd1YXJkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBndWFyZENhbGwuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNhbk9ubHlCZUNhbGxlZE9uY2UobmV4dCwgdG8sIGZyb20pIHtcclxuICAgIGxldCBjYWxsZWQgPSAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoY2FsbGVkKysgPT09IDEpXHJcbiAgICAgICAgICAgIHdhcm4oYFRoZSBcIm5leHRcIiBjYWxsYmFjayB3YXMgY2FsbGVkIG1vcmUgdGhhbiBvbmNlIGluIG9uZSBuYXZpZ2F0aW9uIGd1YXJkIHdoZW4gZ29pbmcgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG8uZnVsbFBhdGh9XCIuIEl0IHNob3VsZCBiZSBjYWxsZWQgZXhhY3RseSBvbmUgdGltZSBpbiBlYWNoIG5hdmlnYXRpb24gZ3VhcmQuIFRoaXMgd2lsbCBmYWlsIGluIHByb2R1Y3Rpb24uYCk7XHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogd2UgcHV0IGl0IGluIHRoZSBvcmlnaW5hbCBvbmUgYmVjYXVzZSBpdCdzIGVhc2llciB0byBjaGVja1xyXG4gICAgICAgIG5leHQuX2NhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGNhbGxlZCA9PT0gMSlcclxuICAgICAgICAgICAgbmV4dC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9uZW50c0d1YXJkcyhtYXRjaGVkLCBndWFyZFR5cGUsIHRvLCBmcm9tKSB7XHJcbiAgICBjb25zdCBndWFyZHMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIG1hdGNoZWQpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFyZWNvcmQuY29tcG9uZW50cyAmJiAhcmVjb3JkLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB3YXJuKGBSZWNvcmQgd2l0aCBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIiBpcyBlaXRoZXIgbWlzc2luZyBhIFwiY29tcG9uZW50KHMpXCJgICtcclxuICAgICAgICAgICAgICAgIGAgb3IgXCJjaGlsZHJlblwiIHByb3BlcnR5LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gcmVjb3JkLmNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgbGV0IHJhd0NvbXBvbmVudCA9IHJlY29yZC5jb21wb25lbnRzW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJhd0NvbXBvbmVudCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgcmF3Q29tcG9uZW50ICE9PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmF3Q29tcG9uZW50ICE9PSAnZnVuY3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBpbiByZWNvcmQgd2l0aCBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIiBpcyBub3RgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYCBhIHZhbGlkIGNvbXBvbmVudC4gUmVjZWl2ZWQgXCIke1N0cmluZyhyYXdDb21wb25lbnQpfVwiLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRocm93IHRvIGVuc3VyZSB3ZSBzdG9wIGhlcmUgYnV0IHdhcm4gdG8gZW5zdXJlIHRoZSBtZXNzYWdlIGlzbid0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWlzc2VkIGJ5IHRoZSB1c2VyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJvdXRlIGNvbXBvbmVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ3RoZW4nIGluIHJhd0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcm4gaWYgdXNlciB3cm90ZSBpbXBvcnQoJy9jb21wb25lbnQudnVlJykgaW5zdGVhZCBvZiAoKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGltcG9ydCgnLi9jb21wb25lbnQudnVlJylcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaW4gcmVjb3JkIHdpdGggcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIgaXMgYSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFByb21pc2UgaW5zdGVhZCBvZiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFByb21pc2UuIERpZCB5b3UgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3cml0ZSBcImltcG9ydCgnLi9NeVBhZ2UudnVlJylcIiBpbnN0ZWFkIG9mIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXCIoKSA9PiBpbXBvcnQoJy4vTXlQYWdlLnZ1ZScpXCIgPyBUaGlzIHdpbGwgYnJlYWsgaW4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBwcm9kdWN0aW9uIGlmIG5vdCBmaXhlZC5gKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd0NvbXBvbmVudCA9ICgpID0+IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyYXdDb21wb25lbnQuX19hc3luY0xvYWRlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcm4gb25seSBvbmNlIHBlciBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAhcmF3Q29tcG9uZW50Ll9fd2FybmVkRGVmaW5lQXN5bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICByYXdDb21wb25lbnQuX193YXJuZWREZWZpbmVBc3luYyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIGRlZmluZWQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB1c2luZyBcImRlZmluZUFzeW5jQ29tcG9uZW50KClcIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBXcml0ZSBcIigpID0+IGltcG9ydCgnLi9NeVBhZ2UudnVlJylcIiBpbnN0ZWFkIG9mIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXCJkZWZpbmVBc3luY0NvbXBvbmVudCgoKSA9PiBpbXBvcnQoJy4vTXlQYWdlLnZ1ZScpKVwiLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNraXAgdXBkYXRlIGFuZCBsZWF2ZSBndWFyZHMgaWYgdGhlIHJvdXRlIGNvbXBvbmVudCBpcyBub3QgbW91bnRlZFxyXG4gICAgICAgICAgICBpZiAoZ3VhcmRUeXBlICE9PSAnYmVmb3JlUm91dGVFbnRlcicgJiYgIXJlY29yZC5pbnN0YW5jZXNbbmFtZV0pXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGlzUm91dGVDb21wb25lbnQocmF3Q29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gX192Y2NPcHRzIGlzIGFkZGVkIGJ5IHZ1ZS1jbGFzcy1jb21wb25lbnQgYW5kIGNvbnRhaW4gdGhlIHJlZ3VsYXIgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHJhd0NvbXBvbmVudC5fX3ZjY09wdHMgfHwgcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3VhcmQgPSBvcHRpb25zW2d1YXJkVHlwZV07XHJcbiAgICAgICAgICAgICAgICBndWFyZCAmJiBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSwgcmVjb3JkLCBuYW1lKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCByZXF1ZXN0aW5nIHRoZSBjaHVuayBhbHJlYWR5XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tcG9uZW50UHJvbWlzZSA9IHJhd0NvbXBvbmVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhKCdjYXRjaCcgaW4gY29tcG9uZW50UHJvbWlzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaW4gcmVjb3JkIHdpdGggcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIgaXMgYSBmdW5jdGlvbiB0aGF0IGRvZXMgbm90IHJldHVybiBhIFByb21pc2UuIElmIHlvdSB3ZXJlIHBhc3NpbmcgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCwgbWFrZSBzdXJlIHRvIGFkZCBhIFwiZGlzcGxheU5hbWVcIiB0byB0aGUgY29tcG9uZW50LiBUaGlzIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbiBpZiBub3QgZml4ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb21wb25lbnRQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKCgpID0+IGNvbXBvbmVudFByb21pc2UudGhlbihyZXNvbHZlZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNvbHZlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgQ291bGRuJ3QgcmVzb2x2ZSBjb21wb25lbnQgXCIke25hbWV9XCIgYXQgXCIke3JlY29yZC5wYXRofVwiYCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkQ29tcG9uZW50ID0gaXNFU01vZHVsZShyZXNvbHZlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXNvbHZlZC5kZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVzb2x2ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgcmVzb2x2ZWQgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGJlY2F1c2Ugd2Ugd2VudCBpbnRvIHRoZSBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZC5jb21wb25lbnRzW25hbWVdID0gcmVzb2x2ZWRDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gX192Y2NPcHRzIGlzIGFkZGVkIGJ5IHZ1ZS1jbGFzcy1jb21wb25lbnQgYW5kIGNvbnRhaW4gdGhlIHJlZ3VsYXIgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlZENvbXBvbmVudC5fX3ZjY09wdHMgfHwgcmVzb2x2ZWRDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3VhcmQgPSBvcHRpb25zW2d1YXJkVHlwZV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGd1YXJkICYmIGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tLCByZWNvcmQsIG5hbWUpKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ3VhcmRzO1xyXG59XHJcbi8qKlxyXG4gKiBBbGxvd3MgZGlmZmVyZW50aWF0aW5nIGxhenkgY29tcG9uZW50cyBmcm9tIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbmQgdnVlLWNsYXNzLWNvbXBvbmVudFxyXG4gKiBAaW50ZXJuYWxcclxuICpcclxuICogQHBhcmFtIGNvbXBvbmVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNSb3V0ZUNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIHJldHVybiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgfHxcclxuICAgICAgICAnZGlzcGxheU5hbWUnIGluIGNvbXBvbmVudCB8fFxyXG4gICAgICAgICdwcm9wcycgaW4gY29tcG9uZW50IHx8XHJcbiAgICAgICAgJ19fdmNjT3B0cycgaW4gY29tcG9uZW50KTtcclxufVxyXG4vKipcclxuICogRW5zdXJlcyBhIHJvdXRlIGlzIGxvYWRlZCwgc28gaXQgY2FuIGJlIHBhc3NlZCBhcyBvIHByb3AgdG8gYDxSb3V0ZXJWaWV3PmAuXHJcbiAqXHJcbiAqIEBwYXJhbSByb3V0ZSAtIHJlc29sdmVkIHJvdXRlIHRvIGxvYWRcclxuICovXHJcbmZ1bmN0aW9uIGxvYWRSb3V0ZUxvY2F0aW9uKHJvdXRlKSB7XHJcbiAgICByZXR1cm4gcm91dGUubWF0Y2hlZC5ldmVyeShyZWNvcmQgPT4gcmVjb3JkLnJlZGlyZWN0KVxyXG4gICAgICAgID8gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdDYW5ub3QgbG9hZCBhIHJvdXRlIHRoYXQgcmVkaXJlY3RzLicpKVxyXG4gICAgICAgIDogUHJvbWlzZS5hbGwocm91dGUubWF0Y2hlZC5tYXAocmVjb3JkID0+IHJlY29yZC5jb21wb25lbnRzICYmXHJcbiAgICAgICAgICAgIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKHJlY29yZC5jb21wb25lbnRzKS5yZWR1Y2UoKHByb21pc2VzLCBuYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYXdDb21wb25lbnQgPSByZWNvcmQuY29tcG9uZW50c1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmF3Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgISgnZGlzcGxheU5hbWUnIGluIHJhd0NvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHJhd0NvbXBvbmVudCgpLnRoZW4ocmVzb2x2ZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc29sdmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgQ291bGRuJ3QgcmVzb2x2ZSBjb21wb25lbnQgXCIke25hbWV9XCIgYXQgXCIke3JlY29yZC5wYXRofVwiLiBFbnN1cmUgeW91IHBhc3NlZCBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHByb21pc2UuYCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZENvbXBvbmVudCA9IGlzRVNNb2R1bGUocmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHJlc29sdmVkLmRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVzb2x2ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHJlc29sdmVkIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYmVjYXVzZSB3ZSB3ZW50IGludG8gdGhlIGZvciBsb29wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC5jb21wb25lbnRzW25hbWVdID0gcmVzb2x2ZWRDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZXM7XHJcbiAgICAgICAgICAgIH0sIFtdKSkpKS50aGVuKCgpID0+IHJvdXRlKTtcclxufVxuXG4vLyBUT0RPOiB3ZSBjb3VsZCBhbGxvdyBjdXJyZW50Um91dGUgYXMgYSBwcm9wIHRvIGV4cG9zZSBgaXNBY3RpdmVgIGFuZFxyXG4vLyBgaXNFeGFjdEFjdGl2ZWAgYmVoYXZpb3Igc2hvdWxkIGdvIHRocm91Z2ggYW4gUkZDXHJcbmZ1bmN0aW9uIHVzZUxpbmsocHJvcHMpIHtcclxuICAgIGNvbnN0IHJvdXRlciA9IGluamVjdChyb3V0ZXJLZXkpO1xyXG4gICAgY29uc3QgY3VycmVudFJvdXRlID0gaW5qZWN0KHJvdXRlTG9jYXRpb25LZXkpO1xyXG4gICAgY29uc3Qgcm91dGUgPSBjb21wdXRlZCgoKSA9PiByb3V0ZXIucmVzb2x2ZSh1bnJlZihwcm9wcy50bykpKTtcclxuICAgIGNvbnN0IGFjdGl2ZVJlY29yZEluZGV4ID0gY29tcHV0ZWQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgbWF0Y2hlZCB9ID0gcm91dGUudmFsdWU7XHJcbiAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IG1hdGNoZWQ7XHJcbiAgICAgICAgY29uc3Qgcm91dGVNYXRjaGVkID0gbWF0Y2hlZFtsZW5ndGggLSAxXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50TWF0Y2hlZCA9IGN1cnJlbnRSb3V0ZS5tYXRjaGVkO1xyXG4gICAgICAgIGlmICghcm91dGVNYXRjaGVkIHx8ICFjdXJyZW50TWF0Y2hlZC5sZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGN1cnJlbnRNYXRjaGVkLmZpbmRJbmRleChpc1NhbWVSb3V0ZVJlY29yZC5iaW5kKG51bGwsIHJvdXRlTWF0Y2hlZCkpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKVxyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgLy8gcG9zc2libGUgcGFyZW50IHJlY29yZFxyXG4gICAgICAgIGNvbnN0IHBhcmVudFJlY29yZFBhdGggPSBnZXRPcmlnaW5hbFBhdGgobWF0Y2hlZFtsZW5ndGggLSAyXSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAvLyB3ZSBhcmUgZGVhbGluZyB3aXRoIG5lc3RlZCByb3V0ZXNcclxuICAgICAgICBsZW5ndGggPiAxICYmXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgYW5kIG1hdGNoZWQgcm91dGUgaGF2ZSB0aGUgc2FtZSBwYXRoLCB0aGlzIGxpbmsgaXNcclxuICAgICAgICAgICAgLy8gcmVmZXJyaW5nIHRvIHRoZSBlbXB0eSBjaGlsZC4gT3Igd2UgY3VycmVudGx5IGFyZSBvbiBhIGRpZmZlcmVudFxyXG4gICAgICAgICAgICAvLyBjaGlsZCBvZiB0aGUgc2FtZSBwYXJlbnRcclxuICAgICAgICAgICAgZ2V0T3JpZ2luYWxQYXRoKHJvdXRlTWF0Y2hlZCkgPT09IHBhcmVudFJlY29yZFBhdGggJiZcclxuICAgICAgICAgICAgLy8gYXZvaWQgY29tcGFyaW5nIHRoZSBjaGlsZCB3aXRoIGl0cyBwYXJlbnRcclxuICAgICAgICAgICAgY3VycmVudE1hdGNoZWRbY3VycmVudE1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aCAhPT0gcGFyZW50UmVjb3JkUGF0aFxyXG4gICAgICAgICAgICA/IGN1cnJlbnRNYXRjaGVkLmZpbmRJbmRleChpc1NhbWVSb3V0ZVJlY29yZC5iaW5kKG51bGwsIG1hdGNoZWRbbGVuZ3RoIC0gMl0pKVxyXG4gICAgICAgICAgICA6IGluZGV4KTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBhY3RpdmVSZWNvcmRJbmRleC52YWx1ZSA+IC0xICYmXHJcbiAgICAgICAgaW5jbHVkZXNQYXJhbXMoY3VycmVudFJvdXRlLnBhcmFtcywgcm91dGUudmFsdWUucGFyYW1zKSk7XHJcbiAgICBjb25zdCBpc0V4YWN0QWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gYWN0aXZlUmVjb3JkSW5kZXgudmFsdWUgPiAtMSAmJlxyXG4gICAgICAgIGFjdGl2ZVJlY29yZEluZGV4LnZhbHVlID09PSBjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggLSAxICYmXHJcbiAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtcyhjdXJyZW50Um91dGUucGFyYW1zLCByb3V0ZS52YWx1ZS5wYXJhbXMpKTtcclxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlKGUgPSB7fSkge1xyXG4gICAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByb3V0ZXJbdW5yZWYocHJvcHMucmVwbGFjZSkgPyAncmVwbGFjZScgOiAncHVzaCddKHVucmVmKHByb3BzLnRvKVxyXG4gICAgICAgICAgICAvLyBhdm9pZCB1bmNhdWdodCBlcnJvcnMgYXJlIHRoZXkgYXJlIGxvZ2dlZCBhbnl3YXlcclxuICAgICAgICAgICAgKS5jYXRjaChub29wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gZGV2dG9vbHMgb25seVxyXG4gICAgaWYgKCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSAmJiBpc0Jyb3dzZXIpIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5rQ29udGV4dERldnRvb2xzID0ge1xyXG4gICAgICAgICAgICAgICAgcm91dGU6IHJvdXRlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgaXNFeGFjdEFjdGl2ZTogaXNFeGFjdEFjdGl2ZS52YWx1ZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhpcyBpcyBpbnRlcm5hbFxyXG4gICAgICAgICAgICBpbnN0YW5jZS5fX3ZybF9kZXZ0b29scyA9IGluc3RhbmNlLl9fdnJsX2RldnRvb2xzIHx8IFtdO1xyXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGlzIGlzIGludGVybmFsXHJcbiAgICAgICAgICAgIGluc3RhbmNlLl9fdnJsX2RldnRvb2xzLnB1c2gobGlua0NvbnRleHREZXZ0b29scyk7XHJcbiAgICAgICAgICAgIHdhdGNoRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxpbmtDb250ZXh0RGV2dG9vbHMucm91dGUgPSByb3V0ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxpbmtDb250ZXh0RGV2dG9vbHMuaXNBY3RpdmUgPSBpc0FjdGl2ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxpbmtDb250ZXh0RGV2dG9vbHMuaXNFeGFjdEFjdGl2ZSA9IGlzRXhhY3RBY3RpdmUudmFsdWU7XHJcbiAgICAgICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJvdXRlLFxyXG4gICAgICAgIGhyZWY6IGNvbXB1dGVkKCgpID0+IHJvdXRlLnZhbHVlLmhyZWYpLFxyXG4gICAgICAgIGlzQWN0aXZlLFxyXG4gICAgICAgIGlzRXhhY3RBY3RpdmUsXHJcbiAgICAgICAgbmF2aWdhdGUsXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IFJvdXRlckxpbmtJbXBsID0gLyojX19QVVJFX18qLyBkZWZpbmVDb21wb25lbnQoe1xyXG4gICAgbmFtZTogJ1JvdXRlckxpbmsnLFxyXG4gICAgY29tcGF0Q29uZmlnOiB7IE1PREU6IDMgfSxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgdG86IHtcclxuICAgICAgICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcclxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXBsYWNlOiBCb29sZWFuLFxyXG4gICAgICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICAgICAgLy8gaW5hY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgICAgICBjdXN0b206IEJvb2xlYW4sXHJcbiAgICAgICAgYXJpYUN1cnJlbnRWYWx1ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdwYWdlJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHVzZUxpbmssXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgbGluayA9IHJlYWN0aXZlKHVzZUxpbmsocHJvcHMpKTtcclxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGluamVjdChyb3V0ZXJLZXkpO1xyXG4gICAgICAgIGNvbnN0IGVsQ2xhc3MgPSBjb21wdXRlZCgoKSA9PiAoe1xyXG4gICAgICAgICAgICBbZ2V0TGlua0NsYXNzKHByb3BzLmFjdGl2ZUNsYXNzLCBvcHRpb25zLmxpbmtBY3RpdmVDbGFzcywgJ3JvdXRlci1saW5rLWFjdGl2ZScpXTogbGluay5pc0FjdGl2ZSxcclxuICAgICAgICAgICAgLy8gW2dldExpbmtDbGFzcyhcclxuICAgICAgICAgICAgLy8gICBwcm9wcy5pbmFjdGl2ZUNsYXNzLFxyXG4gICAgICAgICAgICAvLyAgIG9wdGlvbnMubGlua0luYWN0aXZlQ2xhc3MsXHJcbiAgICAgICAgICAgIC8vICAgJ3JvdXRlci1saW5rLWluYWN0aXZlJ1xyXG4gICAgICAgICAgICAvLyApXTogIWxpbmsuaXNFeGFjdEFjdGl2ZSxcclxuICAgICAgICAgICAgW2dldExpbmtDbGFzcyhwcm9wcy5leGFjdEFjdGl2ZUNsYXNzLCBvcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzLCAncm91dGVyLWxpbmstZXhhY3QtYWN0aXZlJyldOiBsaW5rLmlzRXhhY3RBY3RpdmUsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KGxpbmspO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvcHMuY3VzdG9tXHJcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICA6IGgoJ2EnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY3VycmVudCc6IGxpbmsuaXNFeGFjdEFjdGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByb3BzLmFyaWFDdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGxpbmsuaHJlZixcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdvdWxkIG92ZXJyaWRlIHVzZXIgYWRkZWQgYXR0cnMgYnV0IFZ1ZSB3aWxsIHN0aWxsIGFkZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBsaXN0ZW5lciwgc28gd2UgZW5kIHVwIHRyaWdnZXJpbmcgYm90aFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGxpbmsubmF2aWdhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGVsQ2xhc3MudmFsdWUsXHJcbiAgICAgICAgICAgICAgICB9LCBjaGlsZHJlbik7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuLyoqXHJcbiAqIENvbXBvbmVudCB0byByZW5kZXIgYSBsaW5rIHRoYXQgdHJpZ2dlcnMgYSBuYXZpZ2F0aW9uIG9uIGNsaWNrLlxyXG4gKi9cclxuY29uc3QgUm91dGVyTGluayA9IFJvdXRlckxpbmtJbXBsO1xyXG5mdW5jdGlvbiBndWFyZEV2ZW50KGUpIHtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzXHJcbiAgICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkXHJcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXHJcbiAgICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCBpZiBgdGFyZ2V0PVwiX2JsYW5rXCJgXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGdldEF0dHJpYnV0ZSBkb2VzIGV4aXN0XHJcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGdldEF0dHJpYnV0ZSBleGlzdHNcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTtcclxuICAgICAgICBpZiAoL1xcYl9ibGFua1xcYi9pLnRlc3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxyXG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaW5jbHVkZXNQYXJhbXMob3V0ZXIsIGlubmVyKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbm5lcikge1xyXG4gICAgICAgIGNvbnN0IGlubmVyVmFsdWUgPSBpbm5lcltrZXldO1xyXG4gICAgICAgIGNvbnN0IG91dGVyVmFsdWUgPSBvdXRlcltrZXldO1xyXG4gICAgICAgIGlmICh0eXBlb2YgaW5uZXJWYWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKGlubmVyVmFsdWUgIT09IG91dGVyVmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkob3V0ZXJWYWx1ZSkgfHxcclxuICAgICAgICAgICAgICAgIG91dGVyVmFsdWUubGVuZ3RoICE9PSBpbm5lclZhbHVlLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgaW5uZXJWYWx1ZS5zb21lKCh2YWx1ZSwgaSkgPT4gdmFsdWUgIT09IG91dGVyVmFsdWVbaV0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgdGhlIG9yaWdpbmFsIHBhdGggdmFsdWUgb2YgYSByZWNvcmQgYnkgZm9sbG93aW5nIGl0cyBhbGlhc09mXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIGdldE9yaWdpbmFsUGF0aChyZWNvcmQpIHtcclxuICAgIHJldHVybiByZWNvcmQgPyAocmVjb3JkLmFsaWFzT2YgPyByZWNvcmQuYWxpYXNPZi5wYXRoIDogcmVjb3JkLnBhdGgpIDogJyc7XHJcbn1cclxuLyoqXHJcbiAqIFV0aWxpdHkgY2xhc3MgdG8gZ2V0IHRoZSBhY3RpdmUgY2xhc3MgYmFzZWQgb24gZGVmYXVsdHMuXHJcbiAqIEBwYXJhbSBwcm9wQ2xhc3NcclxuICogQHBhcmFtIGdsb2JhbENsYXNzXHJcbiAqIEBwYXJhbSBkZWZhdWx0Q2xhc3NcclxuICovXHJcbmNvbnN0IGdldExpbmtDbGFzcyA9IChwcm9wQ2xhc3MsIGdsb2JhbENsYXNzLCBkZWZhdWx0Q2xhc3MpID0+IHByb3BDbGFzcyAhPSBudWxsXHJcbiAgICA/IHByb3BDbGFzc1xyXG4gICAgOiBnbG9iYWxDbGFzcyAhPSBudWxsXHJcbiAgICAgICAgPyBnbG9iYWxDbGFzc1xyXG4gICAgICAgIDogZGVmYXVsdENsYXNzO1xuXG5jb25zdCBSb3V0ZXJWaWV3SW1wbCA9IC8qI19fUFVSRV9fKi8gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgIG5hbWU6ICdSb3V0ZXJWaWV3JyxcclxuICAgIC8vICM2NzQgd2UgbWFudWFsbHkgaW5oZXJpdCB0aGVtXHJcbiAgICBpbmhlcml0QXR0cnM6IGZhbHNlLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBuYW1lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcm91dGU6IE9iamVjdCxcclxuICAgIH0sXHJcbiAgICAvLyBCZXR0ZXIgY29tcGF0IGZvciBAdnVlL2NvbXBhdCB1c2Vyc1xyXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlci9pc3N1ZXMvMTMxNVxyXG4gICAgY29tcGF0Q29uZmlnOiB7IE1PREU6IDMgfSxcclxuICAgIHNldHVwKHByb3BzLCB7IGF0dHJzLCBzbG90cyB9KSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5EZXByZWNhdGVkVXNhZ2UoKTtcclxuICAgICAgICBjb25zdCBpbmplY3RlZFJvdXRlID0gaW5qZWN0KHJvdXRlclZpZXdMb2NhdGlvbktleSk7XHJcbiAgICAgICAgY29uc3Qgcm91dGVUb0Rpc3BsYXkgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5yb3V0ZSB8fCBpbmplY3RlZFJvdXRlLnZhbHVlKTtcclxuICAgICAgICBjb25zdCBpbmplY3RlZERlcHRoID0gaW5qZWN0KHZpZXdEZXB0aEtleSwgMCk7XHJcbiAgICAgICAgLy8gVGhlIGRlcHRoIGNoYW5nZXMgYmFzZWQgb24gZW1wdHkgY29tcG9uZW50cyBvcHRpb24sIHdoaWNoIGFsbG93cyBwYXNzdGhyb3VnaCByb3V0ZXMgZS5nLiByb3V0ZXMgd2l0aCBjaGlsZHJlblxyXG4gICAgICAgIC8vIHRoYXQgYXJlIHVzZWQgdG8gcmV1c2UgdGhlIGBwYXRoYCBwcm9wZXJ0eVxyXG4gICAgICAgIGNvbnN0IGRlcHRoID0gY29tcHV0ZWQoKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaW5pdGlhbERlcHRoID0gdW5yZWYoaW5qZWN0ZWREZXB0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbWF0Y2hlZCB9ID0gcm91dGVUb0Rpc3BsYXkudmFsdWU7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaGVkUm91dGU7XHJcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2hlZFJvdXRlID0gbWF0Y2hlZFtpbml0aWFsRGVwdGhdKSAmJlxyXG4gICAgICAgICAgICAgICAgIW1hdGNoZWRSb3V0ZS5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0aWFsRGVwdGgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbERlcHRoO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZWRSb3V0ZVJlZiA9IGNvbXB1dGVkKCgpID0+IHJvdXRlVG9EaXNwbGF5LnZhbHVlLm1hdGNoZWRbZGVwdGgudmFsdWVdKTtcclxuICAgICAgICBwcm92aWRlKHZpZXdEZXB0aEtleSwgY29tcHV0ZWQoKCkgPT4gZGVwdGgudmFsdWUgKyAxKSk7XHJcbiAgICAgICAgcHJvdmlkZShtYXRjaGVkUm91dGVLZXksIG1hdGNoZWRSb3V0ZVJlZik7XHJcbiAgICAgICAgcHJvdmlkZShyb3V0ZXJWaWV3TG9jYXRpb25LZXksIHJvdXRlVG9EaXNwbGF5KTtcclxuICAgICAgICBjb25zdCB2aWV3UmVmID0gcmVmKCk7XHJcbiAgICAgICAgLy8gd2F0Y2ggYXQgdGhlIHNhbWUgdGltZSB0aGUgY29tcG9uZW50IGluc3RhbmNlLCB0aGUgcm91dGUgcmVjb3JkIHdlIGFyZVxyXG4gICAgICAgIC8vIHJlbmRlcmluZywgYW5kIHRoZSBuYW1lXHJcbiAgICAgICAgd2F0Y2goKCkgPT4gW3ZpZXdSZWYudmFsdWUsIG1hdGNoZWRSb3V0ZVJlZi52YWx1ZSwgcHJvcHMubmFtZV0sIChbaW5zdGFuY2UsIHRvLCBuYW1lXSwgW29sZEluc3RhbmNlLCBmcm9tLCBvbGROYW1lXSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb3B5IHJldXNlZCBpbnN0YW5jZXNcclxuICAgICAgICAgICAgaWYgKHRvKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgdXBkYXRlIHRoZSBpbnN0YW5jZSBmb3IgbmV3IGluc3RhbmNlcyBhcyB3ZWxsIGFzIHJldXNlZFxyXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2VzIHdoZW4gbmF2aWdhdGluZyB0byBhIG5ldyByb3V0ZVxyXG4gICAgICAgICAgICAgICAgdG8uaW5zdGFuY2VzW25hbWVdID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50IGluc3RhbmNlIGlzIHJldXNlZCBmb3IgYSBkaWZmZXJlbnQgcm91dGUgb3IgbmFtZSwgc29cclxuICAgICAgICAgICAgICAgIC8vIHdlIGNvcHkgYW55IHNhdmVkIHVwZGF0ZSBvciBsZWF2ZSBndWFyZHMuIFdpdGggYXN5bmMgc2V0dXAsIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnRpbmcgY29tcG9uZW50IHdpbGwgbW91bnQgYmVmb3JlIHRoZSBtYXRjaGVkUm91dGUgY2hhbmdlcyxcclxuICAgICAgICAgICAgICAgIC8vIG1ha2luZyBpbnN0YW5jZSA9PT0gb2xkSW5zdGFuY2UsIHNvIHdlIGNoZWNrIGlmIGd1YXJkcyBoYXZlIGJlZW5cclxuICAgICAgICAgICAgICAgIC8vIGFkZGVkIGJlZm9yZS4gVGhpcyB3b3JrcyBiZWNhdXNlIHdlIHJlbW92ZSBndWFyZHMgd2hlblxyXG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudGluZy9kZWFjdGl2YXRpbmcgY29tcG9uZW50c1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyb20gJiYgZnJvbSAhPT0gdG8gJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UgPT09IG9sZEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0by5sZWF2ZUd1YXJkcy5zaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLmxlYXZlR3VhcmRzID0gZnJvbS5sZWF2ZUd1YXJkcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0by51cGRhdGVHdWFyZHMuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by51cGRhdGVHdWFyZHMgPSBmcm9tLnVwZGF0ZUd1YXJkcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBiZWZvcmVSb3V0ZUVudGVyIG5leHQgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAgICAgdG8gJiZcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGluc3RhbmNlIGJ1dCB0byBhbmQgZnJvbSBhcmUgdGhlIHNhbWUgdGhpcyBtaWdodCBiZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZpc2l0XHJcbiAgICAgICAgICAgICAgICAoIWZyb20gfHwgIWlzU2FtZVJvdXRlUmVjb3JkKHRvLCBmcm9tKSB8fCAhb2xkSW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAodG8uZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9IHJvdXRlVG9EaXNwbGF5LnZhbHVlO1xyXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRoZSB2YWx1ZSBhdCB0aGUgdGltZSB3ZSByZW5kZXIgYmVjYXVzZSB3aGVuIHdlIHVubW91bnQsIHdlXHJcbiAgICAgICAgICAgIC8vIG5hdmlnYXRlZCB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBzbyB0aGUgdmFsdWUgaXMgZGlmZmVyZW50XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROYW1lID0gcHJvcHMubmFtZTtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFJvdXRlID0gbWF0Y2hlZFJvdXRlUmVmLnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBWaWV3Q29tcG9uZW50ID0gbWF0Y2hlZFJvdXRlICYmIG1hdGNoZWRSb3V0ZS5jb21wb25lbnRzW2N1cnJlbnROYW1lXTtcclxuICAgICAgICAgICAgaWYgKCFWaWV3Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplU2xvdChzbG90cy5kZWZhdWx0LCB7IENvbXBvbmVudDogVmlld0NvbXBvbmVudCwgcm91dGUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJvcHMgZnJvbSByb3V0ZSBjb25maWd1cmF0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlUHJvcHNPcHRpb24gPSBtYXRjaGVkUm91dGUucHJvcHNbY3VycmVudE5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZVByb3BzID0gcm91dGVQcm9wc09wdGlvblxyXG4gICAgICAgICAgICAgICAgPyByb3V0ZVByb3BzT3B0aW9uID09PSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgPyByb3V0ZS5wYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiByb3V0ZVByb3BzT3B0aW9uID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcm91dGVQcm9wc09wdGlvbihyb3V0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiByb3V0ZVByb3BzT3B0aW9uXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVm5vZGVVbm1vdW50ZWQgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGluc3RhbmNlIHJlZmVyZW5jZSB0byBwcmV2ZW50IGxlYWtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZS5jb21wb25lbnQuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkUm91dGUuaW5zdGFuY2VzW2N1cnJlbnROYW1lXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGgoVmlld0NvbXBvbmVudCwgYXNzaWduKHt9LCByb3V0ZVByb3BzLCBhdHRycywge1xyXG4gICAgICAgICAgICAgICAgb25Wbm9kZVVubW91bnRlZCxcclxuICAgICAgICAgICAgICAgIHJlZjogdmlld1JlZixcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBpZiAoKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pICYmXHJcbiAgICAgICAgICAgICAgICBpc0Jyb3dzZXIgJiZcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5yZWYpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGNhbiBkaXNwbGF5IGlmIGl0J3MgYW4gYWxpYXMsIGl0cyBwcm9wc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkZXB0aDogZGVwdGgudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbWF0Y2hlZFJvdXRlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogbWF0Y2hlZFJvdXRlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogbWF0Y2hlZFJvdXRlLm1ldGEsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxJbnN0YW5jZXMgPSBpc0FycmF5KGNvbXBvbmVudC5yZWYpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBjb21wb25lbnQucmVmLm1hcChyID0+IHIuaSlcclxuICAgICAgICAgICAgICAgICAgICA6IFtjb21wb25lbnQucmVmLmldO1xyXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZXMuZm9yRWFjaChpbnN0YW5jZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLl9fdnJ2X2RldnRvb2xzID0gaW5mbztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIC8vIHBhc3MgdGhlIHZub2RlIHRvIHRoZSBzbG90IGFzIGEgcHJvcC5cclxuICAgICAgICAgICAgLy8gaCBhbmQgPGNvbXBvbmVudCA6aXM9XCIuLi5cIj4gYm90aCBhY2NlcHQgdm5vZGVzXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVNsb3Qoc2xvdHMuZGVmYXVsdCwgeyBDb21wb25lbnQ6IGNvbXBvbmVudCwgcm91dGUgfSkgfHxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xyXG5mdW5jdGlvbiBub3JtYWxpemVTbG90KHNsb3QsIGRhdGEpIHtcclxuICAgIGlmICghc2xvdClcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIGNvbnN0IHNsb3RDb250ZW50ID0gc2xvdChkYXRhKTtcclxuICAgIHJldHVybiBzbG90Q29udGVudC5sZW5ndGggPT09IDEgPyBzbG90Q29udGVudFswXSA6IHNsb3RDb250ZW50O1xyXG59XHJcbi8vIGV4cG9ydCB0aGUgcHVibGljIHR5cGUgZm9yIGgvdHN4IGluZmVyZW5jZVxyXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xyXG4vKipcclxuICogQ29tcG9uZW50IHRvIGRpc3BsYXkgdGhlIGN1cnJlbnQgcm91dGUgdGhlIHVzZXIgaXMgYXQuXHJcbiAqL1xyXG5jb25zdCBSb3V0ZXJWaWV3ID0gUm91dGVyVmlld0ltcGw7XHJcbi8vIHdhcm4gYWdhaW5zdCBkZXByZWNhdGVkIHVzYWdlIHdpdGggPHRyYW5zaXRpb24+ICYgPGtlZXAtYWxpdmU+XHJcbi8vIGR1ZSB0byBmdW5jdGlvbmFsIGNvbXBvbmVudCBiZWluZyBubyBsb25nZXIgZWFnZXIgaW4gVnVlIDNcclxuZnVuY3Rpb24gd2FybkRlcHJlY2F0ZWRVc2FnZSgpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICBjb25zdCBwYXJlbnROYW1lID0gaW5zdGFuY2UucGFyZW50ICYmIGluc3RhbmNlLnBhcmVudC50eXBlLm5hbWU7XHJcbiAgICBpZiAocGFyZW50TmFtZSAmJlxyXG4gICAgICAgIChwYXJlbnROYW1lID09PSAnS2VlcEFsaXZlJyB8fCBwYXJlbnROYW1lLmluY2x1ZGVzKCdUcmFuc2l0aW9uJykpKSB7XHJcbiAgICAgICAgY29uc3QgY29tcCA9IHBhcmVudE5hbWUgPT09ICdLZWVwQWxpdmUnID8gJ2tlZXAtYWxpdmUnIDogJ3RyYW5zaXRpb24nO1xyXG4gICAgICAgIHdhcm4oYDxyb3V0ZXItdmlldz4gY2FuIG5vIGxvbmdlciBiZSB1c2VkIGRpcmVjdGx5IGluc2lkZSA8dHJhbnNpdGlvbj4gb3IgPGtlZXAtYWxpdmU+LlxcbmAgK1xyXG4gICAgICAgICAgICBgVXNlIHNsb3QgcHJvcHMgaW5zdGVhZDpcXG5cXG5gICtcclxuICAgICAgICAgICAgYDxyb3V0ZXItdmlldyB2LXNsb3Q9XCJ7IENvbXBvbmVudCB9XCI+XFxuYCArXHJcbiAgICAgICAgICAgIGAgIDwke2NvbXB9PlxcbmAgK1xyXG4gICAgICAgICAgICBgICAgIDxjb21wb25lbnQgOmlzPVwiQ29tcG9uZW50XCIgLz5cXG5gICtcclxuICAgICAgICAgICAgYCAgPC8ke2NvbXB9PlxcbmAgK1xyXG4gICAgICAgICAgICBgPC9yb3V0ZXItdmlldz5gKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQ29waWVzIGEgcm91dGUgbG9jYXRpb24gYW5kIHJlbW92ZXMgYW55IHByb2JsZW1hdGljIHByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgc2hvd24gaW4gZGV2dG9vbHMgKGUuZy4gVnVlIGluc3RhbmNlcykuXHJcbiAqXHJcbiAqIEBwYXJhbSByb3V0ZUxvY2F0aW9uIC0gcm91dGVMb2NhdGlvbiB0byBmb3JtYXRcclxuICogQHBhcmFtIHRvb2x0aXAgLSBvcHRpb25hbCB0b29sdGlwXHJcbiAqIEByZXR1cm5zIGEgY29weSBvZiB0aGUgcm91dGVMb2NhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gZm9ybWF0Um91dGVMb2NhdGlvbihyb3V0ZUxvY2F0aW9uLCB0b29sdGlwKSB7XHJcbiAgICBjb25zdCBjb3B5ID0gYXNzaWduKHt9LCByb3V0ZUxvY2F0aW9uLCB7XHJcbiAgICAgICAgLy8gcmVtb3ZlIHZhcmlhYmxlcyB0aGF0IGNhbiBjb250YWluIHZ1ZSBpbnN0YW5jZXNcclxuICAgICAgICBtYXRjaGVkOiByb3V0ZUxvY2F0aW9uLm1hdGNoZWQubWFwKG1hdGNoZWQgPT4gb21pdChtYXRjaGVkLCBbJ2luc3RhbmNlcycsICdjaGlsZHJlbicsICdhbGlhc09mJ10pKSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfY3VzdG9tOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IG51bGwsXHJcbiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICBkaXNwbGF5OiByb3V0ZUxvY2F0aW9uLmZ1bGxQYXRoLFxyXG4gICAgICAgICAgICB0b29sdGlwLFxyXG4gICAgICAgICAgICB2YWx1ZTogY29weSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBmb3JtYXREaXNwbGF5KGRpc3BsYXkpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICBkaXNwbGF5LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbi8vIHRvIHN1cHBvcnQgbXVsdGlwbGUgcm91dGVyIGluc3RhbmNlc1xyXG5sZXQgcm91dGVySWQgPSAwO1xyXG5mdW5jdGlvbiBhZGREZXZ0b29scyhhcHAsIHJvdXRlciwgbWF0Y2hlcikge1xyXG4gICAgLy8gVGFrZSBvdmVyIHJvdXRlci5iZWZvcmVFYWNoIGFuZCBhZnRlckVhY2hcclxuICAgIC8vIG1ha2Ugc3VyZSB3ZSBhcmUgbm90IHJlZ2lzdGVyaW5nIHRoZSBkZXZ0b29sIHR3aWNlXHJcbiAgICBpZiAocm91dGVyLl9faGFzRGV2dG9vbHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgcm91dGVyLl9faGFzRGV2dG9vbHMgPSB0cnVlO1xyXG4gICAgLy8gaW5jcmVtZW50IHRvIHN1cHBvcnQgbXVsdGlwbGUgcm91dGVyIGluc3RhbmNlc1xyXG4gICAgY29uc3QgaWQgPSByb3V0ZXJJZCsrO1xyXG4gICAgc2V0dXBEZXZ0b29sc1BsdWdpbih7XHJcbiAgICAgICAgaWQ6ICdvcmcudnVlanMucm91dGVyJyArIChpZCA/ICcuJyArIGlkIDogJycpLFxyXG4gICAgICAgIGxhYmVsOiAnVnVlIFJvdXRlcicsXHJcbiAgICAgICAgcGFja2FnZU5hbWU6ICd2dWUtcm91dGVyJyxcclxuICAgICAgICBob21lcGFnZTogJ2h0dHBzOi8vcm91dGVyLnZ1ZWpzLm9yZycsXHJcbiAgICAgICAgbG9nbzogJ2h0dHBzOi8vcm91dGVyLnZ1ZWpzLm9yZy9sb2dvLnBuZycsXHJcbiAgICAgICAgY29tcG9uZW50U3RhdGVUeXBlczogWydSb3V0aW5nJ10sXHJcbiAgICAgICAgYXBwLFxyXG4gICAgfSwgYXBpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIGFwaS5ub3cgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVnVlIFJvdXRlcl06IFlvdSBzZWVtIHRvIGJlIHVzaW5nIGFuIG91dGRhdGVkIHZlcnNpb24gb2YgVnVlIERldnRvb2xzLiBBcmUgeW91IHN0aWxsIHVzaW5nIHRoZSBCZXRhIHJlbGVhc2UgaW5zdGVhZCBvZiB0aGUgc3RhYmxlIG9uZT8gWW91IGNhbiBmaW5kIHRoZSBsaW5rcyBhdCBodHRwczovL2RldnRvb2xzLnZ1ZWpzLm9yZy9ndWlkZS9pbnN0YWxsYXRpb24uaHRtbC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGlzcGxheSBzdGF0ZSBhZGRlZCBieSB0aGUgcm91dGVyXHJcbiAgICAgICAgYXBpLm9uLmluc3BlY3RDb21wb25lbnQoKHBheWxvYWQsIGN0eCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pbnN0YW5jZURhdGEpIHtcclxuICAgICAgICAgICAgICAgIHBheWxvYWQuaW5zdGFuY2VEYXRhLnN0YXRlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdSb3V0aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBrZXk6ICckcm91dGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZm9ybWF0Um91dGVMb2NhdGlvbihyb3V0ZXIuY3VycmVudFJvdXRlLnZhbHVlLCAnQ3VycmVudCBSb3V0ZScpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBtYXJrIHJvdXRlci1saW5rIGFzIGFjdGl2ZSBhbmQgZGlzcGxheSB0YWdzIG9uIHJvdXRlciB2aWV3c1xyXG4gICAgICAgIGFwaS5vbi52aXNpdENvbXBvbmVudFRyZWUoKHsgdHJlZU5vZGU6IG5vZGUsIGNvbXBvbmVudEluc3RhbmNlIH0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEluc3RhbmNlLl9fdnJ2X2RldnRvb2xzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gY29tcG9uZW50SW5zdGFuY2UuX192cnZfZGV2dG9vbHM7XHJcbiAgICAgICAgICAgICAgICBub2RlLnRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IChpbmZvLm5hbWUgPyBgJHtpbmZvLm5hbWUudG9TdHJpbmcoKX06IGAgOiAnJykgKyBpbmZvLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdUaGlzIGNvbXBvbmVudCBpcyByZW5kZXJlZCBieSAmbHQ7cm91dGVyLXZpZXcmZ3Q7JyxcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFBJTktfNTAwLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaWYgbXVsdGlwbGUgdXNlTGluayBhcmUgdXNlZFxyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShjb21wb25lbnRJbnN0YW5jZS5fX3ZybF9kZXZ0b29scykpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9fZGV2dG9vbHNBcGkgPSBhcGk7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5fX3ZybF9kZXZ0b29scy5mb3JFYWNoKGRldnRvb2xzRGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJhY2tncm91bmRDb2xvciA9IE9SQU5HRV80MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvb2x0aXAgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGV2dG9vbHNEYXRhLmlzRXhhY3RBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gTElNRV81MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAgPSAnVGhpcyBpcyBleGFjdGx5IGFjdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRldnRvb2xzRGF0YS5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBCTFVFXzYwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcCA9ICdUaGlzIGxpbmsgaXMgYWN0aXZlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGV2dG9vbHNEYXRhLnJvdXRlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB3YXRjaChyb3V0ZXIuY3VycmVudFJvdXRlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHJlZnJlc2ggYWN0aXZlIHN0YXRlXHJcbiAgICAgICAgICAgIHJlZnJlc2hSb3V0ZXNWaWV3KCk7XHJcbiAgICAgICAgICAgIGFwaS5ub3RpZnlDb21wb25lbnRVcGRhdGUoKTtcclxuICAgICAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JUcmVlKHJvdXRlckluc3BlY3RvcklkKTtcclxuICAgICAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JTdGF0ZShyb3V0ZXJJbnNwZWN0b3JJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdGlvbnNMYXllcklkID0gJ3JvdXRlcjpuYXZpZ2F0aW9uczonICsgaWQ7XHJcbiAgICAgICAgYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xyXG4gICAgICAgICAgICBpZDogbmF2aWdhdGlvbnNMYXllcklkLFxyXG4gICAgICAgICAgICBsYWJlbDogYFJvdXRlciR7aWQgPyAnICcgKyBpZCA6ICcnfSBOYXZpZ2F0aW9uc2AsXHJcbiAgICAgICAgICAgIGNvbG9yOiAweDQwYThjNCxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjb25zdCBlcnJvcnNMYXllcklkID0gJ3JvdXRlcjplcnJvcnMnXHJcbiAgICAgICAgLy8gYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xyXG4gICAgICAgIC8vICAgaWQ6IGVycm9yc0xheWVySWQsXHJcbiAgICAgICAgLy8gICBsYWJlbDogJ1JvdXRlciBFcnJvcnMnLFxyXG4gICAgICAgIC8vICAgY29sb3I6IDB4ZWE1NDU1LFxyXG4gICAgICAgIC8vIH0pXHJcbiAgICAgICAgcm91dGVyLm9uRXJyb3IoKGVycm9yLCB0bykgPT4ge1xyXG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBsYXllcklkOiBuYXZpZ2F0aW9uc0xheWVySWQsXHJcbiAgICAgICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRXJyb3IgZHVyaW5nIE5hdmlnYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiB0by5mdWxsUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBsb2dUeXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IGFwaS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGVycm9yIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogdG8ubWV0YS5fX25hdmlnYXRpb25JZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGF0dGFjaGVkIHRvIGBtZXRhYCBhbmQgdXNlZCB0byBncm91cCBldmVudHNcclxuICAgICAgICBsZXQgbmF2aWdhdGlvbklkID0gMDtcclxuICAgICAgICByb3V0ZXIuYmVmb3JlRWFjaCgodG8sIGZyb20pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGd1YXJkOiBmb3JtYXREaXNwbGF5KCdiZWZvcmVFYWNoJyksXHJcbiAgICAgICAgICAgICAgICBmcm9tOiBmb3JtYXRSb3V0ZUxvY2F0aW9uKGZyb20sICdDdXJyZW50IExvY2F0aW9uIGR1cmluZyB0aGlzIG5hdmlnYXRpb24nKSxcclxuICAgICAgICAgICAgICAgIHRvOiBmb3JtYXRSb3V0ZUxvY2F0aW9uKHRvLCAnVGFyZ2V0IGxvY2F0aW9uJyksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIFVzZWQgdG8gZ3JvdXAgbmF2aWdhdGlvbnMgdG9nZXRoZXIsIGhpZGUgZnJvbSBkZXZ0b29sc1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodG8ubWV0YSwgJ19fbmF2aWdhdGlvbklkJywge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5hdmlnYXRpb25JZCsrLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJJZDogbmF2aWdhdGlvbnNMYXllcklkLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBhcGkubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdGFydCBvZiBuYXZpZ2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogdG8uZnVsbFBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBncm91cElkOiB0by5tZXRhLl9fbmF2aWdhdGlvbklkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcm91dGVyLmFmdGVyRWFjaCgodG8sIGZyb20sIGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGd1YXJkOiBmb3JtYXREaXNwbGF5KCdhZnRlckVhY2gnKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEuZmFpbHVyZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBfY3VzdG9tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFpbHVyZSA/IGZhaWx1cmUubWVzc2FnZSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAnTmF2aWdhdGlvbiBGYWlsdXJlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhaWx1cmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBkYXRhLnN0YXR1cyA9IGZvcm1hdERpc3BsYXkoJ+KdjCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSBmb3JtYXREaXNwbGF5KCfinIUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3ZSBzZXQgaGVyZSB0byBoYXZlIHRoZSByaWdodCBvcmRlclxyXG4gICAgICAgICAgICBkYXRhLmZyb20gPSBmb3JtYXRSb3V0ZUxvY2F0aW9uKGZyb20sICdDdXJyZW50IExvY2F0aW9uIGR1cmluZyB0aGlzIG5hdmlnYXRpb24nKTtcclxuICAgICAgICAgICAgZGF0YS50byA9IGZvcm1hdFJvdXRlTG9jYXRpb24odG8sICdUYXJnZXQgbG9jYXRpb24nKTtcclxuICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJJZDogbmF2aWdhdGlvbnNMYXllcklkLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VuZCBvZiBuYXZpZ2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogdG8uZnVsbFBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogYXBpLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9nVHlwZTogZmFpbHVyZSA/ICd3YXJuaW5nJyA6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICBncm91cElkOiB0by5tZXRhLl9fbmF2aWdhdGlvbklkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5zcGVjdG9yIG9mIEV4aXN0aW5nIHJvdXRlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHJvdXRlckluc3BlY3RvcklkID0gJ3JvdXRlci1pbnNwZWN0b3I6JyArIGlkO1xyXG4gICAgICAgIGFwaS5hZGRJbnNwZWN0b3Ioe1xyXG4gICAgICAgICAgICBpZDogcm91dGVySW5zcGVjdG9ySWQsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnUm91dGVzJyArIChpZCA/ICcgJyArIGlkIDogJycpLFxyXG4gICAgICAgICAgICBpY29uOiAnYm9vaycsXHJcbiAgICAgICAgICAgIHRyZWVGaWx0ZXJQbGFjZWhvbGRlcjogJ1NlYXJjaCByb3V0ZXMnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hSb3V0ZXNWaWV3KCkge1xyXG4gICAgICAgICAgICAvLyB0aGUgcm91dGVzIHZpZXcgaXNuJ3QgYWN0aXZlXHJcbiAgICAgICAgICAgIGlmICghYWN0aXZlUm91dGVzUGF5bG9hZClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGFjdGl2ZVJvdXRlc1BheWxvYWQ7XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIHJvdXRlcyB3aWxsIGFwcGVhciBhcyBuZXN0ZWRcclxuICAgICAgICAgICAgbGV0IHJvdXRlcyA9IG1hdGNoZXIuZ2V0Um91dGVzKCkuZmlsdGVyKHJvdXRlID0+ICFyb3V0ZS5wYXJlbnQpO1xyXG4gICAgICAgICAgICAvLyByZXNldCBtYXRjaCBzdGF0ZSB0byBmYWxzZVxyXG4gICAgICAgICAgICByb3V0ZXMuZm9yRWFjaChyZXNldE1hdGNoU3RhdGVPblJvdXRlUmVjb3JkKTtcclxuICAgICAgICAgICAgLy8gYXBwbHkgYSBtYXRjaCBzdGF0ZSBpZiB0aGVyZSBpcyBhIHBheWxvYWRcclxuICAgICAgICAgICAgaWYgKHBheWxvYWQuZmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICByb3V0ZXMgPSByb3V0ZXMuZmlsdGVyKHJvdXRlID0+IFxyXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSBtYXRjaGVzIHN0YXRlIGJhc2VkIG9uIHRoZSBwYXlsb2FkXHJcbiAgICAgICAgICAgICAgICBpc1JvdXRlTWF0Y2hpbmcocm91dGUsIHBheWxvYWQuZmlsdGVyLnRvTG93ZXJDYXNlKCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtYXJrIGFjdGl2ZSByb3V0ZXNcclxuICAgICAgICAgICAgcm91dGVzLmZvckVhY2gocm91dGUgPT4gbWFya1JvdXRlUmVjb3JkQWN0aXZlKHJvdXRlLCByb3V0ZXIuY3VycmVudFJvdXRlLnZhbHVlKSk7XHJcbiAgICAgICAgICAgIHBheWxvYWQucm9vdE5vZGVzID0gcm91dGVzLm1hcChmb3JtYXRSb3V0ZVJlY29yZEZvckluc3BlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhY3RpdmVSb3V0ZXNQYXlsb2FkO1xyXG4gICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JUcmVlKHBheWxvYWQgPT4ge1xyXG4gICAgICAgICAgICBhY3RpdmVSb3V0ZXNQYXlsb2FkID0gcGF5bG9hZDtcclxuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gcm91dGVySW5zcGVjdG9ySWQpIHtcclxuICAgICAgICAgICAgICAgIHJlZnJlc2hSb3V0ZXNWaWV3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEaXNwbGF5IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcm91dGUgcmVjb3JkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBpLm9uLmdldEluc3BlY3RvclN0YXRlKHBheWxvYWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSByb3V0ZXJJbnNwZWN0b3JJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVzID0gbWF0Y2hlci5nZXRSb3V0ZXMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gcm91dGVzLmZpbmQocm91dGUgPT4gcm91dGUucmVjb3JkLl9fdmRfaWQgPT09IHBheWxvYWQubm9kZUlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZvcm1hdFJvdXRlUmVjb3JkTWF0Y2hlckZvclN0YXRlSW5zcGVjdG9yKHJvdXRlKSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JUcmVlKHJvdXRlckluc3BlY3RvcklkKTtcclxuICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKHJvdXRlckluc3BlY3RvcklkKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIG1vZGlmaWVyRm9yS2V5KGtleSkge1xyXG4gICAgaWYgKGtleS5vcHRpb25hbCkge1xyXG4gICAgICAgIHJldHVybiBrZXkucmVwZWF0YWJsZSA/ICcqJyA6ICc/JztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBrZXkucmVwZWF0YWJsZSA/ICcrJyA6ICcnO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdFJvdXRlUmVjb3JkTWF0Y2hlckZvclN0YXRlSW5zcGVjdG9yKHJvdXRlKSB7XHJcbiAgICBjb25zdCB7IHJlY29yZCB9ID0gcm91dGU7XHJcbiAgICBjb25zdCBmaWVsZHMgPSBbXHJcbiAgICAgICAgeyBlZGl0YWJsZTogZmFsc2UsIGtleTogJ3BhdGgnLCB2YWx1ZTogcmVjb3JkLnBhdGggfSxcclxuICAgIF07XHJcbiAgICBpZiAocmVjb3JkLm5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICduYW1lJyxcclxuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5uYW1lLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZmllbGRzLnB1c2goeyBlZGl0YWJsZTogZmFsc2UsIGtleTogJ3JlZ2V4cCcsIHZhbHVlOiByb3V0ZS5yZSB9KTtcclxuICAgIGlmIChyb3V0ZS5rZXlzLmxlbmd0aCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdrZXlzJyxcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHJvdXRlLmtleXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gYCR7a2V5Lm5hbWV9JHttb2RpZmllckZvcktleShrZXkpfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyksXHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1BhcmFtIGtleXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByb3V0ZS5rZXlzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZWNvcmQucmVkaXJlY3QgIT0gbnVsbCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdyZWRpcmVjdCcsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQucmVkaXJlY3QsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUuYWxpYXMubGVuZ3RoKSB7XHJcbiAgICAgICAgZmllbGRzLnB1c2goe1xyXG4gICAgICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGtleTogJ2FsaWFzZXMnLFxyXG4gICAgICAgICAgICB2YWx1ZTogcm91dGUuYWxpYXMubWFwKGFsaWFzID0+IGFsaWFzLnJlY29yZC5wYXRoKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChPYmplY3Qua2V5cyhyb3V0ZS5yZWNvcmQubWV0YSkubGVuZ3RoKSB7XHJcbiAgICAgICAgZmllbGRzLnB1c2goe1xyXG4gICAgICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGtleTogJ21ldGEnLFxyXG4gICAgICAgICAgICB2YWx1ZTogcm91dGUucmVjb3JkLm1ldGEsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmaWVsZHMucHVzaCh7XHJcbiAgICAgICAga2V5OiAnc2NvcmUnLFxyXG4gICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICBfY3VzdG9tOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiByb3V0ZS5zY29yZS5tYXAoc2NvcmUgPT4gc2NvcmUuam9pbignLCAnKSkuam9pbignIHwgJyksXHJcbiAgICAgICAgICAgICAgICB0b29sdGlwOiAnU2NvcmUgdXNlZCB0byBzb3J0IHJvdXRlcycsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogcm91dGUuc2NvcmUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZpZWxkcztcclxufVxyXG4vKipcclxuICogRXh0cmFjdGVkIGZyb20gdGFpbHdpbmQgcGFsZXR0ZVxyXG4gKi9cclxuY29uc3QgUElOS181MDAgPSAweGVjNDg5OTtcclxuY29uc3QgQkxVRV82MDAgPSAweDI1NjNlYjtcclxuY29uc3QgTElNRV81MDAgPSAweDg0Y2MxNjtcclxuY29uc3QgQ1lBTl80MDAgPSAweDIyZDNlZTtcclxuY29uc3QgT1JBTkdFXzQwMCA9IDB4ZmI5MjNjO1xyXG4vLyBjb25zdCBHUkFZXzEwMCA9IDB4ZjRmNGY1XHJcbmNvbnN0IERBUksgPSAweDY2NjY2NjtcclxuZnVuY3Rpb24gZm9ybWF0Um91dGVSZWNvcmRGb3JJbnNwZWN0b3Iocm91dGUpIHtcclxuICAgIGNvbnN0IHRhZ3MgPSBbXTtcclxuICAgIGNvbnN0IHsgcmVjb3JkIH0gPSByb3V0ZTtcclxuICAgIGlmIChyZWNvcmQubmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6IFN0cmluZyhyZWNvcmQubmFtZSksXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDWUFOXzQwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZWNvcmQuYWxpYXNPZikge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnYWxpYXMnLFxyXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogT1JBTkdFXzQwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyb3V0ZS5fX3ZkX21hdGNoKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6ICdtYXRjaGVzJyxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFBJTktfNTAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdXRlLl9fdmRfZXhhY3RBY3RpdmUpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogJ2V4YWN0JyxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IExJTUVfNTAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdXRlLl9fdmRfYWN0aXZlKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6ICdhY3RpdmUnLFxyXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQkxVRV82MDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVjb3JkLnJlZGlyZWN0KSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6IHR5cGVvZiByZWNvcmQucmVkaXJlY3QgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICA/IGByZWRpcmVjdDogJHtyZWNvcmQucmVkaXJlY3R9YFxyXG4gICAgICAgICAgICAgICAgOiAncmVkaXJlY3RzJyxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAweGZmZmZmZixcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBEQVJLLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gYWRkIGFuIGlkIHRvIGJlIGFibGUgdG8gc2VsZWN0IGl0LiBVc2luZyB0aGUgYHBhdGhgIGlzIG5vdCBwb3NzaWJsZSBiZWNhdXNlXHJcbiAgICAvLyBlbXB0eSBwYXRoIGNoaWxkcmVuIHdvdWxkIGNvbGxpZGUgd2l0aCB0aGVpciBwYXJlbnRzXHJcbiAgICBsZXQgaWQgPSByZWNvcmQuX192ZF9pZDtcclxuICAgIGlmIChpZCA9PSBudWxsKSB7XHJcbiAgICAgICAgaWQgPSBTdHJpbmcocm91dGVSZWNvcmRJZCsrKTtcclxuICAgICAgICByZWNvcmQuX192ZF9pZCA9IGlkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZCxcclxuICAgICAgICBsYWJlbDogcmVjb3JkLnBhdGgsXHJcbiAgICAgICAgdGFncyxcclxuICAgICAgICBjaGlsZHJlbjogcm91dGUuY2hpbGRyZW4ubWFwKGZvcm1hdFJvdXRlUmVjb3JkRm9ySW5zcGVjdG9yKSxcclxuICAgIH07XHJcbn1cclxuLy8gIGluY3JlbWVudGFsIGlkIGZvciByb3V0ZSByZWNvcmRzIGFuZCBpbnNwZWN0b3Igc3RhdGVcclxubGV0IHJvdXRlUmVjb3JkSWQgPSAwO1xyXG5jb25zdCBFWFRSQUNUX1JFR0VYUF9SRSA9IC9eXFwvKC4qKVxcLyhbYS16XSopJC87XHJcbmZ1bmN0aW9uIG1hcmtSb3V0ZVJlY29yZEFjdGl2ZShyb3V0ZSwgY3VycmVudFJvdXRlKSB7XHJcbiAgICAvLyBubyByb3V0ZSB3aWxsIGJlIGFjdGl2ZSBpZiBtYXRjaGVkIGlzIGVtcHR5XHJcbiAgICAvLyByZXNldCB0aGUgbWF0Y2hpbmcgc3RhdGVcclxuICAgIGNvbnN0IGlzRXhhY3RBY3RpdmUgPSBjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZVJlY29yZChjdXJyZW50Um91dGUubWF0Y2hlZFtjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggLSAxXSwgcm91dGUucmVjb3JkKTtcclxuICAgIHJvdXRlLl9fdmRfZXhhY3RBY3RpdmUgPSByb3V0ZS5fX3ZkX2FjdGl2ZSA9IGlzRXhhY3RBY3RpdmU7XHJcbiAgICBpZiAoIWlzRXhhY3RBY3RpdmUpIHtcclxuICAgICAgICByb3V0ZS5fX3ZkX2FjdGl2ZSA9IGN1cnJlbnRSb3V0ZS5tYXRjaGVkLnNvbWUobWF0Y2ggPT4gaXNTYW1lUm91dGVSZWNvcmQobWF0Y2gsIHJvdXRlLnJlY29yZCkpO1xyXG4gICAgfVxyXG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZFJvdXRlID0+IG1hcmtSb3V0ZVJlY29yZEFjdGl2ZShjaGlsZFJvdXRlLCBjdXJyZW50Um91dGUpKTtcclxufVxyXG5mdW5jdGlvbiByZXNldE1hdGNoU3RhdGVPblJvdXRlUmVjb3JkKHJvdXRlKSB7XHJcbiAgICByb3V0ZS5fX3ZkX21hdGNoID0gZmFsc2U7XHJcbiAgICByb3V0ZS5jaGlsZHJlbi5mb3JFYWNoKHJlc2V0TWF0Y2hTdGF0ZU9uUm91dGVSZWNvcmQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzUm91dGVNYXRjaGluZyhyb3V0ZSwgZmlsdGVyKSB7XHJcbiAgICBjb25zdCBmb3VuZCA9IFN0cmluZyhyb3V0ZS5yZSkubWF0Y2goRVhUUkFDVF9SRUdFWFBfUkUpO1xyXG4gICAgcm91dGUuX192ZF9tYXRjaCA9IGZhbHNlO1xyXG4gICAgaWYgKCFmb3VuZCB8fCBmb3VuZC5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gdXNlIGEgcmVnZXhwIHdpdGhvdXQgJCBhdCB0aGUgZW5kIHRvIG1hdGNoIG5lc3RlZCByb3V0ZXMgYmV0dGVyXHJcbiAgICBjb25zdCBub25FbmRpbmdSRSA9IG5ldyBSZWdFeHAoZm91bmRbMV0ucmVwbGFjZSgvXFwkJC8sICcnKSwgZm91bmRbMl0pO1xyXG4gICAgaWYgKG5vbkVuZGluZ1JFLnRlc3QoZmlsdGVyKSkge1xyXG4gICAgICAgIC8vIG1hcmsgY2hpbGRyZW4gYXMgbWF0Y2hlc1xyXG4gICAgICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gaXNSb3V0ZU1hdGNoaW5nKGNoaWxkLCBmaWx0ZXIpKTtcclxuICAgICAgICAvLyBleGNlcHRpb24gY2FzZTogYC9gXHJcbiAgICAgICAgaWYgKHJvdXRlLnJlY29yZC5wYXRoICE9PSAnLycgfHwgZmlsdGVyID09PSAnLycpIHtcclxuICAgICAgICAgICAgcm91dGUuX192ZF9tYXRjaCA9IHJvdXRlLnJlLnRlc3QoZmlsdGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGhpZGUgdGhlIC8gcm91dGVcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXRoID0gcm91dGUucmVjb3JkLnBhdGgudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGRlY29kZWRQYXRoID0gZGVjb2RlKHBhdGgpO1xyXG4gICAgLy8gYWxzbyBhbGxvdyBwYXJ0aWFsIG1hdGNoaW5nIG9uIHRoZSBwYXRoXHJcbiAgICBpZiAoIWZpbHRlci5zdGFydHNXaXRoKCcvJykgJiZcclxuICAgICAgICAoZGVjb2RlZFBhdGguaW5jbHVkZXMoZmlsdGVyKSB8fCBwYXRoLmluY2x1ZGVzKGZpbHRlcikpKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKGRlY29kZWRQYXRoLnN0YXJ0c1dpdGgoZmlsdGVyKSB8fCBwYXRoLnN0YXJ0c1dpdGgoZmlsdGVyKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmIChyb3V0ZS5yZWNvcmQubmFtZSAmJiBTdHJpbmcocm91dGUucmVjb3JkLm5hbWUpLmluY2x1ZGVzKGZpbHRlcikpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gcm91dGUuY2hpbGRyZW4uc29tZShjaGlsZCA9PiBpc1JvdXRlTWF0Y2hpbmcoY2hpbGQsIGZpbHRlcikpO1xyXG59XHJcbmZ1bmN0aW9uIG9taXQob2JqLCBrZXlzKSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmICgha2V5cy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICAgICAgcmV0W2tleV0gPSBvYmpba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgUm91dGVyIGluc3RhbmNlIHRoYXQgY2FuIGJlIHVzZWQgYnkgYSBWdWUgYXBwLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIHtAbGluayBSb3V0ZXJPcHRpb25zfVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUm91dGVyKG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IG1hdGNoZXIgPSBjcmVhdGVSb3V0ZXJNYXRjaGVyKG9wdGlvbnMucm91dGVzLCBvcHRpb25zKTtcclxuICAgIGNvbnN0IHBhcnNlUXVlcnkkMSA9IG9wdGlvbnMucGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xyXG4gICAgY29uc3Qgc3RyaW5naWZ5UXVlcnkkMSA9IG9wdGlvbnMuc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XHJcbiAgICBjb25zdCByb3V0ZXJIaXN0b3J5ID0gb3B0aW9ucy5oaXN0b3J5O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhcm91dGVySGlzdG9yeSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGUgdGhlIFwiaGlzdG9yeVwiIG9wdGlvbiB3aGVuIGNhbGxpbmcgXCJjcmVhdGVSb3V0ZXIoKVwiOicgK1xyXG4gICAgICAgICAgICAnIGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2FwaS8jaGlzdG9yeS4nKTtcclxuICAgIGNvbnN0IGJlZm9yZUd1YXJkcyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgY29uc3QgYmVmb3JlUmVzb2x2ZUd1YXJkcyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgY29uc3QgYWZ0ZXJHdWFyZHMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IHNoYWxsb3dSZWYoU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCk7XHJcbiAgICBsZXQgcGVuZGluZ0xvY2F0aW9uID0gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRDtcclxuICAgIC8vIGxlYXZlIHRoZSBzY3JvbGxSZXN0b3JhdGlvbiBpZiBubyBzY3JvbGxCZWhhdmlvciBpcyBwcm92aWRlZFxyXG4gICAgaWYgKGlzQnJvd3NlciAmJiBvcHRpb25zLnNjcm9sbEJlaGF2aW9yICYmICdzY3JvbGxSZXN0b3JhdGlvbicgaW4gaGlzdG9yeSkge1xyXG4gICAgICAgIGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcclxuICAgIH1cclxuICAgIGNvbnN0IG5vcm1hbGl6ZVBhcmFtcyA9IGFwcGx5VG9QYXJhbXMuYmluZChudWxsLCBwYXJhbVZhbHVlID0+ICcnICsgcGFyYW1WYWx1ZSk7XHJcbiAgICBjb25zdCBlbmNvZGVQYXJhbXMgPSBhcHBseVRvUGFyYW1zLmJpbmQobnVsbCwgZW5jb2RlUGFyYW0pO1xyXG4gICAgY29uc3QgZGVjb2RlUGFyYW1zID0gXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpbnRlbnRpb25hbGx5IGF2b2lkIHRoZSB0eXBlIGNoZWNrXHJcbiAgICBhcHBseVRvUGFyYW1zLmJpbmQobnVsbCwgZGVjb2RlKTtcclxuICAgIGZ1bmN0aW9uIGFkZFJvdXRlKHBhcmVudE9yUm91dGUsIHJvdXRlKSB7XHJcbiAgICAgICAgbGV0IHBhcmVudDtcclxuICAgICAgICBsZXQgcmVjb3JkO1xyXG4gICAgICAgIGlmIChpc1JvdXRlTmFtZShwYXJlbnRPclJvdXRlKSkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIocGFyZW50T3JSb3V0ZSk7XHJcbiAgICAgICAgICAgIHJlY29yZCA9IHJvdXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVjb3JkID0gcGFyZW50T3JSb3V0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIuYWRkUm91dGUocmVjb3JkLCBwYXJlbnQpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlUm91dGUobmFtZSkge1xyXG4gICAgICAgIGNvbnN0IHJlY29yZE1hdGNoZXIgPSBtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIobmFtZSk7XHJcbiAgICAgICAgaWYgKHJlY29yZE1hdGNoZXIpIHtcclxuICAgICAgICAgICAgbWF0Y2hlci5yZW1vdmVSb3V0ZShyZWNvcmRNYXRjaGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYENhbm5vdCByZW1vdmUgbm9uLWV4aXN0ZW50IHJvdXRlIFwiJHtTdHJpbmcobmFtZSl9XCJgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRSb3V0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIuZ2V0Um91dGVzKCkubWFwKHJvdXRlTWF0Y2hlciA9PiByb3V0ZU1hdGNoZXIucmVjb3JkKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGhhc1JvdXRlKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gISFtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIobmFtZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvbHZlKHJhd0xvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pIHtcclxuICAgICAgICAvLyBjb25zdCBvYmplY3RMb2NhdGlvbiA9IHJvdXRlckxvY2F0aW9uQXNPYmplY3QocmF3TG9jYXRpb24pXHJcbiAgICAgICAgLy8gd2UgY3JlYXRlIGEgY29weSB0byBtb2RpZnkgaXQgbGF0ZXJcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24gPSBhc3NpZ24oe30sIGN1cnJlbnRMb2NhdGlvbiB8fCBjdXJyZW50Um91dGUudmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmF3TG9jYXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uTm9ybWFsaXplZCA9IHBhcnNlVVJMKHBhcnNlUXVlcnkkMSwgcmF3TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbi5wYXRoKTtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFJvdXRlID0gbWF0Y2hlci5yZXNvbHZlKHsgcGF0aDogbG9jYXRpb25Ob3JtYWxpemVkLnBhdGggfSwgY3VycmVudExvY2F0aW9uKTtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9IHJvdXRlckhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbk5vcm1hbGl6ZWQuZnVsbFBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCcvLycpKVxyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYExvY2F0aW9uIFwiJHtyYXdMb2NhdGlvbn1cIiByZXNvbHZlZCB0byBcIiR7aHJlZn1cIi4gQSByZXNvbHZlZCBsb2NhdGlvbiBjYW5ub3Qgc3RhcnQgd2l0aCBtdWx0aXBsZSBzbGFzaGVzLmApO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIW1hdGNoZWRSb3V0ZS5tYXRjaGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYE5vIG1hdGNoIGZvdW5kIGZvciBsb2NhdGlvbiB3aXRoIHBhdGggXCIke3Jhd0xvY2F0aW9ufVwiYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbG9jYXRpb25Ob3JtYWxpemVkIGlzIGFsd2F5cyBhIG5ldyBvYmplY3RcclxuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbihsb2NhdGlvbk5vcm1hbGl6ZWQsIG1hdGNoZWRSb3V0ZSwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBkZWNvZGVQYXJhbXMobWF0Y2hlZFJvdXRlLnBhcmFtcyksXHJcbiAgICAgICAgICAgICAgICBoYXNoOiBkZWNvZGUobG9jYXRpb25Ob3JtYWxpemVkLmhhc2gpLFxyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlckxvY2F0aW9uO1xyXG4gICAgICAgIC8vIHBhdGggY291bGQgYmUgcmVsYXRpdmUgaW4gb2JqZWN0IGFzIHdlbGxcclxuICAgICAgICBpZiAoJ3BhdGgnIGluIHJhd0xvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICdwYXJhbXMnIGluIHJhd0xvY2F0aW9uICYmXHJcbiAgICAgICAgICAgICAgICAhKCduYW1lJyBpbiByYXdMb2NhdGlvbikgJiZcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoZSB0eXBlIGlzIG5ldmVyXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyYXdMb2NhdGlvbi5wYXJhbXMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgUGF0aCBcIiR7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGUgdHlwZSBpcyBuZXZlclxyXG4gICAgICAgICAgICAgICAgcmF3TG9jYXRpb24ucGF0aH1cIiB3YXMgcGFzc2VkIHdpdGggcGFyYW1zIGJ1dCB0aGV5IHdpbGwgYmUgaWdub3JlZC4gVXNlIGEgbmFtZWQgcm91dGUgYWxvbmdzaWRlIHBhcmFtcyBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hdGNoZXJMb2NhdGlvbiA9IGFzc2lnbih7fSwgcmF3TG9jYXRpb24sIHtcclxuICAgICAgICAgICAgICAgIHBhdGg6IHBhcnNlVVJMKHBhcnNlUXVlcnkkMSwgcmF3TG9jYXRpb24ucGF0aCwgY3VycmVudExvY2F0aW9uLnBhdGgpLnBhdGgsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSBudWxsaXNoIHBhcmFtXHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFBhcmFtcyA9IGFzc2lnbih7fSwgcmF3TG9jYXRpb24ucGFyYW1zKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0UGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0UGFyYW1zW2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRQYXJhbXNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwYXNzIGVuY29kZWQgdmFsdWVzIHRvIHRoZSBtYXRjaGVyLCBzbyBpdCBjYW4gcHJvZHVjZSBlbmNvZGVkIHBhdGggYW5kIGZ1bGxQYXRoXHJcbiAgICAgICAgICAgIG1hdGNoZXJMb2NhdGlvbiA9IGFzc2lnbih7fSwgcmF3TG9jYXRpb24sIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtczogZW5jb2RlUGFyYW1zKHJhd0xvY2F0aW9uLnBhcmFtcyksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBjdXJyZW50IGxvY2F0aW9uIHBhcmFtcyBhcmUgZGVjb2RlZCwgd2UgbmVlZCB0byBlbmNvZGUgdGhlbSBpbiBjYXNlIHRoZVxyXG4gICAgICAgICAgICAvLyBtYXRjaGVyIG1lcmdlcyB0aGUgcGFyYW1zXHJcbiAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbi5wYXJhbXMgPSBlbmNvZGVQYXJhbXMoY3VycmVudExvY2F0aW9uLnBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZXIucmVzb2x2ZShtYXRjaGVyTG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAgICAgY29uc3QgaGFzaCA9IHJhd0xvY2F0aW9uLmhhc2ggfHwgJyc7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBoYXNoICYmICFoYXNoLnN0YXJ0c1dpdGgoJyMnKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBBIFxcYGhhc2hcXGAgc2hvdWxkIGFsd2F5cyBzdGFydCB3aXRoIHRoZSBjaGFyYWN0ZXIgXCIjXCIuIFJlcGxhY2UgXCIke2hhc2h9XCIgd2l0aCBcIiMke2hhc2h9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoZSBtYXRjaGVyIG1pZ2h0IGhhdmUgbWVyZ2VkIGN1cnJlbnQgbG9jYXRpb24gcGFyYW1zLCBzb1xyXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gcnVuIHRoZSBkZWNvZGluZyBhZ2FpblxyXG4gICAgICAgIG1hdGNoZWRSb3V0ZS5wYXJhbXMgPSBub3JtYWxpemVQYXJhbXMoZGVjb2RlUGFyYW1zKG1hdGNoZWRSb3V0ZS5wYXJhbXMpKTtcclxuICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHN0cmluZ2lmeVVSTChzdHJpbmdpZnlRdWVyeSQxLCBhc3NpZ24oe30sIHJhd0xvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgIGhhc2g6IGVuY29kZUhhc2goaGFzaCksXHJcbiAgICAgICAgICAgIHBhdGg6IG1hdGNoZWRSb3V0ZS5wYXRoLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBjb25zdCBocmVmID0gcm91dGVySGlzdG9yeS5jcmVhdGVIcmVmKGZ1bGxQYXRoKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGlmIChocmVmLnN0YXJ0c1dpdGgoJy8vJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYExvY2F0aW9uIFwiJHtyYXdMb2NhdGlvbn1cIiByZXNvbHZlZCB0byBcIiR7aHJlZn1cIi4gQSByZXNvbHZlZCBsb2NhdGlvbiBjYW5ub3Qgc3RhcnQgd2l0aCBtdWx0aXBsZSBzbGFzaGVzLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFtYXRjaGVkUm91dGUubWF0Y2hlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE5vIG1hdGNoIGZvdW5kIGZvciBsb2NhdGlvbiB3aXRoIHBhdGggXCIkeydwYXRoJyBpbiByYXdMb2NhdGlvbiA/IHJhd0xvY2F0aW9uLnBhdGggOiByYXdMb2NhdGlvbn1cImApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhc3NpZ24oe1xyXG4gICAgICAgICAgICBmdWxsUGF0aCxcclxuICAgICAgICAgICAgLy8ga2VlcCB0aGUgaGFzaCBlbmNvZGVkIHNvIGZ1bGxQYXRoIGlzIGVmZmVjdGl2ZWx5IHBhdGggKyBlbmNvZGVkUXVlcnkgK1xyXG4gICAgICAgICAgICAvLyBoYXNoXHJcbiAgICAgICAgICAgIGhhc2gsXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBcclxuICAgICAgICAgICAgLy8gaWYgdGhlIHVzZXIgaXMgdXNpbmcgYSBjdXN0b20gcXVlcnkgbGliIGxpa2UgcXMsIHdlIG1pZ2h0IGhhdmVcclxuICAgICAgICAgICAgLy8gbmVzdGVkIG9iamVjdHMsIHNvIHdlIGtlZXAgdGhlIHF1ZXJ5IGFzIGlzLCBtZWFuaW5nIGl0IGNhbiBjb250YWluXHJcbiAgICAgICAgICAgIC8vIG51bWJlcnMgYXQgYCRyb3V0ZS5xdWVyeWAsIGJ1dCBhdCB0aGUgcG9pbnQsIHRoZSB1c2VyIHdpbGwgaGF2ZSB0b1xyXG4gICAgICAgICAgICAvLyB1c2UgdGhlaXIgb3duIHR5cGUgYW55d2F5LlxyXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvcm91dGVyL2lzc3Vlcy8zMjgjaXNzdWVjb21tZW50LTY0OTQ4MTU2N1xyXG4gICAgICAgICAgICBzdHJpbmdpZnlRdWVyeSQxID09PSBzdHJpbmdpZnlRdWVyeVxyXG4gICAgICAgICAgICAgICAgPyBub3JtYWxpemVRdWVyeShyYXdMb2NhdGlvbi5xdWVyeSlcclxuICAgICAgICAgICAgICAgIDogKHJhd0xvY2F0aW9uLnF1ZXJ5IHx8IHt9KSxcclxuICAgICAgICB9LCBtYXRjaGVkUm91dGUsIHtcclxuICAgICAgICAgICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgaHJlZixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGxvY2F0aW9uQXNPYmplY3QodG8pIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRvID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICA/IHBhcnNlVVJMKHBhcnNlUXVlcnkkMSwgdG8sIGN1cnJlbnRSb3V0ZS52YWx1ZS5wYXRoKVxyXG4gICAgICAgICAgICA6IGFzc2lnbih7fSwgdG8pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24odG8sIGZyb20pIHtcclxuICAgICAgICBpZiAocGVuZGluZ0xvY2F0aW9uICE9PSB0bykge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoOCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQ0FOQ0VMTEVEICovLCB7XHJcbiAgICAgICAgICAgICAgICBmcm9tLFxyXG4gICAgICAgICAgICAgICAgdG8sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2godG8pIHtcclxuICAgICAgICByZXR1cm4gcHVzaFdpdGhSZWRpcmVjdCh0byk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXBsYWNlKHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHB1c2goYXNzaWduKGxvY2F0aW9uQXNPYmplY3QodG8pLCB7IHJlcGxhY2U6IHRydWUgfSkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVkaXJlY3RSZWNvcmQodG8pIHtcclxuICAgICAgICBjb25zdCBsYXN0TWF0Y2hlZCA9IHRvLm1hdGNoZWRbdG8ubWF0Y2hlZC5sZW5ndGggLSAxXTtcclxuICAgICAgICBpZiAobGFzdE1hdGNoZWQgJiYgbGFzdE1hdGNoZWQucmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgeyByZWRpcmVjdCB9ID0gbGFzdE1hdGNoZWQ7XHJcbiAgICAgICAgICAgIGxldCBuZXdUYXJnZXRMb2NhdGlvbiA9IHR5cGVvZiByZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJyA/IHJlZGlyZWN0KHRvKSA6IHJlZGlyZWN0O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld1RhcmdldExvY2F0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgbmV3VGFyZ2V0TG9jYXRpb24gPVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1RhcmdldExvY2F0aW9uLmluY2x1ZGVzKCc/JykgfHwgbmV3VGFyZ2V0TG9jYXRpb24uaW5jbHVkZXMoJyMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChuZXdUYXJnZXRMb2NhdGlvbiA9IGxvY2F0aW9uQXNPYmplY3QobmV3VGFyZ2V0TG9jYXRpb24pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IC8vIGZvcmNlIGVtcHR5IHBhcmFtc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBwYXRoOiBuZXdUYXJnZXRMb2NhdGlvbiB9O1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogZm9yY2UgZW1wdHkgcGFyYW1zIHdoZW4gYSBzdHJpbmcgaXMgcGFzc2VkIHRvIGxldFxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJvdXRlciBwYXJzZSB0aGVtIGFnYWluXHJcbiAgICAgICAgICAgICAgICBuZXdUYXJnZXRMb2NhdGlvbi5wYXJhbXMgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAhKCdwYXRoJyBpbiBuZXdUYXJnZXRMb2NhdGlvbikgJiZcclxuICAgICAgICAgICAgICAgICEoJ25hbWUnIGluIG5ld1RhcmdldExvY2F0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCByZWRpcmVjdCBmb3VuZDpcXG4ke0pTT04uc3RyaW5naWZ5KG5ld1RhcmdldExvY2F0aW9uLCBudWxsLCAyKX1cXG4gd2hlbiBuYXZpZ2F0aW5nIHRvIFwiJHt0by5mdWxsUGF0aH1cIi4gQSByZWRpcmVjdCBtdXN0IGNvbnRhaW4gYSBuYW1lIG9yIHBhdGguIFRoaXMgd2lsbCBicmVhayBpbiBwcm9kdWN0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlZGlyZWN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICBxdWVyeTogdG8ucXVlcnksXHJcbiAgICAgICAgICAgICAgICBoYXNoOiB0by5oYXNoLFxyXG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdHJhbnNmZXJyaW5nIHBhcmFtcyBpZiB0aGUgcmVkaXJlY3QgaGFzIGEgcGF0aFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiAncGF0aCcgaW4gbmV3VGFyZ2V0TG9jYXRpb24gPyB7fSA6IHRvLnBhcmFtcyxcclxuICAgICAgICAgICAgfSwgbmV3VGFyZ2V0TG9jYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2hXaXRoUmVkaXJlY3QodG8sIHJlZGlyZWN0ZWRGcm9tKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0TG9jYXRpb24gPSAocGVuZGluZ0xvY2F0aW9uID0gcmVzb2x2ZSh0bykpO1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50Um91dGUudmFsdWU7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRvLnN0YXRlO1xyXG4gICAgICAgIGNvbnN0IGZvcmNlID0gdG8uZm9yY2U7XHJcbiAgICAgICAgLy8gdG8gY291bGQgYmUgYSBzdHJpbmcgd2hlcmUgYHJlcGxhY2VgIGlzIGEgZnVuY3Rpb25cclxuICAgICAgICBjb25zdCByZXBsYWNlID0gdG8ucmVwbGFjZSA9PT0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBzaG91bGRSZWRpcmVjdCA9IGhhbmRsZVJlZGlyZWN0UmVjb3JkKHRhcmdldExvY2F0aW9uKTtcclxuICAgICAgICBpZiAoc2hvdWxkUmVkaXJlY3QpXHJcbiAgICAgICAgICAgIHJldHVybiBwdXNoV2l0aFJlZGlyZWN0KGFzc2lnbihsb2NhdGlvbkFzT2JqZWN0KHNob3VsZFJlZGlyZWN0KSwge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6IHR5cGVvZiBzaG91bGRSZWRpcmVjdCA9PT0gJ29iamVjdCdcclxuICAgICAgICAgICAgICAgICAgICA/IGFzc2lnbih7fSwgZGF0YSwgc2hvdWxkUmVkaXJlY3Quc3RhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgZm9yY2UsXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlLFxyXG4gICAgICAgICAgICB9KSwgXHJcbiAgICAgICAgICAgIC8vIGtlZXAgb3JpZ2luYWwgcmVkaXJlY3RlZEZyb20gaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tIHx8IHRhcmdldExvY2F0aW9uKTtcclxuICAgICAgICAvLyBpZiBpdCB3YXMgYSByZWRpcmVjdCB3ZSBhbHJlYWR5IGNhbGxlZCBgcHVzaFdpdGhSZWRpcmVjdGAgYWJvdmVcclxuICAgICAgICBjb25zdCB0b0xvY2F0aW9uID0gdGFyZ2V0TG9jYXRpb247XHJcbiAgICAgICAgdG9Mb2NhdGlvbi5yZWRpcmVjdGVkRnJvbSA9IHJlZGlyZWN0ZWRGcm9tO1xyXG4gICAgICAgIGxldCBmYWlsdXJlO1xyXG4gICAgICAgIGlmICghZm9yY2UgJiYgaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSQxLCBmcm9tLCB0YXJnZXRMb2NhdGlvbikpIHtcclxuICAgICAgICAgICAgZmFpbHVyZSA9IGNyZWF0ZVJvdXRlckVycm9yKDE2IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9EVVBMSUNBVEVEICovLCB7IHRvOiB0b0xvY2F0aW9uLCBmcm9tIH0pO1xyXG4gICAgICAgICAgICAvLyB0cmlnZ2VyIHNjcm9sbCB0byBhbGxvdyBzY3JvbGxpbmcgdG8gdGhlIHNhbWUgYW5jaG9yXHJcbiAgICAgICAgICAgIGhhbmRsZVNjcm9sbChmcm9tLCBmcm9tLCBcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBhIHB1c2gsIHRoZSBvbmx5IHdheSBmb3IgaXQgdG8gYmUgdHJpZ2dlcmVkIGZyb20gYVxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5Lmxpc3RlbiBpcyB3aXRoIGEgcmVkaXJlY3QsIHdoaWNoIG1ha2VzIGl0IGJlY29tZSBhIHB1c2hcclxuICAgICAgICAgICAgdHJ1ZSwgXHJcbiAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IGJlIHRoZSBmaXJzdCBuYXZpZ2F0aW9uIGJlY2F1c2UgdGhlIGluaXRpYWwgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gY2Fubm90IGJlIG1hbnVhbGx5IG5hdmlnYXRlZCB0b1xyXG4gICAgICAgICAgICBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoZmFpbHVyZSA/IFByb21pc2UucmVzb2x2ZShmYWlsdXJlKSA6IG5hdmlnYXRlKHRvTG9jYXRpb24sIGZyb20pKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yKVxyXG4gICAgICAgICAgICA/IC8vIG5hdmlnYXRpb24gcmVkaXJlY3RzIHN0aWxsIG1hcmsgdGhlIHJvdXRlciBhcyByZWFkeVxyXG4gICAgICAgICAgICAgICAgaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvciwgMiAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8pXHJcbiAgICAgICAgICAgICAgICAgICAgPyBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIDogbWFya0FzUmVhZHkoZXJyb3IpIC8vIGFsc28gcmV0dXJucyB0aGUgZXJyb3JcclxuICAgICAgICAgICAgOiAvLyByZWplY3QgYW55IHVua25vd24gZXJyb3JcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJFcnJvcihlcnJvciwgdG9Mb2NhdGlvbiwgZnJvbSkpXHJcbiAgICAgICAgICAgIC50aGVuKChmYWlsdXJlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYXZpZ2F0aW9uRmFpbHVyZShmYWlsdXJlLCAyIC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9HVUFSRF9SRURJUkVDVCAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSByZWRpcmVjdGluZyB0byB0aGUgc2FtZSBsb2NhdGlvbiB3ZSB3ZXJlIGFscmVhZHkgYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSQxLCByZXNvbHZlKGZhaWx1cmUudG8pLCB0b0xvY2F0aW9uKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgd2UgaGF2ZSBkb25lIGl0IGEgY291cGxlIG9mIHRpbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFkZGVkIG9ubHkgaW4gZGV2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyZWRpcmVjdGVkRnJvbS5fY291bnQgPSByZWRpcmVjdGVkRnJvbS5fY291bnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tLl9jb3VudCArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMSkgPiAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBEZXRlY3RlZCBhbiBpbmZpbml0ZSByZWRpcmVjdGlvbiBpbiBhIG5hdmlnYXRpb24gZ3VhcmQgd2hlbiBnb2luZyBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0b0xvY2F0aW9uLmZ1bGxQYXRofVwiLiBBYm9ydGluZyB0byBhdm9pZCBhIFN0YWNrIE92ZXJmbG93LiBUaGlzIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbiBpZiBub3QgZml4ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0luZmluaXRlIHJlZGlyZWN0IGluIG5hdmlnYXRpb24gZ3VhcmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwdXNoV2l0aFJlZGlyZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlIGFuIGV4aXN0aW5nIHJlcGxhY2VtZW50IGJ1dCBhbGxvdyB0aGUgcmVkaXJlY3QgdG8gb3ZlcnJpZGUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZSxcclxuICAgICAgICAgICAgICAgICAgICB9LCBsb2NhdGlvbkFzT2JqZWN0KGZhaWx1cmUudG8pLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0eXBlb2YgZmFpbHVyZS50byA9PT0gJ29iamVjdCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYXNzaWduKHt9LCBkYXRhLCBmYWlsdXJlLnRvLnN0YXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSxcclxuICAgICAgICAgICAgICAgICAgICB9KSwgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHJlZGlyZWN0ZWRGcm9tIGlmIGFueVxyXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tIHx8IHRvTG9jYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgZmFpbCB3ZSBkb24ndCBmaW5hbGl6ZSB0aGUgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICAgICAgZmFpbHVyZSA9IGZpbmFsaXplTmF2aWdhdGlvbih0b0xvY2F0aW9uLCBmcm9tLCB0cnVlLCByZXBsYWNlLCBkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmlnZ2VyQWZ0ZXJFYWNoKHRvTG9jYXRpb24sIGZyb20sIGZhaWx1cmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHRvIHJlamVjdCBhbmQgc2tpcCBhbGwgbmF2aWdhdGlvbiBndWFyZHMgaWYgYSBuZXcgbmF2aWdhdGlvbiBoYXBwZW5lZFxyXG4gICAgICogQHBhcmFtIHRvXHJcbiAgICAgKiBAcGFyYW0gZnJvbVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdCh0bywgZnJvbSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24odG8sIGZyb20pO1xyXG4gICAgICAgIHJldHVybiBlcnJvciA/IFByb21pc2UucmVqZWN0KGVycm9yKSA6IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gVE9ETzogcmVmYWN0b3IgdGhlIHdob2xlIGJlZm9yZSBndWFyZHMgYnkgaW50ZXJuYWxseSB1c2luZyByb3V0ZXIuYmVmb3JlRWFjaFxyXG4gICAgZnVuY3Rpb24gbmF2aWdhdGUodG8sIGZyb20pIHtcclxuICAgICAgICBsZXQgZ3VhcmRzO1xyXG4gICAgICAgIGNvbnN0IFtsZWF2aW5nUmVjb3JkcywgdXBkYXRpbmdSZWNvcmRzLCBlbnRlcmluZ1JlY29yZHNdID0gZXh0cmFjdENoYW5naW5nUmVjb3Jkcyh0bywgZnJvbSk7XHJcbiAgICAgICAgLy8gYWxsIGNvbXBvbmVudHMgaGVyZSBoYXZlIGJlZW4gcmVzb2x2ZWQgb25jZSBiZWNhdXNlIHdlIGFyZSBsZWF2aW5nXHJcbiAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHMobGVhdmluZ1JlY29yZHMucmV2ZXJzZSgpLCAnYmVmb3JlUm91dGVMZWF2ZScsIHRvLCBmcm9tKTtcclxuICAgICAgICAvLyBsZWF2aW5nUmVjb3JkcyBpcyBhbHJlYWR5IHJldmVyc2VkXHJcbiAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgbGVhdmluZ1JlY29yZHMpIHtcclxuICAgICAgICAgICAgcmVjb3JkLmxlYXZlR3VhcmRzLmZvckVhY2goZ3VhcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrID0gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb25BbmRSZWplY3QuYmluZChudWxsLCB0bywgZnJvbSk7XHJcbiAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZVJvdXRlTGVhdmUgZ3VhcmRzXHJcbiAgICAgICAgcmV0dXJuIChydW5HdWFyZFF1ZXVlKGd1YXJkcylcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBnbG9iYWwgZ3VhcmRzIGJlZm9yZUVhY2hcclxuICAgICAgICAgICAgZ3VhcmRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3VhcmQgb2YgYmVmb3JlR3VhcmRzLmxpc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpbiBjb21wb25lbnRzIGJlZm9yZVJvdXRlVXBkYXRlXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKHVwZGF0aW5nUmVjb3JkcywgJ2JlZm9yZVJvdXRlVXBkYXRlJywgdG8sIGZyb20pO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB1cGRhdGluZ1JlY29yZHMpIHtcclxuICAgICAgICAgICAgICAgIHJlY29yZC51cGRhdGVHdWFyZHMuZm9yRWFjaChndWFyZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlRW50ZXIgZ3VhcmRzXHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayB0aGUgcm91dGUgYmVmb3JlRW50ZXJcclxuICAgICAgICAgICAgZ3VhcmRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHRvLm1hdGNoZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCB0cmlnZ2VyIGJlZm9yZUVudGVyIG9uIHJldXNlZCB2aWV3c1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5iZWZvcmVFbnRlciAmJiAhZnJvbS5tYXRjaGVkLmluY2x1ZGVzKHJlY29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShyZWNvcmQuYmVmb3JlRW50ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYmVmb3JlRW50ZXIgb2YgcmVjb3JkLmJlZm9yZUVudGVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihiZWZvcmVFbnRlciwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4ocmVjb3JkLmJlZm9yZUVudGVyLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gTk9URTogYXQgdGhpcyBwb2ludCB0by5tYXRjaGVkIGlzIG5vcm1hbGl6ZWQgYW5kIGRvZXMgbm90IGNvbnRhaW4gYW55ICgpID0+IFByb21pc2U8Q29tcG9uZW50PlxyXG4gICAgICAgICAgICAvLyBjbGVhciBleGlzdGluZyBlbnRlckNhbGxiYWNrcywgdGhlc2UgYXJlIGFkZGVkIGJ5IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzXHJcbiAgICAgICAgICAgIHRvLm1hdGNoZWQuZm9yRWFjaChyZWNvcmQgPT4gKHJlY29yZC5lbnRlckNhbGxiYWNrcyA9IHt9KSk7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGluLWNvbXBvbmVudCBiZWZvcmVSb3V0ZUVudGVyXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKGVudGVyaW5nUmVjb3JkcywgJ2JlZm9yZVJvdXRlRW50ZXInLCB0bywgZnJvbSk7XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlRW50ZXIgZ3VhcmRzXHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBnbG9iYWwgZ3VhcmRzIGJlZm9yZVJlc29sdmVcclxuICAgICAgICAgICAgZ3VhcmRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3VhcmQgb2YgYmVmb3JlUmVzb2x2ZUd1YXJkcy5saXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vIGNhdGNoIGFueSBuYXZpZ2F0aW9uIGNhbmNlbGVkXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIsIDggLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0NBTkNFTExFRCAqLylcclxuICAgICAgICAgICAgPyBlcnJcclxuICAgICAgICAgICAgOiBQcm9taXNlLnJlamVjdChlcnIpKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyQWZ0ZXJFYWNoKHRvLCBmcm9tLCBmYWlsdXJlKSB7XHJcbiAgICAgICAgLy8gbmF2aWdhdGlvbiBpcyBjb25maXJtZWQsIGNhbGwgYWZ0ZXJHdWFyZHNcclxuICAgICAgICAvLyBUT0RPOiB3cmFwIHdpdGggZXJyb3IgaGFuZGxlcnNcclxuICAgICAgICBmb3IgKGNvbnN0IGd1YXJkIG9mIGFmdGVyR3VhcmRzLmxpc3QoKSlcclxuICAgICAgICAgICAgZ3VhcmQodG8sIGZyb20sIGZhaWx1cmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAtIENsZWFucyB1cCBhbnkgbmF2aWdhdGlvbiBndWFyZHNcclxuICAgICAqIC0gQ2hhbmdlcyB0aGUgdXJsIGlmIG5lY2Vzc2FyeVxyXG4gICAgICogLSBDYWxscyB0aGUgc2Nyb2xsQmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZmluYWxpemVOYXZpZ2F0aW9uKHRvTG9jYXRpb24sIGZyb20sIGlzUHVzaCwgcmVwbGFjZSwgZGF0YSkge1xyXG4gICAgICAgIC8vIGEgbW9yZSByZWNlbnQgbmF2aWdhdGlvbiB0b29rIHBsYWNlXHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbih0b0xvY2F0aW9uLCBmcm9tKTtcclxuICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAvLyBvbmx5IGNvbnNpZGVyIGFzIHB1c2ggaWYgaXQncyBub3QgdGhlIGZpcnN0IG5hdmlnYXRpb25cclxuICAgICAgICBjb25zdCBpc0ZpcnN0TmF2aWdhdGlvbiA9IGZyb20gPT09IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSAhaXNCcm93c2VyID8ge30gOiBoaXN0b3J5LnN0YXRlO1xyXG4gICAgICAgIC8vIGNoYW5nZSBVUkwgb25seSBpZiB0aGUgdXNlciBkaWQgYSBwdXNoL3JlcGxhY2UgYW5kIGlmIGl0J3Mgbm90IHRoZSBpbml0aWFsIG5hdmlnYXRpb24gYmVjYXVzZVxyXG4gICAgICAgIC8vIGl0J3MganVzdCByZWZsZWN0aW5nIHRoZSB1cmxcclxuICAgICAgICBpZiAoaXNQdXNoKSB7XHJcbiAgICAgICAgICAgIC8vIG9uIHRoZSBpbml0aWFsIG5hdmlnYXRpb24sIHdlIHdhbnQgdG8gcmV1c2UgdGhlIHNjcm9sbCBwb3NpdGlvbiBmcm9tXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhdGUgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIGlmIChyZXBsYWNlIHx8IGlzRmlyc3ROYXZpZ2F0aW9uKVxyXG4gICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5yZXBsYWNlKHRvTG9jYXRpb24uZnVsbFBhdGgsIGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBpc0ZpcnN0TmF2aWdhdGlvbiAmJiBzdGF0ZSAmJiBzdGF0ZS5zY3JvbGwsXHJcbiAgICAgICAgICAgICAgICB9LCBkYXRhKSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkucHVzaCh0b0xvY2F0aW9uLmZ1bGxQYXRoLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWNjZXB0IGN1cnJlbnQgbmF2aWdhdGlvblxyXG4gICAgICAgIGN1cnJlbnRSb3V0ZS52YWx1ZSA9IHRvTG9jYXRpb247XHJcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRvTG9jYXRpb24sIGZyb20sIGlzUHVzaCwgaXNGaXJzdE5hdmlnYXRpb24pO1xyXG4gICAgICAgIG1hcmtBc1JlYWR5KCk7XHJcbiAgICB9XHJcbiAgICBsZXQgcmVtb3ZlSGlzdG9yeUxpc3RlbmVyO1xyXG4gICAgLy8gYXR0YWNoIGxpc3RlbmVyIHRvIGhpc3RvcnkgdG8gdHJpZ2dlciBuYXZpZ2F0aW9uc1xyXG4gICAgZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgLy8gYXZvaWQgc2V0dGluZyB1cCBsaXN0ZW5lcnMgdHdpY2UgZHVlIHRvIGFuIGludmFsaWQgZmlyc3QgbmF2aWdhdGlvblxyXG4gICAgICAgIGlmIChyZW1vdmVIaXN0b3J5TGlzdGVuZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICByZW1vdmVIaXN0b3J5TGlzdGVuZXIgPSByb3V0ZXJIaXN0b3J5Lmxpc3RlbigodG8sIF9mcm9tLCBpbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcm91dGVyLmxpc3RlbmluZylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgLy8gY2Fubm90IGJlIGEgcmVkaXJlY3Qgcm91dGUgYmVjYXVzZSBpdCB3YXMgaW4gaGlzdG9yeVxyXG4gICAgICAgICAgICBjb25zdCB0b0xvY2F0aW9uID0gcmVzb2x2ZSh0byk7XHJcbiAgICAgICAgICAgIC8vIGR1ZSB0byBkeW5hbWljIHJvdXRpbmcsIGFuZCB0byBoYXNoIGhpc3Rvcnkgd2l0aCBtYW51YWwgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICAvLyAobWFudWFsbHkgY2hhbmdpbmcgdGhlIHVybCBvciBjYWxsaW5nIGhpc3RvcnkuaGFzaCA9ICcjL3NvbWV3aGVyZScpLFxyXG4gICAgICAgICAgICAvLyB0aGVyZSBjb3VsZCBiZSBhIHJlZGlyZWN0IHJlY29yZCBpbiBoaXN0b3J5XHJcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFJlZGlyZWN0ID0gaGFuZGxlUmVkaXJlY3RSZWNvcmQodG9Mb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRSZWRpcmVjdCkge1xyXG4gICAgICAgICAgICAgICAgcHVzaFdpdGhSZWRpcmVjdChhc3NpZ24oc2hvdWxkUmVkaXJlY3QsIHsgcmVwbGFjZTogdHJ1ZSB9KSwgdG9Mb2NhdGlvbikuY2F0Y2gobm9vcCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdG9Mb2NhdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgZnJvbSA9IGN1cnJlbnRSb3V0ZS52YWx1ZTtcclxuICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIG1vdmVkIHRvIHdlYiBoaXN0b3J5P1xyXG4gICAgICAgICAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBzYXZlU2Nyb2xsUG9zaXRpb24oZ2V0U2Nyb2xsS2V5KGZyb20uZnVsbFBhdGgsIGluZm8uZGVsdGEpLCBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmF2aWdhdGUodG9Mb2NhdGlvbiwgZnJvbSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCA0IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9BQk9SVEVEICovIHwgOCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQ0FOQ0VMTEVEICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCAyIC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9HVUFSRF9SRURJUkVDVCAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBIZXJlIHdlIGNvdWxkIGNhbGwgaWYgKGluZm8uZGVsdGEpIHJvdXRlckhpc3RvcnkuZ28oLWluZm8uZGVsdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2UpIGJ1dCB0aGlzIGlzIGJ1ZyBwcm9uZSBhcyB3ZSBoYXZlIG5vIHdheSB0byB3YWl0IHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hdmlnYXRpb24gdG8gYmUgZmluaXNoZWQgYmVmb3JlIGNhbGxpbmcgcHVzaFdpdGhSZWRpcmVjdC4gVXNpbmdcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIHNldFRpbWVvdXQgb2YgMTZtcyBzZWVtcyB0byB3b3JrIGJ1dCB0aGVyZSBpcyBubyBndWFyYW50ZWUgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgdG8gd29yayBvbiBldmVyeSBicm93c2VyLiBTbyBpbnN0ZWFkIHdlIGRvIG5vdCByZXN0b3JlIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhpc3RvcnkgZW50cnkgYW5kIHRyaWdnZXIgYSBuZXcgbmF2aWdhdGlvbiBhcyByZXF1ZXN0ZWQgYnkgdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmF2aWdhdGlvbiBndWFyZC5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZXJyb3IgaXMgYWxyZWFkeSBoYW5kbGVkIGJ5IHJvdXRlci5wdXNoIHdlIGp1c3Qgd2FudCB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvZ2dpbmcgdGhlIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdpdGhSZWRpcmVjdChlcnJvci50bywgdG9Mb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIGFuIHVuY2F1Z2h0IHJlamVjdGlvbiwgbGV0IHB1c2ggY2FsbCB0cmlnZ2VyRXJyb3JcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZhaWx1cmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYW51YWwgY2hhbmdlIGluIGhhc2ggaGlzdG9yeSAjOTE2IGVuZGluZyB1cCBpbiB0aGUgVVJMIG5vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2luZywgYnV0IGl0IHdhcyBjaGFuZ2VkIGJ5IHRoZSBtYW51YWwgdXJsIGNoYW5nZSwgc28gd2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byBtYW51YWxseSBjaGFuZ2UgaXQgb3Vyc2VsdmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGZhaWx1cmUsIDQgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0FCT1JURUQgKi8gfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTYgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0RVUExJQ0FURUQgKi8pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaW5mby5kZWx0YSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby50eXBlID09PSBOYXZpZ2F0aW9uVHlwZS5wb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkuZ28oLTEsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChub29wKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCB0aGUgdGhlbiBicmFuY2hcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCByZXN0b3JlIGhpc3Rvcnkgb24gdW5rbm93biBkaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgIGlmIChpbmZvLmRlbHRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdW5yZWNvZ25pemVkIGVycm9yLCB0cmFuc2ZlciB0byB0aGUgZ2xvYmFsIGhhbmRsZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyRXJyb3IoZXJyb3IsIHRvTG9jYXRpb24sIGZyb20pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgIGZhaWx1cmUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmUgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxpemVOYXZpZ2F0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciBuYXZpZ2F0aW9uLCBhbGwgbWF0Y2hlZCBjb21wb25lbnRzIGFyZSByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0xvY2F0aW9uLCBmcm9tLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXZlcnQgdGhlIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uZGVsdGEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBuZXcgbmF2aWdhdGlvbiBoYXMgYmVlbiB0cmlnZ2VyZWQsIHNvIHdlIGRvIG5vdCB3YW50IHRvIHJldmVydCwgdGhhdCB3aWxsIGNoYW5nZSB0aGUgY3VycmVudCBoaXN0b3J5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVudHJ5IHdoaWxlIGEgZGlmZmVyZW50IHJvdXRlIGlzIGRpc3BsYXllZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhaXNOYXZpZ2F0aW9uRmFpbHVyZShmYWlsdXJlLCA4IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkuZ28oLWluZm8uZGVsdGEsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5mby50eXBlID09PSBOYXZpZ2F0aW9uVHlwZS5wb3AgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNOYXZpZ2F0aW9uRmFpbHVyZShmYWlsdXJlLCA0IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9BQk9SVEVEICovIHwgMTYgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0RVUExJQ0FURUQgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hbnVhbCBjaGFuZ2UgaW4gaGFzaCBoaXN0b3J5ICM5MTZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBsaWtlIGEgcHVzaCBidXQgbGFja3MgdGhlIGluZm9ybWF0aW9uIG9mIHRoZSBkaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRyaWdnZXJBZnRlckVhY2godG9Mb2NhdGlvbiwgZnJvbSwgZmFpbHVyZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2gobm9vcCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBJbml0aWFsaXphdGlvbiBhbmQgRXJyb3JzXHJcbiAgICBsZXQgcmVhZHlIYW5kbGVycyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgbGV0IGVycm9ySGFuZGxlcnMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGxldCByZWFkeTtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlciBlcnJvckhhbmRsZXJzIGFkZGVkIHZpYSBvbkVycm9yIGFuZCB0aHJvd3MgdGhlIGVycm9yIGFzIHdlbGxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXJyb3IgLSBlcnJvciB0byB0aHJvd1xyXG4gICAgICogQHBhcmFtIHRvIC0gbG9jYXRpb24gd2Ugd2VyZSBuYXZpZ2F0aW5nIHRvIHdoZW4gdGhlIGVycm9yIGhhcHBlbmVkXHJcbiAgICAgKiBAcGFyYW0gZnJvbSAtIGxvY2F0aW9uIHdlIHdlcmUgbmF2aWdhdGluZyBmcm9tIHdoZW4gdGhlIGVycm9yIGhhcHBlbmVkXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgZXJyb3IgYXMgYSByZWplY3RlZCBwcm9taXNlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRyaWdnZXJFcnJvcihlcnJvciwgdG8sIGZyb20pIHtcclxuICAgICAgICBtYXJrQXNSZWFkeShlcnJvcik7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGVycm9ySGFuZGxlcnMubGlzdCgpO1xyXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsaXN0LmZvckVhY2goaGFuZGxlciA9PiBoYW5kbGVyKGVycm9yLCB0bywgZnJvbSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybigndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpc1JlYWR5KCkge1xyXG4gICAgICAgIGlmIChyZWFkeSAmJiBjdXJyZW50Um91dGUudmFsdWUgIT09IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICByZWFkeUhhbmRsZXJzLmFkZChbcmVzb2x2ZSwgcmVqZWN0XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtYXJrQXNSZWFkeShlcnIpIHtcclxuICAgICAgICBpZiAoIXJlYWR5KSB7XHJcbiAgICAgICAgICAgIC8vIHN0aWxsIG5vdCByZWFkeSBpZiBhbiBlcnJvciBoYXBwZW5lZFxyXG4gICAgICAgICAgICByZWFkeSA9ICFlcnI7XHJcbiAgICAgICAgICAgIHNldHVwTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgICAgIHJlYWR5SGFuZGxlcnNcclxuICAgICAgICAgICAgICAgIC5saXN0KClcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChbcmVzb2x2ZSwgcmVqZWN0XSkgPT4gKGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpKSk7XHJcbiAgICAgICAgICAgIHJlYWR5SGFuZGxlcnMucmVzZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVycjtcclxuICAgIH1cclxuICAgIC8vIFNjcm9sbCBiZWhhdmlvclxyXG4gICAgZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKHRvLCBmcm9tLCBpc1B1c2gsIGlzRmlyc3ROYXZpZ2F0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgeyBzY3JvbGxCZWhhdmlvciB9ID0gb3B0aW9ucztcclxuICAgICAgICBpZiAoIWlzQnJvd3NlciB8fCAhc2Nyb2xsQmVoYXZpb3IpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9ICghaXNQdXNoICYmIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oZ2V0U2Nyb2xsS2V5KHRvLmZ1bGxQYXRoLCAwKSkpIHx8XHJcbiAgICAgICAgICAgICgoaXNGaXJzdE5hdmlnYXRpb24gfHwgIWlzUHVzaCkgJiZcclxuICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3RhdGUgJiZcclxuICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3RhdGUuc2Nyb2xsKSB8fFxyXG4gICAgICAgICAgICBudWxsO1xyXG4gICAgICAgIHJldHVybiBuZXh0VGljaygpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHNjcm9sbEJlaGF2aW9yKHRvLCBmcm9tLCBzY3JvbGxQb3NpdGlvbikpXHJcbiAgICAgICAgICAgIC50aGVuKHBvc2l0aW9uID0+IHBvc2l0aW9uICYmIHNjcm9sbFRvUG9zaXRpb24ocG9zaXRpb24pKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHRyaWdnZXJFcnJvcihlcnIsIHRvLCBmcm9tKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBnbyA9IChkZWx0YSkgPT4gcm91dGVySGlzdG9yeS5nbyhkZWx0YSk7XHJcbiAgICBsZXQgc3RhcnRlZDtcclxuICAgIGNvbnN0IGluc3RhbGxlZEFwcHMgPSBuZXcgU2V0KCk7XHJcbiAgICBjb25zdCByb3V0ZXIgPSB7XHJcbiAgICAgICAgY3VycmVudFJvdXRlLFxyXG4gICAgICAgIGxpc3RlbmluZzogdHJ1ZSxcclxuICAgICAgICBhZGRSb3V0ZSxcclxuICAgICAgICByZW1vdmVSb3V0ZSxcclxuICAgICAgICBoYXNSb3V0ZSxcclxuICAgICAgICBnZXRSb3V0ZXMsXHJcbiAgICAgICAgcmVzb2x2ZSxcclxuICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgIHB1c2gsXHJcbiAgICAgICAgcmVwbGFjZSxcclxuICAgICAgICBnbyxcclxuICAgICAgICBiYWNrOiAoKSA9PiBnbygtMSksXHJcbiAgICAgICAgZm9yd2FyZDogKCkgPT4gZ28oMSksXHJcbiAgICAgICAgYmVmb3JlRWFjaDogYmVmb3JlR3VhcmRzLmFkZCxcclxuICAgICAgICBiZWZvcmVSZXNvbHZlOiBiZWZvcmVSZXNvbHZlR3VhcmRzLmFkZCxcclxuICAgICAgICBhZnRlckVhY2g6IGFmdGVyR3VhcmRzLmFkZCxcclxuICAgICAgICBvbkVycm9yOiBlcnJvckhhbmRsZXJzLmFkZCxcclxuICAgICAgICBpc1JlYWR5LFxyXG4gICAgICAgIGluc3RhbGwoYXBwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XHJcbiAgICAgICAgICAgIGFwcC5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBSb3V0ZXJMaW5rKTtcclxuICAgICAgICAgICAgYXBwLmNvbXBvbmVudCgnUm91dGVyVmlldycsIFJvdXRlclZpZXcpO1xyXG4gICAgICAgICAgICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlciA9IHJvdXRlcjtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgJyRyb3V0ZScsIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHVucmVmKGN1cnJlbnRSb3V0ZSksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyB0aGlzIGluaXRpYWwgbmF2aWdhdGlvbiBpcyBvbmx5IG5lY2Vzc2FyeSBvbiBjbGllbnQsIG9uIHNlcnZlciBpdCBkb2Vzbid0XHJcbiAgICAgICAgICAgIC8vIG1ha2Ugc2Vuc2UgYmVjYXVzZSBpdCB3aWxsIGNyZWF0ZSBhbiBleHRyYSB1bm5lY2Vzc2FyeSBuYXZpZ2F0aW9uIGFuZCBjb3VsZFxyXG4gICAgICAgICAgICAvLyBsZWFkIHRvIHByb2JsZW1zXHJcbiAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIgJiZcclxuICAgICAgICAgICAgICAgIC8vIHVzZWQgZm9yIHRoZSBpbml0aWFsIG5hdmlnYXRpb24gY2xpZW50IHNpZGUgdG8gYXZvaWQgcHVzaGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gbXVsdGlwbGUgdGltZXMgd2hlbiB0aGUgcm91dGVyIGlzIHVzZWQgaW4gbXVsdGlwbGUgYXBwc1xyXG4gICAgICAgICAgICAgICAgIXN0YXJ0ZWQgJiZcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRSb3V0ZS52YWx1ZSA9PT0gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2VlIGFib3ZlXHJcbiAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHB1c2gocm91dGVySGlzdG9yeS5sb2NhdGlvbikuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdVbmV4cGVjdGVkIGVycm9yIHdoZW4gc3RhcnRpbmcgdGhlIHJvdXRlcjonLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcmVhY3RpdmVSb3V0ZSA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGUga2V5IG1hdGNoZXNcclxuICAgICAgICAgICAgICAgIHJlYWN0aXZlUm91dGVba2V5XSA9IGNvbXB1dGVkKCgpID0+IGN1cnJlbnRSb3V0ZS52YWx1ZVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcHAucHJvdmlkZShyb3V0ZXJLZXksIHJvdXRlcik7XHJcbiAgICAgICAgICAgIGFwcC5wcm92aWRlKHJvdXRlTG9jYXRpb25LZXksIHJlYWN0aXZlKHJlYWN0aXZlUm91dGUpKTtcclxuICAgICAgICAgICAgYXBwLnByb3ZpZGUocm91dGVyVmlld0xvY2F0aW9uS2V5LCBjdXJyZW50Um91dGUpO1xyXG4gICAgICAgICAgICBjb25zdCB1bm1vdW50QXBwID0gYXBwLnVubW91bnQ7XHJcbiAgICAgICAgICAgIGluc3RhbGxlZEFwcHMuYWRkKGFwcCk7XHJcbiAgICAgICAgICAgIGFwcC51bm1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFsbGVkQXBwcy5kZWxldGUoYXBwKTtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3V0ZXIgaXMgbm90IGF0dGFjaGVkIHRvIGFuIGFwcCBhbnltb3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkQXBwcy5zaXplIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWRhdGUgdGhlIGN1cnJlbnQgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSGlzdG9yeUxpc3RlbmVyICYmIHJlbW92ZUhpc3RvcnlMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUhpc3RvcnlMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJvdXRlLnZhbHVlID0gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRDtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVubW91bnRBcHAoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBwcm9iYWJseSBuZWVkcyB0byBiZSB1cGRhdGVkIHNvIGl0IGNhbiBiZSB1c2VkIGJ5IHZ1ZS10ZXJtdWlcclxuICAgICAgICAgICAgaWYgKCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSAmJiBpc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgICAgIGFkZERldnRvb2xzKGFwcCwgcm91dGVyLCBtYXRjaGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJvdXRlcjtcclxufVxyXG5mdW5jdGlvbiBydW5HdWFyZFF1ZXVlKGd1YXJkcykge1xyXG4gICAgcmV0dXJuIGd1YXJkcy5yZWR1Y2UoKHByb21pc2UsIGd1YXJkKSA9PiBwcm9taXNlLnRoZW4oKCkgPT4gZ3VhcmQoKSksIFByb21pc2UucmVzb2x2ZSgpKTtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0Q2hhbmdpbmdSZWNvcmRzKHRvLCBmcm9tKSB7XHJcbiAgICBjb25zdCBsZWF2aW5nUmVjb3JkcyA9IFtdO1xyXG4gICAgY29uc3QgdXBkYXRpbmdSZWNvcmRzID0gW107XHJcbiAgICBjb25zdCBlbnRlcmluZ1JlY29yZHMgPSBbXTtcclxuICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KGZyb20ubWF0Y2hlZC5sZW5ndGgsIHRvLm1hdGNoZWQubGVuZ3RoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBjb25zdCByZWNvcmRGcm9tID0gZnJvbS5tYXRjaGVkW2ldO1xyXG4gICAgICAgIGlmIChyZWNvcmRGcm9tKSB7XHJcbiAgICAgICAgICAgIGlmICh0by5tYXRjaGVkLmZpbmQocmVjb3JkID0+IGlzU2FtZVJvdXRlUmVjb3JkKHJlY29yZCwgcmVjb3JkRnJvbSkpKVxyXG4gICAgICAgICAgICAgICAgdXBkYXRpbmdSZWNvcmRzLnB1c2gocmVjb3JkRnJvbSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGxlYXZpbmdSZWNvcmRzLnB1c2gocmVjb3JkRnJvbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlY29yZFRvID0gdG8ubWF0Y2hlZFtpXTtcclxuICAgICAgICBpZiAocmVjb3JkVG8pIHtcclxuICAgICAgICAgICAgLy8gdGhlIHR5cGUgZG9lc24ndCBtYXR0ZXIgYmVjYXVzZSB3ZSBhcmUgY29tcGFyaW5nIHBlciByZWZlcmVuY2VcclxuICAgICAgICAgICAgaWYgKCFmcm9tLm1hdGNoZWQuZmluZChyZWNvcmQgPT4gaXNTYW1lUm91dGVSZWNvcmQocmVjb3JkLCByZWNvcmRUbykpKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRlcmluZ1JlY29yZHMucHVzaChyZWNvcmRUbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2xlYXZpbmdSZWNvcmRzLCB1cGRhdGluZ1JlY29yZHMsIGVudGVyaW5nUmVjb3Jkc107XHJcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHJvdXRlciBpbnN0YW5jZS4gRXF1aXZhbGVudCB0byB1c2luZyBgJHJvdXRlcmAgaW5zaWRlXHJcbiAqIHRlbXBsYXRlcy5cclxuICovXHJcbmZ1bmN0aW9uIHVzZVJvdXRlcigpIHtcclxuICAgIHJldHVybiBpbmplY3Qocm91dGVyS2V5KTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgY3VycmVudCByb3V0ZSBsb2NhdGlvbi4gRXF1aXZhbGVudCB0byB1c2luZyBgJHJvdXRlYCBpbnNpZGVcclxuICogdGVtcGxhdGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdXNlUm91dGUoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHJvdXRlTG9jYXRpb25LZXkpO1xyXG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb25GYWlsdXJlVHlwZSwgUm91dGVyTGluaywgUm91dGVyVmlldywgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCBhcyBTVEFSVF9MT0NBVElPTiwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUm91dGVyLCBjcmVhdGVSb3V0ZXJNYXRjaGVyLCBjcmVhdGVXZWJIYXNoSGlzdG9yeSwgY3JlYXRlV2ViSGlzdG9yeSwgaXNOYXZpZ2F0aW9uRmFpbHVyZSwgbG9hZFJvdXRlTG9jYXRpb24sIG1hdGNoZWRSb3V0ZUtleSwgb25CZWZvcmVSb3V0ZUxlYXZlLCBvbkJlZm9yZVJvdXRlVXBkYXRlLCBwYXJzZVF1ZXJ5LCByb3V0ZUxvY2F0aW9uS2V5LCByb3V0ZXJLZXksIHJvdXRlclZpZXdMb2NhdGlvbktleSwgc3RyaW5naWZ5UXVlcnksIHVzZUxpbmssIHVzZVJvdXRlLCB1c2VSb3V0ZXIsIHZpZXdEZXB0aEtleSB9O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGNyZWF0ZUhvb2tzIH0gZnJvbSBcIkB3b3JkcHJlc3MvaG9va3NcIjtcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLnZ1ZVwiO1xuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi9yb3V0ZXJcIjtcbmltcG9ydCAnLi9pMThuJztcbmltcG9ydCBcIi4vc3R5bGVzL21haW4uc2Nzc1wiO1xuaW1wb3J0IGkxOG5NaXhpbiBmcm9tIFwiLi9taXhpbnMvaTE4blwiO1xuaW1wb3J0ICcuL3V0aWxzL21lbnUtZml4JztcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuXG4vLyBDcmVhdGUgdnVlIGFwcCBpbnN0YW5jZS5cbmNvbnN0IGFwcCA9IGNyZWF0ZUFwcCh7XG4gICAgZXh0ZW5kczogQXBwLFxuICAgIG1peGluczogW2kxOG5NaXhpbl1cbn0pO1xuYXBwLnVzZShyb3V0ZXIpO1xuYXBwLnVzZShzdG9yZSk7XG5hcHAuY29uZmlnLmRldnRvb2xzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIjtcblxuLy8gRmluYWxseSBNb3VudCBvbiB0aGUgI3dwLXZ1ZS1raXQgZGl2LlxuYXBwLm1vdW50KFwiI3dwLXZ1ZS1raXRcIik7XG5cbi8vIEFkZCBhY3Rpb24vZmlsdGVyIGhvb2tzIGluamVjdGFibGVcbndpbmRvdy53cEVtYWlsZXJIb29rcyA9IGNyZWF0ZUhvb2tzKCk7XG53cEVtYWlsZXJIb29rcy5hZGRGaWx0ZXIgPSAoaG9va05hbWUsIG5hbWVzcGFjZSwgY29tcG9uZW50LCBwcmlvcml0eSA9IDEwKSA9PiB7XG4gIHdwRW1haWxlckhvb2tzLmhvb2tzLmFkZEZpbHRlcihcbiAgICBob29rTmFtZSxcbiAgICBuYW1lc3BhY2UsXG4gICAgY29tcG9uZW50cyA9PiB7XG4gICAgICBjb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgIH0sXG4gICAgcHJpb3JpdHlcbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiY29tcGlsZSIsImV4cHJlc3Npb24iLCJ0ZXJtcyIsInZhcmlhYmxlcyIsIk9QRVJBVE9SUyIsImEiLCJiIiwiYyIsImV2YWx1YXRlIiwicG9zdGZpeCIsImkiLCJqIiwiYXJncyIsImdldE9wZXJhdG9yUmVzdWx0IiwidGVybSIsInZhbHVlIiwic3RhY2siLCJsZW5ndGgiLCJBcnJheSIsInBvcCIsImFwcGx5IiwiZWFybHlSZXR1cm4iLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJwbHVyYWxGb3JtcyIsIm4iLCJQUkVDRURFTkNFIiwiT1BFTkVSUyIsIlRFUk1JTkFUT1JTIiwiUEFUVEVSTiIsIm1hdGNoIiwib3BlcmF0b3IiLCJlbGVtZW50Iiwic3Vic3RyIiwiaW5kZXgiLCJ0cmltIiwiaW5kZXhPZiIsImNvbmNhdCIsInJldmVyc2UiLCJIT09LX1NFVFVQIiwiSE9PS19QTFVHSU5fU0VUVElOR1NfU0VUIiwiZ2V0RGV2dG9vbHNHbG9iYWxIb29rIiwiZ2V0VGFyZ2V0IiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIm5hdmlnYXRvciIsIndpbmRvdyIsImciLCJpc1Byb3h5QXZhaWxhYmxlIiwiUHJveHkiLCJzZXR1cERldnRvb2xzUGx1Z2luIiwicGx1Z2luRGVzY3JpcHRvciIsInNldHVwRm4iLCJkZXNjcmlwdG9yIiwidGFyZ2V0IiwiaG9vayIsImVuYWJsZVByb3h5IiwiZW5hYmxlRWFybHlQcm94eSIsIl9fVlVFX0RFVlRPT0xTX1BMVUdJTl9BUElfQVZBSUxBQkxFX18iLCJwcm94eSIsIkFwaVByb3h5IiwiX19WVUVfREVWVE9PTFNfUExVR0lOU19fIiwicHJveGllZFRhcmdldCIsImVtaXQiLCJjb25zdHJ1Y3RvciIsInBsdWdpbiIsInRoaXMiLCJ0YXJnZXRRdWV1ZSIsIm9uUXVldWUiLCJkZWZhdWx0U2V0dGluZ3MiLCJzZXR0aW5ncyIsImlkIiwiaXRlbSIsImRlZmF1bHRWYWx1ZSIsImxvY2FsU2V0dGluZ3NTYXZlSWQiLCJjdXJyZW50U2V0dGluZ3MiLCJPYmplY3QiLCJhc3NpZ24iLCJyYXciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImUiLCJmYWxsYmFja3MiLCJnZXRTZXR0aW5ncyIsInNldFNldHRpbmdzIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsIm5vdyIsIm9uIiwicGx1Z2luSWQiLCJwcm94aWVkT24iLCJnZXQiLCJfdGFyZ2V0IiwicHJvcCIsIm1ldGhvZCIsImtleXMiLCJpbmNsdWRlcyIsInJlc29sdmUiLCJQcm9taXNlIiwiYXN5bmMiLCJzdXBwb3J0ZWQiLCJwZXJmIiwiaXNQZXJmb3JtYW5jZVN1cHBvcnRlZCIsIl9hIiwidW5kZWZpbmVkIiwicGVyZm9ybWFuY2UiLCJwZXJmX2hvb2tzIiwiRGF0ZSIsIndhcm4iLCJtc2ciLCJjb25zb2xlIiwiYWN0aXZlRWZmZWN0U2NvcGUiLCJFZmZlY3RTY29wZSIsImRldGFjaGVkIiwiYWN0aXZlIiwiZWZmZWN0cyIsImNsZWFudXBzIiwicGFyZW50Iiwic2NvcGVzIiwicnVuIiwiZm4iLCJjdXJyZW50RWZmZWN0U2NvcGUiLCJvZmYiLCJzdG9wIiwiZnJvbVBhcmVudCIsImwiLCJsYXN0IiwiZWZmZWN0U2NvcGUiLCJyZWNvcmRFZmZlY3RTY29wZSIsImVmZmVjdCIsInNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwib25TY29wZURpc3Bvc2UiLCJjcmVhdGVEZXAiLCJkZXAiLCJTZXQiLCJ3Iiwid2FzVHJhY2tlZCIsInRyYWNrT3BCaXQiLCJuZXdUcmFja2VkIiwidGFyZ2V0TWFwIiwiV2Vha01hcCIsImFjdGl2ZUVmZmVjdCIsImVmZmVjdFRyYWNrRGVwdGgiLCJJVEVSQVRFX0tFWSIsIlN5bWJvbCIsIk1BUF9LRVlfSVRFUkFURV9LRVkiLCJSZWFjdGl2ZUVmZmVjdCIsInNjaGVkdWxlciIsImRlcHMiLCJsYXN0U2hvdWxkVHJhY2siLCJzaG91bGRUcmFjayIsImluaXREZXBNYXJrZXJzIiwiY2xlYW51cEVmZmVjdCIsInB0ciIsImRlbGV0ZSIsImZpbmFsaXplRGVwTWFya2VycyIsImRlZmVyU3RvcCIsIm9uU3RvcCIsIm9wdGlvbnMiLCJfZWZmZWN0IiwiZXh0ZW5kIiwibGF6eSIsInJ1bm5lciIsImJpbmQiLCJ0cmFja1N0YWNrIiwicGF1c2VUcmFja2luZyIsImVuYWJsZVRyYWNraW5nIiwicmVzZXRUcmFja2luZyIsInRyYWNrIiwidHlwZSIsImtleSIsImRlcHNNYXAiLCJzZXQiLCJNYXAiLCJ0cmFja0VmZmVjdHMiLCJkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvIiwiaGFzIiwiYWRkIiwib25UcmFjayIsInRyaWdnZXIiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwib2xkVGFyZ2V0IiwidmFsdWVzIiwiaXNBcnJheSIsImZvckVhY2giLCJpc0ludGVnZXJLZXkiLCJpc01hcCIsImV2ZW50SW5mbyIsInRyaWdnZXJFZmZlY3RzIiwiY29tcHV0ZWQiLCJ0cmlnZ2VyRWZmZWN0IiwiYWxsb3dSZWN1cnNlIiwib25UcmlnZ2VyIiwiaXNOb25UcmFja2FibGVLZXlzIiwibWFrZU1hcCIsImJ1aWx0SW5TeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZpbHRlciIsIm1hcCIsImlzU3ltYm9sIiwiY3JlYXRlR2V0dGVyIiwic2hhbGxvd0dldCIsInJlYWRvbmx5R2V0Iiwic2hhbGxvd1JlYWRvbmx5R2V0IiwiYXJyYXlJbnN0cnVtZW50YXRpb25zIiwiY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zIiwiaW5zdHJ1bWVudGF0aW9ucyIsImFyciIsInRvUmF3IiwicmVzIiwiaXNSZWFkb25seSIsInNoYWxsb3ciLCJyZWNlaXZlciIsInNoYWxsb3dSZWFkb25seU1hcCIsInJlYWRvbmx5TWFwIiwic2hhbGxvd1JlYWN0aXZlTWFwIiwicmVhY3RpdmVNYXAiLCJ0YXJnZXRJc0FycmF5IiwiaGFzT3duIiwiUmVmbGVjdCIsImlzUmVmIiwiaXNPYmplY3QiLCJyZWFkb25seSIsInJlYWN0aXZlIiwiY3JlYXRlU2V0dGVyIiwic2hhbGxvd1NldCIsImlzU2hhbGxvdyIsImhhZEtleSIsIk51bWJlciIsInJlc3VsdCIsImhhc0NoYW5nZWQiLCJtdXRhYmxlSGFuZGxlcnMiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJyZWFkb25seUhhbmRsZXJzIiwiU3RyaW5nIiwic2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlIYW5kbGVycyIsInRvU2hhbGxvdyIsImdldFByb3RvIiwidiIsImdldFByb3RvdHlwZU9mIiwiZ2V0JDEiLCJyYXdUYXJnZXQiLCJyYXdLZXkiLCJ3cmFwIiwidG9SZWFkb25seSIsInRvUmVhY3RpdmUiLCJjYWxsIiwiaGFzJDEiLCJzaXplIiwic2V0JDEiLCJjaGVja0lkZW50aXR5S2V5cyIsImRlbGV0ZUVudHJ5IiwiY2xlYXIiLCJoYWRJdGVtcyIsImNyZWF0ZUZvckVhY2giLCJjYWxsYmFjayIsInRoaXNBcmciLCJvYnNlcnZlZCIsImNyZWF0ZUl0ZXJhYmxlTWV0aG9kIiwidGFyZ2V0SXNNYXAiLCJpc1BhaXIiLCJpdGVyYXRvciIsImlzS2V5T25seSIsImlubmVySXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImNyZWF0ZVJlYWRvbmx5TWV0aG9kIiwiY2FwaXRhbGl6ZSIsImNyZWF0ZUluc3RydW1lbnRhdGlvbnMiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwicmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzIiwicmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJ0b1Jhd1R5cGUiLCJjcmVhdGVSZWFjdGl2ZU9iamVjdCIsInNoYWxsb3dSZWFjdGl2ZSIsInNoYWxsb3dSZWFkb25seSIsImJhc2VIYW5kbGVycyIsImNvbGxlY3Rpb25IYW5kbGVycyIsInByb3h5TWFwIiwiZXhpc3RpbmdQcm94eSIsInRhcmdldFR5cGUiLCJpc0V4dGVuc2libGUiLCJyYXdUeXBlIiwidGFyZ2V0VHlwZU1hcCIsImlzUmVhY3RpdmUiLCJpc1Byb3h5IiwibWFya1JhdyIsImRlZiIsInRyYWNrUmVmVmFsdWUiLCJyZWYiLCJ0cmlnZ2VyUmVmVmFsdWUiLCJuZXdWYWwiLCJyIiwiX192X2lzUmVmIiwiY3JlYXRlUmVmIiwic2hhbGxvd1JlZiIsInJhd1ZhbHVlIiwiUmVmSW1wbCIsIl9fdl9pc1NoYWxsb3ciLCJfcmF3VmFsdWUiLCJfdmFsdWUiLCJ1c2VEaXJlY3RWYWx1ZSIsInRyaWdnZXJSZWYiLCJ1bnJlZiIsInNoYWxsb3dVbndyYXBIYW5kbGVycyIsInByb3h5UmVmcyIsIm9iamVjdFdpdGhSZWZzIiwiQ3VzdG9tUmVmSW1wbCIsImZhY3RvcnkiLCJfZ2V0IiwiX3NldCIsImN1c3RvbVJlZiIsInRvUmVmcyIsIm9iamVjdCIsInJldCIsInRvUmVmIiwiT2JqZWN0UmVmSW1wbCIsIl9vYmplY3QiLCJfa2V5IiwiX2RlZmF1bHRWYWx1ZSIsInZhbCIsIl9hJDEiLCJDb21wdXRlZFJlZkltcGwiLCJnZXR0ZXIiLCJfc2V0dGVyIiwiaXNTU1IiLCJfZGlydHkiLCJfY2FjaGVhYmxlIiwic2VsZiIsImdldHRlck9yT3B0aW9ucyIsImRlYnVnT3B0aW9ucyIsInNldHRlciIsIm9ubHlHZXR0ZXIiLCJpc0Z1bmN0aW9uIiwiY1JlZiIsInRpY2siLCJxdWV1ZSIsInF1ZXVlZCIsImZsdXNoIiwiRGVmZXJyZWRDb21wdXRlZFJlZkltcGwiLCJjb21wYXJlVGFyZ2V0IiwiaGFzQ29tcGFyZVRhcmdldCIsInNjaGVkdWxlZCIsImNvbXB1dGVkVHJpZ2dlciIsInZhbHVlVG9Db21wYXJlIiwidGhlbiIsImRlZmVycmVkQ29tcHV0ZWQiLCJwdXNoV2FybmluZ0NvbnRleHQiLCJ2bm9kZSIsInBvcFdhcm5pbmdDb250ZXh0IiwiaW5zdGFuY2UiLCJjb21wb25lbnQiLCJhcHBXYXJuSGFuZGxlciIsImFwcENvbnRleHQiLCJjb25maWciLCJ3YXJuSGFuZGxlciIsInRyYWNlIiwiY3VycmVudFZOb2RlIiwibm9ybWFsaXplZFN0YWNrIiwicmVjdXJzZUNvdW50IiwicGFyZW50SW5zdGFuY2UiLCJnZXRDb21wb25lbnRUcmFjZSIsImNhbGxXaXRoRXJyb3JIYW5kbGluZyIsImpvaW4iLCJmb3JtYXRDb21wb25lbnROYW1lIiwid2FybkFyZ3MiLCJsb2dzIiwiZW50cnkiLCJpc1Jvb3QiLCJvcGVuIiwiY2xvc2UiLCJwcm9wcyIsImZvcm1hdFByb3BzIiwiZm9ybWF0VHJhY2VFbnRyeSIsImZvcm1hdFRyYWNlIiwic2xpY2UiLCJmb3JtYXRQcm9wIiwiaXNTdHJpbmciLCJuYW1lIiwiRXJyb3JUeXBlU3RyaW5ncyIsImVyciIsImhhbmRsZUVycm9yIiwiY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmciLCJpc1Byb21pc2UiLCJjYXRjaCIsInRocm93SW5EZXYiLCJjb250ZXh0Vk5vZGUiLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImFwcEVycm9ySGFuZGxlciIsImVycm9ySGFuZGxlciIsImluZm8iLCJlcnJvciIsImxvZ0Vycm9yIiwiaXNGbHVzaGluZyIsImlzRmx1c2hQZW5kaW5nIiwiZmx1c2hJbmRleCIsInBlbmRpbmdQb3N0Rmx1c2hDYnMiLCJhY3RpdmVQb3N0Rmx1c2hDYnMiLCJwb3N0Rmx1c2hJbmRleCIsInJlc29sdmVkUHJvbWlzZSIsImN1cnJlbnRGbHVzaFByb21pc2UiLCJuZXh0VGljayIsInAiLCJxdWV1ZUpvYiIsImpvYiIsInNwbGljZSIsInN0YXJ0IiwiZW5kIiwibWlkZGxlIiwiZ2V0SWQiLCJmaW5kSW5zZXJ0aW9uSW5kZXgiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwicXVldWVQb3N0Rmx1c2hDYiIsImNiIiwiZmx1c2hQcmVGbHVzaENicyIsInNlZW4iLCJwcmUiLCJjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiSW5maW5pdHkiLCJjb21wYXJhdG9yIiwiZGlmZiIsImNoZWNrIiwiY291bnQiLCJvd25lckluc3RhbmNlIiwiY29tcG9uZW50TmFtZSIsImdldENvbXBvbmVudE5hbWUiLCJpc0htclVwZGF0aW5nIiwiaG1yRGlydHlDb21wb25lbnRzIiwiZ2V0R2xvYmFsVGhpcyIsIl9fVlVFX0hNUl9SVU5USU1FX18iLCJjcmVhdGVSZWNvcmQiLCJ0cnlXcmFwIiwicmVyZW5kZXIiLCJuZXdSZW5kZXIiLCJyZWNvcmQiLCJpbml0aWFsRGVmIiwicmVuZGVyIiwiaW5zdGFuY2VzIiwibm9ybWFsaXplQ2xhc3NDb21wb25lbnQiLCJyZW5kZXJDYWNoZSIsInVwZGF0ZSIsInJlbG9hZCIsIm5ld0NvbXAiLCJ1cGRhdGVDb21wb25lbnREZWYiLCJvbGRDb21wIiwib3B0aW9uc0NhY2hlIiwiY2VSZWxvYWQiLCJzdHlsZXMiLCJfX2FzeW5jTG9hZGVyIiwibG9jYXRpb24iLCJpc0NsYXNzQ29tcG9uZW50IiwiX192Y2NPcHRzIiwiYXJnIiwiZGV2dG9vbHMiLCJidWZmZXIiLCJkZXZ0b29sc05vdEluc3RhbGxlZCIsImV2ZW50Iiwic2V0RGV2dG9vbHNIb29rIiwiX2IiLCJlbmFibGVkIiwiSFRNTEVsZW1lbnQiLCJ1c2VyQWdlbnQiLCJfX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIiwibmV3SG9vayIsInNldFRpbWVvdXQiLCJkZXZ0b29sc0NvbXBvbmVudEFkZGVkIiwiY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rIiwiZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkIiwiX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCIsImFwcCIsInVpZCIsImRldnRvb2xzUGVyZlN0YXJ0IiwiY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2siLCJkZXZ0b29sc1BlcmZFbmQiLCJ0aW1lIiwiZW1pdCQxIiwicmF3QXJncyIsImlzVW5tb3VudGVkIiwiRU1QVFlfT0JKIiwiZW1pdHNPcHRpb25zIiwicHJvcHNPcHRpb25zIiwidmFsaWRhdG9yIiwidG9IYW5kbGVyS2V5IiwiaXNNb2RlbExpc3RlbmVyIiwic3RhcnRzV2l0aCIsIm1vZGVsQXJnIiwibW9kaWZpZXJzS2V5IiwibnVtYmVyIiwidG9OdW1iZXIiLCJwYXJhbXMiLCJkZXZ0b29sc0NvbXBvbmVudEVtaXQiLCJsb3dlckNhc2VFdmVudCIsInRvTG93ZXJDYXNlIiwiaHlwaGVuYXRlIiwiaGFuZGxlck5hbWUiLCJoYW5kbGVyIiwiY2FtZWxpemUiLCJvbmNlSGFuZGxlciIsImVtaXR0ZWQiLCJub3JtYWxpemVFbWl0c09wdGlvbnMiLCJjb21wIiwiYXNNaXhpbiIsImNhY2hlIiwiZW1pdHNDYWNoZSIsImNhY2hlZCIsImVtaXRzIiwibm9ybWFsaXplZCIsImhhc0V4dGVuZHMiLCJfX1ZVRV9PUFRJT05TX0FQSV9fIiwiZXh0ZW5kRW1pdHMiLCJub3JtYWxpemVkRnJvbUV4dGVuZCIsIm1peGlucyIsImV4dGVuZHMiLCJpc0VtaXRMaXN0ZW5lciIsImlzT24iLCJyZXBsYWNlIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwiY3VycmVudFNjb3BlSWQiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJwcmV2IiwiX19zY29wZUlkIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJfaWQiLCJ3aXRoQ3R4IiwiY3R4IiwiaXNOb25TY29wZWRTbG90IiwiX24iLCJyZW5kZXJGbldpdGhDb250ZXh0IiwiX2QiLCJzZXRCbG9ja1RyYWNraW5nIiwicHJldkluc3RhbmNlIiwiX2MiLCJhY2Nlc3NlZEF0dHJzIiwibWFya0F0dHJzQWNjZXNzZWQiLCJyZW5kZXJDb21wb25lbnRSb290IiwiQ29tcG9uZW50Iiwid2l0aFByb3h5Iiwic2xvdHMiLCJhdHRycyIsInNldHVwU3RhdGUiLCJpbmhlcml0QXR0cnMiLCJmYWxsdGhyb3VnaEF0dHJzIiwic2hhcGVGbGFnIiwicHJveHlUb1VzZSIsIm5vcm1hbGl6ZVZOb2RlIiwiZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoIiwiYmxvY2tTdGFjayIsImNyZWF0ZVZOb2RlIiwiQ29tbWVudCIsInNldFJvb3QiLCJyb290IiwicGF0Y2hGbGFnIiwiZ2V0Q2hpbGRSb290Iiwic29tZSIsImZpbHRlck1vZGVsTGlzdGVuZXJzIiwiY2xvbmVWTm9kZSIsImFsbEF0dHJzIiwiZXZlbnRBdHRycyIsImV4dHJhQXR0cnMiLCJkaXJzIiwiaXNFbGVtZW50Um9vdCIsInRyYW5zaXRpb24iLCJyYXdDaGlsZHJlbiIsImNoaWxkcmVuIiwiZHluYW1pY0NoaWxkcmVuIiwiY2hpbGRSb290IiwiZmlsdGVyU2luZ2xlUm9vdCIsImR5bmFtaWNJbmRleCIsInVwZGF0ZWRSb290Iiwic2luZ2xlUm9vdCIsImNoaWxkIiwiaXNWTm9kZSIsImhhc1Byb3BzQ2hhbmdlZCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsIm5leHRLZXlzIiwidXBkYXRlSE9DSG9zdEVsIiwiZWwiLCJzdWJUcmVlIiwiaXNTdXNwZW5zZSIsIl9faXNTdXNwZW5zZSIsIlN1c3BlbnNlIiwicHJvY2VzcyIsIm4xIiwibjIiLCJjb250YWluZXIiLCJhbmNob3IiLCJwYXJlbnRDb21wb25lbnQiLCJwYXJlbnRTdXNwZW5zZSIsImlzU1ZHIiwic2xvdFNjb3BlSWRzIiwib3B0aW1pemVkIiwicmVuZGVyZXJJbnRlcm5hbHMiLCJwYXRjaCIsIm8iLCJjcmVhdGVFbGVtZW50IiwiaGlkZGVuQ29udGFpbmVyIiwic3VzcGVuc2UiLCJjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5IiwicGVuZGluZ0JyYW5jaCIsInNzQ29udGVudCIsInRyaWdnZXJFdmVudCIsInNzRmFsbGJhY2siLCJzZXRBY3RpdmVCcmFuY2giLCJtb3VudFN1c3BlbnNlIiwidW0iLCJ1bm1vdW50IiwibmV3QnJhbmNoIiwibmV3RmFsbGJhY2siLCJhY3RpdmVCcmFuY2giLCJpc0luRmFsbGJhY2siLCJpc0h5ZHJhdGluZyIsImlzU2FtZVZOb2RlVHlwZSIsInBlbmRpbmdJZCIsInRpbWVvdXQiLCJmYWxsYmFjayIsInBhdGNoU3VzcGVuc2UiLCJoeWRyYXRlIiwibm9kZSIsImh5ZHJhdGVOb2RlIiwicGFyZW50Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlIiwibm9ybWFsaXplIiwiaXNTbG90Q2hpbGRyZW4iLCJub3JtYWxpemVTdXNwZW5zZVNsb3QiLCJkZWZhdWx0IiwiZXZlbnRMaXN0ZW5lciIsImhhc1dhcm5lZCIsIm0iLCJtb3ZlIiwicmVtb3ZlIiwicmVzdW1lIiwiRXJyb3IiLCJkZWxheUVudGVyIiwibW9kZSIsImFmdGVyTGVhdmUiLCJoYXNVbnJlc29sdmVkQW5jZXN0b3IiLCJmYWxsYmFja1ZOb2RlIiwibW91bnRGYWxsYmFjayIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJpc0luUGVuZGluZ1N1c3BlbnNlIiwiaHlkcmF0ZWRFbCIsImFzeW5jRGVwIiwiYXN5bmNTZXR1cFJlc3VsdCIsInN1c3BlbnNlSWQiLCJhc3luY1Jlc29sdmVkIiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJwbGFjZWhvbGRlciIsImRvUmVtb3ZlIiwicyIsImJsb2NrIiwidHJhY2tCbG9jayIsImlzQmxvY2tUcmVlRW5hYmxlZCIsIm9wZW5CbG9jayIsImN1cnJlbnRCbG9jayIsImNsb3NlQmxvY2siLCJzaW5nbGVDaGlsZCIsInF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlIiwiYnJhbmNoIiwicHJvdmlkZSIsImN1cnJlbnRJbnN0YW5jZSIsInByb3ZpZGVzIiwicGFyZW50UHJvdmlkZXMiLCJpbmplY3QiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJhcmd1bWVudHMiLCJ3YXRjaEVmZmVjdCIsImRvV2F0Y2giLCJ3YXRjaFBvc3RFZmZlY3QiLCJ3YXRjaFN5bmNFZmZlY3QiLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJ3YXRjaCIsInNvdXJjZSIsImltbWVkaWF0ZSIsImRlZXAiLCJ3YXJuSW52YWxpZFNvdXJjZSIsImNsZWFudXAiLCJmb3JjZVRyaWdnZXIiLCJpc011bHRpU291cmNlIiwidHJhdmVyc2UiLCJvbkNsZWFudXAiLCJOT09QIiwiYmFzZUdldHRlciIsImlzSW5TU1JDb21wb25lbnRTZXR1cCIsInF1ZXVlUG9zdFJlbmRlckVmZmVjdCIsImluc3RhbmNlV2F0Y2giLCJwdWJsaWNUaGlzIiwiY3JlYXRlUGF0aEdldHRlciIsInNldEN1cnJlbnRJbnN0YW5jZSIsInVuc2V0Q3VycmVudEluc3RhbmNlIiwicGF0aCIsInNlZ21lbnRzIiwic3BsaXQiLCJpc1NldCIsImlzUGxhaW5PYmplY3QiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJzdGF0ZSIsImlzTW91bnRlZCIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJvbk1vdW50ZWQiLCJvbkJlZm9yZVVubW91bnQiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkZ1bmN0aW9uIiwiQmFzZVRyYW5zaXRpb24iLCJhcHBlYXIiLCJCb29sZWFuIiwicGVyc2lzdGVkIiwib25CZWZvcmVFbnRlciIsIm9uRW50ZXIiLCJvbkFmdGVyRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJvbkxlYXZlQ2FuY2VsbGVkIiwib25CZWZvcmVBcHBlYXIiLCJvbkFwcGVhciIsIm9uQWZ0ZXJBcHBlYXIiLCJvbkFwcGVhckNhbmNlbGxlZCIsInNldHVwIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwicHJldlRyYW5zaXRpb25LZXkiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJoYXNGb3VuZCIsInJhd1Byb3BzIiwiZW1wdHlQbGFjZWhvbGRlciIsImlubmVyQ2hpbGQiLCJnZXRLZWVwQWxpdmVDaGlsZCIsImVudGVySG9va3MiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwib2xkQ2hpbGQiLCJvbGRJbm5lckNoaWxkIiwidHJhbnNpdGlvbktleUNoYW5nZWQiLCJnZXRUcmFuc2l0aW9uS2V5IiwibGVhdmluZ0hvb2tzIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsIl9sZWF2ZUNiIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiY2FsbEhvb2siLCJjYWxsQXN5bmNIb29rIiwiZXZlcnkiLCJob29rcyIsImJlZm9yZUVudGVyIiwibGVhdmluZ1ZOb2RlIiwiZW50ZXIiLCJhZnRlckhvb2siLCJjYW5jZWxIb29rIiwiY2FsbGVkIiwiX2VudGVyQ2IiLCJjYW5jZWxsZWQiLCJsZWF2ZSIsImNsb25lIiwiaXNLZWVwQWxpdmUiLCJrZWVwQ29tbWVudCIsInBhcmVudEtleSIsImtleWVkRnJhZ21lbnRDb3VudCIsIkZyYWdtZW50IiwiZGVmaW5lQ29tcG9uZW50IiwiaXNBc3luY1dyYXBwZXIiLCJkZWZpbmVBc3luY0NvbXBvbmVudCIsImxvYWRlciIsImxvYWRpbmdDb21wb25lbnQiLCJlcnJvckNvbXBvbmVudCIsImRlbGF5Iiwic3VzcGVuc2libGUiLCJvbkVycm9yIiwidXNlck9uRXJyb3IiLCJyZXNvbHZlZENvbXAiLCJwZW5kaW5nUmVxdWVzdCIsInJldHJpZXMiLCJsb2FkIiwidGhpc1JlcXVlc3QiLCJyZWplY3QiLCJfX2VzTW9kdWxlIiwidG9TdHJpbmdUYWciLCJfX2FzeW5jUmVzb2x2ZWQiLCJjcmVhdGVJbm5lckNvbXAiLCJsb2FkZWQiLCJkZWxheWVkIiwiX19pc0tlZXBBbGl2ZSIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJSZWdFeHAiLCJleGNsdWRlIiwibWF4Iiwic2hhcmVkQ29udGV4dCIsInJlbmRlcmVyIiwiY3VycmVudCIsIl9fdl9jYWNoZSIsIl91bm1vdW50Iiwic3RvcmFnZUNvbnRhaW5lciIsInJlc2V0U2hhcGVGbGFnIiwicHJ1bmVDYWNoZSIsInBydW5lQ2FjaGVFbnRyeSIsImFjdGl2YXRlIiwiaXNEZWFjdGl2YXRlZCIsImludm9rZUFycmF5Rm5zIiwidm5vZGVIb29rIiwib25Wbm9kZU1vdW50ZWQiLCJpbnZva2VWTm9kZUhvb2siLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwibWF0Y2hlcyIsInBlbmRpbmdDYWNoZUtleSIsImNhY2hlU3VidHJlZSIsImdldElubmVyQ2hpbGQiLCJvblVwZGF0ZWQiLCJyYXdWTm9kZSIsImNhY2hlZFZOb2RlIiwicGFyc2VJbnQiLCJwYXR0ZXJuIiwidGVzdCIsIm9uQWN0aXZhdGVkIiwicmVnaXN0ZXJLZWVwQWxpdmVIb29rIiwib25EZWFjdGl2YXRlZCIsIndyYXBwZWRIb29rIiwiX193ZGMiLCJpbmplY3RIb29rIiwiaW5qZWN0VG9LZWVwQWxpdmVSb290Iiwia2VlcEFsaXZlUm9vdCIsImluamVjdGVkIiwib25Vbm1vdW50ZWQiLCJwcmVwZW5kIiwiX193ZWgiLCJ1bnNoaWZ0IiwiY3JlYXRlSG9vayIsImxpZmVjeWNsZSIsIm9uQmVmb3JlTW91bnQiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uU2VydmVyUHJlZmV0Y2giLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uRXJyb3JDYXB0dXJlZCIsInZhbGlkYXRlRGlyZWN0aXZlTmFtZSIsImlzQnVpbHRJbkRpcmVjdGl2ZSIsIndpdGhEaXJlY3RpdmVzIiwiZGlyZWN0aXZlcyIsImludGVybmFsSW5zdGFuY2UiLCJnZXRFeHBvc2VQcm94eSIsImJpbmRpbmdzIiwiZGlyIiwibW9kaWZpZXJzIiwibW91bnRlZCIsInVwZGF0ZWQiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwib2xkQmluZGluZ3MiLCJiaW5kaW5nIiwiQ09NUE9ORU5UUyIsInJlc29sdmVDb21wb25lbnQiLCJtYXliZVNlbGZSZWZlcmVuY2UiLCJyZXNvbHZlQXNzZXQiLCJOVUxMX0RZTkFNSUNfQ09NUE9ORU5UIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJyZXNvbHZlRGlyZWN0aXZlIiwid2Fybk1pc3NpbmciLCJzZWxmTmFtZSIsImV4dHJhIiwicmVnaXN0cnkiLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsImlzSW50ZWdlciIsImZyb20iLCJjcmVhdGVTbG90cyIsImR5bmFtaWNTbG90cyIsInNsb3QiLCJyZW5kZXJTbG90Iiwibm9TbG90dGVkIiwiaXNDRSIsInZhbGlkU2xvdENvbnRlbnQiLCJlbnN1cmVWYWxpZFZOb2RlIiwicmVuZGVyZWQiLCJjcmVhdGVCbG9jayIsIl8iLCJzY29wZUlkIiwidm5vZGVzIiwidG9IYW5kbGVycyIsIm9iaiIsInByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5IiwiZ2V0UHVibGljSW5zdGFuY2UiLCJpc1N0YXRlZnVsQ29tcG9uZW50IiwicHVibGljUHJvcGVydGllc01hcCIsIiQiLCIkZWwiLCIkZGF0YSIsIiRwcm9wcyIsIiRhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwicmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsIiRlbWl0IiwiJG9wdGlvbnMiLCJyZXNvbHZlTWVyZ2VkT3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsImYiLCIkbmV4dFRpY2siLCIkd2F0Y2giLCJpc1Jlc2VydmVkUHJlZml4IiwiUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwiYWNjZXNzQ2FjaGUiLCJfX2lzU2NyaXB0U2V0dXAiLCJub3JtYWxpemVkUHJvcHMiLCJzaG91bGRDYWNoZUFjY2VzcyIsInB1YmxpY0dldHRlciIsImNzc01vZHVsZSIsImdsb2JhbFByb3BlcnRpZXMiLCJfX2Nzc01vZHVsZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJ1bnNjb3BhYmxlcyIsImlzR2xvYmFsbHlXaGl0ZWxpc3RlZCIsImgiLCJjcmVhdGVXYXRjaGVyIiwiYmFzZSIsImV4dGVuZHNPcHRpb25zIiwiZ2xvYmFsTWl4aW5zIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicmVzb2x2ZWQiLCJtZXJnZU9wdGlvbnMiLCJ0byIsInN0cmF0cyIsInN0cmF0IiwiaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyIsIm1lcmdlRGF0YUZuIiwibWVyZ2VPYmplY3RPcHRpb25zIiwibWV0aG9kcyIsImJlZm9yZUNyZWF0ZSIsIm1lcmdlQXNBcnJheSIsImNyZWF0ZWQiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsImJlZm9yZURlc3Ryb3kiLCJiZWZvcmVVbm1vdW50IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJlcnJvckNhcHR1cmVkIiwic2VydmVyUHJlZmV0Y2giLCJjb21wb25lbnRzIiwibWVyZ2VkIiwibm9ybWFsaXplSW5qZWN0Iiwic2V0RnVsbFByb3BzIiwibmVlZENhc3RLZXlzIiwicmF3Q2FzdFZhbHVlcyIsImhhc0F0dHJzQ2hhbmdlZCIsImlzUmVzZXJ2ZWRQcm9wIiwiY2FtZWxLZXkiLCJyYXdDdXJyZW50UHJvcHMiLCJjYXN0VmFsdWVzIiwicmVzb2x2ZVByb3BWYWx1ZSIsImlzQWJzZW50Iiwib3B0IiwiaGFzRGVmYXVsdCIsInByb3BzRGVmYXVsdHMiLCJub3JtYWxpemVQcm9wc09wdGlvbnMiLCJwcm9wc0NhY2hlIiwiZXh0ZW5kUHJvcHMiLCJFTVBUWV9BUlIiLCJub3JtYWxpemVkS2V5IiwidmFsaWRhdGVQcm9wTmFtZSIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZ2V0VHlwZSIsImN0b3IiLCJ0b1N0cmluZyIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiZmluZEluZGV4IiwidCIsInZhbGlkYXRlUHJvcHMiLCJyZXNvbHZlZFZhbHVlcyIsInZhbGlkYXRlUHJvcCIsInJlcXVpcmVkIiwiaXNWYWxpZCIsInR5cGVzIiwidmFsaWQiLCJleHBlY3RlZFR5cGUiLCJhc3NlcnRUeXBlIiwibWVzc2FnZSIsInJlY2VpdmVkVHlwZSIsImV4cGVjdGVkVmFsdWUiLCJzdHlsZVZhbHVlIiwicmVjZWl2ZWRWYWx1ZSIsImlzRXhwbGljYWJsZSIsImVsZW0iLCJpc0Jvb2xlYW4iLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJpc1NpbXBsZVR5cGUiLCJpc0ludGVybmFsS2V5Iiwibm9ybWFsaXplU2xvdFZhbHVlIiwibm9ybWFsaXplU2xvdCIsInJhd1Nsb3QiLCJub3JtYWxpemVPYmplY3RTbG90cyIsInJhd1Nsb3RzIiwiX2N0eCIsIm5vcm1hbGl6ZVZOb2RlU2xvdHMiLCJjcmVhdGVBcHBDb250ZXh0IiwiaXNOYXRpdmVUYWciLCJOTyIsImNvbXBpbGVyT3B0aW9ucyIsImNyZWF0ZUFwcEFQSSIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJjb250ZXh0IiwiaW5zdGFsbGVkUGx1Z2lucyIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwidmVyc2lvbiIsInVzZSIsImluc3RhbGwiLCJtaXhpbiIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsImRpcmVjdGl2ZSIsIm1vdW50Iiwicm9vdENvbnRhaW5lciIsImlzSHlkcmF0ZSIsIl9fdnVlX2FwcF9fIiwiVGV4dCIsIlN0YXRpYyIsImRldnRvb2xzSW5pdEFwcCIsImRldnRvb2xzVW5tb3VudEFwcCIsInNldFJlZiIsInJhd1JlZiIsIm9sZFJhd1JlZiIsImlzVW5tb3VudCIsInJlZlZhbHVlIiwib3duZXIiLCJvbGRSZWYiLCJfaXNTdHJpbmciLCJfaXNSZWYiLCJkb1NldCIsImV4aXN0aW5nIiwiayIsImhhc01pc21hdGNoIiwiaXNTVkdDb250YWluZXIiLCJuYW1lc3BhY2VVUkkiLCJ0YWdOYW1lIiwiaXNDb21tZW50Iiwibm9kZVR5cGUiLCJjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMiLCJtdCIsIm1vdW50Q29tcG9uZW50IiwicGF0Y2hQcm9wIiwiY3JlYXRlVGV4dCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0IiwiY3JlYXRlQ29tbWVudCIsImlzRnJhZ21lbnRTdGFydCIsIm9uTWlzbWF0Y2giLCJoYW5kbGVNaXNtYXRjaCIsImRvbVR5cGUiLCJuZXh0Tm9kZSIsIm5lZWRUb0Fkb3B0Q29udGVudCIsInN0YXRpY0NvdW50Iiwib3V0ZXJIVE1MIiwiaHlkcmF0ZUZyYWdtZW50IiwiaHlkcmF0ZUVsZW1lbnQiLCJsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3IiLCJwcmV2aW91c1NpYmxpbmciLCJsYXN0Q2hpbGQiLCJjcmVhdGVUZXh0Vk5vZGUiLCJoeWRyYXRlQ2hpbGRyZW4iLCJmb3JjZVBhdGNoVmFsdWUiLCJlbmRzV2l0aCIsIm9uQ2xpY2siLCJ2bm9kZUhvb2tzIiwib25Wbm9kZUJlZm9yZU1vdW50IiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwicGFyZW50Vk5vZGUiLCJmcmFnbWVudFNsb3RTY29wZUlkcyIsImlzRnJhZ21lbnQiLCJoYXNDaGlsZE5vZGVzIiwiX3Zub2RlIiwic3RhcnRNZWFzdXJlIiwiaXNTdXBwb3J0ZWQiLCJtYXJrIiwiZW5kTWVhc3VyZSIsInN0YXJ0VGFnIiwiZW5kVGFnIiwibWVhc3VyZSIsImNsZWFyTWFya3MiLCJjcmVhdGVSZW5kZXJlciIsImJhc2VDcmVhdGVSZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uRm5zIiwibmVlZFdhcm4iLCJfX1ZVRV9QUk9EX0RFVlRPT0xTX18iLCJtdWx0aSIsImluaXRGZWF0dXJlRmxhZ3MiLCJfX1ZVRV9fIiwiaG9zdEluc2VydCIsImhvc3RSZW1vdmUiLCJob3N0UGF0Y2hQcm9wIiwiaG9zdENyZWF0ZUVsZW1lbnQiLCJob3N0Q3JlYXRlVGV4dCIsImhvc3RDcmVhdGVDb21tZW50Iiwic2V0VGV4dCIsImhvc3RTZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJob3N0U2V0RWxlbWVudFRleHQiLCJob3N0UGFyZW50Tm9kZSIsImhvc3ROZXh0U2libGluZyIsInNldFNjb3BlSWQiLCJob3N0U2V0U2NvcGVJZCIsImluc2VydFN0YXRpY0NvbnRlbnQiLCJob3N0SW5zZXJ0U3RhdGljQ29udGVudCIsImdldE5leHRIb3N0Tm9kZSIsInByb2Nlc3NUZXh0IiwicHJvY2Vzc0NvbW1lbnROb2RlIiwibW91bnRTdGF0aWNOb2RlIiwicGF0Y2hTdGF0aWNOb2RlIiwicHJvY2Vzc0ZyYWdtZW50IiwicHJvY2Vzc0VsZW1lbnQiLCJwcm9jZXNzQ29tcG9uZW50IiwiaW50ZXJuYWxzIiwicmVtb3ZlU3RhdGljTm9kZSIsIm1vdW50RWxlbWVudCIsInBhdGNoRWxlbWVudCIsImlzIiwibW91bnRDaGlsZHJlbiIsInVubW91bnRDaGlsZHJlbiIsIm5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIiwiY2xvbmVJZk1vdW50ZWQiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwidG9nZ2xlUmVjdXJzZSIsIm9uVm5vZGVCZWZvcmVVcGRhdGUiLCJhcmVDaGlsZHJlblNWRyIsInBhdGNoQmxvY2tDaGlsZHJlbiIsIl9faG1ySWQiLCJ0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuIiwicGF0Y2hDaGlsZHJlbiIsInBhdGNoUHJvcHMiLCJjbGFzcyIsInN0eWxlIiwicHJvcHNUb1VwZGF0ZSIsImR5bmFtaWNQcm9wcyIsIm9uVm5vZGVVcGRhdGVkIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsImZhbGxiYWNrQ29udGFpbmVyIiwib2xkVk5vZGUiLCJuZXdWTm9kZSIsImZyYWdtZW50U3RhcnRBbmNob3IiLCJmcmFnbWVudEVuZEFuY2hvciIsInVwZGF0ZUNvbXBvbmVudCIsImluaXRpYWxWTm9kZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlIiwicmVnaXN0ZXJITVIiLCJzZXR1cENvbXBvbmVudCIsIm5leHRWTm9kZSIsInByZXZDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsIiRzdGFibGUiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJpbnZhbGlkYXRlSm9iIiwiYnUiLCJ1Iiwib3JpZ2luTmV4dCIsIm5leHRUcmVlIiwicHJldlRyZWUiLCJibSIsImlzQXN5bmNXcmFwcGVyVk5vZGUiLCJoeWRyYXRlU3ViVHJlZSIsInNjb3BlZEluaXRpYWxWTm9kZSIsInJ0YyIsInJ0ZyIsInJhd1ByZXZQcm9wcyIsImlzSW5IbXJDb250ZXh0Iiwia2ViYWJLZXkiLCJjYW1lbGl6ZWRLZXkiLCJ1cGRhdGVQcm9wcyIsIm5lZWREZWxldGlvbkNoZWNrIiwiZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0IiwidXBkYXRlU2xvdHMiLCJjMSIsInByZXZTaGFwZUZsYWciLCJjMiIsInBhdGNoS2V5ZWRDaGlsZHJlbiIsInBhdGNoVW5rZXllZENoaWxkcmVuIiwib2xkTGVuZ3RoIiwibmV3TGVuZ3RoIiwiY29tbW9uTGVuZ3RoIiwiTWF0aCIsIm1pbiIsIm5leHRDaGlsZCIsInBhcmVudEFuY2hvciIsImwyIiwiZTEiLCJlMiIsIm5leHRQb3MiLCJzMSIsInMyIiwia2V5VG9OZXdJbmRleE1hcCIsInBhdGNoZWQiLCJ0b0JlUGF0Y2hlZCIsIm1vdmVkIiwibWF4TmV3SW5kZXhTb0ZhciIsIm5ld0luZGV4VG9PbGRJbmRleE1hcCIsInByZXZDaGlsZCIsIm5ld0luZGV4IiwiaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UiLCJsZW4iLCJhcnJJIiwiZ2V0U2VxdWVuY2UiLCJuZXh0SW5kZXgiLCJtb3ZlVHlwZSIsInBlcmZvcm1MZWF2ZSIsIm1vdmVTdGF0aWNOb2RlIiwic2hvdWxkSW52b2tlRGlycyIsInNob3VsZEludm9rZVZub2RlSG9vayIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsInJlbW92ZUZyYWdtZW50IiwicGVyZm9ybVJlbW92ZSIsInVucmVnaXN0ZXJITVIiLCJidW0iLCJjbGVhbnVwQnVmZmVyIiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsImFsbG93ZWQiLCJjaDEiLCJjaDIiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJkaXNhYmxlZCIsImlzVGFyZ2V0U1ZHIiwiU1ZHRWxlbWVudCIsInJlc29sdmVUYXJnZXQiLCJzZWxlY3QiLCJ0YXJnZXRTZWxlY3RvciIsIm1vdmVUZWxlcG9ydCIsInRhcmdldEFuY2hvciIsImlzUmVvcmRlciIsIlRlbGVwb3J0IiwiX19pc1RlbGVwb3J0IiwicXVlcnlTZWxlY3RvciIsIm1haW5BbmNob3IiLCJ3YXNEaXNhYmxlZCIsImN1cnJlbnRDb250YWluZXIiLCJjdXJyZW50QW5jaG9yIiwibmV4dFRhcmdldCIsInRhcmdldE5vZGUiLCJfbHBhIiwiZGlzYWJsZVRyYWNraW5nIiwidm5vZGVBcmdzVHJhbnNmb3JtZXIiLCJzZXR1cEJsb2NrIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwiY3JlYXRlQmFzZVZOb2RlIiwiX192X2lzVk5vZGUiLCJ0cmFuc2Zvcm1WTm9kZUFyZ3MiLCJ0cmFuc2Zvcm1lciIsIkludGVybmFsT2JqZWN0S2V5Iiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplUmVmIiwicmVmX2tleSIsInJlZl9mb3IiLCJpc0Jsb2NrTm9kZSIsIm5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uIiwiX192X3NraXAiLCJub3JtYWxpemVDaGlsZHJlbiIsImNsb25lZCIsImd1YXJkUmVhY3RpdmVQcm9wcyIsImtsYXNzIiwibm9ybWFsaXplQ2xhc3MiLCJub3JtYWxpemVTdHlsZSIsImlzVGVsZXBvcnQiLCJfY3JlYXRlVk5vZGUiLCJleHRyYVByb3BzIiwibWVyZ2VSZWYiLCJtZXJnZWRQcm9wcyIsIm1lcmdlUHJvcHMiLCJkZWVwQ2xvbmVWTm9kZSIsInRleHQiLCJmbGFnIiwiY3JlYXRlU3RhdGljVk5vZGUiLCJjb250ZW50IiwibnVtYmVyT2ZOb2RlcyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImFzQmxvY2siLCJtZW1vIiwic2xvdEZsYWciLCJ0b01lcmdlIiwiaW5jb21pbmciLCJlbXB0eUFwcENvbnRleHQiLCJ1aWQkMSIsImV4cG9zZWQiLCJleHBvc2VQcm94eSIsInNldHVwQ29udGV4dCIsImJjIiwic3AiLCJjcmVhdGVEZXZSZW5kZXJDb250ZXh0IiwiY2UiLCJpc0J1aWx0SW5UYWciLCJhcHBJc05hdGl2ZVRhZyIsImluc3RhbGxXaXRoUHJveHkiLCJpc1N0YXRlZnVsIiwiaW5pdFByb3BzIiwiaW5pdFNsb3RzIiwic2V0dXBSZXN1bHQiLCJuYW1lcyIsImlzUnVudGltZU9ubHkiLCJleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dCIsImNyZWF0ZVNldHVwQ29udGV4dCIsInJlc29sdmVkUmVzdWx0IiwiZmluaXNoQ29tcG9uZW50U2V0dXAiLCJzZXR1cFN0YXRlZnVsQ29tcG9uZW50IiwiX19zc3JJbmxpbmVSZW5kZXIiLCJzc3JSZW5kZXIiLCJkZXZ0b29sc1Jhd1NldHVwU3RhdGUiLCJleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0IiwicmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIiLCJfY29tcGlsZSIsIl9yYyIsInNraXBPcHRpb25zIiwidGVtcGxhdGUiLCJpc0N1c3RvbUVsZW1lbnQiLCJkZWxpbWl0ZXJzIiwiY29tcG9uZW50Q29tcGlsZXJPcHRpb25zIiwiZmluYWxDb21waWxlck9wdGlvbnMiLCJkYXRhT3B0aW9ucyIsImNvbXB1dGVkT3B0aW9ucyIsIndhdGNoT3B0aW9ucyIsInByb3ZpZGVPcHRpb25zIiwiaW5qZWN0T3B0aW9ucyIsInJlbmRlclRyYWNrZWQiLCJyZW5kZXJUcmlnZ2VyZWQiLCJleHBvc2UiLCJmaWx0ZXJzIiwiY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzIiwiY3JlYXRlRHVwbGljYXRlQ2hlY2tlciIsInVud3JhcFJlZiIsInJlc29sdmVJbmplY3Rpb25zIiwidW53cmFwSW5qZWN0ZWRSZWYiLCJtZXRob2RIYW5kbGVyIiwid3JpdGFibGUiLCJyZWdpc3RlckxpZmVjeWNsZUhvb2siLCJyZWdpc3RlciIsIl9ob29rIiwiYXBwbHlPcHRpb25zIiwiZnJlZXplIiwiY3JlYXRlQXR0cnNQcm94eSIsImNsYXNzaWZ5UkUiLCJpbmNsdWRlSW5mZXJyZWQiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsIl9fZmlsZSIsImluZmVyRnJvbVJlZ2lzdHJ5IiwidG9VcHBlckNhc2UiLCJ3YXJuUnVudGltZVVzYWdlIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsIndpdGhEZWZhdWx0cyIsImRlZmF1bHRzIiwidXNlU2xvdHMiLCJnZXRDb250ZXh0IiwidXNlQXR0cnMiLCJtZXJnZURlZmF1bHRzIiwicmVkdWNlIiwiY3JlYXRlUHJvcHNSZXN0UHJveHkiLCJleGNsdWRlZEtleXMiLCJ3aXRoQXN5bmNDb250ZXh0IiwiZ2V0QXdhaXRhYmxlIiwiYXdhaXRhYmxlIiwicHJvcHNPckNoaWxkcmVuIiwicHJvdG90eXBlIiwic3NyQ29udGV4dEtleSIsInVzZVNTUkNvbnRleHQiLCJpbml0Q3VzdG9tRm9ybWF0dGVyIiwidnVlU3R5bGUiLCJudW1iZXJTdHlsZSIsInN0cmluZ1N0eWxlIiwia2V5d29yZFN0eWxlIiwiZm9ybWF0dGVyIiwiaGVhZGVyIiwiX19pc1Z1ZSIsImZvcm1hdFZhbHVlIiwiaGFzQm9keSIsImJvZHkiLCJmb3JtYXRJbnN0YW5jZSIsImJsb2NrcyIsImNyZWF0ZUluc3RhbmNlQmxvY2siLCJleHRyYWN0S2V5cyIsImFzUmF3IiwiQ29tcCIsImV4dHJhY3RlZCIsImlzS2V5T2ZUeXBlIiwib3B0cyIsImRldnRvb2xzRm9ybWF0dGVycyIsIndpdGhNZW1vIiwiaXNNZW1vU2FtZSIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiZG9jIiwidGVtcGxhdGVDb250YWluZXIiLCJub2RlT3BzIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJ0YWciLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwic2VsZWN0b3IiLCJiZWZvcmUiLCJjbG9uZU5vZGUiLCJ3cmFwcGVyIiwiYXBwZW5kQ2hpbGQiLCJpbXBvcnRhbnRSRSIsInNldFN0eWxlIiwic2V0UHJvcGVydHkiLCJwcmVmaXhlZCIsInJhd05hbWUiLCJwcmVmaXhDYWNoZSIsInByZWZpeGVzIiwiYXV0b1ByZWZpeCIsInhsaW5rTlMiLCJhZGRFdmVudExpc3RlbmVyIiwib3B0aW9uc01vZGlmaWVyUkUiLCJjYWNoZWROb3ciLCJuYXRpdmVPblJFIiwiZGVmaW5lQ3VzdG9tRWxlbWVudCIsIlZ1ZUN1c3RvbUVsZW1lbnQiLCJWdWVFbGVtZW50IiwiaW5pdGlhbFByb3BzIiwic3VwZXIiLCJkZWZpbmVTU1JDdXN0b21FbGVtZW50IiwiQmFzZUNsYXNzIiwiX2RlZiIsIl9jb25uZWN0ZWQiLCJfcmVzb2x2ZWQiLCJfbnVtYmVyUHJvcHMiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiY29ubmVjdGVkQ2FsbGJhY2siLCJfcmVzb2x2ZURlZiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiYXR0cmlidXRlcyIsIl9zZXRBdHRyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsImF0dHJpYnV0ZU5hbWUiLCJvYnNlcnZlIiwiaGFzT3B0aW9ucyIsInJhd0tleXMiLCJudW1iZXJQcm9wcyIsIl9zZXRQcm9wIiwiX2dldFByb3AiLCJfYXBwbHlTdHlsZXMiLCJfdXBkYXRlIiwiYXN5bmNEZWYiLCJnZXRBdHRyaWJ1dGUiLCJzaG91bGRSZWZsZWN0Iiwic2hvdWxkVXBkYXRlIiwicmVtb3ZlQXR0cmlidXRlIiwibmV3U3R5bGVzIiwiX3N0eWxlcyIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImhvc3QiLCJjc3MiLCJ1c2VDc3NNb2R1bGUiLCJtb2R1bGVzIiwidXNlQ3NzVmFycyIsInNldFZhcnMiLCJzZXRWYXJzT25WTm9kZSIsIm9iIiwiY2hpbGRMaXN0IiwiZGlzY29ubmVjdCIsInZhcnMiLCJzZXRWYXJzT25Ob2RlIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsIlRyYW5zaXRpb24iLCJyZXNvbHZlVHJhbnNpdGlvblByb3BzIiwiRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsImR1cmF0aW9uIiwiZW50ZXJGcm9tQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYXBwZWFyRnJvbUNsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwibGVhdmVGcm9tQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsImhhc0V4cGxpY2l0Q2FsbGJhY2siLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwiZmluaXNoTGVhdmUiLCJfaXNMZWF2aW5nIiwibWFrZUVudGVySG9vayIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImZvcmNlUmVmbG93IiwiaXNOYU4iLCJ2YWxpZGF0ZUR1cmF0aW9uIiwiY2xzIiwiY2xhc3NMaXN0IiwiX3Z0YyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImVuZElkIiwiZXhwbGljaXRUaW1lb3V0IiwiX2VuZElkIiwicmVzb2x2ZUlmTm90U3RhbGUiLCJwcm9wQ291bnQiLCJnZXRUcmFuc2l0aW9uSW5mbyIsImVuZEV2ZW50IiwiZW5kZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25FbmQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0U3R5bGVQcm9wZXJ0aWVzIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZCIsInRvTXMiLCJvZmZzZXRIZWlnaHQiLCJwb3NpdGlvbk1hcCIsIm5ld1Bvc2l0aW9uTWFwIiwiVHJhbnNpdGlvbkdyb3VwIiwibW92ZUNsYXNzIiwiZGlzcGxheSIsImhhc0NTU1RyYW5zZm9ybSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJtb3ZlZENoaWxkcmVuIiwiYXBwbHlUcmFuc2xhdGlvbiIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJjc3NUcmFuc2l0aW9uUHJvcHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvbGRQb3MiLCJuZXdQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsImdldE1vZGVsQXNzaWduZXIiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpbmciLCJvbkNvbXBvc2l0aW9uRW5kIiwiRXZlbnQiLCJ2TW9kZWxUZXh0IiwiX2Fzc2lnbiIsImNhc3RUb051bWJlciIsImRvbVZhbHVlIiwiYWN0aXZlRWxlbWVudCIsInZNb2RlbENoZWNrYm94IiwibW9kZWxWYWx1ZSIsIl9tb2RlbFZhbHVlIiwiZWxlbWVudFZhbHVlIiwiZ2V0VmFsdWUiLCJjaGVja2VkIiwibG9vc2VJbmRleE9mIiwiZm91bmQiLCJmaWx0ZXJlZCIsImdldENoZWNrYm94VmFsdWUiLCJzZXRDaGVja2VkIiwibG9vc2VFcXVhbCIsInZNb2RlbFJhZGlvIiwidk1vZGVsU2VsZWN0IiwiaXNTZXRNb2RlbCIsInNlbGVjdGVkVmFsIiwic2VsZWN0ZWQiLCJzZXRTZWxlY3RlZCIsIl9iaW5kaW5nIiwiaXNNdWx0aXBsZSIsIm9wdGlvbiIsIm9wdGlvblZhbHVlIiwic2VsZWN0ZWRJbmRleCIsInZNb2RlbER5bmFtaWMiLCJjYWxsTW9kZWxIb29rIiwicmVzb2x2ZUR5bmFtaWNNb2RlbCIsInN5c3RlbU1vZGlmaWVycyIsIm1vZGlmaWVyR3VhcmRzIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJjdHJsS2V5Iiwic2hpZnQiLCJzaGlmdEtleSIsImFsdCIsImFsdEtleSIsIm1ldGEiLCJtZXRhS2V5IiwiYnV0dG9uIiwicmlnaHQiLCJleGFjdCIsIndpdGhNb2RpZmllcnMiLCJndWFyZCIsImtleU5hbWVzIiwiZXNjIiwic3BhY2UiLCJ1cCIsImRvd24iLCJ3aXRoS2V5cyIsImV2ZW50S2V5IiwidlNob3ciLCJfdm9kIiwic2V0RGlzcGxheSIsInJlbmRlcmVyT3B0aW9ucyIsInByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsInRyYW5zaXRpb25DbGFzc2VzIiwiY2xhc3NOYW1lIiwicGF0Y2hDbGFzcyIsImlzQ3NzU3RyaW5nIiwiY3VycmVudERpc3BsYXkiLCJjc3NUZXh0IiwicGF0Y2hTdHlsZSIsImludm9rZXJzIiwiX3ZlaSIsImV4aXN0aW5nSW52b2tlciIsInBhcnNlTmFtZSIsImludm9rZXIiLCJpbml0aWFsVmFsdWUiLCJfdnRzIiwiYXR0YWNoZWQiLCJvcmlnaW5hbFN0b3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsInBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiY3JlYXRlSW52b2tlciIsInBhdGNoRXZlbnQiLCJzaG91bGRTZXRBc1Byb3AiLCJuZWVkUmVtb3ZlIiwiaW5jbHVkZUJvb2xlYW5BdHRyIiwicGF0Y2hET01Qcm9wIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsImlzU3BlY2lhbEJvb2xlYW5BdHRyIiwicGF0Y2hBdHRyIiwiZW5hYmxlZEh5ZHJhdGlvbiIsImVuc3VyZVJlbmRlcmVyIiwiZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIiLCJpbmplY3ROYXRpdmVUYWdDaGVjayIsImluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrIiwiY29udGFpbmVyT3JTZWxlY3RvciIsIm5vcm1hbGl6ZUNvbnRhaW5lciIsIkVsZW1lbnQiLCJjcmVhdGVTU1JBcHAiLCJpc0hUTUxUYWciLCJpc1NWR1RhZyIsIlNoYWRvd1Jvb3QiLCJzc3JEaXJlY3RpdmVJbml0aWFsaXplZCIsImluaXREaXJlY3RpdmVzRm9yU1NSIiwiZ2V0U1NSUHJvcHMiLCJtb2RlbFRvVXNlIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImxpc3QiLCJQYXRjaEZsYWdOYW1lcyIsInNsb3RGbGFnc1RleHQiLCJnZW5lcmF0ZUNvZGVGcmFtZSIsImxpbmVzIiwibmV3bGluZVNlcXVlbmNlcyIsImlkeCIsImxpbmUiLCJyZXBlYXQiLCJsaW5lTGVuZ3RoIiwibmV3TGluZVNlcUxlbmd0aCIsInBhZCIsInNwZWNpYWxCb29sZWFuQXR0cnMiLCJpc0Jvb2xlYW5BdHRyIiwidW5zYWZlQXR0ckNoYXJSRSIsImF0dHJWYWxpZGF0aW9uQ2FjaGUiLCJpc1NTUlNhZmVBdHRyTmFtZSIsImlzVW5zYWZlIiwicHJvcHNUb0F0dHJNYXAiLCJhY2NlcHRDaGFyc2V0IiwiaHRtbEZvciIsImh0dHBFcXVpdiIsImlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCIsImlzS25vd25IdG1sQXR0ciIsImlzS25vd25TdmdBdHRyIiwicGFyc2VTdHJpbmdTdHlsZSIsImxpc3REZWxpbWl0ZXJSRSIsInByb3BlcnR5RGVsaW1pdGVyUkUiLCJ0bXAiLCJzdHJpbmdpZnlTdHlsZSIsIm5vcm1hbGl6ZVByb3BzIiwiaXNWb2lkVGFnIiwiZXNjYXBlUkUiLCJlc2NhcGVIdG1sIiwic3RyaW5nIiwiZXhlYyIsImVzY2FwZWQiLCJodG1sIiwibGFzdEluZGV4IiwiY2hhckNvZGVBdCIsImNvbW1lbnRTdHJpcFJFIiwiZXNjYXBlSHRtbENvbW1lbnQiLCJzcmMiLCJhVmFsaWRUeXBlIiwiaXNEYXRlIiwiYlZhbGlkVHlwZSIsImdldFRpbWUiLCJlcXVhbCIsImxvb3NlQ29tcGFyZUFycmF5cyIsImFIYXNLZXkiLCJiSGFzS2V5IiwidG9EaXNwbGF5U3RyaW5nIiwib2JqZWN0VG9TdHJpbmciLCJyZXBsYWNlciIsImVudHJpZXMiLCJvblJFIiwidG9UeXBlU3RyaW5nIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImNhbWVsaXplUkUiLCJoeXBoZW5hdGVSRSIsImNoYXJBdCIsImZucyIsInBhcnNlRmxvYXQiLCJfZ2xvYmFsVGhpcyIsImdsb2JhbFRoaXMiLCJpZGVudFJFIiwiZ2VuUHJvcHNBY2Nlc3NFeHAiLCJzdG9yZUtleSIsImhvb2tOYW1lIiwibmFtZXNwYWNlIiwicHJpb3JpdHkiLCJob29rc1N0b3JlIiwiaGFuZGxlcnMiLCJfX2N1cnJlbnQiLCJob29rSW5mbyIsImN1cnJlbnRJbmRleCIsInJ1bnMiLCJkb0FjdGlvbiIsIl9ob29rc1N0b3JlJF9fY3VycmVudCIsIl9ob29rc1N0b3JlJF9fY3VycmVudDIiLCJfSG9va3MiLCJhY3Rpb25zIiwiYWRkQWN0aW9uIiwiYWRkRmlsdGVyIiwicmVtb3ZlQWN0aW9uIiwicmVtb3ZlRmlsdGVyIiwiaGFzQWN0aW9uIiwiaGFzRmlsdGVyIiwicmVtb3ZlQWxsQWN0aW9ucyIsInJlbW92ZUFsbEZpbHRlcnMiLCJhcHBseUZpbHRlcnMiLCJjdXJyZW50QWN0aW9uIiwiY3VycmVudEZpbHRlciIsImRvaW5nQWN0aW9uIiwiZG9pbmdGaWx0ZXIiLCJkaWRBY3Rpb24iLCJkaWRGaWx0ZXIiLCJyZW1vdmVBbGwiLCJoYW5kbGVyc1JlbW92ZWQiLCJyZXR1cm5GaXJzdEFyZyIsImFsbCIsIl9sZW4iLCJkZWZhdWx0SG9va3MiLCJERUZBVUxUX0xPQ0FMRV9EQVRBIiwicGx1cmFsX2Zvcm1zIiwiSTE4Tl9IT09LX1JFR0VYUCIsImNyZWF0ZUkxOG4iLCJpbml0aWFsRGF0YSIsImluaXRpYWxEb21haW4iLCJ0YW5uaW4iLCJsaXN0ZW5lcnMiLCJub3RpZnlMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImRvU2V0TG9jYWxlRGF0YSIsIl90YW5uaW4kZGF0YSRkb21haW4iLCJkb21haW4iLCJzZXRMb2NhbGVEYXRhIiwiZGNucGdldHRleHQiLCJzaW5nbGUiLCJwbHVyYWwiLCJnZXRGaWx0ZXJEb21haW4iLCJfeCIsInRyYW5zbGF0aW9uIiwib25Ib29rQWRkZWRPclJlbW92ZWQiLCJnZXRMb2NhbGVEYXRhIiwiYWRkTG9jYWxlRGF0YSIsIl90YW5uaW4kZGF0YSRkb21haW4yIiwicmVzZXRMb2NhbGVEYXRhIiwic3Vic2NyaWJlIiwiX18iLCJfbngiLCJpc1JUTCIsImhhc1RyYW5zbGF0aW9uIiwiX3Rhbm5pbiRkYXRhIiwiX3Rhbm5pbiRkYXRhMiIsImkxOG4iLCJsb2dFcnJvck9uY2UiLCJzcHJpbnRmIiwiZm9ybWF0IiwiVGFicyIsIiRyb3V0ZSIsIm1lbnVGaXgiLCJCdXR0b24iLCJudW1yb3dzIiwibWFwR2V0dGVycyIsIm1hcEFjdGlvbnMiLCJvblN1Ym1pdCIsInNldHRpbmciLCJzdG9yZVNldHRpbmdzIiwibG9nIiwiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsInJvbGUiLCJfY3JlYXRlRWxlbWVudEJsb2NrIiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2NvbXBvbmVudF90YWJzIiwiX2NvbXBvbmVudF9yb3V0ZXJfdmlldyIsIl9yZW5kZXJTbG90IiwiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsIl9jb21wb25lbnRfcm91dGVyX2xpbmsiLCJfaG9pc3RlZF80IiwiZm9yIiwiX2hvaXN0ZWRfNSIsIl9ob2lzdGVkXzYiLCJfaG9pc3RlZF83IiwiJHNldHVwIiwiZm10Iiwicm91dGVzIiwiU2V0dGluZ3MiLCJhbGlhcyIsIkxpc3QiLCJHcmFwaCIsImNyZWF0ZVJvdXRlciIsImhpc3RvcnkiLCJjcmVhdGVXZWJIaXN0b3J5Iiwid3BFbWFpbGVyIiwic2l0ZSIsImJhc2VfdXJsIiwiY3JlYXRlU3RvcmUiLCJzdHJpY3QiLCJwbHVnaW5zIiwiY3JlYXRlTG9nZ2VyIiwiaXNTYXZpbmciLCJnZXR0ZXJzIiwiY29tbWl0Iiwic2V0U2V0dGluZ3NTYXZpbmciLCJwbHVnaW5TbHVnIiwialF1ZXJ5IiwibWVudVJvb3QiLCJjdXJyZW50VXJsIiwiaHJlZiIsImN1cnJlbnRQYXRoIiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwicGFyZW50cyIsImVhY2giLCJhdHRyIiwic3Vic3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsImhlYWQiLCJ0YWlsIiwibWVtb2l6ZWQiLCJzZWFyY2hDYWNoZSIsIm1heFNpemUiLCJyZSIsIm5vdF9zdHJpbmciLCJub3RfYm9vbCIsIm5vdF90eXBlIiwibm90X3ByaW1pdGl2ZSIsIm51bWVyaWNfYXJnIiwianNvbiIsIm5vdF9qc29uIiwibW9kdWxvIiwia2V5X2FjY2VzcyIsImluZGV4X2FjY2VzcyIsInNpZ24iLCJzcHJpbnRmX2Zvcm1hdCIsInNwcmludGZfcGFyc2UiLCJ2c3ByaW50ZiIsImFyZ3YiLCJwYXJzZV90cmVlIiwicGgiLCJwYWRfY2hhcmFjdGVyIiwicGFkX2xlbmd0aCIsImlzX3Bvc2l0aXZlIiwiY3Vyc29yIiwidHJlZV9sZW5ndGgiLCJvdXRwdXQiLCJwYXJhbV9ubyIsIlR5cGVFcnJvciIsImZyb21DaGFyQ29kZSIsIndpZHRoIiwicHJlY2lzaW9uIiwidG9FeHBvbmVudGlhbCIsInRvRml4ZWQiLCJ0b1ByZWNpc2lvbiIsInZhbHVlT2YiLCJwYWRfY2hhciIsImFsaWduIiwic3ByaW50Zl9jYWNoZSIsIl9mbXQiLCJhcmdfbmFtZXMiLCJTeW50YXhFcnJvciIsImZpZWxkX2xpc3QiLCJyZXBsYWNlbWVudF9maWVsZCIsImZpZWxkX21hdGNoIiwiREVGQVVMVF9PUFRJT05TIiwiY29udGV4dERlbGltaXRlciIsIm9uTWlzc2luZ0tleSIsIlRhbm5pbiIsImdldFBsdXJhbEZvcm0iLCJwZiIsInBhcnRzIiwicGFydCIsImdldFBsdXJhbEV4cHJlc3Npb24iLCJzaW5ndWxhciIsInNmYyIsInVzZVN0b3JlIiwiZGVlcENvcHkiLCJoaXQiLCJvcmlnaW5hbCIsImNvcHkiLCJmb3JFYWNoVmFsdWUiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJnZW5lcmljU3Vic2NyaWJlIiwic3VicyIsInJlc2V0U3RvcmUiLCJzdG9yZSIsImhvdCIsIl9hY3Rpb25zIiwiX211dGF0aW9ucyIsIl93cmFwcGVkR2V0dGVycyIsIl9tb2R1bGVzTmFtZXNwYWNlTWFwIiwiaW5zdGFsbE1vZHVsZSIsIl9tb2R1bGVzIiwicmVzZXRTdG9yZVN0YXRlIiwib2xkU3RhdGUiLCJfc3RhdGUiLCJfbWFrZUxvY2FsR2V0dGVyc0NhY2hlIiwid3JhcHBlZEdldHRlcnMiLCJjb21wdXRlZE9iaiIsInBhcnRpYWwiLCJfY29tbWl0dGluZyIsImVuYWJsZVN0cmljdE1vZGUiLCJfd2l0aENvbW1pdCIsInJvb3RTdGF0ZSIsImdldE5hbWVzcGFjZSIsIm5hbWVzcGFjZWQiLCJwYXJlbnRTdGF0ZSIsImdldE5lc3RlZFN0YXRlIiwibW9kdWxlTmFtZSIsImxvY2FsIiwibm9OYW1lc3BhY2UiLCJkaXNwYXRjaCIsIl90eXBlIiwiX3BheWxvYWQiLCJfb3B0aW9ucyIsInVuaWZ5T2JqZWN0U3R5bGUiLCJwYXlsb2FkIiwiZGVmaW5lUHJvcGVydGllcyIsIm1ha2VMb2NhbEdldHRlcnMiLCJtYWtlTG9jYWxDb250ZXh0IiwiZm9yRWFjaE11dGF0aW9uIiwibXV0YXRpb24iLCJyZWdpc3Rlck11dGF0aW9uIiwiZm9yRWFjaEFjdGlvbiIsImFjdGlvbiIsInJvb3RHZXR0ZXJzIiwiX2RldnRvb2xIb29rIiwicmVnaXN0ZXJBY3Rpb24iLCJmb3JFYWNoR2V0dGVyIiwicmF3R2V0dGVyIiwicmVnaXN0ZXJHZXR0ZXIiLCJmb3JFYWNoQ2hpbGQiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsIk1VVEFUSU9OU19MQVlFUl9JRCIsIkFDVElPTlNfTEFZRVJfSUQiLCJJTlNQRUNUT1JfSUQiLCJhY3Rpb25JZCIsImFkZERldnRvb2xzIiwibGFiZWwiLCJob21lcGFnZSIsImxvZ28iLCJwYWNrYWdlTmFtZSIsImNvbXBvbmVudFN0YXRlVHlwZXMiLCJhcGkiLCJhZGRUaW1lbGluZUxheWVyIiwiY29sb3IiLCJDT0xPUl9MSU1FXzUwMCIsImFkZEluc3BlY3RvciIsImljb24iLCJ0cmVlRmlsdGVyUGxhY2Vob2xkZXIiLCJnZXRJbnNwZWN0b3JUcmVlIiwiaW5zcGVjdG9ySWQiLCJub2RlcyIsImZsYXR0ZW5TdG9yZUZvckluc3BlY3RvclRyZWUiLCJyb290Tm9kZXMiLCJmb3JtYXRTdG9yZUZvckluc3BlY3RvclRyZWUiLCJnZXRJbnNwZWN0b3JTdGF0ZSIsIm1vZHVsZVBhdGgiLCJub2RlSWQiLCJnZXR0ZXJzS2V5cyIsInN0b3JlU3RhdGUiLCJlZGl0YWJsZSIsInRyZWUiLCJsZWFmS2V5IiwiX2N1c3RvbSIsInRvb2x0aXAiLCJhYnN0cmFjdCIsImNhblRocm93IiwidHJhbnNmb3JtUGF0aHNUb09iamVjdFRyZWUiLCJleHRyYWN0TmFtZUZyb21QYXRoIiwiZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JTdGF0ZSIsIm1vZHVsZU1hcCIsIl9jaGlsZHJlbiIsImVkaXRJbnNwZWN0b3JTdGF0ZSIsIm5vdGlmeUNvbXBvbmVudFVwZGF0ZSIsInNlbmRJbnNwZWN0b3JUcmVlIiwic2VuZEluc3BlY3RvclN0YXRlIiwiYWRkVGltZWxpbmVFdmVudCIsImxheWVySWQiLCJ0aXRsZSIsInN1YnNjcmliZUFjdGlvbiIsIl90aW1lIiwiZ3JvdXBJZCIsInN1YnRpdGxlIiwiYWZ0ZXIiLCJUQUdfTkFNRVNQQUNFRCIsInRleHRDb2xvciIsImJhY2tncm91bmRDb2xvciIsInRhZ3MiLCJNb2R1bGUiLCJyYXdNb2R1bGUiLCJydW50aW1lIiwiX3Jhd01vZHVsZSIsInJhd1N0YXRlIiwicHJvdG90eXBlQWNjZXNzb3JzJDEiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiaGFzQ2hpbGQiLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsImFzc2VydFJhd01vZHVsZSIsInRoaXMkMSQxIiwicmF3Q2hpbGRNb2R1bGUiLCJ1bnJlZ2lzdGVyIiwiaXNSZWdpc3RlcmVkIiwiZnVuY3Rpb25Bc3NlcnQiLCJleHBlY3RlZCIsImFzc2VydFR5cGVzIiwiYXNzZXJ0T3B0aW9ucyIsImJ1ZiIsIm1ha2VBc3NlcnRpb25NZXNzYWdlIiwiU3RvcmUiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfc3Vic2NyaWJlcnMiLCJfZGV2dG9vbHMiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpbmplY3RLZXkiLCIkc3RvcmUiLCJzdWIiLCJzaWxlbnQiLCJyZXBsYWNlU3RhdGUiLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiaGFzTW9kdWxlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsImlzVmFsaWRNYXAiLCJub3JtYWxpemVNYXAiLCJnZXRNb2R1bGVCeU5hbWVzcGFjZSIsInZ1ZXgiLCJtYXBNdXRhdGlvbnMiLCJjcmVhdGVOYW1lc3BhY2VkSGVscGVycyIsImhlbHBlciIsImNvbGxhcHNlZCIsInN0YXRlQmVmb3JlIiwic3RhdGVBZnRlciIsIm11dGF0aW9uVHJhbnNmb3JtZXIiLCJtdXQiLCJhY3Rpb25GaWx0ZXIiLCJhY3Rpb25UcmFuc2Zvcm1lciIsImFjdCIsImxvZ011dGF0aW9ucyIsImxvZ0FjdGlvbnMiLCJsb2dnZXIiLCJwcmV2U3RhdGUiLCJuZXh0U3RhdGUiLCJmb3JtYXR0ZWRUaW1lIiwiZ2V0Rm9ybWF0dGVkVGltZSIsImZvcm1hdHRlZE11dGF0aW9uIiwic3RhcnRNZXNzYWdlIiwiZW5kTWVzc2FnZSIsImZvcm1hdHRlZEFjdGlvbiIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXAiLCJncm91cEVuZCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJudW0iLCJtYXhMZW5ndGgiLCJ0aW1lcyIsImlzQnJvd3NlciIsImlzRVNNb2R1bGUiLCJhcHBseVRvUGFyYW1zIiwibmV3UGFyYW1zIiwibm9vcCIsIlRSQUlMSU5HX1NMQVNIX1JFIiwicGFyc2VVUkwiLCJwYXJzZVF1ZXJ5IiwiY3VycmVudExvY2F0aW9uIiwicXVlcnkiLCJzZWFyY2hTdHJpbmciLCJoYXNoIiwiaGFzaFBvcyIsInNlYXJjaFBvcyIsImZyb21TZWdtZW50cyIsInRvU2VnbWVudHMiLCJ0b1Bvc2l0aW9uIiwic2VnbWVudCIsInBvc2l0aW9uIiwicmVzb2x2ZVJlbGF0aXZlUGF0aCIsImZ1bGxQYXRoIiwic3RyaXBCYXNlIiwicGF0aG5hbWUiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uIiwic3RyaW5naWZ5UXVlcnkiLCJhTGFzdEluZGV4IiwibWF0Y2hlZCIsImJMYXN0SW5kZXgiLCJpc1NhbWVSb3V0ZVJlY29yZCIsImlzU2FtZVJvdXRlTG9jYXRpb25QYXJhbXMiLCJhbGlhc09mIiwiaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlIiwiaXNFcXVpdmFsZW50QXJyYXkiLCJOYXZpZ2F0aW9uVHlwZSIsIk5hdmlnYXRpb25EaXJlY3Rpb24iLCJub3JtYWxpemVCYXNlIiwiYmFzZUVsIiwiQkVGT1JFX0hBU0hfUkUiLCJjcmVhdGVIcmVmIiwiY29tcHV0ZVNjcm9sbFBvc2l0aW9uIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImdldFNjcm9sbEtleSIsImRlbHRhIiwic2Nyb2xsUG9zaXRpb25zIiwiY3JlYXRlQmFzZUxvY2F0aW9uIiwicHJvdG9jb2wiLCJjcmVhdGVDdXJyZW50TG9jYXRpb24iLCJzZWFyY2giLCJzbGljZVBvcyIsInBhdGhGcm9tSGFzaCIsImJ1aWxkU3RhdGUiLCJiYWNrIiwiZm9yd2FyZCIsInJlcGxhY2VkIiwiY29tcHV0ZVNjcm9sbCIsInNjcm9sbCIsImhpc3RvcnlOYXZpZ2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiY2hhbmdlTG9jYXRpb24iLCJoYXNoSW5kZXgiLCJ1cmwiLCJjdXJyZW50U3RhdGUiLCJ1c2VIaXN0b3J5U3RhdGVOYXZpZ2F0aW9uIiwiaGlzdG9yeUxpc3RlbmVycyIsInRlYXJkb3ducyIsInBhdXNlU3RhdGUiLCJwb3BTdGF0ZUhhbmRsZXIiLCJmcm9tU3RhdGUiLCJkaXJlY3Rpb24iLCJ1bmtub3duIiwiYmVmb3JlVW5sb2FkTGlzdGVuZXIiLCJwYXVzZUxpc3RlbmVycyIsImxpc3RlbiIsInRlYXJkb3duIiwiZGVzdHJveSIsInVzZUhpc3RvcnlMaXN0ZW5lcnMiLCJyb3V0ZXJIaXN0b3J5IiwiZ28iLCJ0cmlnZ2VyTGlzdGVuZXJzIiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsInNldExvY2F0aW9uIiwic2hvdWxkVHJpZ2dlciIsImNyZWF0ZVdlYkhhc2hIaXN0b3J5IiwiaXNSb3V0ZU5hbWUiLCJTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEIiwicmVkaXJlY3RlZEZyb20iLCJOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbCIsIk5hdmlnYXRpb25GYWlsdXJlVHlwZSIsIkVycm9yVHlwZU1lc3NhZ2VzIiwicHJvcGVydGllc1RvTG9nIiwic3RyaW5naWZ5Um91dGUiLCJjcmVhdGVSb3V0ZXJFcnJvciIsImlzTmF2aWdhdGlvbkZhaWx1cmUiLCJCQVNFX1BBUkFNX1BBVFRFUk4iLCJCQVNFX1BBVEhfUEFSU0VSX09QVElPTlMiLCJzZW5zaXRpdmUiLCJSRUdFWF9DSEFSU19SRSIsImNvbXBhcmVTY29yZUFycmF5IiwiY29tcGFyZVBhdGhQYXJzZXJTY29yZSIsImFTY29yZSIsInNjb3JlIiwiYlNjb3JlIiwiYWJzIiwiaXNMYXN0U2NvcmVOZWdhdGl2ZSIsIlJPT1RfVE9LRU4iLCJWQUxJRF9QQVJBTV9SRSIsImNyZWF0ZVJvdXRlUmVjb3JkTWF0Y2hlciIsInBhcnNlciIsImV4dHJhT3B0aW9ucyIsInNlZ21lbnRTY29yZXMiLCJ0b2tlbkluZGV4IiwidG9rZW4iLCJzdWJTZWdtZW50U2NvcmUiLCJyZXBlYXRhYmxlIiwib3B0aW9uYWwiLCJyZWdleHAiLCJzdWJQYXR0ZXJuIiwiYXZvaWREdXBsaWNhdGVkU2xhc2giLCJwYXJhbSIsInRva2Vuc1RvUGFyc2VyIiwiY3Jhc2giLCJwcmV2aW91c1N0YXRlIiwidG9rZW5zIiwiZmluYWxpemVTZWdtZW50IiwiY2hhciIsImN1c3RvbVJlIiwiY29uc3VtZUJ1ZmZlciIsImFkZENoYXJUb0J1ZmZlciIsInRva2VuaXplUGF0aCIsImV4aXN0aW5nS2V5cyIsIm1hdGNoZXIiLCJjcmVhdGVSb3V0ZXJNYXRjaGVyIiwiZ2xvYmFsT3B0aW9ucyIsIm1hdGNoZXJzIiwibWF0Y2hlck1hcCIsImFkZFJvdXRlIiwib3JpZ2luYWxSZWNvcmQiLCJpc1Jvb3RBZGQiLCJtYWluTm9ybWFsaXplZFJlY29yZCIsInJlZGlyZWN0Iiwibm9ybWFsaXplUmVjb3JkUHJvcHMiLCJsZWF2ZUd1YXJkcyIsInVwZGF0ZUd1YXJkcyIsImVudGVyQ2FsbGJhY2tzIiwibm9ybWFsaXplUm91dGVSZWNvcmQiLCJjaGVja0NoaWxkTWlzc2luZ05hbWVXaXRoRW1wdHlQYXRoIiwibm9ybWFsaXplZFJlY29yZHMiLCJhbGlhc2VzIiwib3JpZ2luYWxNYXRjaGVyIiwibm9ybWFsaXplZFJlY29yZCIsInBhcmVudFBhdGgiLCJjb25uZWN0aW5nU2xhc2giLCJjaGVja01pc3NpbmdQYXJhbXNJbkFic29sdXRlUGF0aCIsImNoZWNrU2FtZVBhcmFtcyIsImlzQWxpYXNSZWNvcmQiLCJyZW1vdmVSb3V0ZSIsImluc2VydE1hdGNoZXIiLCJtYXRjaGVyUmVmIiwiaXNSZWNvcmRDaGlsZE9mIiwicm91dGUiLCJpbnZhbGlkUGFyYW1zIiwicGFyYW1OYW1lIiwiZmluZCIsInBhcmFtc0Zyb21Mb2NhdGlvbiIsInBhcmVudE1hdGNoZXIiLCJtZXJnZU1ldGFGaWVsZHMiLCJnZXRSb3V0ZXMiLCJnZXRSZWNvcmRNYXRjaGVyIiwicHJvcHNPYmplY3QiLCJwYXJ0aWFsT3B0aW9ucyIsImlzU2FtZVBhcmFtIiwiSEFTSF9SRSIsIkFNUEVSU0FORF9SRSIsIlNMQVNIX1JFIiwiRVFVQUxfUkUiLCJJTV9SRSIsIlBMVVNfUkUiLCJFTkNfQlJBQ0tFVF9PUEVOX1JFIiwiRU5DX0JSQUNLRVRfQ0xPU0VfUkUiLCJFTkNfQ0FSRVRfUkUiLCJFTkNfQkFDS1RJQ0tfUkUiLCJFTkNfQ1VSTFlfT1BFTl9SRSIsIkVOQ19QSVBFX1JFIiwiRU5DX0NVUkxZX0NMT1NFX1JFIiwiRU5DX1NQQUNFX1JFIiwiY29tbW9uRW5jb2RlIiwiZW5jb2RlVVJJIiwiZW5jb2RlUXVlcnlWYWx1ZSIsImVuY29kZVBhcmFtIiwiZW5jb2RlUGF0aCIsImRlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNlYXJjaFBhcmFtcyIsInNlYXJjaFBhcmFtIiwiZXFQb3MiLCJjdXJyZW50VmFsdWUiLCJub3JtYWxpemVRdWVyeSIsIm5vcm1hbGl6ZWRRdWVyeSIsIm1hdGNoZWRSb3V0ZUtleSIsInZpZXdEZXB0aEtleSIsInJvdXRlcktleSIsInJvdXRlTG9jYXRpb25LZXkiLCJyb3V0ZXJWaWV3TG9jYXRpb25LZXkiLCJ1c2VDYWxsYmFja3MiLCJyZXNldCIsInJlZ2lzdGVyR3VhcmQiLCJyZW1vdmVGcm9tTGlzdCIsIm9uQmVmb3JlUm91dGVMZWF2ZSIsImxlYXZlR3VhcmQiLCJhY3RpdmVSZWNvcmQiLCJvbkJlZm9yZVJvdXRlVXBkYXRlIiwidXBkYXRlR3VhcmQiLCJndWFyZFRvUHJvbWlzZUZuIiwiZW50ZXJDYWxsYmFja0FycmF5IiwiZ3VhcmRSZXR1cm4iLCJfY2FsbGVkIiwiY2FuT25seUJlQ2FsbGVkT25jZSIsImd1YXJkQ2FsbCIsInJlc29sdmVkVmFsdWUiLCJleHRyYWN0Q29tcG9uZW50c0d1YXJkcyIsImd1YXJkVHlwZSIsImd1YXJkcyIsInJhd0NvbXBvbmVudCIsInByb21pc2UiLCJfX3dhcm5lZERlZmluZUFzeW5jIiwiY29tcG9uZW50UHJvbWlzZSIsInJlc29sdmVkQ29tcG9uZW50IiwibG9hZFJvdXRlTG9jYXRpb24iLCJwcm9taXNlcyIsInVzZUxpbmsiLCJyb3V0ZXIiLCJjdXJyZW50Um91dGUiLCJhY3RpdmVSZWNvcmRJbmRleCIsInJvdXRlTWF0Y2hlZCIsImN1cnJlbnRNYXRjaGVkIiwicGFyZW50UmVjb3JkUGF0aCIsImdldE9yaWdpbmFsUGF0aCIsImlzQWN0aXZlIiwib3V0ZXIiLCJpbm5lciIsImlubmVyVmFsdWUiLCJvdXRlclZhbHVlIiwiaW5jbHVkZXNQYXJhbXMiLCJpc0V4YWN0QWN0aXZlIiwibGlua0NvbnRleHREZXZ0b29scyIsIl9fdnJsX2RldnRvb2xzIiwibmF2aWdhdGUiLCJkZWZhdWx0UHJldmVudGVkIiwiZ3VhcmRFdmVudCIsIlJvdXRlckxpbmsiLCJjb21wYXRDb25maWciLCJNT0RFIiwiYWN0aXZlQ2xhc3MiLCJleGFjdEFjdGl2ZUNsYXNzIiwiY3VzdG9tIiwiYXJpYUN1cnJlbnRWYWx1ZSIsImxpbmsiLCJlbENsYXNzIiwiZ2V0TGlua0NsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwibGlua0V4YWN0QWN0aXZlQ2xhc3MiLCJwcm9wQ2xhc3MiLCJnbG9iYWxDbGFzcyIsImRlZmF1bHRDbGFzcyIsInNsb3RDb250ZW50IiwiUm91dGVyVmlldyIsInBhcmVudE5hbWUiLCJ3YXJuRGVwcmVjYXRlZFVzYWdlIiwiaW5qZWN0ZWRSb3V0ZSIsInJvdXRlVG9EaXNwbGF5IiwiaW5qZWN0ZWREZXB0aCIsImRlcHRoIiwiaW5pdGlhbERlcHRoIiwibWF0Y2hlZFJvdXRlIiwibWF0Y2hlZFJvdXRlUmVmIiwidmlld1JlZiIsIm9sZEluc3RhbmNlIiwib2xkTmFtZSIsImN1cnJlbnROYW1lIiwiVmlld0NvbXBvbmVudCIsInJvdXRlUHJvcHNPcHRpb24iLCJyb3V0ZVByb3BzIiwiX192cnZfZGV2dG9vbHMiLCJmb3JtYXRSb3V0ZUxvY2F0aW9uIiwicm91dGVMb2NhdGlvbiIsIm9taXQiLCJyZWFkT25seSIsImZvcm1hdERpc3BsYXkiLCJyb3V0ZXJJZCIsIl9faGFzRGV2dG9vbHMiLCJpbnNwZWN0Q29tcG9uZW50IiwiaW5zdGFuY2VEYXRhIiwidmlzaXRDb21wb25lbnRUcmVlIiwidHJlZU5vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsIlBJTktfNTAwIiwiX19kZXZ0b29sc0FwaSIsImRldnRvb2xzRGF0YSIsIk9SQU5HRV80MDAiLCJMSU1FXzUwMCIsIkJMVUVfNjAwIiwicmVmcmVzaFJvdXRlc1ZpZXciLCJyb3V0ZXJJbnNwZWN0b3JJZCIsIm5hdmlnYXRpb25zTGF5ZXJJZCIsImxvZ1R5cGUiLCJfX25hdmlnYXRpb25JZCIsIm5hdmlnYXRpb25JZCIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJmYWlsdXJlIiwic3RhdHVzIiwiYWN0aXZlUm91dGVzUGF5bG9hZCIsInJlc2V0TWF0Y2hTdGF0ZU9uUm91dGVSZWNvcmQiLCJpc1JvdXRlTWF0Y2hpbmciLCJtYXJrUm91dGVSZWNvcmRBY3RpdmUiLCJmb3JtYXRSb3V0ZVJlY29yZEZvckluc3BlY3RvciIsIl9fdmRfaWQiLCJmb3JtYXRSb3V0ZVJlY29yZE1hdGNoZXJGb3JTdGF0ZUluc3BlY3RvciIsImZpZWxkcyIsIm1vZGlmaWVyRm9yS2V5IiwiX192ZF9tYXRjaCIsIl9fdmRfZXhhY3RBY3RpdmUiLCJfX3ZkX2FjdGl2ZSIsInJvdXRlUmVjb3JkSWQiLCJFWFRSQUNUX1JFR0VYUF9SRSIsImNoaWxkUm91dGUiLCJkZWNvZGVkUGF0aCIsInBhcnNlUXVlcnkkMSIsInN0cmluZ2lmeVF1ZXJ5JDEiLCJiZWZvcmVHdWFyZHMiLCJiZWZvcmVSZXNvbHZlR3VhcmRzIiwiYWZ0ZXJHdWFyZHMiLCJwZW5kaW5nTG9jYXRpb24iLCJzY3JvbGxCZWhhdmlvciIsInNjcm9sbFJlc3RvcmF0aW9uIiwibm9ybWFsaXplUGFyYW1zIiwicGFyYW1WYWx1ZSIsImVuY29kZVBhcmFtcyIsImRlY29kZVBhcmFtcyIsInJhd0xvY2F0aW9uIiwibG9jYXRpb25Ob3JtYWxpemVkIiwibWF0Y2hlckxvY2F0aW9uIiwidGFyZ2V0UGFyYW1zIiwic3RyaW5naWZ5VVJMIiwibG9jYXRpb25Bc09iamVjdCIsImNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uIiwicHVzaFdpdGhSZWRpcmVjdCIsImhhbmRsZVJlZGlyZWN0UmVjb3JkIiwibGFzdE1hdGNoZWQiLCJuZXdUYXJnZXRMb2NhdGlvbiIsInRhcmdldExvY2F0aW9uIiwiZm9yY2UiLCJzaG91bGRSZWRpcmVjdCIsInRvTG9jYXRpb24iLCJoYW5kbGVTY3JvbGwiLCJtYXJrQXNSZWFkeSIsInRyaWdnZXJFcnJvciIsIl9jb3VudCIsImZpbmFsaXplTmF2aWdhdGlvbiIsInRyaWdnZXJBZnRlckVhY2giLCJjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdCIsImxlYXZpbmdSZWNvcmRzIiwidXBkYXRpbmdSZWNvcmRzIiwiZW50ZXJpbmdSZWNvcmRzIiwicmVjb3JkRnJvbSIsInJlY29yZFRvIiwiZXh0cmFjdENoYW5naW5nUmVjb3JkcyIsImNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrIiwicnVuR3VhcmRRdWV1ZSIsImlzUHVzaCIsImlzRmlyc3ROYXZpZ2F0aW9uIiwicmVtb3ZlSGlzdG9yeUxpc3RlbmVyIiwicmVhZHkiLCJyZWFkeUhhbmRsZXJzIiwiZXJyb3JIYW5kbGVycyIsIl9mcm9tIiwibGlzdGVuaW5nIiwic2Nyb2xsUG9zaXRpb24iLCJnZXRTYXZlZFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsVG9PcHRpb25zIiwicG9zaXRpb25FbCIsImlzSWRTZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwiZm91bmRFbCIsIm9mZnNldCIsImRvY1JlY3QiLCJkb2N1bWVudEVsZW1lbnQiLCJlbFJlY3QiLCJiZWhhdmlvciIsImdldEVsZW1lbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwic2Nyb2xsVG9Qb3NpdGlvbiIsInN0YXJ0ZWQiLCJpbnN0YWxsZWRBcHBzIiwicGFyZW50T3JSb3V0ZSIsInJlY29yZE1hdGNoZXIiLCJoYXNSb3V0ZSIsInJvdXRlTWF0Y2hlciIsImJlZm9yZVJlc29sdmUiLCJpc1JlYWR5IiwiJHJvdXRlciIsInJlYWN0aXZlUm91dGUiLCJ1bm1vdW50QXBwIiwidXNlUm91dGVyIiwidXNlUm91dGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIkFwcCIsImkxOG5NaXhpbiIsIndwRW1haWxlckhvb2tzIiwiY3JlYXRlSG9va3MiXSwic291cmNlUm9vdCI6IiJ9